"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[73],{5713:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"entities","title":"Entities in Fireback","description":"As might be discussed in other documents, entities are tables in database, similar to Entity Framework","source":"@site/docs/entities.mdx","sourceDirName":".","slug":"/entities","permalink":"/fireback/docs/docs/entities","draft":false,"unlisted":false,"editUrl":"https://github.com/torabian/fireback/tree/main/docs/docs/entities.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Fireback Module3 Definition","permalink":"/fireback/docs/docs/module3"},"next":{"title":"Defining fields","permalink":"/fireback/docs/docs/fields"}}');var o=n(4848),a=n(8453);const r={sidebar_position:3},s="Entities in Fireback",d={},l=[{value:"Defining entity",id:"defining-entity",level:2},{value:"Using entities in project",id:"using-entities-in-project",level:2},{value:"Entity Migration to database",id:"entity-migration-to-database",level:2},{value:"Defining fields for Entity",id:"defining-fields-for-entity",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"entities-in-fireback",children:"Entities in Fireback"})}),"\n",(0,o.jsx)(t.p,{children:"As might be discussed in other documents, entities are tables in database, similar to Entity Framework\nand other ORMs concept of 'entity', which is a table mapped to a class or struct in the programming language."}),"\n",(0,o.jsx)(t.p,{children:"The major difference between Fireback entities is, it provides functionality by default on top of the entity,\nwhich could be used directly as http api or cli, without creating much controller. Every entity supposed\nto be able to be created easily, updated, deleted, obey permission role requirements."}),"\n",(0,o.jsx)(t.p,{children:"Entities are one of the major features in Fireback, which would save a lot of time and effort to storing content from front-end technologies into database and all the way back querying them."}),"\n",(0,o.jsx)(t.h2,{id:"defining-entity",children:"Defining entity"}),"\n",(0,o.jsxs)(t.p,{children:["You can simply define a entity by adding it into ",(0,o.jsx)(t.code,{children:"entities"})," array in a Module3.Yaml file.\n",(0,o.jsx)(t.strong,{children:"Important:"})," Entity name needs to be singular form in English, lowerCase, and camelCase"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"entities:\n    - name: creditCard\n"})}),"\n",(0,o.jsxs)(t.p,{children:["By adding this, you'll generate ",(0,o.jsx)(t.code,{children:"CreditCard.dyno.go"})," and ",(0,o.jsx)(t.code,{children:"CreditCard.go"})," files. Fireback always creates\nentities go files in pair, the ",(0,o.jsx)(t.code,{children:"*.dyno.go"})," file is a generated feature based on configuration, and the other file is for your code changes related to entity, and won't be recreated or modified by Fireback."]}),"\n",(0,o.jsx)(t.p,{children:"You need to understand that Dyno files are being regenerated by changing the definition, so you should\nnot touch it's content if you want to regeneration work. Technically, if you need to modify this file\nmanually, you can remove it from Module3 yaml definition, and merge 2 files content into one. But then, you won't be able to update the functionality by Fireback version change or using YAML."}),"\n",(0,o.jsx)(t.h2,{id:"using-entities-in-project",children:"Using entities in project"}),"\n",(0,o.jsxs)(t.p,{children:["After defining the entity, the code is generated, but not injected to the Fireback app tree. You need to add the ",(0,o.jsx)(t.code,{children:"*EntityBundle"})," into the module. Open your module go file, and look for the ModuleProvider\ndefinition, which might be similar to:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'\nfunc PaymentModuleSetup(cfg *PaymentModuleConfig) *workspaces.ModuleProvider {\n\tmodule := &workspaces.ModuleProvider{\n\t\tName:          "payment",\n\t\tDefinitions:   &Module2Definitions,\n\t\tActionsBundle: GetPaymentActionsBundle(),\n\t\tEntityBundles: []workspaces.EntityBundle{\n\t\t\tPaymentParameterEntityBundle,\n\t\t\tTransactionEntityBundle,\n\n            CreditCardEntityBundle,\n\n\t\t\t// Insert the NameEntityBundle here.\n\t\t\t// each entity, has multiple features, such as permissions, events, translations\n\t\t\t// *EntityBundle objects are a list of them which are auto generated,\n\t\t\t// and by adding them here it will be automatically added.\n\t\t\t// we cannot add them automatically upon saving yaml for you,\n\t\t\t// when you add a new entity in yaml, add it manually here.\n\t\t},\n\t}\n\n\treturn module\n}\n'})}),"\n",(0,o.jsx)(t.p,{children:"This would import permissions, cli actions, http requests into the module, and when module is being\ninjected into the tree, it would become available."}),"\n",(0,o.jsx)(t.h2,{id:"entity-migration-to-database",children:"Entity Migration to database"}),"\n",(0,o.jsx)(t.p,{children:"When you add a new entity or modify it, you need to migrate it into database. Fireback is using gorm underneath, and 1t 1.1.27 does not provide any migration other than auto migration feature of gorm."}),"\n",(0,o.jsxs)(t.p,{children:["By running ",(0,o.jsx)(t.code,{children:"fireback migration apply"}),", fireback tries to migrate all entities across project.\nTo me myself, migration of new constraints are not that good in gorm, and many times in projects\nI had to modify the database manually or extra native sql query."]}),"\n",(0,o.jsx)(t.h2,{id:"defining-fields-for-entity",children:"Defining fields for Entity"}),"\n",(0,o.jsxs)(t.p,{children:["Entities have a field called ",(0,o.jsx)(t.code,{children:"fields"})," as an array, and you can define the columns of the data it would\nkeep. They will become database definitions, as well as golang code. You can read about fields ",(0,o.jsx)(t.a,{href:"fields",children:"fields"})," page - Fields struct is same for entity and action, and other places that ",(0,o.jsx)(t.code,{children:"fields"})," keyword is used."]})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var i=n(6540);const o={},a=i.createContext(o);function r(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);