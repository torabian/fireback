"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[426],{9484:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"definitions/Fields","title":"Fields","description":"Fireback supports fields and datatypes which are common sense in programming world. Because Fireback generates","source":"@site/docs/definitions/Fields.md","sourceDirName":"definitions","slug":"/definitions/Fields","permalink":"/fireback/docs/docs/definitions/Fields","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/definitions/Fields.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Fireback Module3 Definition","permalink":"/fireback/docs/docs/definitions/module3"}}');var a=i(4848),s=i(8453);const r={sidebar_position:3},d=void 0,o={},l=[{value:"Defining a field and it&#39;s type",id:"defining-a-field-and-its-type",level:2},{value:"Common structure",id:"common-structure",level:2},{value:"Type: string",id:"type-string",level:2},{value:"Type: int64",id:"type-int64",level:2},{value:"Type: bool",id:"type-bool",level:2},{value:"Type: date",id:"type-date",level:2},{value:"Type: daterange",id:"type-daterange",level:2},{value:"Type: array",id:"type-array",level:2},{value:"Type: object",id:"type-object",level:2},{value:"Type: one",id:"type-one",level:2},{value:"Type: arrayp",id:"type-arrayp",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Fireback supports fields and datatypes which are common sense in programming world. Because Fireback generates\ncode primarily for Golang, and then tries to give SDK for clients such as React, Android, etc, fields\nare inspired by Golang fields."}),"\n",(0,a.jsx)(n.p,{children:"Nevertheless, I've added some extra field types which are commonly could be used in multiple projects."}),"\n",(0,a.jsx)(n.h2,{id:"defining-a-field-and-its-type",children:"Defining a field and it's type"}),"\n",(0,a.jsx)(n.p,{children:"Despite the fact that fireback fields could be used in Actions, Dtos, Entities, they share the same general type\nand could be used in the same way. In some context, some data types or attributes, might not make any sense."}),"\n",(0,a.jsx)(n.h2,{id:"common-structure",children:"Common structure"}),"\n",(0,a.jsxs)(n.p,{children:["Usually in Fireback Module3 definition you see ",(0,a.jsx)(n.code,{children:"fields"})," attribute, and it's an Array of ",(0,a.jsx)(n.code,{children:"[]*Module2Field"}),"\nand you need to specifiy ",(0,a.jsx)(n.code,{children:"name"})," and ",(0,a.jsx)(n.code,{children:"type"})," minimally. Definition doesn't have a default type, and not defining type\nmight have weird consequences."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"entities:\n    - name: creditCard\n      fields:\n      - name: title\n        type: string \n\n"})}),"\n",(0,a.jsx)(n.p,{children:"As you see, we defined a field with type string for creditCard entity."}),"\n",(0,a.jsx)(n.h2,{id:"type-string",children:"Type: string"}),"\n",(0,a.jsxs)(n.p,{children:["This is common string type, which would become ",(0,a.jsx)(n.code,{children:"string"})," in Golang, Typescript, Java, and so on. Nothing special\nis generated for this field other than a pointer string."]}),"\n",(0,a.jsx)(n.h2,{id:"type-int64",children:"Type: int64"}),"\n",(0,a.jsxs)(n.p,{children:["This is a general integer which would resolve to int64 as expected on Golang, Typescript will have ",(0,a.jsx)(n.code,{children:"number"})," field."]}),"\n",(0,a.jsx)(n.h2,{id:"type-bool",children:"Type: bool"}),"\n",(0,a.jsx)(n.p,{children:"Same as boolean on Go and other languages, you can only set true or false on the field. Mysql might save it as 0 or 1 instead of boolean value."}),"\n",(0,a.jsx)(n.h2,{id:"type-date",children:"Type: date"}),"\n",(0,a.jsxs)(n.p,{children:["This type is a bit special. When a field is a date, it would have some code related to date validation, on Golang it would become ",(0,a.jsx)(n.code,{children:"XDate"})," struct, and have some extra functions which are available to see on ",(0,a.jsx)(n.code,{children:"XDate.go"})," to see."]}),"\n",(0,a.jsx)(n.h2,{id:"type-daterange",children:"Type: daterange"}),"\n",(0,a.jsxs)(n.p,{children:["This is another special datatype which instead of a single date, stores on database level 2 dates as start and end.\nWhen a field is defined as ",(0,a.jsx)(n.code,{children:"daterange"}),", it would automatically makes Start and End fields into the generated\nGo code."]}),"\n",(0,a.jsx)(n.p,{children:"It's important to understand date and daterange field, will create a meta object which will be available publicly,\nwith some information about the days between, or some other useful details."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Important"})," When date is provided less than 1500, Fireback assumes it's a Iranian calendar date, and automatically converts it to European calendar for saving in database."]}),"\n",(0,a.jsx)(n.h2,{id:"type-array",children:"Type: array"}),"\n",(0,a.jsxs)(n.p,{children:["Array, is an array of structs in Fireback definition. You can define a list of children using ",(0,a.jsx)(n.code,{children:"fields"})," on array field, and would create a separate struct, prefixing the parent struct in the name."]}),"\n",(0,a.jsxs)(n.p,{children:["On database level, it's important to understand that ",(0,a.jsx)(n.code,{children:"array"})," in Fireback, it means there will be a separate table for it, and a one-to-many relation will be created on the parent table."]}),"\n",(0,a.jsx)(n.p,{children:"For example from license module:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"  - name: license\n    fields:\n      - name: permissions\n        type: array\n        fields:\n          - name: capability\n            type: one\n            target: CapabilityEntity\n            module: workspaces\n            allowCreate: false\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You see that ",(0,a.jsx)(n.code,{children:"permissions"})," is an array. ",(0,a.jsx)(n.strong,{children:"Important"})," It's important that, every array field to end\nin plural english form. Some code might end up in mismatch for singular fields as a bug until 1.1.27."]}),"\n",(0,a.jsx)(n.h2,{id:"type-object",children:"Type: object"}),"\n",(0,a.jsxs)(n.p,{children:["Type on is also a nested field, which you can define ",(0,a.jsx)(n.code,{children:"fields"})," very similarly in an array.\nThe difference is, there will be a one-2-one relation created on this type of data, besides\nthere will be an Addtional *Id field which would link them by a unique string id. At the moment,\nFireback is creating ",(0,a.jsx)(n.code,{children:"id"})," auto incremental numeric for each table, as well as ",(0,a.jsx)(n.code,{children:"uniqueId"})," as a unique\nstring identifier. ",(0,a.jsx)(n.code,{children:"id"})," is intended to be used internally only for Fireback, and any external relationship\nbetween data, needs to use ",(0,a.jsx)(n.code,{children:"uniqueId"})," field instead (",(0,a.jsx)(n.code,{children:"unique_id"})," on database level). This might change,\nas in large projects it causes large indexing tables."]}),"\n",(0,a.jsxs)(n.p,{children:["For example, see array example, and instead of ",(0,a.jsx)(n.code,{children:"type: array"})," use ",(0,a.jsx)(n.code,{children:"type: object"}),". Other details are exactly the same."]}),"\n",(0,a.jsx)(n.h2,{id:"type-one",children:"Type: one"}),"\n",(0,a.jsxs)(n.p,{children:["The type one, is a specific type to Fireback. It means, you are targeting another table as a ",(0,a.jsx)(n.code,{children:"one-to-one"})," relationship. The different with ",(0,a.jsx)(n.code,{children:"object"})," is, in this type managing the data, deleting it is not depending\non the parent entity, they are just being related over a loose relation."]}),"\n",(0,a.jsx)(n.h2,{id:"type-arrayp",children:"Type: arrayp"}),"\n",(0,a.jsxs)(n.p,{children:["Arrayp, is an array type which would store primitives in Fireback. For example, if you decided to use array strings\nin a DTO, then you can define the ",(0,a.jsx)(n.code,{children:"type: arrayP"}),". Now, the primitive itself needs to be defined on a separate property called: ",(0,a.jsx)(n.code,{children:"primitive"}),". For example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"- name: capabilities\n  type: arrayP\n  primitive: string\n\n"})}),"\n",(0,a.jsx)(n.p,{children:"Will resolve to a []string slice in Golang, and similar regime in other langauges."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>d});var t=i(6540);const a={},s=t.createContext(a);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);