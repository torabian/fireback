"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[996],{6945:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"workspaces","title":"Fireback Workspaces tables and features","description":"As you might noticed so far, Fireback is only modules/workspaces folder, and there is not much code","source":"@site/docs/workspaces.md","sourceDirName":".","slug":"/workspaces","permalink":"/fireback/docs/docs/workspaces","draft":false,"unlisted":false,"editUrl":"https://github.com/torabian/fireback/tree/main/docs/docs/workspaces.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Database Support","permalink":"/fireback/docs/docs/database-support"},"next":{"title":"Starting web server","permalink":"/fireback/docs/docs/http-server"}}');var t=a(4848),r=a(8453);const o={sidebar_position:5},i="Fireback Workspaces tables and features",c={},d=[{value:"User role permission",id:"user-role-permission",level:2},{value:"User, Person, Workspace entities",id:"user-person-workspace-entities",level:3},{value:"Workspace types",id:"workspace-types",level:2}];function l(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"fireback-workspaces-tables-and-features",children:"Fireback Workspaces tables and features"})}),"\n",(0,t.jsxs)(s.p,{children:["As you might noticed so far, Fireback is only ",(0,t.jsx)(s.code,{children:"modules/workspaces"})," folder, and there is not much code\nout side of this module. This is intentional, to have everything needed in one module and do not focus\non managing modules and their compatibility."]}),"\n",(0,t.jsx)(s.p,{children:"In this document, we are going to discuss what are the features of the project in a managemental perspective."}),"\n",(0,t.jsx)(s.h2,{id:"user-role-permission",children:"User role permission"}),"\n",(0,t.jsx)(s.p,{children:"Fireback comes with a built in user, role permission, to manage the user access in the projects. Fireback\naims to reduce the need for large user management systems on smaller scale projects, and also give the developers\nand management an option to store the user information under the same database as their project.\nThis approach would make everything simple, specially for those projects with less than a million users."}),"\n",(0,t.jsx)(s.h3,{id:"user-person-workspace-entities",children:"User, Person, Workspace entities"}),"\n",(0,t.jsx)(s.p,{children:"As the name suggests, Fireback manages data under workspaces. Workspaces essentially are a group of users, which\nform a workspace, such as a team, or company. Over decades, I have seen a lot of projects which store user data\nindividually but when they want to extend logic for teams, invitations, their entire database model changes\nand tons of rewrites needed. Fireback at the zero day solves this problem by defining workspace and user system."}),"\n",(0,t.jsxs)(s.p,{children:["All workspaces are stored in workspaces entity (table) on the database, and each workspace can have a name,\nand other basic columns such as created at, ... All workspaces belong to root workspace by definition,\nand when a new workspace has been created, it's workspace id and parent id is ",(0,t.jsx)(s.code,{children:"root"}),". This allows your project,\nto have the possbility of nested workspaces, which the parent workspaces have access to content of children but\nnot wise versa."]}),"\n",(0,t.jsx)(s.p,{children:"Role entity, defines a set of capabilities which a role can have. You can define the permissions as strings,\nwhich will be stored in Capability entity on the database, and Fireback apps sync those permissions from module\ndefinitions into database upon migration."}),"\n",(0,t.jsx)(s.p,{children:"By grouping a set of capabilities (array of strings), a role is being created. Roles belong to workspaces, therefor, every single workspace in the product can have multiple roles, which is different from other workspace\nand defined by the owner of the workspace within the same app. Some roles, are also enabled by default"}),"\n",(0,t.jsxs)(s.p,{children:["You can check the capabilities in a system via ",(0,t.jsx)(s.code,{children:"cap"})," or ",(0,t.jsx)(s.code,{children:"capabilities"})," in the CLI, which is also available\non the http server."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"ali@x fireback % ./app cap tree\nroot\n\u251c *\n\u251c modules\n\u2502 \u251c widget\n\u2502 \u2502 \u251c widget-area\n\u2502 \u2502 \u2502 \u251c create\n\u2502 \u2502 \u2502 \u251c update\n\u2502 \u2502 \u2502 \u251c query\n\u2502 \u2502 \u2502 \u251c *\n\u2502 \u2502 \u2502 \u2514 delete\n\u2502 \u2502 \u2514 widget\n\u2502 \u2502   \u251c *\n\u2502 \u2502   \u251c delete\n\u2502 \u2502   \u251c create\n"})}),"\n",(0,t.jsx)(s.p,{children:"The * sign, means all of the neighbour permissions are allowed. It's useful because it would automatically include\nlater added permissions without the need of revising the roles."}),"\n",(0,t.jsx)(s.h2,{id:"workspace-types",children:"Workspace types"}),"\n",(0,t.jsx)(s.p,{children:"In many different applications, you might need different types of workspaces, with different signup flow."})]})}function p(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,s,a)=>{a.d(s,{R:()=>o,x:()=>i});var n=a(6540);const t={},r=n.createContext(t);function o(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);