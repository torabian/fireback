package payment

/*
*	Generated by fireback 1.2.3
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"embed"
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	jsoniter "github.com/json-iterator/go"
	"github.com/schollz/progressbar/v3"
	"github.com/torabian/fireback/modules/fireback"
	metas "github.com/torabian/fireback/modules/payment/metas"
	mocks "github.com/torabian/fireback/modules/payment/mocks/PaymentConfig"
	seeders "github.com/torabian/fireback/modules/payment/seeders/PaymentConfig"
	"github.com/urfave/cli"
	"gopkg.in/yaml.v2"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"log"
	reflect "reflect"
	"strings"
	"time"
)

var paymentConfigSeedersFs = &seeders.ViewsFs

func ResetPaymentConfigSeeders(fs *embed.FS) {
	paymentConfigSeedersFs = fs
}

type PaymentConfigEntityQs struct {
	EnableStripe      fireback.QueriableField `cli:"enable-stripe" table:"payment_config" typeof:"bool?" column:"enable_stripe" qs:"enableStripe"`
	StripeSecretKey   fireback.QueriableField `cli:"stripe-secret-key" table:"payment_config" typeof:"string" column:"stripe_secret_key" qs:"stripeSecretKey"`
	StripeCallbackUrl fireback.QueriableField `cli:"stripe-callback-url" table:"payment_config" typeof:"string" column:"stripe_callback_url" qs:"stripeCallbackUrl"`
}

func (x *PaymentConfigEntityQs) GetQuery() string {
	return fireback.GenerateQueryStringStyle(reflect.ValueOf(x), "")
}

var PaymentConfigQsFlags = []cli.Flag{
	&cli.StringFlag{
		Name:  "enable-stripe",
		Usage: "Enables the stripe payment integration in the project",
	},
	&cli.StringFlag{
		Name:  "stripe-secret-key",
		Usage: "Stripe secret key to initiate a payment intent",
	},
	&cli.StringFlag{
		Name:  "stripe-callback-url",
		Usage: "The endpoint which the payment module will handle response coming back from stripe.",
	},
}

type PaymentConfigEntity struct {
	// Defines the visibility of the record in the table.
	// Visibility is a detailed topic, you can check all of the visibility values in fireback/visibility.go
	// by default, visibility of record are 0, means they are protected by the workspace
	// which are being created, and visible to every member of the workspace
	Visibility fireback.String `json:"visibility,omitempty" yaml:"visibility,omitempty" xml:"visibility,omitempty"`
	// The unique-id of the workspace which content belongs to. Upon creation this will be designated
	// to the selected workspace by user, if they have write access. You can change this value
	// or prevent changes to it manually (on root features for example modifying other workspace)
	WorkspaceId fireback.String `json:"workspaceId,omitempty" xml:"workspaceId,omitempty" yaml:"workspaceId,omitempty" gorm:"unique;not null;" `
	// The unique-id of the parent table, which this record is being linked to.
	// used internally for making relations in fireback, generally does not need manual changes
	// or modification by the developer or user. For example, if you have a object inside an object
	// the unique-id of the parent will be written in the child.
	LinkerId fireback.String `json:"linkerId,omitempty" xml:"linkerId,omitempty" yaml:"linkerId,omitempty"`
	// Used for recursive or parent-child operations. Some tables, are having nested relations,
	// and this field makes the table self refrenceing. ParentId needs to exist in the table before
	// creating of modifying a record.
	ParentId fireback.String `json:"parentId,omitempty" xml:"parentId,omitempty" yaml:"parentId,omitempty"`
	// Makes a field deletable. Some records should not be deletable at all.
	// default it's true.
	IsDeletable *bool `json:"isDeletable,omitempty" xml:"isDeletable,omitempty" yaml:"isDeletable,omitempty" gorm:"default:true"`
	// Makes a field updatable. Some records should not be updatable at all.
	// default it's true.
	IsUpdatable *bool `json:"isUpdatable,omitempty" xml:"isUpdatable,omitempty" yaml:"isUpdatable,omitempty" gorm:"default:true"`
	// The unique-id of the user which is creating the record, or the record belongs to.
	// Administration might want to change this to any user, by default Fireback fills
	// it to the current authenticated user.
	UserId fireback.String `json:"userId,omitempty" xml:"userId,omitempty" yaml:"userId,omitempty"`
	// General mechanism to rank the elements. From code perspective, it's just a number,
	// but you can sort it based on any logic for records to make a ranking, sorting.
	// they should not be unique across a table.
	Rank fireback.Int64 `json:"rank,omitempty" yaml:"rank,omitempty" xml:"rank,omitempty" gorm:"type:int;name:rank"`
	// Primary numeric key in the database. This value is not meant to be exported to public
	// or be used to access data at all. Rather a mechanism of indexing columns internally
	// or cursor pagination in future releases of fireback, or better search performance.
	ID uint `gorm:"primaryKey;autoIncrement" json:"-" yaml:"-" xml:"-"`
	// Unique id of the record across the table. This value will be accessed from public APIs,
	// and many other places intead of numeric ID property.
	// Upon generation, a UUID automatically is being assigned, and if user has specified the
	// Unique id in the post body, it will be used. This mechanism allows to manage unsaved
	// content on front-end much easier than requiring parent to exists first.
	UniqueId string `json:"uniqueId,omitempty" xml:"uniqueId,omitempty" gorm:"unique;not null;size:100;" yaml:"uniqueId,omitempty"`
	// The time that the record has been updated in datetime.
	// the field will be automatically populated by gorm orm.
	UpdatedAt *time.Time `json:"updatedAt,omitempty" xml:"updatedAt,omitempty" yaml:"updatedAt,omitempty"`
	// The time that the record has been created in datetime.
	// the field will be automatically populated by gorm orm.
	CreatedAt *time.Time `json:"createdAt,omitempty" xml:"createdAt,omitempty" yaml:"createdAt,omitempty"`
	// The time that the record has been deleted softly (means the data still exists in database, but no longer visible to any feature) in nano datatime
	// you need to make sure check this field if writing custom sql queries.
	// the field will be automatically populated by gorm orm.
	DeletedAt *time.Time `json:"deletedAt,omitempty" xml:"deletedAt,omitempty" yaml:"deletedAt,omitempty"`
	// Record creation date time formatting based on locale of the headers, or other
	// possible factors.
	CreatedFormatted string `json:"createdFormatted,omitempty" xml:"createdFormatted,omitempty" yaml:"createdFormatted,omitempty" sql:"-" gorm:"-"`
	// Record update date time formatting based on locale of the headers, or other
	// possible factors.
	UpdatedFormatted string `json:"updatedFormatted,omitempty" xml:"updatedFormatted,omitempty" yaml:"updatedFormatted,omitempty" sql:"-" gorm:"-"`
	// Enables the stripe payment integration in the project
	EnableStripe fireback.Bool `json:"enableStripe" xml:"enableStripe" yaml:"enableStripe"        `
	// Stripe secret key to initiate a payment intent
	StripeSecretKey string `json:"stripeSecretKey" xml:"stripeSecretKey" yaml:"stripeSecretKey"        `
	// The endpoint which the payment module will handle response coming back from stripe.
	StripeCallbackUrl string                 `json:"stripeCallbackUrl" xml:"stripeCallbackUrl" yaml:"stripeCallbackUrl"        `
	Children          []*PaymentConfigEntity `csv:"-" gorm:"-" sql:"-" json:"children,omitempty" xml:"children,omitempty"  yaml:"children,omitempty"`
	LinkedTo          *PaymentConfigEntity   `csv:"-" yaml:"-" gorm:"-" json:"-" sql:"-" xml:"-"`
}

func PaymentConfigEntityStream(q fireback.QueryDSL) (chan []*PaymentConfigEntity, *fireback.QueryResultMeta, error) {
	cn := make(chan []*PaymentConfigEntity)
	q.ItemsPerPage = 50
	q.StartIndex = 0
	_, qrm, err := PaymentConfigActions.Query(q)
	if err != nil {
		return nil, nil, err
	}
	go func() {
		defer close(cn)
		for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
			items, _, _ := PaymentConfigActions.Query(q)
			i += q.ItemsPerPage
			q.StartIndex = i
			cn <- items
		}
	}()
	return cn, qrm, nil
}

type PaymentConfigEntityList struct {
	Items []*PaymentConfigEntity
}

func NewPaymentConfigEntityList(items []*PaymentConfigEntity) *PaymentConfigEntityList {
	return &PaymentConfigEntityList{
		Items: items,
	}
}
func (x *PaymentConfigEntityList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *PaymentConfigEntityList) ToTree() *fireback.TreeOperation[PaymentConfigEntity] {
	return fireback.NewTreeOperation(
		x.Items,
		func(t *PaymentConfigEntity) string {
			if !t.ParentId.Valid {
				return ""
			}
			return t.ParentId.String
		},
		func(t *PaymentConfigEntity) string {
			return t.UniqueId
		},
	)
}

var PaymentConfigPreloadRelations []string = []string{}

type paymentConfigActionsSig struct {
	Update         func(query fireback.QueryDSL, dto *PaymentConfigEntity) (*PaymentConfigEntity, *fireback.IError)
	Create         func(dto *PaymentConfigEntity, query fireback.QueryDSL) (*PaymentConfigEntity, *fireback.IError)
	Upsert         func(dto *PaymentConfigEntity, query fireback.QueryDSL) (*PaymentConfigEntity, *fireback.IError)
	SeederInit     func() *PaymentConfigEntity
	Remove         func(query fireback.QueryDSL) (int64, *fireback.IError)
	MultiInsert    func(dtos []*PaymentConfigEntity, query fireback.QueryDSL) ([]*PaymentConfigEntity, *fireback.IError)
	GetOne         func(query fireback.QueryDSL) (*PaymentConfigEntity, *fireback.IError)
	GetByWorkspace func(query fireback.QueryDSL) (*PaymentConfigEntity, *fireback.IError)
	Query          func(query fireback.QueryDSL) ([]*PaymentConfigEntity, *fireback.QueryResultMeta, error)
}

var PaymentConfigActions paymentConfigActionsSig = paymentConfigActionsSig{
	Update:         PaymentConfigActionUpdateFn,
	Create:         PaymentConfigActionCreateFn,
	Upsert:         PaymentConfigActionUpsertFn,
	Remove:         PaymentConfigActionRemoveFn,
	SeederInit:     PaymentConfigActionSeederInitFn,
	MultiInsert:    PaymentConfigMultiInsertFn,
	GetOne:         PaymentConfigActionGetOneFn,
	GetByWorkspace: PaymentConfigActionGetByWorkspaceFn,
	Query:          PaymentConfigActionQueryFn,
}

func PaymentConfigActionUpsertFn(dto *PaymentConfigEntity, query fireback.QueryDSL) (*PaymentConfigEntity, *fireback.IError) {
	return nil, nil
}

var PAYMENT_CONFIG_EVENT_CREATED = "paymentConfig.created"
var PAYMENT_CONFIG_EVENT_UPDATED = "paymentConfig.updated"
var PAYMENT_CONFIG_EVENT_DELETED = "paymentConfig.deleted"
var PAYMENT_CONFIG_EVENTS = []string{
	PAYMENT_CONFIG_EVENT_CREATED,
	PAYMENT_CONFIG_EVENT_UPDATED,
	PAYMENT_CONFIG_EVENT_DELETED,
}

type PaymentConfigFieldMap struct {
	EnableStripe      fireback.TranslatedString `yaml:"enableStripe"`
	StripeSecretKey   fireback.TranslatedString `yaml:"stripeSecretKey"`
	StripeCallbackUrl fireback.TranslatedString `yaml:"stripeCallbackUrl"`
}

var PaymentConfigEntityMetaConfig map[string]int64 = map[string]int64{}
var PaymentConfigEntityJsonSchema = fireback.ExtractEntityFields(reflect.ValueOf(&PaymentConfigEntity{}))

func entityPaymentConfigFormatter(dto *PaymentConfigEntity, query fireback.QueryDSL) {
	if dto == nil {
		return
	}
}
func PaymentConfigActionSeederMultiple(query fireback.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	batchSize := 100
	bar := progressbar.Default(int64(count))
	// Collect entities in batches
	var entitiesBatch []*PaymentConfigEntity
	for i := 1; i <= count; i++ {
		entity := PaymentConfigActions.SeederInit()
		entitiesBatch = append(entitiesBatch, entity)
		// When batch size is reached, perform the batch insert
		if len(entitiesBatch) == batchSize || i == count {
			// Insert batch
			_, err := PaymentConfigActions.MultiInsert(entitiesBatch, query)
			if err == nil {
				successInsert += len(entitiesBatch)
			} else {
				fmt.Println(err)
				failureInsert += len(entitiesBatch)
			}
			// Clear the batch after insert
			entitiesBatch = nil
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func PaymentConfigActionSeeder(query fireback.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	bar := progressbar.Default(int64(count))
	for i := 1; i <= count; i++ {
		entity := PaymentConfigActions.SeederInit()
		_, err := PaymentConfigActions.Create(entity, query)
		if err == nil {
			successInsert++
		} else {
			fmt.Println(err)
			failureInsert++
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func (x *PaymentConfigEntity) Seeder() string {
	obj := PaymentConfigActions.SeederInit()
	v, _ := json.MarshalIndent(obj, "", "  ")
	return string(v)
}
func PaymentConfigActionSeederInitFn() *PaymentConfigEntity {
	entity := &PaymentConfigEntity{}
	return entity
}
func PaymentConfigAssociationCreate(dto *PaymentConfigEntity, query fireback.QueryDSL) error {
	return nil
}

/**
* These kind of content are coming from another entity, which is indepndent module
* If we want to create them, we need to do it before. This is not association.
**/
func PaymentConfigRelationContentCreate(dto *PaymentConfigEntity, query fireback.QueryDSL) error {
	return nil
}
func PaymentConfigRelationContentUpdate(dto *PaymentConfigEntity, query fireback.QueryDSL) error {
	return nil
}
func PaymentConfigPolyglotUpdateHandler(dto *PaymentConfigEntity, query fireback.QueryDSL) {
	if dto == nil {
		return
	}
}

/**
 * This will be validating your entity fully. Important note is that, you add validate:* tag
 * in your entity, it will automatically work here. For slices inside entity, make sure you add
 * extra line of AppendSliceErrors, otherwise they won't be detected
 */
func PaymentConfigValidator(dto *PaymentConfigEntity, isPatch bool) *fireback.IError {
	err := fireback.CommonStructValidatorPointer(dto, isPatch)
	return err
}

// Creates a set of natural language queries, which can be used with
// AI tools to create content or help with some tasks
var PaymentConfigAskCmd cli.Command = cli.Command{
	Name:  "nlp",
	Usage: "Set of natural language queries which helps creating content or data",
	Subcommands: []cli.Command{
		{
			Name:  "sample",
			Usage: "Asks for generating sample by giving an example data",
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:  "format",
					Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
					Value: "yaml",
				},
				&cli.IntFlag{
					Name:  "count",
					Usage: "How many samples to ask",
					Value: 30,
				},
			},
			Action: func(c *cli.Context) error {
				v := &PaymentConfigEntity{}
				format := c.String("format")
				request := "\033[1m" + `
I need you to create me an array of exact signature as the example given below,
with at least ` + fmt.Sprint(c.String("count")) + ` items, mock the content with few words, and guess the possible values
based on the common sense. I need the output to be a valid ` + format + ` file.
Make sure you wrap the entire array in 'items' field. Also before that, I provide some explanation of each field:
EnableStripe: (type: bool?) Description: Enables the stripe payment integration in the project
StripeSecretKey: (type: string) Description: Stripe secret key to initiate a payment intent
StripeCallbackUrl: (type: string) Description: The endpoint which the payment module will handle response coming back from stripe.
And here is the actual object signature:
` + v.Seeder() + `
`
				fmt.Println(request)
				return nil
			},
		},
	},
}

func PaymentConfigEntityPreSanitize(dto *PaymentConfigEntity, query fireback.QueryDSL) {
}
func PaymentConfigEntityBeforeCreateAppend(dto *PaymentConfigEntity, query fireback.QueryDSL) {
	if dto.UniqueId == "" {
		dto.UniqueId = fireback.UUID()
	}
	dto.WorkspaceId = fireback.NewString(query.WorkspaceId)
	dto.UserId = fireback.NewString(query.UserId)
	PaymentConfigRecursiveAddUniqueId(dto, query)
}
func PaymentConfigRecursiveAddUniqueId(dto *PaymentConfigEntity, query fireback.QueryDSL) {
}

/*
*
	Batch inserts, do not have all features that create
	operation does. Use it with unnormalized content,
	or read the source code carefully.
  This is not marked as an action, because it should not be available publicly
  at this moment.
*
*/
func PaymentConfigMultiInsertFn(dtos []*PaymentConfigEntity, query fireback.QueryDSL) ([]*PaymentConfigEntity, *fireback.IError) {
	if len(dtos) > 0 {
		for index := range dtos {
			PaymentConfigEntityPreSanitize(dtos[index], query)
			PaymentConfigEntityBeforeCreateAppend(dtos[index], query)
		}
		var dbref *gorm.DB = nil
		if query.Tx == nil {
			dbref = fireback.GetDbRef()
		} else {
			dbref = query.Tx
		}
		query.Tx = dbref
		err := dbref.Create(&dtos).Error
		if err != nil {
			return nil, fireback.GormErrorToIError(err)
		}
	}
	return dtos, nil
}
func PaymentConfigActionBatchCreateFn(dtos []*PaymentConfigEntity, query fireback.QueryDSL) ([]*PaymentConfigEntity, *fireback.IError) {
	if dtos != nil && len(dtos) > 0 {
		items := []*PaymentConfigEntity{}
		for _, item := range dtos {
			s, err := PaymentConfigActions.Create(item, query)
			if err != nil {
				return nil, err
			}
			items = append(items, s)
		}
		return items, nil
	}
	return dtos, nil
}
func PaymentConfigDeleteEntireChildren(query fireback.QueryDSL, dto *PaymentConfigEntity) *fireback.IError {
	// intentionally removed this. It's hard to implement it, and probably wrong without
	// proper on delete cascade
	return nil
}
func PaymentConfigActionCreateFn(dto *PaymentConfigEntity, query fireback.QueryDSL) (*PaymentConfigEntity, *fireback.IError) {
	// 1. Validate always
	if iError := PaymentConfigValidator(dto, false); iError != nil {
		return nil, iError
	}
	// 1.5 Sanitize the content coming of the front-end
	PaymentConfigEntityPreSanitize(dto, query)
	// 2. Append the necessary information about user, workspace
	PaymentConfigEntityBeforeCreateAppend(dto, query)
	// 3. Create other entities if we want select from them
	PaymentConfigRelationContentCreate(dto, query)
	// 4. Create the entity
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = fireback.GetDbRef()
	} else {
		dbref = query.Tx
	}
	query.Tx = dbref
	err := dbref.Create(&dto).Error
	if err != nil {
		err := fireback.GormErrorToIError(err)
		return nil, err
	}
	// 5. Create sub entities, objects or arrays, association to other entities
	PaymentConfigAssociationCreate(dto, query)
	// 6. Fire the event into system
	actionEvent, eventErr := NewPaymentConfigCreatedEvent(dto, &query)
	if actionEvent != nil && eventErr == nil {
		fireback.GetEventBusInstance().FireEvent(query, *actionEvent)
	} else {
		log.Default().Panicln("Creating event has failed for %v", dto)
	}
	/*
		event.MustFire(PAYMENT_CONFIG_EVENT_CREATED, event.M{
			"entity":   dto,
			"entityKey": fireback.GetTypeString(&PaymentConfigEntity{}),
			"target":   "workspace",
			"unqiueId": query.WorkspaceId,
		})
	*/
	return dto, nil
}
func PaymentConfigActionGetOneFn(query fireback.QueryDSL) (*PaymentConfigEntity, *fireback.IError) {
	refl := reflect.ValueOf(&PaymentConfigEntity{})
	item, err := fireback.GetOneEntity[PaymentConfigEntity](query, refl)
	entityPaymentConfigFormatter(item, query)
	return item, err
}
func PaymentConfigActionGetByWorkspaceFn(query fireback.QueryDSL) (*PaymentConfigEntity, *fireback.IError) {
	refl := reflect.ValueOf(&PaymentConfigEntity{})
	item, err := fireback.GetOneByWorkspaceEntity[PaymentConfigEntity](query, refl)
	entityPaymentConfigFormatter(item, query)
	return item, err
}
func PaymentConfigActionQueryFn(query fireback.QueryDSL) ([]*PaymentConfigEntity, *fireback.QueryResultMeta, error) {
	refl := reflect.ValueOf(&PaymentConfigEntity{})
	items, meta, err := fireback.QueryEntitiesPointer[PaymentConfigEntity](query, refl)
	for _, item := range items {
		entityPaymentConfigFormatter(item, query)
	}
	return items, meta, err
}

var paymentConfigMemoryItems []*PaymentConfigEntity = []*PaymentConfigEntity{}

func PaymentConfigEntityIntoMemory() {
	q := fireback.QueryDSL{
		ItemsPerPage: 500,
		StartIndex:   0,
	}
	_, qrm, _ := PaymentConfigActions.Query(q)
	for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
		items, _, _ := PaymentConfigActions.Query(q)
		paymentConfigMemoryItems = append(paymentConfigMemoryItems, items...)
		i += q.ItemsPerPage
		q.StartIndex = i
	}
}
func PaymentConfigMemGet(id uint) *PaymentConfigEntity {
	for _, item := range paymentConfigMemoryItems {
		if item.ID == id {
			return item
		}
	}
	return nil
}
func PaymentConfigMemJoin(items []uint) []*PaymentConfigEntity {
	res := []*PaymentConfigEntity{}
	for _, item := range items {
		v := PaymentConfigMemGet(item)
		if v != nil {
			res = append(res, v)
		}
	}
	return res
}
func PaymentConfigUpdateExec(dbref *gorm.DB, query fireback.QueryDSL, fields *PaymentConfigEntity) (*PaymentConfigEntity, *fireback.IError) {
	uniqueId := fields.UniqueId
	query.TriggerEventName = PAYMENT_CONFIG_EVENT_UPDATED
	PaymentConfigEntityPreSanitize(fields, query)
	var item PaymentConfigEntity
	var itemRefetched PaymentConfigEntity
	// If the entity is distinct by workspace, then the Query.WorkspaceId
	// which is selected is being used as the condition for create or update
	// if not, the unique Id is being used
	cond2 := &PaymentConfigEntity{WorkspaceId: fireback.NewString(query.WorkspaceId)}
	q := dbref.
		Where(cond2).
		FirstOrCreate(&item)
	err := q.UpdateColumns(fields).Error
	if err != nil {
		return nil, fireback.GormErrorToIError(err)
	}
	query.Tx = dbref
	PaymentConfigRelationContentUpdate(fields, query)
	PaymentConfigPolyglotUpdateHandler(fields, query)
	if ero := PaymentConfigDeleteEntireChildren(query, fields); ero != nil {
		return nil, ero
	}
	// @meta(update has many)
	err = dbref.
		Preload(clause.Associations).
		Where(&PaymentConfigEntity{UniqueId: uniqueId}).
		First(&itemRefetched).Error
	if err != nil {
		return nil, fireback.GormErrorToIError(err)
	}
	actionEvent, eventErr := NewPaymentConfigUpdatedEvent(fields, &query)
	if actionEvent != nil && eventErr == nil {
		fireback.GetEventBusInstance().FireEvent(query, *actionEvent)
	} else {
		log.Default().Panicln("Updating event has failed for %v", fields)
	}
	/*
	   event.MustFire(query.TriggerEventName, event.M{
	     "entity":   &item,
	     "target":   "workspace",
	     "unqiueId": query.WorkspaceId,
	   })*/
	return &itemRefetched, nil
}
func PaymentConfigActionUpdateFn(query fireback.QueryDSL, fields *PaymentConfigEntity) (*PaymentConfigEntity, *fireback.IError) {
	if fields == nil {
		return nil, fireback.Create401Error(&fireback.FirebackMessages.BodyIsMissing, []string{})
	}
	// 1. Validate always
	if iError := PaymentConfigValidator(fields, true); iError != nil {
		return nil, iError
	}
	// Let's not add this. I am not sure of the consequences
	// PaymentConfigRecursiveAddUniqueId(fields, query)
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = fireback.GetDbRef()
		var item *PaymentConfigEntity
		vf := dbref.Transaction(func(tx *gorm.DB) error {
			dbref = tx
			var err *fireback.IError
			item, err = PaymentConfigUpdateExec(dbref, query, fields)
			if err == nil {
				return nil
			} else {
				return err
			}
		})
		return item, fireback.CastToIError(vf)
	} else {
		dbref = query.Tx
		return PaymentConfigUpdateExec(dbref, query, fields)
	}
}

var PaymentConfigWipeCmd cli.Command = cli.Command{
	Name:  "wipe",
	Usage: "Wipes entire paymentconfigs ",
	Action: func(c *cli.Context) error {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_PAYMENT_CONFIG_DELETE},
			ResolveStrategy: "workspace",
			AllowOnRoot:     true,
		})
		count, _ := PaymentConfigActionWipeClean(query)
		fmt.Println("Removed", count, "of entities")
		return nil
	},
}

func PaymentConfigActionRemoveFn(query fireback.QueryDSL) (int64, *fireback.IError) {
	refl := reflect.ValueOf(&PaymentConfigEntity{})
	query.ActionRequires = []fireback.PermissionInfo{PERM_ROOT_PAYMENT_CONFIG_DELETE}
	return fireback.RemoveEntity[PaymentConfigEntity](query, refl)
}
func PaymentConfigActionWipeClean(query fireback.QueryDSL) (int64, error) {
	var err error
	var count int64 = 0
	{
		subCount, subErr := fireback.WipeCleanEntity[PaymentConfigEntity]()
		if subErr != nil {
			fmt.Println("Error while wiping 'PaymentConfigEntity'", subErr)
			return count, subErr
		} else {
			count += subCount
		}
	}
	return count, err
}
func PaymentConfigActionBulkUpdate(
	query fireback.QueryDSL, dto *fireback.BulkRecordRequest[PaymentConfigEntity]) (
	*fireback.BulkRecordRequest[PaymentConfigEntity], *fireback.IError,
) {
	result := []*PaymentConfigEntity{}
	err := fireback.GetDbRef().Transaction(func(tx *gorm.DB) error {
		query.Tx = tx
		for _, record := range dto.Records {
			item, err := PaymentConfigActions.Update(query, record)
			if err != nil {
				return err
			} else {
				result = append(result, item)
			}
		}
		return nil
	})
	if err == nil {
		return dto, nil
	}
	return nil, err.(*fireback.IError)
}
func (x *PaymentConfigEntity) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}

var PaymentConfigEntityMeta = fireback.TableMetaData{
	EntityName:    "PaymentConfig",
	ExportKey:     "payment-configs",
	TableNameInDb: "payment-config_entities",
	EntityObject:  &PaymentConfigEntity{},
	ExportStream:  PaymentConfigActionExportT,
	ImportQuery:   PaymentConfigActionImport,
}

func PaymentConfigActionExport(
	query fireback.QueryDSL,
) (chan []byte, *fireback.IError) {
	return fireback.YamlExporterChannel[PaymentConfigEntity](query, PaymentConfigActions.Query, PaymentConfigPreloadRelations)
}
func PaymentConfigActionExportT(
	query fireback.QueryDSL,
) (chan []interface{}, *fireback.IError) {
	return fireback.YamlExporterChannelT[PaymentConfigEntity](query, PaymentConfigActions.Query, PaymentConfigPreloadRelations)
}
func PaymentConfigActionImport(
	dto interface{}, query fireback.QueryDSL,
) *fireback.IError {
	var json = jsoniter.ConfigCompatibleWithStandardLibrary
	var content PaymentConfigEntity
	cx, err2 := json.Marshal(dto)
	if err2 != nil {
		return fireback.Create401Error(&fireback.FirebackMessages.InvalidContent, []string{})
	}
	json.Unmarshal(cx, &content)
	_, err := PaymentConfigActions.Create(&content, query)
	return err
}

var PaymentConfigCommonCliFlags = []cli.Flag{
	&cli.StringFlag{
		Name:  "x-accept",
		Usage: "Return type of the the content, such as json or yaml",
	},
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "enable-stripe",
		Required: false,
		Usage:    `Enables the stripe payment integration in the project (bool?)`,
	},
	&cli.StringFlag{
		Name:     "stripe-secret-key",
		Required: false,
		Usage:    `Stripe secret key to initiate a payment intent (string)`,
	},
	&cli.StringFlag{
		Name:     "stripe-callback-url",
		Required: false,
		Usage:    `The endpoint which the payment module will handle response coming back from stripe. (string)`,
	},
}
var PaymentConfigCommonInteractiveCliFlags = []fireback.CliInteractiveFlag{
	{
		Name:        "stripeSecretKey",
		StructField: "StripeSecretKey",
		Required:    false,
		Recommended: false,
		Usage:       `Stripe secret key to initiate a payment intent`,
		Type:        "string",
	},
	{
		Name:        "stripeCallbackUrl",
		StructField: "StripeCallbackUrl",
		Required:    false,
		Recommended: false,
		Usage:       `The endpoint which the payment module will handle response coming back from stripe.`,
		Type:        "string",
	},
}
var PaymentConfigCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "x-src",
		Required: false,
		Usage:    `Import the body of the request from a file (e.g. json/yaml) on the disk`,
	},
	&cli.StringFlag{
		Name:  "x-accept",
		Usage: "Return type of the the content, such as json or yaml",
	},
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "enable-stripe",
		Required: false,
		Usage:    `Enables the stripe payment integration in the project (bool?)`,
	},
	&cli.StringFlag{
		Name:     "stripe-secret-key",
		Required: false,
		Usage:    `Stripe secret key to initiate a payment intent (string)`,
	},
	&cli.StringFlag{
		Name:     "stripe-callback-url",
		Required: false,
		Usage:    `The endpoint which the payment module will handle response coming back from stripe. (string)`,
	},
}
var PaymentConfigCreateCmd cli.Command = PAYMENT_CONFIG_ACTION_POST_ONE.ToCli()
var PaymentConfigCreateInteractiveCmd cli.Command = cli.Command{
	Name:  "ic",
	Usage: "Creates a new entity, using requied fields in an interactive name",
	Flags: []cli.Flag{
		&cli.BoolFlag{
			Name:  "all",
			Usage: "Interactively asks for all inputs, not only required ones",
		},
	},
	Action: func(c *cli.Context) {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_PAYMENT_CONFIG_CREATE},
			ResolveStrategy: "workspace",
			AllowOnRoot:     true,
		})
		entity := &PaymentConfigEntity{}
		fireback.PopulateInteractively(entity, c, PaymentConfigCommonInteractiveCliFlags)
		if entity, err := PaymentConfigActions.Create(entity, query); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := yaml.Marshal(entity)
			fmt.Println(fireback.FormatYamlKeys(string(f)))
		}
	},
}
var PaymentConfigUpdateCmd cli.Command = cli.Command{
	Name:    "update",
	Aliases: []string{"u"},
	Flags:   PaymentConfigCommonCliFlagsOptional,
	Usage:   "Updates entity by passing the parameters",
	Action: func(c *cli.Context) error {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_PAYMENT_CONFIG_UPDATE},
			ResolveStrategy: "workspace",
			AllowOnRoot:     true,
		})
		entity := CastPaymentConfigFromCli(c)
		if entity, err := PaymentConfigActions.Update(query, entity); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := json.MarshalIndent(entity, "", "  ")
			fmt.Println(string(f))
		}
		return nil
	},
}

func (x *PaymentConfigEntity) FromCli(c *cli.Context) *PaymentConfigEntity {
	return CastPaymentConfigFromCli(c)
}
func CastPaymentConfigFromCli(c *cli.Context) *PaymentConfigEntity {
	template := &PaymentConfigEntity{}
	fireback.HandleXsrc(c, template)
	if c.IsSet("uid") {
		template.UniqueId = c.String("uid")
	}
	if c.IsSet("pid") {
		template.ParentId = fireback.NewStringAutoNull(c.String("pid"))
	}
	if c.IsSet("stripe-secret-key") {
		template.StripeSecretKey = c.String("stripe-secret-key")
	}
	if c.IsSet("stripe-callback-url") {
		template.StripeCallbackUrl = c.String("stripe-callback-url")
	}
	return template
}
func PaymentConfigSyncSeederFromFs(fsRef *embed.FS, fileNames []string, q fireback.QueryDSL) {
	fireback.SeederFromFSImport(
		q,
		PaymentConfigActions.Create,
		reflect.ValueOf(&PaymentConfigEntity{}).Elem(),
		fsRef,
		fileNames,
		true,
	)
}
func PaymentConfigSyncSeeders() {
	fireback.SeederFromFSImport(
		fireback.QueryDSL{WorkspaceId: fireback.USER_SYSTEM},
		PaymentConfigActions.Create,
		reflect.ValueOf(&PaymentConfigEntity{}).Elem(),
		paymentConfigSeedersFs,
		[]string{},
		true,
	)
}
func PaymentConfigImportMocks() {
	fireback.SeederFromFSImport(
		fireback.QueryDSL{},
		PaymentConfigActions.Create,
		reflect.ValueOf(&PaymentConfigEntity{}).Elem(),
		&mocks.ViewsFs,
		[]string{},
		false,
	)
}
func PaymentConfigWriteQueryMock(ctx fireback.MockQueryContext) {
	for _, lang := range ctx.Languages {
		itemsPerPage := 9999
		if ctx.ItemsPerPage > 0 {
			itemsPerPage = ctx.ItemsPerPage
		}
		f := fireback.QueryDSL{ItemsPerPage: itemsPerPage, Language: lang, WithPreloads: ctx.WithPreloads, Deep: true}
		items, count, _ := PaymentConfigActions.Query(f)
		result := fireback.QueryEntitySuccessResult(f, items, count)
		fireback.WriteMockDataToFile(lang, "", "PaymentConfig", result)
	}
}
func PaymentConfigsActionQueryString(keyword string, page int) ([]string, *fireback.QueryResultMeta, error) {
	searchFields := []string{
		`unique_id %"{keyword}"%`,
		`name %"{keyword}"%`,
	}
	m := func(item *PaymentConfigEntity) string {
		label := item.UniqueId
		// if item.Name != nil {
		// 	label += " >>> " + *item.Name
		// }
		return label
	}
	query := fireback.QueryStringCastCli(searchFields, keyword, page)
	items, meta, err := PaymentConfigActions.Query(query)
	stringItems := []string{}
	for _, item := range items {
		label := m(item)
		stringItems = append(stringItems, label)
	}
	return stringItems, meta, err
}

var PaymentConfigDevCommands = []cli.Command{
	PaymentConfigWipeCmd,
	{
		Name:  "mock",
		Usage: "Generates mock records based on the entity definition",
		Flags: []cli.Flag{
			&cli.IntFlag{
				Name:  "count",
				Usage: "how many activation key do you need to be generated and stored in database",
				Value: 10,
			},
			&cli.BoolFlag{
				Name:  "batch",
				Usage: "Multiple insert into database mode. Might miss children and relations at the moment",
			},
		},
		Action: func(c *cli.Context) error {
			query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
				ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_PAYMENT_CONFIG_CREATE},
				ResolveStrategy: "workspace",
				AllowOnRoot:     true,
			})
			if c.Bool("batch") {
				PaymentConfigActionSeederMultiple(query, c.Int("count"))
			} else {
				PaymentConfigActionSeeder(query, c.Int("count"))
			}
			return nil
		},
	},
	{
		Name:    "init",
		Aliases: []string{"i"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Creates a basic seeder file for you, based on the definition module we have. You can populate this file as an example",
		Action: func(c *cli.Context) error {
			seed := PaymentConfigActions.SeederInit()
			fireback.CommonInitSeeder(strings.TrimSpace(c.String("format")), seed)
			return nil
		},
	},
	cli.Command{
		Name:  "mlist",
		Usage: "Prints the list of embedded mocks into the app",
		Action: func(c *cli.Context) error {
			if entity, err := fireback.GetSeederFilenames(&mocks.ViewsFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "msync",
		Usage: "Tries to sync mocks into the system",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportEmbedCmd(c,
				PaymentConfigActions.Create,
				reflect.ValueOf(&PaymentConfigEntity{}).Elem(),
				&mocks.ViewsFs,
			)
			return nil
		},
	},
}
var PaymentConfigImportExportCommands = []cli.Command{
	{
		Name:    "validate",
		Aliases: []string{"v"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "file",
				Usage: "Validates an import file, such as yaml, json, csv, and gives some insights how the after import it would look like",
				Value: "payment-config-seeder-payment-config.yml",
				// Uncomment before publish, they need to specify
				// Required: true,
			},
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Reads a yaml file containing an array of payment-configs, you can run this to validate if your import file is correct, and how it would look like after import",
		Action: func(c *cli.Context) error {
			data := &[]PaymentConfigEntity{}
			fireback.ReadYamlFile(c.String("file"), data)
			fmt.Println(data)
			return nil
		},
	},
	cli.Command{
		Name:  "slist",
		Usage: "Prints the list of files attached to this module for syncing or bootstrapping project",
		Action: func(c *cli.Context) error {
			if entity, err := fireback.GetSeederFilenames(paymentConfigSeedersFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "ssync",
		Usage: "Tries to sync the embedded content into the database, the list could be seen by 'slist' command",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportEmbedCmd(c,
				PaymentConfigActions.Create,
				reflect.ValueOf(&PaymentConfigEntity{}).Elem(),
				paymentConfigSeedersFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:    "export",
		Aliases: []string{"e"},
		Flags: append(fireback.CommonQueryFlags,
			&cli.StringFlag{
				Name:     "file",
				Usage:    "The address of file you want the csv/yaml/json be exported to",
				Required: true,
			}),
		Usage: "Exports a query results into the csv/yaml/json format",
		Action: func(c *cli.Context) error {
			return fireback.CommonCliExportCmd2(c,
				PaymentConfigEntityStream,
				reflect.ValueOf(&PaymentConfigEntity{}).Elem(),
				c.String("file"),
				&metas.MetaFs,
				"PaymentConfigFieldMap.yml",
				PaymentConfigPreloadRelations,
			)
		},
	},
	cli.Command{
		Name: "import",
		Flags: append(
			append(
				fireback.CommonQueryFlags,
				&cli.StringFlag{
					Name:     "file",
					Usage:    "The address of file you want the csv be imported from",
					Required: true,
				}),
			PaymentConfigCommonCliFlagsOptional...,
		),
		Usage: "imports csv/yaml/json file and place it and its children into database",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportCmdAuthorized(c,
				PaymentConfigActions.Create,
				reflect.ValueOf(&PaymentConfigEntity{}).Elem(),
				c.String("file"),
				&fireback.SecurityModel{
					ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_PAYMENT_CONFIG_CREATE},
					ResolveStrategy: "workspace",
					AllowOnRoot:     true,
				},
				func() PaymentConfigEntity {
					v := CastPaymentConfigFromCli(c)
					return *v
				},
			)
			return nil
		},
	},
}
var PaymentConfigCliCommands []cli.Command = []cli.Command{
	PAYMENT_CONFIG_ACTION_QUERY.ToCli(),
	PAYMENT_CONFIG_ACTION_TABLE.ToCli(),
	PaymentConfigCreateCmd,
	PaymentConfigUpdateCmd,
	PaymentConfigAskCmd,
	PaymentConfigCreateInteractiveCmd,
	fireback.GetCommonRemoveQuery(
		reflect.ValueOf(&PaymentConfigEntity{}).Elem(),
		PaymentConfigActions.Remove,
	),
}

func PaymentConfigCliFn() cli.Command {
	commands := append(PaymentConfigImportExportCommands, PaymentConfigCliCommands...)
	if !fireback.GetConfig().Production {
		commands = append(commands, PaymentConfigDevCommands...)
	}
	return cli.Command{
		Name:        "paymentconfig",
		Description: "PaymentConfigs module actions",
		Usage:       `Contains the api keys, configuration, urls, callbacks for different payment gateways.`,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "language",
				Value: "en",
			},
		},
		Subcommands: commands,
	}
}

var PAYMENT_CONFIG_ACTION_TABLE = fireback.Module3Action{
	Name:          "table",
	ActionAliases: []string{"t"},
	Flags:         fireback.CommonQueryFlags,
	Description:   "Table formatted queries all of the entities in database based on the standard query format",
	Action:        PaymentConfigActions.Query,
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		fireback.CommonCliTableCmd2(c,
			PaymentConfigActions.Query,
			security,
			reflect.ValueOf(&PaymentConfigEntity{}).Elem(),
		)
		return nil
	},
}
var PAYMENT_CONFIG_ACTION_QUERY = fireback.Module3Action{
	Method: "GET",
	Url:    "/payment-configs",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_PAYMENT_CONFIG_QUERY},
		ResolveStrategy: "workspace",
		AllowOnRoot:     true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			qs := &PaymentConfigEntityQs{}
			fireback.HttpQueryEntity(c, PaymentConfigActions.Query, qs)
		},
	},
	Format:         "QUERY",
	Action:         PaymentConfigActions.Query,
	ResponseEntity: &[]PaymentConfigEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "PaymentConfigEntity",
	},
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		qs := &PaymentConfigEntityQs{}
		fireback.CommonCliQueryCmd3(
			c,
			PaymentConfigActions.Query,
			security,
			qs,
		)
		return nil
	},
	CliName:       "query",
	Name:          "query",
	ActionAliases: []string{"q"},
	Flags:         append(fireback.CommonQueryFlags, PaymentConfigQsFlags...),
	Description:   "Queries all of the entities in database based on the standard query format (s+)",
}
var PAYMENT_CONFIG_ACTION_EXPORT = fireback.Module3Action{
	Method: "GET",
	Url:    "/payment-configs/export",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_PAYMENT_CONFIG_QUERY},
		ResolveStrategy: "workspace",
		AllowOnRoot:     true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpStreamFileChannel(c, PaymentConfigActionExport)
		},
	},
	Format:         "QUERY",
	Action:         PaymentConfigActionExport,
	ResponseEntity: &[]PaymentConfigEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "PaymentConfigEntity",
	},
}
var PAYMENT_CONFIG_ACTION_GET_ONE = fireback.Module3Action{
	Method: "GET",
	Url:    "/payment-config/:uniqueId",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_PAYMENT_CONFIG_QUERY},
		ResolveStrategy: "workspace",
		AllowOnRoot:     true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpGetEntity(c, PaymentConfigActions.GetOne)
		},
	},
	Format:         "GET_ONE",
	Action:         PaymentConfigActions.GetOne,
	ResponseEntity: &PaymentConfigEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "PaymentConfigEntity",
	},
}
var PAYMENT_CONFIG_ACTION_POST_ONE = fireback.Module3Action{
	Name:          "create",
	ActionAliases: []string{"c"},
	Description:   "Create new paymentConfig",
	Flags:         PaymentConfigCommonCliFlags,
	Method:        "POST",
	Url:           "/payment-config",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_PAYMENT_CONFIG_CREATE},
		ResolveStrategy: "workspace",
		AllowOnRoot:     true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpPostEntity(c, PaymentConfigActions.Create)
		},
	},
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		result, err := fireback.CliPostEntity(c, PaymentConfigActions.Create, security)
		fireback.HandleActionInCli(c, result, err, map[string]map[string]string{})
		return err
	},
	Action:         PaymentConfigActions.Create,
	Format:         "POST_ONE",
	RequestEntity:  &PaymentConfigEntity{},
	ResponseEntity: &PaymentConfigEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "PaymentConfigEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "PaymentConfigEntity",
	},
}
var PAYMENT_CONFIG_ACTION_PATCH = fireback.Module3Action{
	Name:          "update",
	ActionAliases: []string{"u"},
	Flags:         PaymentConfigCommonCliFlagsOptional,
	Method:        "PATCH",
	Url:           "/payment-config",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_PAYMENT_CONFIG_UPDATE},
		ResolveStrategy: "workspace",
		AllowOnRoot:     true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntity(c, PaymentConfigActions.Update)
		},
	},
	Action:         PaymentConfigActions.Update,
	RequestEntity:  &PaymentConfigEntity{},
	ResponseEntity: &PaymentConfigEntity{},
	Format:         "PATCH_ONE",
	Out: &fireback.Module3ActionBody{
		Entity: "PaymentConfigEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "PaymentConfigEntity",
	},
	CliName: "update",
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		result, err := fireback.CliPatchEntity(c, PaymentConfigActions.Update, security)
		fireback.HandleActionInCli(c, result, err, map[string]map[string]string{})
		return err
	},
}
var PAYMENT_CONFIG_ACTION_PATCH_BULK = fireback.Module3Action{
	Method: "PATCH",
	Url:    "/payment-configs",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_PAYMENT_CONFIG_UPDATE},
		ResolveStrategy: "workspace",
		AllowOnRoot:     true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntities(c, PaymentConfigActionBulkUpdate)
		},
	},
	Action:         PaymentConfigActionBulkUpdate,
	Format:         "PATCH_BULK",
	RequestEntity:  &fireback.BulkRecordRequest[PaymentConfigEntity]{},
	ResponseEntity: &fireback.BulkRecordRequest[PaymentConfigEntity]{},
	Out: &fireback.Module3ActionBody{
		Entity: "PaymentConfigEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "PaymentConfigEntity",
	},
}
var PAYMENT_CONFIG_ACTION_DELETE = fireback.Module3Action{
	Method: "DELETE",
	Url:    "/payment-config",
	Format: "DELETE_DSL",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_PAYMENT_CONFIG_DELETE},
		ResolveStrategy: "workspace",
		AllowOnRoot:     true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpRemoveEntity(c, PaymentConfigActions.Remove)
		},
	},
	Action:         PaymentConfigActions.Remove,
	RequestEntity:  &fireback.DeleteRequest{},
	ResponseEntity: &fireback.DeleteResponse{},
	TargetEntity:   &PaymentConfigEntity{},
}
var PAYMENT_CONFIG_ACTION_DISTINCT_PATCH_ONE = fireback.Module3Action{
	Method: "PATCH",
	Url:    "/payment-config/distinct",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_PAYMENT_CONFIG_UPDATE_DISTINCT_WORKSPACE},
		ResolveStrategy: "workspace",
		AllowOnRoot:     true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntity(c, PaymentConfigDistinctActionUpdate)
		},
	},
	Action:         PaymentConfigDistinctActionUpdate,
	Format:         "PATCH_ONE",
	RequestEntity:  &PaymentConfigEntity{},
	ResponseEntity: &PaymentConfigEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "PaymentConfigEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "PaymentConfigEntity",
	},
}
var PAYMENT_CONFIG_ACTION_DISTINCT_GET_ONE = fireback.Module3Action{
	Method: "GET",
	Url:    "/payment-config/distinct",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_PAYMENT_CONFIG_GET_DISTINCT_WORKSPACE},
		ResolveStrategy: "workspace",
		AllowOnRoot:     true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpGetEntity(c, PaymentConfigDistinctActionGetOne)
		},
	},
	Action:         PaymentConfigDistinctActionGetOne,
	Format:         "GET_ONE",
	ResponseEntity: &PaymentConfigEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "PaymentConfigEntity",
	},
}

/**
 *	Override this function on PaymentConfigEntityHttp.go,
 *	In order to add your own http
 **/
var AppendPaymentConfigRouter = func(r *[]fireback.Module3Action) {}

func GetPaymentConfigModule3Actions() []fireback.Module3Action {
	routes := []fireback.Module3Action{
		PAYMENT_CONFIG_ACTION_QUERY,
		PAYMENT_CONFIG_ACTION_EXPORT,
		PAYMENT_CONFIG_ACTION_GET_ONE,
		PAYMENT_CONFIG_ACTION_POST_ONE,
		PAYMENT_CONFIG_ACTION_PATCH,
		PAYMENT_CONFIG_ACTION_PATCH_BULK,
		PAYMENT_CONFIG_ACTION_DELETE,
		PAYMENT_CONFIG_ACTION_DISTINCT_PATCH_ONE,
		PAYMENT_CONFIG_ACTION_DISTINCT_GET_ONE,
	}
	// Append user defined functions
	AppendPaymentConfigRouter(&routes)
	return routes
}

var PERM_ROOT_PAYMENT_CONFIG = fireback.PermissionInfo{
	CompleteKey: "root.manage.payment.payment-config.*",
	Name:        "Entire payment config actions (*)",
	Description: "",
}
var PERM_ROOT_PAYMENT_CONFIG_DELETE = fireback.PermissionInfo{
	CompleteKey: "root.manage.payment.payment-config.delete",
	Name:        "Delete payment config",
	Description: "",
}
var PERM_ROOT_PAYMENT_CONFIG_CREATE = fireback.PermissionInfo{
	CompleteKey: "root.manage.payment.payment-config.create",
	Name:        "Create payment config",
	Description: "",
}
var PERM_ROOT_PAYMENT_CONFIG_UPDATE = fireback.PermissionInfo{
	CompleteKey: "root.manage.payment.payment-config.update",
	Name:        "Update payment config",
	Description: "",
}
var PERM_ROOT_PAYMENT_CONFIG_QUERY = fireback.PermissionInfo{
	CompleteKey: "root.manage.payment.payment-config.query",
	Name:        "Query payment config",
	Description: "",
}
var PERM_ROOT_PAYMENT_CONFIG_GET_DISTINCT_WORKSPACE = fireback.PermissionInfo{
	CompleteKey: "root.manage.payment.payment-config.get-distinct-workspace",
	Name:        "Get payment config Distinct",
	Description: "",
}
var PERM_ROOT_PAYMENT_CONFIG_UPDATE_DISTINCT_WORKSPACE = fireback.PermissionInfo{
	CompleteKey: "root.manage.payment.payment-config.update-distinct-workspace",
	Name:        "Update payment config Distinct",
	Description: "",
}
var ALL_PAYMENT_CONFIG_PERMISSIONS = []fireback.PermissionInfo{
	PERM_ROOT_PAYMENT_CONFIG_DELETE,
	PERM_ROOT_PAYMENT_CONFIG_CREATE,
	PERM_ROOT_PAYMENT_CONFIG_UPDATE,
	PERM_ROOT_PAYMENT_CONFIG_GET_DISTINCT_WORKSPACE,
	PERM_ROOT_PAYMENT_CONFIG_UPDATE_DISTINCT_WORKSPACE,
	PERM_ROOT_PAYMENT_CONFIG_QUERY,
	PERM_ROOT_PAYMENT_CONFIG,
}

func PaymentConfigDistinctActionUpdate(
	query fireback.QueryDSL,
	fields *PaymentConfigEntity,
) (*PaymentConfigEntity, *fireback.IError) {
	query.UniqueId = query.UserId
	entity, err := PaymentConfigActions.GetByWorkspace(query)
	// Because we are updating by workspace, the unique id and workspace id
	// are important to be the same.
	fields.UniqueId = query.WorkspaceId
	fields.WorkspaceId = fireback.NewString(query.WorkspaceId)
	if err != nil || entity.UniqueId == "" {
		return PaymentConfigActions.Create(fields, query)
	} else {
		return PaymentConfigActions.Update(query, fields)
	}
}
func PaymentConfigDistinctActionGetOne(
	query fireback.QueryDSL,
) (*PaymentConfigEntity, *fireback.IError) {
	// Get's by workspace
	entity, err := PaymentConfigActions.GetByWorkspace(query)
	if err != nil && err.HttpCode == 404 {
		return &PaymentConfigEntity{}, nil
	}
	return entity, err
}
func NewPaymentConfigCreatedEvent(
	payload *PaymentConfigEntity,
	query *fireback.QueryDSL,
) (*fireback.Event, error) {
	event := &fireback.Event{
		Name:    "PaymentConfigCreated",
		Payload: payload,
		Security: &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{
				PERM_ROOT_PAYMENT_CONFIG_QUERY,
			},
			ResolveStrategy: "workspace",
			AllowOnRoot:     true,
		},
		CacheKey: "*payment.PaymentConfigEntity",
	}
	// Apply the source of the event based on querydsl
	fireback.ApplyQueryDslContextToEvent(event, *query)
	return event, nil
}
func NewPaymentConfigUpdatedEvent(
	payload *PaymentConfigEntity,
	query *fireback.QueryDSL,
) (*fireback.Event, error) {
	event := &fireback.Event{
		Name:    "PaymentConfigUpdated",
		Payload: payload,
		Security: &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{
				PERM_ROOT_PAYMENT_CONFIG_QUERY,
			},
			ResolveStrategy: "workspace",
			AllowOnRoot:     true,
		},
		CacheKey: "*payment.PaymentConfigEntity",
	}
	// Apply the source of the event based on querydsl
	fireback.ApplyQueryDslContextToEvent(event, *query)
	return event, nil
}

var PaymentConfigEntityBundle = fireback.EntityBundle{
	Permissions: ALL_PAYMENT_CONFIG_PERMISSIONS,
	// Cli command has been exluded, since we use module to wrap all the entities
	// to be more easier to wrap up.
	// Create your own bundle if you need with Cli
	//CliCommands: []cli.Command{
	//	PaymentConfigCliFn(),
	//},
	Actions:      GetPaymentConfigModule3Actions(),
	MockProvider: PaymentConfigImportMocks,
	AutoMigrationEntities: []interface{}{
		&PaymentConfigEntity{},
	},
	MigrationScripts: []fireback.MigrationScript{},
}
