package payment

/*
*	Generated by fireback 1.2.3
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"embed"
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	jsoniter "github.com/json-iterator/go"
	"github.com/schollz/progressbar/v3"
	"github.com/torabian/fireback/modules/fireback"
	metas "github.com/torabian/fireback/modules/payment/metas"
	mocks "github.com/torabian/fireback/modules/payment/mocks/PaymentParameter"
	seeders "github.com/torabian/fireback/modules/payment/seeders/PaymentParameter"
	"github.com/urfave/cli"
	"gopkg.in/yaml.v2"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"log"
	reflect "reflect"
	"strings"
	"time"
)

var paymentParameterSeedersFs = &seeders.ViewsFs

func ResetPaymentParameterSeeders(fs *embed.FS) {
	paymentParameterSeedersFs = fs
}

type PaymentParameterEntityQs struct {
	PosId          fireback.QueriableField `cli:"pos-id" table:"payment_parameter" column:"pos_id" qs:"posId"`
	MerchantId     fireback.QueriableField `cli:"merchant-id" table:"payment_parameter" column:"merchant_id" qs:"merchantId"`
	Crc            fireback.QueriableField `cli:"crc" table:"payment_parameter" column:"crc" qs:"crc"`
	SecretId       fireback.QueriableField `cli:"secret-id" table:"payment_parameter" column:"secret_id" qs:"secretId"`
	UrlReturn      fireback.QueriableField `cli:"url-return" table:"payment_parameter" column:"url_return" qs:"urlReturn"`
	UrlStatus      fireback.QueriableField `cli:"url-status" table:"payment_parameter" column:"url_status" qs:"urlStatus"`
	Currency       fireback.QueriableField `cli:"currency" table:"payment_parameter" column:"currency" qs:"currency"`
	Country        fireback.QueriableField `cli:"country" table:"payment_parameter" column:"country" qs:"country"`
	PaymentPageUrl fireback.QueriableField `cli:"payment-page-url" table:"payment_parameter" column:"payment_page_url" qs:"paymentPageUrl"`
	RegisterApiUrl fireback.QueriableField `cli:"register-api-url" table:"payment_parameter" column:"register_api_url" qs:"registerApiUrl"`
	VerifyApiUrl   fireback.QueriableField `cli:"verify-api-url" table:"payment_parameter" column:"verify_api_url" qs:"verifyApiUrl"`
}

func (x *PaymentParameterEntityQs) GetQuery() string {
	return fireback.GenerateQueryStringStyle(reflect.ValueOf(x), "")
}

var PaymentParameterQsFlags = []cli.Flag{
	&cli.StringFlag{
		Name:  "pos-id",
		Usage: "User it's the same value as posId",
	},
	&cli.StringFlag{
		Name:  "merchant-id",
		Usage: "Merchant Id is said to be same as posId, but we collect it anyway",
	},
	&cli.StringFlag{
		Name:  "crc",
		Usage: "CRC is got from the payment provider",
	},
	&cli.StringFlag{
		Name:  "secret-id",
		Usage: "secretId it's the samevalue as key for reports (API key).",
	},
	&cli.StringFlag{
		Name:  "url-return",
		Usage: "Used when transaction is done on payment provider side",
	},
	&cli.StringFlag{
		Name:  "url-status",
		Usage: "Used to send notification from payment provider.",
	},
	&cli.StringFlag{
		Name:  "currency",
		Usage: "The currency that transactions will be.",
	},
	&cli.StringFlag{
		Name:  "country",
		Usage: "Country codes compatible with ISO, e.g. PL, DE, etc.",
	},
	&cli.StringFlag{
		Name:  "payment-page-url",
		Usage: "The location that transaction would go when it's already registered. You can use {Token} placeholder and it would be replaced.",
	},
	&cli.StringFlag{
		Name:  "register-api-url",
		Usage: "Url that would be used to register a transaction",
	},
	&cli.StringFlag{
		Name:  "verify-api-url",
		Usage: "The url which will be used to verify the transaction notification",
	},
}

type PaymentParameterEntity struct {
	// Defines the visibility of the record in the table.
	// Visibility is a detailed topic, you can check all of the visibility values in fireback/visibility.go
	// by default, visibility of record are 0, means they are protected by the workspace
	// which are being created, and visible to every member of the workspace
	Visibility fireback.String `json:"visibility,omitempty" yaml:"visibility,omitempty" xml:"visibility,omitempty"`
	// The unique-id of the workspace which content belongs to. Upon creation this will be designated
	// to the selected workspace by user, if they have write access. You can change this value
	// or prevent changes to it manually (on root features for example modifying other workspace)
	WorkspaceId fireback.String `json:"workspaceId,omitempty" xml:"workspaceId,omitempty" yaml:"workspaceId,omitempty" gorm:"unique;not null;" `
	// The unique-id of the parent table, which this record is being linked to.
	// used internally for making relations in fireback, generally does not need manual changes
	// or modification by the developer or user. For example, if you have a object inside an object
	// the unique-id of the parent will be written in the child.
	LinkerId fireback.String `json:"linkerId,omitempty" xml:"linkerId,omitempty" yaml:"linkerId,omitempty"`
	// Used for recursive or parent-child operations. Some tables, are having nested relations,
	// and this field makes the table self refrenceing. ParentId needs to exist in the table before
	// creating of modifying a record.
	ParentId fireback.String `json:"parentId,omitempty" xml:"parentId,omitempty" yaml:"parentId,omitempty"`
	// Makes a field deletable. Some records should not be deletable at all.
	// default it's true.
	IsDeletable *bool `json:"isDeletable,omitempty" xml:"isDeletable,omitempty" yaml:"isDeletable,omitempty" gorm:"default:true"`
	// Makes a field updatable. Some records should not be updatable at all.
	// default it's true.
	IsUpdatable *bool `json:"isUpdatable,omitempty" xml:"isUpdatable,omitempty" yaml:"isUpdatable,omitempty" gorm:"default:true"`
	// The unique-id of the user which is creating the record, or the record belongs to.
	// Administration might want to change this to any user, by default Fireback fills
	// it to the current authenticated user.
	UserId fireback.String `json:"userId,omitempty" xml:"userId,omitempty" yaml:"userId,omitempty"`
	// General mechanism to rank the elements. From code perspective, it's just a number,
	// but you can sort it based on any logic for records to make a ranking, sorting.
	// they should not be unique across a table.
	Rank fireback.Int64 `json:"rank,omitempty" yaml:"rank,omitempty" xml:"rank,omitempty" gorm:"type:int;name:rank"`
	// Primary numeric key in the database. This value is not meant to be exported to public
	// or be used to access data at all. Rather a mechanism of indexing columns internally
	// or cursor pagination in future releases of fireback, or better search performance.
	ID uint `gorm:"primaryKey;autoIncrement" json:"-" yaml:"-" xml:"-"`
	// Unique id of the record across the table. This value will be accessed from public APIs,
	// and many other places intead of numeric ID property.
	// Upon generation, a UUID automatically is being assigned, and if user has specified the
	// Unique id in the post body, it will be used. This mechanism allows to manage unsaved
	// content on front-end much easier than requiring parent to exists first.
	UniqueId string `json:"uniqueId,omitempty" xml:"uniqueId,omitempty" gorm:"unique;not null;size:100;" yaml:"uniqueId,omitempty"`
	// The time that the record has been updated in datetime.
	// the field will be automatically populated by gorm orm.
	UpdatedAt *time.Time `json:"updatedAt,omitempty" xml:"updatedAt,omitempty" yaml:"updatedAt,omitempty"`
	// The time that the record has been created in datetime.
	// the field will be automatically populated by gorm orm.
	CreatedAt *time.Time `json:"createdAt,omitempty" xml:"createdAt,omitempty" yaml:"createdAt,omitempty"`
	// The time that the record has been deleted softly (means the data still exists in database, but no longer visible to any feature) in nano datatime
	// you need to make sure check this field if writing custom sql queries.
	// the field will be automatically populated by gorm orm.
	DeletedAt *time.Time `json:"deletedAt,omitempty" xml:"deletedAt,omitempty" yaml:"deletedAt,omitempty"`
	// Record creation date time formatting based on locale of the headers, or other
	// possible factors.
	CreatedFormatted string `json:"createdFormatted,omitempty" xml:"createdFormatted,omitempty" yaml:"createdFormatted,omitempty" sql:"-" gorm:"-"`
	// Record update date time formatting based on locale of the headers, or other
	// possible factors.
	UpdatedFormatted string `json:"updatedFormatted,omitempty" xml:"updatedFormatted,omitempty" yaml:"updatedFormatted,omitempty" sql:"-" gorm:"-"`
	// User it's the same value as posId
	PosId string `json:"posId" xml:"posId" yaml:"posId"        `
	// Merchant Id is said to be same as posId, but we collect it anyway
	MerchantId string `json:"merchantId" xml:"merchantId" yaml:"merchantId"        `
	// CRC is got from the payment provider
	Crc string `json:"crc" xml:"crc" yaml:"crc"        `
	// secretId it's the samevalue as key for reports (API key).
	SecretId string `json:"secretId" xml:"secretId" yaml:"secretId"        `
	// Used when transaction is done on payment provider side
	UrlReturn string `json:"urlReturn" xml:"urlReturn" yaml:"urlReturn"        `
	// Used to send notification from payment provider.
	UrlStatus string `json:"urlStatus" xml:"urlStatus" yaml:"urlStatus"        `
	// The currency that transactions will be.
	Currency string `json:"currency" xml:"currency" yaml:"currency"        `
	// Country codes compatible with ISO, e.g. PL, DE, etc.
	Country string `json:"country" xml:"country" yaml:"country"        `
	// The location that transaction would go when it's already registered. You can use {Token} placeholder and it would be replaced.
	PaymentPageUrl string `json:"paymentPageUrl" xml:"paymentPageUrl" yaml:"paymentPageUrl"        `
	// Url that would be used to register a transaction
	RegisterApiUrl string `json:"registerApiUrl" xml:"registerApiUrl" yaml:"registerApiUrl"        `
	// The url which will be used to verify the transaction notification
	VerifyApiUrl string                    `json:"verifyApiUrl" xml:"verifyApiUrl" yaml:"verifyApiUrl"        `
	Children     []*PaymentParameterEntity `csv:"-" gorm:"-" sql:"-" json:"children,omitempty" xml:"children,omitempty"  yaml:"children,omitempty"`
	LinkedTo     *PaymentParameterEntity   `csv:"-" yaml:"-" gorm:"-" json:"-" sql:"-" xml:"-"`
}

func PaymentParameterEntityStream(q fireback.QueryDSL) (chan []*PaymentParameterEntity, *fireback.QueryResultMeta, error) {
	cn := make(chan []*PaymentParameterEntity)
	q.ItemsPerPage = 50
	q.StartIndex = 0
	_, qrm, err := PaymentParameterActions.Query(q)
	if err != nil {
		return nil, nil, err
	}
	go func() {
		defer close(cn)
		for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
			items, _, _ := PaymentParameterActions.Query(q)
			i += q.ItemsPerPage
			q.StartIndex = i
			cn <- items
		}
	}()
	return cn, qrm, nil
}

type PaymentParameterEntityList struct {
	Items []*PaymentParameterEntity
}

func NewPaymentParameterEntityList(items []*PaymentParameterEntity) *PaymentParameterEntityList {
	return &PaymentParameterEntityList{
		Items: items,
	}
}
func (x *PaymentParameterEntityList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *PaymentParameterEntityList) ToTree() *fireback.TreeOperation[PaymentParameterEntity] {
	return fireback.NewTreeOperation(
		x.Items,
		func(t *PaymentParameterEntity) string {
			if !t.ParentId.Valid {
				return ""
			}
			return t.ParentId.String
		},
		func(t *PaymentParameterEntity) string {
			return t.UniqueId
		},
	)
}

var PaymentParameterPreloadRelations []string = []string{}

type paymentParameterActionsSig struct {
	Update         func(query fireback.QueryDSL, dto *PaymentParameterEntity) (*PaymentParameterEntity, *fireback.IError)
	Create         func(dto *PaymentParameterEntity, query fireback.QueryDSL) (*PaymentParameterEntity, *fireback.IError)
	Upsert         func(dto *PaymentParameterEntity, query fireback.QueryDSL) (*PaymentParameterEntity, *fireback.IError)
	SeederInit     func() *PaymentParameterEntity
	Remove         func(query fireback.QueryDSL) (int64, *fireback.IError)
	MultiInsert    func(dtos []*PaymentParameterEntity, query fireback.QueryDSL) ([]*PaymentParameterEntity, *fireback.IError)
	GetOne         func(query fireback.QueryDSL) (*PaymentParameterEntity, *fireback.IError)
	GetByWorkspace func(query fireback.QueryDSL) (*PaymentParameterEntity, *fireback.IError)
	Query          func(query fireback.QueryDSL) ([]*PaymentParameterEntity, *fireback.QueryResultMeta, error)
}

var PaymentParameterActions paymentParameterActionsSig = paymentParameterActionsSig{
	Update:         PaymentParameterActionUpdateFn,
	Create:         PaymentParameterActionCreateFn,
	Upsert:         PaymentParameterActionUpsertFn,
	Remove:         PaymentParameterActionRemoveFn,
	SeederInit:     PaymentParameterActionSeederInitFn,
	MultiInsert:    PaymentParameterMultiInsertFn,
	GetOne:         PaymentParameterActionGetOneFn,
	GetByWorkspace: PaymentParameterActionGetByWorkspaceFn,
	Query:          PaymentParameterActionQueryFn,
}

func PaymentParameterActionUpsertFn(dto *PaymentParameterEntity, query fireback.QueryDSL) (*PaymentParameterEntity, *fireback.IError) {
	return nil, nil
}

var PAYMENT_PARAMETER_EVENT_CREATED = "paymentParameter.created"
var PAYMENT_PARAMETER_EVENT_UPDATED = "paymentParameter.updated"
var PAYMENT_PARAMETER_EVENT_DELETED = "paymentParameter.deleted"
var PAYMENT_PARAMETER_EVENTS = []string{
	PAYMENT_PARAMETER_EVENT_CREATED,
	PAYMENT_PARAMETER_EVENT_UPDATED,
	PAYMENT_PARAMETER_EVENT_DELETED,
}

type PaymentParameterFieldMap struct {
	PosId          fireback.TranslatedString `yaml:"posId"`
	MerchantId     fireback.TranslatedString `yaml:"merchantId"`
	Crc            fireback.TranslatedString `yaml:"crc"`
	SecretId       fireback.TranslatedString `yaml:"secretId"`
	UrlReturn      fireback.TranslatedString `yaml:"urlReturn"`
	UrlStatus      fireback.TranslatedString `yaml:"urlStatus"`
	Currency       fireback.TranslatedString `yaml:"currency"`
	Country        fireback.TranslatedString `yaml:"country"`
	PaymentPageUrl fireback.TranslatedString `yaml:"paymentPageUrl"`
	RegisterApiUrl fireback.TranslatedString `yaml:"registerApiUrl"`
	VerifyApiUrl   fireback.TranslatedString `yaml:"verifyApiUrl"`
}

var PaymentParameterEntityMetaConfig map[string]int64 = map[string]int64{}
var PaymentParameterEntityJsonSchema = fireback.ExtractEntityFields(reflect.ValueOf(&PaymentParameterEntity{}))

func entityPaymentParameterFormatter(dto *PaymentParameterEntity, query fireback.QueryDSL) {
	if dto == nil {
		return
	}
}
func PaymentParameterActionSeederMultiple(query fireback.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	batchSize := 100
	bar := progressbar.Default(int64(count))
	// Collect entities in batches
	var entitiesBatch []*PaymentParameterEntity
	for i := 1; i <= count; i++ {
		entity := PaymentParameterActions.SeederInit()
		entitiesBatch = append(entitiesBatch, entity)
		// When batch size is reached, perform the batch insert
		if len(entitiesBatch) == batchSize || i == count {
			// Insert batch
			_, err := PaymentParameterActions.MultiInsert(entitiesBatch, query)
			if err == nil {
				successInsert += len(entitiesBatch)
			} else {
				fmt.Println(err)
				failureInsert += len(entitiesBatch)
			}
			// Clear the batch after insert
			entitiesBatch = nil
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func PaymentParameterActionSeeder(query fireback.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	bar := progressbar.Default(int64(count))
	for i := 1; i <= count; i++ {
		entity := PaymentParameterActions.SeederInit()
		_, err := PaymentParameterActions.Create(entity, query)
		if err == nil {
			successInsert++
		} else {
			fmt.Println(err)
			failureInsert++
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func (x *PaymentParameterEntity) Seeder() string {
	obj := PaymentParameterActions.SeederInit()
	v, _ := json.MarshalIndent(obj, "", "  ")
	return string(v)
}
func PaymentParameterActionSeederInitFn() *PaymentParameterEntity {
	entity := &PaymentParameterEntity{}
	return entity
}
func PaymentParameterAssociationCreate(dto *PaymentParameterEntity, query fireback.QueryDSL) error {
	return nil
}

/**
* These kind of content are coming from another entity, which is indepndent module
* If we want to create them, we need to do it before. This is not association.
**/
func PaymentParameterRelationContentCreate(dto *PaymentParameterEntity, query fireback.QueryDSL) error {
	return nil
}
func PaymentParameterRelationContentUpdate(dto *PaymentParameterEntity, query fireback.QueryDSL) error {
	return nil
}
func PaymentParameterPolyglotUpdateHandler(dto *PaymentParameterEntity, query fireback.QueryDSL) {
	if dto == nil {
		return
	}
}

/**
 * This will be validating your entity fully. Important note is that, you add validate:* tag
 * in your entity, it will automatically work here. For slices inside entity, make sure you add
 * extra line of AppendSliceErrors, otherwise they won't be detected
 */
func PaymentParameterValidator(dto *PaymentParameterEntity, isPatch bool) *fireback.IError {
	err := fireback.CommonStructValidatorPointer(dto, isPatch)
	return err
}

// Creates a set of natural language queries, which can be used with
// AI tools to create content or help with some tasks
var PaymentParameterAskCmd cli.Command = cli.Command{
	Name:  "nlp",
	Usage: "Set of natural language queries which helps creating content or data",
	Subcommands: []cli.Command{
		{
			Name:  "sample",
			Usage: "Asks for generating sample by giving an example data",
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:  "format",
					Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
					Value: "yaml",
				},
				&cli.IntFlag{
					Name:  "count",
					Usage: "How many samples to ask",
					Value: 30,
				},
			},
			Action: func(c *cli.Context) error {
				v := &PaymentParameterEntity{}
				format := c.String("format")
				request := "\033[1m" + `
I need you to create me an array of exact signature as the example given below,
with at least ` + fmt.Sprint(c.String("count")) + ` items, mock the content with few words, and guess the possible values
based on the common sense. I need the output to be a valid ` + format + ` file.
Make sure you wrap the entire array in 'items' field. Also before that, I provide some explanation of each field:
PosId: (type: string) Description: User it's the same value as posId
MerchantId: (type: string) Description: Merchant Id is said to be same as posId, but we collect it anyway
Crc: (type: string) Description: CRC is got from the payment provider
SecretId: (type: string) Description: secretId it's the samevalue as key for reports (API key).
UrlReturn: (type: string) Description: Used when transaction is done on payment provider side
UrlStatus: (type: string) Description: Used to send notification from payment provider.
Currency: (type: string) Description: The currency that transactions will be.
Country: (type: string) Description: Country codes compatible with ISO, e.g. PL, DE, etc.
PaymentPageUrl: (type: string) Description: The location that transaction would go when it's already registered. You can use {Token} placeholder and it would be replaced.
RegisterApiUrl: (type: string) Description: Url that would be used to register a transaction
VerifyApiUrl: (type: string) Description: The url which will be used to verify the transaction notification
And here is the actual object signature:
` + v.Seeder() + `
`
				fmt.Println(request)
				return nil
			},
		},
	},
}

func PaymentParameterEntityPreSanitize(dto *PaymentParameterEntity, query fireback.QueryDSL) {
}
func PaymentParameterEntityBeforeCreateAppend(dto *PaymentParameterEntity, query fireback.QueryDSL) {
	if dto.UniqueId == "" {
		dto.UniqueId = fireback.UUID()
	}
	dto.WorkspaceId = fireback.NewString(query.WorkspaceId)
	dto.UserId = fireback.NewString(query.UserId)
	PaymentParameterRecursiveAddUniqueId(dto, query)
}
func PaymentParameterRecursiveAddUniqueId(dto *PaymentParameterEntity, query fireback.QueryDSL) {
}

/*
*
	Batch inserts, do not have all features that create
	operation does. Use it with unnormalized content,
	or read the source code carefully.
  This is not marked as an action, because it should not be available publicly
  at this moment.
*
*/
func PaymentParameterMultiInsertFn(dtos []*PaymentParameterEntity, query fireback.QueryDSL) ([]*PaymentParameterEntity, *fireback.IError) {
	if len(dtos) > 0 {
		for index := range dtos {
			PaymentParameterEntityPreSanitize(dtos[index], query)
			PaymentParameterEntityBeforeCreateAppend(dtos[index], query)
		}
		var dbref *gorm.DB = nil
		if query.Tx == nil {
			dbref = fireback.GetDbRef()
		} else {
			dbref = query.Tx
		}
		query.Tx = dbref
		err := dbref.Create(&dtos).Error
		if err != nil {
			return nil, fireback.GormErrorToIError(err)
		}
	}
	return dtos, nil
}
func PaymentParameterActionBatchCreateFn(dtos []*PaymentParameterEntity, query fireback.QueryDSL) ([]*PaymentParameterEntity, *fireback.IError) {
	if dtos != nil && len(dtos) > 0 {
		items := []*PaymentParameterEntity{}
		for _, item := range dtos {
			s, err := PaymentParameterActions.Create(item, query)
			if err != nil {
				return nil, err
			}
			items = append(items, s)
		}
		return items, nil
	}
	return dtos, nil
}
func PaymentParameterDeleteEntireChildren(query fireback.QueryDSL, dto *PaymentParameterEntity) *fireback.IError {
	// intentionally removed this. It's hard to implement it, and probably wrong without
	// proper on delete cascade
	return nil
}
func PaymentParameterActionCreateFn(dto *PaymentParameterEntity, query fireback.QueryDSL) (*PaymentParameterEntity, *fireback.IError) {
	// 1. Validate always
	if iError := PaymentParameterValidator(dto, false); iError != nil {
		return nil, iError
	}
	// 1.5 Sanitize the content coming of the front-end
	PaymentParameterEntityPreSanitize(dto, query)
	// 2. Append the necessary information about user, workspace
	PaymentParameterEntityBeforeCreateAppend(dto, query)
	// 3. Create other entities if we want select from them
	PaymentParameterRelationContentCreate(dto, query)
	// 4. Create the entity
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = fireback.GetDbRef()
	} else {
		dbref = query.Tx
	}
	query.Tx = dbref
	err := dbref.Create(&dto).Error
	if err != nil {
		err := fireback.GormErrorToIError(err)
		return nil, err
	}
	// 5. Create sub entities, objects or arrays, association to other entities
	PaymentParameterAssociationCreate(dto, query)
	// 6. Fire the event into system
	actionEvent, eventErr := NewPaymentParameterCreatedEvent(dto, &query)
	if actionEvent != nil && eventErr == nil {
		fireback.GetEventBusInstance().FireEvent(query, *actionEvent)
	} else {
		log.Default().Panicln("Creating event has failed for %v", dto)
	}
	/*
		event.MustFire(PAYMENT_PARAMETER_EVENT_CREATED, event.M{
			"entity":   dto,
			"entityKey": fireback.GetTypeString(&PaymentParameterEntity{}),
			"target":   "workspace",
			"unqiueId": query.WorkspaceId,
		})
	*/
	return dto, nil
}
func PaymentParameterActionGetOneFn(query fireback.QueryDSL) (*PaymentParameterEntity, *fireback.IError) {
	refl := reflect.ValueOf(&PaymentParameterEntity{})
	item, err := fireback.GetOneEntity[PaymentParameterEntity](query, refl)
	entityPaymentParameterFormatter(item, query)
	return item, err
}
func PaymentParameterActionGetByWorkspaceFn(query fireback.QueryDSL) (*PaymentParameterEntity, *fireback.IError) {
	refl := reflect.ValueOf(&PaymentParameterEntity{})
	item, err := fireback.GetOneByWorkspaceEntity[PaymentParameterEntity](query, refl)
	entityPaymentParameterFormatter(item, query)
	return item, err
}
func PaymentParameterActionQueryFn(query fireback.QueryDSL) ([]*PaymentParameterEntity, *fireback.QueryResultMeta, error) {
	refl := reflect.ValueOf(&PaymentParameterEntity{})
	items, meta, err := fireback.QueryEntitiesPointer[PaymentParameterEntity](query, refl)
	for _, item := range items {
		entityPaymentParameterFormatter(item, query)
	}
	return items, meta, err
}

var paymentParameterMemoryItems []*PaymentParameterEntity = []*PaymentParameterEntity{}

func PaymentParameterEntityIntoMemory() {
	q := fireback.QueryDSL{
		ItemsPerPage: 500,
		StartIndex:   0,
	}
	_, qrm, _ := PaymentParameterActions.Query(q)
	for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
		items, _, _ := PaymentParameterActions.Query(q)
		paymentParameterMemoryItems = append(paymentParameterMemoryItems, items...)
		i += q.ItemsPerPage
		q.StartIndex = i
	}
}
func PaymentParameterMemGet(id uint) *PaymentParameterEntity {
	for _, item := range paymentParameterMemoryItems {
		if item.ID == id {
			return item
		}
	}
	return nil
}
func PaymentParameterMemJoin(items []uint) []*PaymentParameterEntity {
	res := []*PaymentParameterEntity{}
	for _, item := range items {
		v := PaymentParameterMemGet(item)
		if v != nil {
			res = append(res, v)
		}
	}
	return res
}
func PaymentParameterUpdateExec(dbref *gorm.DB, query fireback.QueryDSL, fields *PaymentParameterEntity) (*PaymentParameterEntity, *fireback.IError) {
	uniqueId := fields.UniqueId
	query.TriggerEventName = PAYMENT_PARAMETER_EVENT_UPDATED
	PaymentParameterEntityPreSanitize(fields, query)
	var item PaymentParameterEntity
	var itemRefetched PaymentParameterEntity
	// If the entity is distinct by workspace, then the Query.WorkspaceId
	// which is selected is being used as the condition for create or update
	// if not, the unique Id is being used
	cond2 := &PaymentParameterEntity{WorkspaceId: fireback.NewString(query.WorkspaceId)}
	q := dbref.
		Where(cond2).
		FirstOrCreate(&item)
	err := q.UpdateColumns(fields).Error
	if err != nil {
		return nil, fireback.GormErrorToIError(err)
	}
	query.Tx = dbref
	PaymentParameterRelationContentUpdate(fields, query)
	PaymentParameterPolyglotUpdateHandler(fields, query)
	if ero := PaymentParameterDeleteEntireChildren(query, fields); ero != nil {
		return nil, ero
	}
	// @meta(update has many)
	err = dbref.
		Preload(clause.Associations).
		Where(&PaymentParameterEntity{UniqueId: uniqueId}).
		First(&itemRefetched).Error
	if err != nil {
		return nil, fireback.GormErrorToIError(err)
	}
	actionEvent, eventErr := NewPaymentParameterUpdatedEvent(fields, &query)
	if actionEvent != nil && eventErr == nil {
		fireback.GetEventBusInstance().FireEvent(query, *actionEvent)
	} else {
		log.Default().Panicln("Updating event has failed for %v", fields)
	}
	/*
	   event.MustFire(query.TriggerEventName, event.M{
	     "entity":   &item,
	     "target":   "workspace",
	     "unqiueId": query.WorkspaceId,
	   })*/
	return &itemRefetched, nil
}
func PaymentParameterActionUpdateFn(query fireback.QueryDSL, fields *PaymentParameterEntity) (*PaymentParameterEntity, *fireback.IError) {
	if fields == nil {
		return nil, fireback.Create401Error(&fireback.FirebackMessages.BodyIsMissing, []string{})
	}
	// 1. Validate always
	if iError := PaymentParameterValidator(fields, true); iError != nil {
		return nil, iError
	}
	// Let's not add this. I am not sure of the consequences
	// PaymentParameterRecursiveAddUniqueId(fields, query)
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = fireback.GetDbRef()
		var item *PaymentParameterEntity
		vf := dbref.Transaction(func(tx *gorm.DB) error {
			dbref = tx
			var err *fireback.IError
			item, err = PaymentParameterUpdateExec(dbref, query, fields)
			if err == nil {
				return nil
			} else {
				return err
			}
		})
		return item, fireback.CastToIError(vf)
	} else {
		dbref = query.Tx
		return PaymentParameterUpdateExec(dbref, query, fields)
	}
}

var PaymentParameterWipeCmd cli.Command = cli.Command{
	Name:  "wipe",
	Usage: "Wipes entire paymentparameters ",
	Action: func(c *cli.Context) error {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PAYMENT_PARAMETER_DELETE},
			AllowOnRoot:    true,
		})
		count, _ := PaymentParameterActionWipeClean(query)
		fmt.Println("Removed", count, "of entities")
		return nil
	},
}

func PaymentParameterActionRemoveFn(query fireback.QueryDSL) (int64, *fireback.IError) {
	refl := reflect.ValueOf(&PaymentParameterEntity{})
	query.ActionRequires = []fireback.PermissionInfo{PERM_ROOT_PAYMENT_PARAMETER_DELETE}
	return fireback.RemoveEntity[PaymentParameterEntity](query, refl)
}
func PaymentParameterActionWipeClean(query fireback.QueryDSL) (int64, error) {
	var err error
	var count int64 = 0
	{
		subCount, subErr := fireback.WipeCleanEntity[PaymentParameterEntity]()
		if subErr != nil {
			fmt.Println("Error while wiping 'PaymentParameterEntity'", subErr)
			return count, subErr
		} else {
			count += subCount
		}
	}
	return count, err
}
func PaymentParameterActionBulkUpdate(
	query fireback.QueryDSL, dto *fireback.BulkRecordRequest[PaymentParameterEntity]) (
	*fireback.BulkRecordRequest[PaymentParameterEntity], *fireback.IError,
) {
	result := []*PaymentParameterEntity{}
	err := fireback.GetDbRef().Transaction(func(tx *gorm.DB) error {
		query.Tx = tx
		for _, record := range dto.Records {
			item, err := PaymentParameterActions.Update(query, record)
			if err != nil {
				return err
			} else {
				result = append(result, item)
			}
		}
		return nil
	})
	if err == nil {
		return dto, nil
	}
	return nil, err.(*fireback.IError)
}
func (x *PaymentParameterEntity) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}

var PaymentParameterEntityMeta = fireback.TableMetaData{
	EntityName:    "PaymentParameter",
	ExportKey:     "payment-parameters",
	TableNameInDb: "payment-parameter_entities",
	EntityObject:  &PaymentParameterEntity{},
	ExportStream:  PaymentParameterActionExportT,
	ImportQuery:   PaymentParameterActionImport,
}

func PaymentParameterActionExport(
	query fireback.QueryDSL,
) (chan []byte, *fireback.IError) {
	return fireback.YamlExporterChannel[PaymentParameterEntity](query, PaymentParameterActions.Query, PaymentParameterPreloadRelations)
}
func PaymentParameterActionExportT(
	query fireback.QueryDSL,
) (chan []interface{}, *fireback.IError) {
	return fireback.YamlExporterChannelT[PaymentParameterEntity](query, PaymentParameterActions.Query, PaymentParameterPreloadRelations)
}
func PaymentParameterActionImport(
	dto interface{}, query fireback.QueryDSL,
) *fireback.IError {
	var json = jsoniter.ConfigCompatibleWithStandardLibrary
	var content PaymentParameterEntity
	cx, err2 := json.Marshal(dto)
	if err2 != nil {
		return fireback.Create401Error(&fireback.FirebackMessages.InvalidContent, []string{})
	}
	json.Unmarshal(cx, &content)
	_, err := PaymentParameterActions.Create(&content, query)
	return err
}

var PaymentParameterCommonCliFlags = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "pos-id",
		Required: false,
		Usage:    `User it's the same value as posId (string)`,
	},
	&cli.StringFlag{
		Name:     "merchant-id",
		Required: false,
		Usage:    `Merchant Id is said to be same as posId, but we collect it anyway (string)`,
	},
	&cli.StringFlag{
		Name:     "crc",
		Required: false,
		Usage:    `CRC is got from the payment provider (string)`,
	},
	&cli.StringFlag{
		Name:     "secret-id",
		Required: false,
		Usage:    `secretId it's the samevalue as key for reports (API key). (string)`,
	},
	&cli.StringFlag{
		Name:     "url-return",
		Required: false,
		Usage:    `Used when transaction is done on payment provider side (string)`,
	},
	&cli.StringFlag{
		Name:     "url-status",
		Required: false,
		Usage:    `Used to send notification from payment provider. (string)`,
	},
	&cli.StringFlag{
		Name:     "currency",
		Required: false,
		Usage:    `The currency that transactions will be. (string)`,
	},
	&cli.StringFlag{
		Name:     "country",
		Required: false,
		Usage:    `Country codes compatible with ISO, e.g. PL, DE, etc. (string)`,
		Value:    `PL`,
	},
	&cli.StringFlag{
		Name:     "payment-page-url",
		Required: false,
		Usage:    `The location that transaction would go when it's already registered. You can use {Token} placeholder and it would be replaced. (string)`,
		Value:    `https://secure.przelewy24.pl/trnRequest/{TOKEN}`,
	},
	&cli.StringFlag{
		Name:     "register-api-url",
		Required: false,
		Usage:    `Url that would be used to register a transaction (string)`,
		Value:    `https://sandbox.przelewy24.pl/api/v1/transaction/register`,
	},
	&cli.StringFlag{
		Name:     "verify-api-url",
		Required: false,
		Usage:    `The url which will be used to verify the transaction notification (string)`,
		Value:    `https://sandbox.przelewy24.pl/api/v1/transaction/verify`,
	},
}
var PaymentParameterCommonInteractiveCliFlags = []fireback.CliInteractiveFlag{
	{
		Name:        "posId",
		StructField: "PosId",
		Required:    false,
		Recommended: false,
		Usage:       `User it's the same value as posId`,
		Type:        "string",
	},
	{
		Name:        "merchantId",
		StructField: "MerchantId",
		Required:    false,
		Recommended: false,
		Usage:       `Merchant Id is said to be same as posId, but we collect it anyway`,
		Type:        "string",
	},
	{
		Name:        "crc",
		StructField: "Crc",
		Required:    false,
		Recommended: false,
		Usage:       `CRC is got from the payment provider`,
		Type:        "string",
	},
	{
		Name:        "secretId",
		StructField: "SecretId",
		Required:    false,
		Recommended: false,
		Usage:       `secretId it's the samevalue as key for reports (API key).`,
		Type:        "string",
	},
	{
		Name:        "urlReturn",
		StructField: "UrlReturn",
		Required:    false,
		Recommended: false,
		Usage:       `Used when transaction is done on payment provider side`,
		Type:        "string",
	},
	{
		Name:        "urlStatus",
		StructField: "UrlStatus",
		Required:    false,
		Recommended: false,
		Usage:       `Used to send notification from payment provider.`,
		Type:        "string",
	},
	{
		Name:        "currency",
		StructField: "Currency",
		Required:    false,
		Recommended: false,
		Usage:       `The currency that transactions will be.`,
		Type:        "string",
	},
	{
		Name:        "country",
		StructField: "Country",
		Required:    false,
		Recommended: false,
		Usage:       `Country codes compatible with ISO, e.g. PL, DE, etc.`,
		Type:        "string",
	},
	{
		Name:        "paymentPageUrl",
		StructField: "PaymentPageUrl",
		Required:    false,
		Recommended: false,
		Usage:       `The location that transaction would go when it's already registered. You can use {Token} placeholder and it would be replaced.`,
		Type:        "string",
	},
	{
		Name:        "registerApiUrl",
		StructField: "RegisterApiUrl",
		Required:    false,
		Recommended: false,
		Usage:       `Url that would be used to register a transaction`,
		Type:        "string",
	},
	{
		Name:        "verifyApiUrl",
		StructField: "VerifyApiUrl",
		Required:    false,
		Recommended: false,
		Usage:       `The url which will be used to verify the transaction notification`,
		Type:        "string",
	},
}
var PaymentParameterCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "pos-id",
		Required: false,
		Usage:    `User it's the same value as posId (string)`,
	},
	&cli.StringFlag{
		Name:     "merchant-id",
		Required: false,
		Usage:    `Merchant Id is said to be same as posId, but we collect it anyway (string)`,
	},
	&cli.StringFlag{
		Name:     "crc",
		Required: false,
		Usage:    `CRC is got from the payment provider (string)`,
	},
	&cli.StringFlag{
		Name:     "secret-id",
		Required: false,
		Usage:    `secretId it's the samevalue as key for reports (API key). (string)`,
	},
	&cli.StringFlag{
		Name:     "url-return",
		Required: false,
		Usage:    `Used when transaction is done on payment provider side (string)`,
	},
	&cli.StringFlag{
		Name:     "url-status",
		Required: false,
		Usage:    `Used to send notification from payment provider. (string)`,
	},
	&cli.StringFlag{
		Name:     "currency",
		Required: false,
		Usage:    `The currency that transactions will be. (string)`,
	},
	&cli.StringFlag{
		Name:     "country",
		Required: false,
		Usage:    `Country codes compatible with ISO, e.g. PL, DE, etc. (string)`,
		Value:    `PL`,
	},
	&cli.StringFlag{
		Name:     "payment-page-url",
		Required: false,
		Usage:    `The location that transaction would go when it's already registered. You can use {Token} placeholder and it would be replaced. (string)`,
		Value:    `https://secure.przelewy24.pl/trnRequest/{TOKEN}`,
	},
	&cli.StringFlag{
		Name:     "register-api-url",
		Required: false,
		Usage:    `Url that would be used to register a transaction (string)`,
		Value:    `https://sandbox.przelewy24.pl/api/v1/transaction/register`,
	},
	&cli.StringFlag{
		Name:     "verify-api-url",
		Required: false,
		Usage:    `The url which will be used to verify the transaction notification (string)`,
		Value:    `https://sandbox.przelewy24.pl/api/v1/transaction/verify`,
	},
}
var PaymentParameterCreateCmd cli.Command = PAYMENT_PARAMETER_ACTION_POST_ONE.ToCli()
var PaymentParameterCreateInteractiveCmd cli.Command = cli.Command{
	Name:  "ic",
	Usage: "Creates a new entity, using requied fields in an interactive name",
	Flags: []cli.Flag{
		&cli.BoolFlag{
			Name:  "all",
			Usage: "Interactively asks for all inputs, not only required ones",
		},
	},
	Action: func(c *cli.Context) {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PAYMENT_PARAMETER_CREATE},
			AllowOnRoot:    true,
		})
		entity := &PaymentParameterEntity{}
		fireback.PopulateInteractively(entity, c, PaymentParameterCommonInteractiveCliFlags)
		if entity, err := PaymentParameterActions.Create(entity, query); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := yaml.Marshal(entity)
			fmt.Println(fireback.FormatYamlKeys(string(f)))
		}
	},
}
var PaymentParameterUpdateCmd cli.Command = cli.Command{
	Name:    "update",
	Aliases: []string{"u"},
	Flags:   PaymentParameterCommonCliFlagsOptional,
	Usage:   "Updates entity by passing the parameters",
	Action: func(c *cli.Context) error {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PAYMENT_PARAMETER_UPDATE},
			AllowOnRoot:    true,
		})
		entity := CastPaymentParameterFromCli(c)
		if entity, err := PaymentParameterActions.Update(query, entity); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := json.MarshalIndent(entity, "", "  ")
			fmt.Println(string(f))
		}
		return nil
	},
}

func (x *PaymentParameterEntity) FromCli(c *cli.Context) *PaymentParameterEntity {
	return CastPaymentParameterFromCli(c)
}
func CastPaymentParameterFromCli(c *cli.Context) *PaymentParameterEntity {
	template := &PaymentParameterEntity{}
	if c.IsSet("uid") {
		template.UniqueId = c.String("uid")
	}
	if c.IsSet("pid") {
		template.ParentId = fireback.NewStringAutoNull(c.String("pid"))
	}
	if c.IsSet("pos-id") {
		template.PosId = c.String("pos-id")
	}
	if c.IsSet("merchant-id") {
		template.MerchantId = c.String("merchant-id")
	}
	if c.IsSet("crc") {
		template.Crc = c.String("crc")
	}
	if c.IsSet("secret-id") {
		template.SecretId = c.String("secret-id")
	}
	if c.IsSet("url-return") {
		template.UrlReturn = c.String("url-return")
	}
	if c.IsSet("url-status") {
		template.UrlStatus = c.String("url-status")
	}
	if c.IsSet("currency") {
		template.Currency = c.String("currency")
	}
	if c.IsSet("country") {
		template.Country = c.String("country")
	}
	if c.IsSet("payment-page-url") {
		template.PaymentPageUrl = c.String("payment-page-url")
	}
	if c.IsSet("register-api-url") {
		template.RegisterApiUrl = c.String("register-api-url")
	}
	if c.IsSet("verify-api-url") {
		template.VerifyApiUrl = c.String("verify-api-url")
	}
	return template
}
func PaymentParameterSyncSeederFromFs(fsRef *embed.FS, fileNames []string, q fireback.QueryDSL) {
	fireback.SeederFromFSImport(
		q,
		PaymentParameterActions.Create,
		reflect.ValueOf(&PaymentParameterEntity{}).Elem(),
		fsRef,
		fileNames,
		true,
	)
}
func PaymentParameterSyncSeeders() {
	fireback.SeederFromFSImport(
		fireback.QueryDSL{WorkspaceId: fireback.USER_SYSTEM},
		PaymentParameterActions.Create,
		reflect.ValueOf(&PaymentParameterEntity{}).Elem(),
		paymentParameterSeedersFs,
		[]string{},
		true,
	)
}
func PaymentParameterImportMocks() {
	fireback.SeederFromFSImport(
		fireback.QueryDSL{},
		PaymentParameterActions.Create,
		reflect.ValueOf(&PaymentParameterEntity{}).Elem(),
		&mocks.ViewsFs,
		[]string{},
		false,
	)
}
func PaymentParameterWriteQueryMock(ctx fireback.MockQueryContext) {
	for _, lang := range ctx.Languages {
		itemsPerPage := 9999
		if ctx.ItemsPerPage > 0 {
			itemsPerPage = ctx.ItemsPerPage
		}
		f := fireback.QueryDSL{ItemsPerPage: itemsPerPage, Language: lang, WithPreloads: ctx.WithPreloads, Deep: true}
		items, count, _ := PaymentParameterActions.Query(f)
		result := fireback.QueryEntitySuccessResult(f, items, count)
		fireback.WriteMockDataToFile(lang, "", "PaymentParameter", result)
	}
}
func PaymentParametersActionQueryString(keyword string, page int) ([]string, *fireback.QueryResultMeta, error) {
	searchFields := []string{
		`unique_id %"{keyword}"%`,
		`name %"{keyword}"%`,
	}
	m := func(item *PaymentParameterEntity) string {
		label := item.UniqueId
		// if item.Name != nil {
		// 	label += " >>> " + *item.Name
		// }
		return label
	}
	query := fireback.QueryStringCastCli(searchFields, keyword, page)
	items, meta, err := PaymentParameterActions.Query(query)
	stringItems := []string{}
	for _, item := range items {
		label := m(item)
		stringItems = append(stringItems, label)
	}
	return stringItems, meta, err
}

var PaymentParameterDevCommands = []cli.Command{
	PaymentParameterWipeCmd,
	{
		Name:  "mock",
		Usage: "Generates mock records based on the entity definition",
		Flags: []cli.Flag{
			&cli.IntFlag{
				Name:  "count",
				Usage: "how many activation key do you need to be generated and stored in database",
				Value: 10,
			},
			&cli.BoolFlag{
				Name:  "batch",
				Usage: "Multiple insert into database mode. Might miss children and relations at the moment",
			},
		},
		Action: func(c *cli.Context) error {
			query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
				ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PAYMENT_PARAMETER_CREATE},
				AllowOnRoot:    true,
			})
			if c.Bool("batch") {
				PaymentParameterActionSeederMultiple(query, c.Int("count"))
			} else {
				PaymentParameterActionSeeder(query, c.Int("count"))
			}
			return nil
		},
	},
	{
		Name:    "init",
		Aliases: []string{"i"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Creates a basic seeder file for you, based on the definition module we have. You can populate this file as an example",
		Action: func(c *cli.Context) error {
			seed := PaymentParameterActions.SeederInit()
			fireback.CommonInitSeeder(strings.TrimSpace(c.String("format")), seed)
			return nil
		},
	},
	cli.Command{
		Name:  "mlist",
		Usage: "Prints the list of embedded mocks into the app",
		Action: func(c *cli.Context) error {
			if entity, err := fireback.GetSeederFilenames(&mocks.ViewsFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "msync",
		Usage: "Tries to sync mocks into the system",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportEmbedCmd(c,
				PaymentParameterActions.Create,
				reflect.ValueOf(&PaymentParameterEntity{}).Elem(),
				&mocks.ViewsFs,
			)
			return nil
		},
	},
}
var PaymentParameterImportExportCommands = []cli.Command{
	{
		Name:    "validate",
		Aliases: []string{"v"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "file",
				Usage: "Validates an import file, such as yaml, json, csv, and gives some insights how the after import it would look like",
				Value: "payment-parameter-seeder-payment-parameter.yml",
				// Uncomment before publish, they need to specify
				// Required: true,
			},
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Reads a yaml file containing an array of payment-parameters, you can run this to validate if your import file is correct, and how it would look like after import",
		Action: func(c *cli.Context) error {
			data := &[]PaymentParameterEntity{}
			fireback.ReadYamlFile(c.String("file"), data)
			fmt.Println(data)
			return nil
		},
	},
	cli.Command{
		Name:  "slist",
		Usage: "Prints the list of files attached to this module for syncing or bootstrapping project",
		Action: func(c *cli.Context) error {
			if entity, err := fireback.GetSeederFilenames(paymentParameterSeedersFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "ssync",
		Usage: "Tries to sync the embedded content into the database, the list could be seen by 'slist' command",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportEmbedCmd(c,
				PaymentParameterActions.Create,
				reflect.ValueOf(&PaymentParameterEntity{}).Elem(),
				paymentParameterSeedersFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:    "export",
		Aliases: []string{"e"},
		Flags: append(fireback.CommonQueryFlags,
			&cli.StringFlag{
				Name:     "file",
				Usage:    "The address of file you want the csv/yaml/json be exported to",
				Required: true,
			}),
		Usage: "Exports a query results into the csv/yaml/json format",
		Action: func(c *cli.Context) error {
			return fireback.CommonCliExportCmd2(c,
				PaymentParameterEntityStream,
				reflect.ValueOf(&PaymentParameterEntity{}).Elem(),
				c.String("file"),
				&metas.MetaFs,
				"PaymentParameterFieldMap.yml",
				PaymentParameterPreloadRelations,
			)
		},
	},
	cli.Command{
		Name: "import",
		Flags: append(
			append(
				fireback.CommonQueryFlags,
				&cli.StringFlag{
					Name:     "file",
					Usage:    "The address of file you want the csv be imported from",
					Required: true,
				}),
			PaymentParameterCommonCliFlagsOptional...,
		),
		Usage: "imports csv/yaml/json file and place it and its children into database",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportCmdAuthorized(c,
				PaymentParameterActions.Create,
				reflect.ValueOf(&PaymentParameterEntity{}).Elem(),
				c.String("file"),
				&fireback.SecurityModel{
					ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PAYMENT_PARAMETER_CREATE},
					AllowOnRoot:    true,
				},
				func() PaymentParameterEntity {
					v := CastPaymentParameterFromCli(c)
					return *v
				},
			)
			return nil
		},
	},
}
var PaymentParameterCliCommands []cli.Command = []cli.Command{
	PAYMENT_PARAMETER_ACTION_QUERY.ToCli(),
	PAYMENT_PARAMETER_ACTION_TABLE.ToCli(),
	PaymentParameterCreateCmd,
	PaymentParameterUpdateCmd,
	PaymentParameterAskCmd,
	PaymentParameterCreateInteractiveCmd,
	fireback.GetCommonRemoveQuery(
		reflect.ValueOf(&PaymentParameterEntity{}).Elem(),
		PaymentParameterActions.Remove,
	),
}

func PaymentParameterCliFn() cli.Command {
	commands := append(PaymentParameterImportExportCommands, PaymentParameterCliCommands...)
	if !fireback.GetConfig().Production {
		commands = append(commands, PaymentParameterDevCommands...)
	}
	return cli.Command{
		Name:        "param",
		Description: "PaymentParameters module actions",
		Usage:       `Keeps the information about payment Przelewy24 payment provider`,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "language",
				Value: "en",
			},
		},
		Subcommands: commands,
	}
}

var PAYMENT_PARAMETER_ACTION_TABLE = fireback.Module3Action{
	Name:          "table",
	ActionAliases: []string{"t"},
	Flags:         fireback.CommonQueryFlags,
	Description:   "Table formatted queries all of the entities in database based on the standard query format",
	Action:        PaymentParameterActions.Query,
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		fireback.CommonCliTableCmd2(c,
			PaymentParameterActions.Query,
			security,
			reflect.ValueOf(&PaymentParameterEntity{}).Elem(),
		)
		return nil
	},
}
var PAYMENT_PARAMETER_ACTION_QUERY = fireback.Module3Action{
	Method: "GET",
	Url:    "/payment-parameters",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PAYMENT_PARAMETER_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			qs := &PaymentParameterEntityQs{}
			fireback.HttpQueryEntity(c, PaymentParameterActions.Query, qs)
		},
	},
	Format:         "QUERY",
	Action:         PaymentParameterActions.Query,
	ResponseEntity: &[]PaymentParameterEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "PaymentParameterEntity",
	},
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		qs := &PaymentParameterEntityQs{}
		fireback.CommonCliQueryCmd3(
			c,
			PaymentParameterActions.Query,
			security,
			qs,
		)
		return nil
	},
	CliName:       "query",
	Name:          "query",
	ActionAliases: []string{"q"},
	Flags:         append(fireback.CommonQueryFlags, PaymentParameterQsFlags...),
	Description:   "Queries all of the entities in database based on the standard query format (s+)",
}
var PAYMENT_PARAMETER_ACTION_EXPORT = fireback.Module3Action{
	Method: "GET",
	Url:    "/payment-parameters/export",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PAYMENT_PARAMETER_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpStreamFileChannel(c, PaymentParameterActionExport)
		},
	},
	Format:         "QUERY",
	Action:         PaymentParameterActionExport,
	ResponseEntity: &[]PaymentParameterEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "PaymentParameterEntity",
	},
}
var PAYMENT_PARAMETER_ACTION_GET_ONE = fireback.Module3Action{
	Method: "GET",
	Url:    "/payment-parameter/:uniqueId",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PAYMENT_PARAMETER_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpGetEntity(c, PaymentParameterActions.GetOne)
		},
	},
	Format:         "GET_ONE",
	Action:         PaymentParameterActions.GetOne,
	ResponseEntity: &PaymentParameterEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "PaymentParameterEntity",
	},
}
var PAYMENT_PARAMETER_ACTION_POST_ONE = fireback.Module3Action{
	Name:          "create",
	ActionAliases: []string{"c"},
	Description:   "Create new paymentParameter",
	Flags:         PaymentParameterCommonCliFlags,
	Method:        "POST",
	Url:           "/payment-parameter",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PAYMENT_PARAMETER_CREATE},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpPostEntity(c, PaymentParameterActions.Create)
		},
	},
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		result, err := fireback.CliPostEntity(c, PaymentParameterActions.Create, security)
		fireback.HandleActionInCli(c, result, err, map[string]map[string]string{})
		return err
	},
	Action:         PaymentParameterActions.Create,
	Format:         "POST_ONE",
	RequestEntity:  &PaymentParameterEntity{},
	ResponseEntity: &PaymentParameterEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "PaymentParameterEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "PaymentParameterEntity",
	},
}
var PAYMENT_PARAMETER_ACTION_PATCH = fireback.Module3Action{
	Name:          "update",
	ActionAliases: []string{"u"},
	Flags:         PaymentParameterCommonCliFlagsOptional,
	Method:        "PATCH",
	Url:           "/payment-parameter",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PAYMENT_PARAMETER_UPDATE},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntity(c, PaymentParameterActions.Update)
		},
	},
	Action:         PaymentParameterActions.Update,
	RequestEntity:  &PaymentParameterEntity{},
	ResponseEntity: &PaymentParameterEntity{},
	Format:         "PATCH_ONE",
	Out: &fireback.Module3ActionBody{
		Entity: "PaymentParameterEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "PaymentParameterEntity",
	},
}
var PAYMENT_PARAMETER_ACTION_PATCH_BULK = fireback.Module3Action{
	Method: "PATCH",
	Url:    "/payment-parameters",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PAYMENT_PARAMETER_UPDATE},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntities(c, PaymentParameterActionBulkUpdate)
		},
	},
	Action:         PaymentParameterActionBulkUpdate,
	Format:         "PATCH_BULK",
	RequestEntity:  &fireback.BulkRecordRequest[PaymentParameterEntity]{},
	ResponseEntity: &fireback.BulkRecordRequest[PaymentParameterEntity]{},
	Out: &fireback.Module3ActionBody{
		Entity: "PaymentParameterEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "PaymentParameterEntity",
	},
}
var PAYMENT_PARAMETER_ACTION_DELETE = fireback.Module3Action{
	Method: "DELETE",
	Url:    "/payment-parameter",
	Format: "DELETE_DSL",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PAYMENT_PARAMETER_DELETE},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpRemoveEntity(c, PaymentParameterActions.Remove)
		},
	},
	Action:         PaymentParameterActions.Remove,
	RequestEntity:  &fireback.DeleteRequest{},
	ResponseEntity: &fireback.DeleteResponse{},
	TargetEntity:   &PaymentParameterEntity{},
}
var PAYMENT_PARAMETER_ACTION_DISTINCT_PATCH_ONE = fireback.Module3Action{
	Method: "PATCH",
	Url:    "/payment-parameter/distinct",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PAYMENT_PARAMETER_UPDATE_DISTINCT_WORKSPACE},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntity(c, PaymentParameterDistinctActionUpdate)
		},
	},
	Action:         PaymentParameterDistinctActionUpdate,
	Format:         "PATCH_ONE",
	RequestEntity:  &PaymentParameterEntity{},
	ResponseEntity: &PaymentParameterEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "PaymentParameterEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "PaymentParameterEntity",
	},
}
var PAYMENT_PARAMETER_ACTION_DISTINCT_GET_ONE = fireback.Module3Action{
	Method: "GET",
	Url:    "/payment-parameter/distinct",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PAYMENT_PARAMETER_GET_DISTINCT_WORKSPACE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpGetEntity(c, PaymentParameterDistinctActionGetOne)
		},
	},
	Action:         PaymentParameterDistinctActionGetOne,
	Format:         "GET_ONE",
	ResponseEntity: &PaymentParameterEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "PaymentParameterEntity",
	},
}

/**
 *	Override this function on PaymentParameterEntityHttp.go,
 *	In order to add your own http
 **/
var AppendPaymentParameterRouter = func(r *[]fireback.Module3Action) {}

func GetPaymentParameterModule3Actions() []fireback.Module3Action {
	routes := []fireback.Module3Action{
		PAYMENT_PARAMETER_ACTION_QUERY,
		PAYMENT_PARAMETER_ACTION_EXPORT,
		PAYMENT_PARAMETER_ACTION_GET_ONE,
		PAYMENT_PARAMETER_ACTION_POST_ONE,
		PAYMENT_PARAMETER_ACTION_PATCH,
		PAYMENT_PARAMETER_ACTION_PATCH_BULK,
		PAYMENT_PARAMETER_ACTION_DELETE,
		PAYMENT_PARAMETER_ACTION_DISTINCT_PATCH_ONE,
		PAYMENT_PARAMETER_ACTION_DISTINCT_GET_ONE,
	}
	// Append user defined functions
	AppendPaymentParameterRouter(&routes)
	return routes
}

var PERM_ROOT_PAYMENT_PARAMETER = fireback.PermissionInfo{
	CompleteKey: "root.manage.payment.payment-parameter.*",
	Name:        "Entire payment parameter actions (*)",
	Description: "",
}
var PERM_ROOT_PAYMENT_PARAMETER_DELETE = fireback.PermissionInfo{
	CompleteKey: "root.manage.payment.payment-parameter.delete",
	Name:        "Delete payment parameter",
	Description: "",
}
var PERM_ROOT_PAYMENT_PARAMETER_CREATE = fireback.PermissionInfo{
	CompleteKey: "root.manage.payment.payment-parameter.create",
	Name:        "Create payment parameter",
	Description: "",
}
var PERM_ROOT_PAYMENT_PARAMETER_UPDATE = fireback.PermissionInfo{
	CompleteKey: "root.manage.payment.payment-parameter.update",
	Name:        "Update payment parameter",
	Description: "",
}
var PERM_ROOT_PAYMENT_PARAMETER_QUERY = fireback.PermissionInfo{
	CompleteKey: "root.manage.payment.payment-parameter.query",
	Name:        "Query payment parameter",
	Description: "",
}
var PERM_ROOT_PAYMENT_PARAMETER_GET_DISTINCT_WORKSPACE = fireback.PermissionInfo{
	CompleteKey: "root.manage.payment.payment-parameter.get-distinct-workspace",
	Name:        "Get payment parameter Distinct",
	Description: "",
}
var PERM_ROOT_PAYMENT_PARAMETER_UPDATE_DISTINCT_WORKSPACE = fireback.PermissionInfo{
	CompleteKey: "root.manage.payment.payment-parameter.update-distinct-workspace",
	Name:        "Update payment parameter Distinct",
	Description: "",
}
var ALL_PAYMENT_PARAMETER_PERMISSIONS = []fireback.PermissionInfo{
	PERM_ROOT_PAYMENT_PARAMETER_DELETE,
	PERM_ROOT_PAYMENT_PARAMETER_CREATE,
	PERM_ROOT_PAYMENT_PARAMETER_UPDATE,
	PERM_ROOT_PAYMENT_PARAMETER_GET_DISTINCT_WORKSPACE,
	PERM_ROOT_PAYMENT_PARAMETER_UPDATE_DISTINCT_WORKSPACE,
	PERM_ROOT_PAYMENT_PARAMETER_QUERY,
	PERM_ROOT_PAYMENT_PARAMETER,
}

func PaymentParameterDistinctActionUpdate(
	query fireback.QueryDSL,
	fields *PaymentParameterEntity,
) (*PaymentParameterEntity, *fireback.IError) {
	query.UniqueId = query.UserId
	entity, err := PaymentParameterActions.GetByWorkspace(query)
	// Because we are updating by workspace, the unique id and workspace id
	// are important to be the same.
	fields.UniqueId = query.WorkspaceId
	fields.WorkspaceId = fireback.NewString(query.WorkspaceId)
	if err != nil || entity.UniqueId == "" {
		return PaymentParameterActions.Create(fields, query)
	} else {
		return PaymentParameterActions.Update(query, fields)
	}
}
func PaymentParameterDistinctActionGetOne(
	query fireback.QueryDSL,
) (*PaymentParameterEntity, *fireback.IError) {
	// Get's by workspace
	entity, err := PaymentParameterActions.GetByWorkspace(query)
	if err != nil && err.HttpCode == 404 {
		return &PaymentParameterEntity{}, nil
	}
	return entity, err
}
func NewPaymentParameterCreatedEvent(
	payload *PaymentParameterEntity,
	query *fireback.QueryDSL,
) (*fireback.Event, error) {
	event := &fireback.Event{
		Name:    "PaymentParameterCreated",
		Payload: payload,
		Security: &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{
				PERM_ROOT_PAYMENT_PARAMETER_QUERY,
			},
		},
		CacheKey: "*payment.PaymentParameterEntity",
	}
	// Apply the source of the event based on querydsl
	fireback.ApplyQueryDslContextToEvent(event, *query)
	return event, nil
}
func NewPaymentParameterUpdatedEvent(
	payload *PaymentParameterEntity,
	query *fireback.QueryDSL,
) (*fireback.Event, error) {
	event := &fireback.Event{
		Name:    "PaymentParameterUpdated",
		Payload: payload,
		Security: &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{
				PERM_ROOT_PAYMENT_PARAMETER_QUERY,
			},
		},
		CacheKey: "*payment.PaymentParameterEntity",
	}
	// Apply the source of the event based on querydsl
	fireback.ApplyQueryDslContextToEvent(event, *query)
	return event, nil
}

var PaymentParameterEntityBundle = fireback.EntityBundle{
	Permissions: ALL_PAYMENT_PARAMETER_PERMISSIONS,
	// Cli command has been exluded, since we use module to wrap all the entities
	// to be more easier to wrap up.
	// Create your own bundle if you need with Cli
	//CliCommands: []cli.Command{
	//	PaymentParameterCliFn(),
	//},
	Actions:      GetPaymentParameterModule3Actions(),
	MockProvider: PaymentParameterImportMocks,
	AutoMigrationEntities: []interface{}{
		&PaymentParameterEntity{},
	},
	MigrationScripts: []fireback.MigrationScript{},
}
