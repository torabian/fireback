package widget

/*
*	Generated by fireback 1.1.27
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"embed"
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/gookit/event"
	jsoniter "github.com/json-iterator/go"
	"github.com/schollz/progressbar/v3"
	metas "github.com/torabian/fireback/modules/widget/metas"
	mocks "github.com/torabian/fireback/modules/widget/mocks/Widget"
	seeders "github.com/torabian/fireback/modules/widget/seeders/Widget"
	"github.com/torabian/fireback/modules/workspaces"
	"github.com/urfave/cli"
	"gopkg.in/yaml.v2"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	reflect "reflect"
	"strings"
)

var widgetSeedersFs = &seeders.ViewsFs

func ResetWidgetSeeders(fs *embed.FS) {
	widgetSeedersFs = fs
}

type WidgetEntity struct {
	Visibility       *string                 `json:"visibility,omitempty" yaml:"visibility,omitempty"`
	WorkspaceId      *string                 `json:"workspaceId,omitempty" yaml:"workspaceId,omitempty"`
	LinkerId         *string                 `json:"linkerId,omitempty" yaml:"linkerId,omitempty"`
	ParentId         *string                 `json:"parentId,omitempty" yaml:"parentId,omitempty"`
	IsDeletable      *bool                   `json:"isDeletable,omitempty" yaml:"isDeletable,omitempty" gorm:"default:true"`
	IsUpdatable      *bool                   `json:"isUpdatable,omitempty" yaml:"isUpdatable,omitempty" gorm:"default:true"`
	UserId           *string                 `json:"userId,omitempty" yaml:"userId,omitempty"`
	Rank             int64                   `json:"rank,omitempty" gorm:"type:int;name:rank"`
	ID               uint                    `gorm:"primaryKey;autoIncrement" json:"id,omitempty" yaml:"id,omitempty"`
	UniqueId         string                  `json:"uniqueId,omitempty" gorm:"unique;not null;size:100;" yaml:"uniqueId,omitempty"`
	Created          int64                   `json:"created,omitempty" yaml:"created,omitempty" gorm:"autoUpdateTime:nano"`
	Updated          int64                   `json:"updated,omitempty" yaml:"updated,omitempty"`
	Deleted          int64                   `json:"deleted,omitempty" yaml:"deleted,omitempty"`
	CreatedFormatted string                  `json:"createdFormatted,omitempty" yaml:"createdFormatted,omitempty" sql:"-" gorm:"-"`
	UpdatedFormatted string                  `json:"updatedFormatted,omitempty" yaml:"updatedFormatted,omitempty" sql:"-" gorm:"-"`
	Name             *string                 `json:"name" yaml:"name"        translate:"true"  `
	Family           *string                 `json:"family" yaml:"family"        `
	ProviderKey      *string                 `json:"providerKey" yaml:"providerKey"        `
	Translations     []*WidgetEntityPolyglot `json:"translations,omitempty" yaml:"translations,omitempty" gorm:"foreignKey:LinkerId;references:UniqueId;constraint:OnDelete:CASCADE"`
	Children         []*WidgetEntity         `csv:"-" gorm:"-" sql:"-" json:"children,omitempty" yaml:"children,omitempty"`
	LinkedTo         *WidgetEntity           `csv:"-" yaml:"-" gorm:"-" json:"-" sql:"-"`
}

func WidgetEntityStream(q workspaces.QueryDSL) (chan []*WidgetEntity, *workspaces.QueryResultMeta, error) {
	cn := make(chan []*WidgetEntity)
	q.ItemsPerPage = 50
	q.StartIndex = 0
	_, qrm, err := WidgetActionQuery(q)
	if err != nil {
		return nil, nil, err
	}
	go func() {
		for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
			items, _, _ := WidgetActionQuery(q)
			i += q.ItemsPerPage
			q.StartIndex = i
			cn <- items
		}
	}()
	return cn, qrm, nil
}

type WidgetEntityList struct {
	Items []*WidgetEntity
}

func NewWidgetEntityList(items []*WidgetEntity) *WidgetEntityList {
	return &WidgetEntityList{
		Items: items,
	}
}
func (x *WidgetEntityList) ToTree() *workspaces.TreeOperation[WidgetEntity] {
	return workspaces.NewTreeOperation(
		x.Items,
		func(t *WidgetEntity) string {
			if t.ParentId == nil {
				return ""
			}
			return *t.ParentId
		},
		func(t *WidgetEntity) string {
			return t.UniqueId
		},
	)
}

var WidgetPreloadRelations []string = []string{}
var WIDGET_EVENT_CREATED = "widget.created"
var WIDGET_EVENT_UPDATED = "widget.updated"
var WIDGET_EVENT_DELETED = "widget.deleted"
var WIDGET_EVENTS = []string{
	WIDGET_EVENT_CREATED,
	WIDGET_EVENT_UPDATED,
	WIDGET_EVENT_DELETED,
}

type WidgetFieldMap struct {
	Name        workspaces.TranslatedString `yaml:"name"`
	Family      workspaces.TranslatedString `yaml:"family"`
	ProviderKey workspaces.TranslatedString `yaml:"providerKey"`
}

var WidgetEntityMetaConfig map[string]int64 = map[string]int64{}
var WidgetEntityJsonSchema = workspaces.ExtractEntityFields(reflect.ValueOf(&WidgetEntity{}))

type WidgetEntityPolyglot struct {
	LinkerId   string `gorm:"uniqueId;not null;size:100;" json:"linkerId,omitempty" yaml:"linkerId,omitempty"`
	LanguageId string `gorm:"uniqueId;not null;size:100;" json:"languageId,omitempty" yaml:"languageId,omitempty"`
	Name       string `yaml:"name,omitempty" json:"name,omitempty"`
}

func entityWidgetFormatter(dto *WidgetEntity, query workspaces.QueryDSL) {
	if dto == nil {
		return
	}
	if dto.Created > 0 {
		dto.CreatedFormatted = workspaces.FormatDateBasedOnQuery(dto.Created, query)
	}
	if dto.Updated > 0 {
		dto.CreatedFormatted = workspaces.FormatDateBasedOnQuery(dto.Updated, query)
	}
}
func WidgetMockEntity() *WidgetEntity {
	stringHolder := "~"
	int64Holder := int64(10)
	float64Holder := float64(10)
	_ = stringHolder
	_ = int64Holder
	_ = float64Holder
	entity := &WidgetEntity{
		Name:        &stringHolder,
		Family:      &stringHolder,
		ProviderKey: &stringHolder,
	}
	return entity
}
func WidgetActionSeederMultiple(query workspaces.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	batchSize := 100
	bar := progressbar.Default(int64(count))
	// Collect entities in batches
	var entitiesBatch []*WidgetEntity
	for i := 1; i <= count; i++ {
		entity := WidgetMockEntity()
		entitiesBatch = append(entitiesBatch, entity)
		// When batch size is reached, perform the batch insert
		if len(entitiesBatch) == batchSize || i == count {
			// Insert batch
			_, err := WidgetMultiInsert(entitiesBatch, query)
			if err == nil {
				successInsert += len(entitiesBatch)
			} else {
				fmt.Println(err)
				failureInsert += len(entitiesBatch)
			}
			// Clear the batch after insert
			entitiesBatch = nil
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func WidgetActionSeeder(query workspaces.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	bar := progressbar.Default(int64(count))
	for i := 1; i <= count; i++ {
		entity := WidgetMockEntity()
		_, err := WidgetActionCreate(entity, query)
		if err == nil {
			successInsert++
		} else {
			fmt.Println(err)
			failureInsert++
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func (x *WidgetEntity) GetNameTranslated(language string) string {
	if x.Translations != nil && len(x.Translations) > 0 {
		for _, item := range x.Translations {
			if item.LanguageId == language {
				return item.Name
			}
		}
	}
	return ""
}
func (x *WidgetEntity) Seeder() string {
	obj := WidgetActionSeederInit()
	v, _ := json.MarshalIndent(obj, "", "  ")
	return string(v)
}
func WidgetActionSeederInit() *WidgetEntity {
	tildaRef := "~"
	_ = tildaRef
	entity := &WidgetEntity{
		Name:        &tildaRef,
		Family:      &tildaRef,
		ProviderKey: &tildaRef,
	}
	return entity
}
func WidgetAssociationCreate(dto *WidgetEntity, query workspaces.QueryDSL) error {
	return nil
}

/**
* These kind of content are coming from another entity, which is indepndent module
* If we want to create them, we need to do it before. This is not association.
**/
func WidgetRelationContentCreate(dto *WidgetEntity, query workspaces.QueryDSL) error {
	return nil
}
func WidgetRelationContentUpdate(dto *WidgetEntity, query workspaces.QueryDSL) error {
	return nil
}
func WidgetPolyglotCreateHandler(dto *WidgetEntity, query workspaces.QueryDSL) {
	if dto == nil {
		return
	}
	workspaces.PolyglotCreateHandler(dto, &WidgetEntityPolyglot{}, query)
}

/**
 * This will be validating your entity fully. Important note is that, you add validate:* tag
 * in your entity, it will automatically work here. For slices inside entity, make sure you add
 * extra line of AppendSliceErrors, otherwise they won't be detected
 */
func WidgetValidator(dto *WidgetEntity, isPatch bool) *workspaces.IError {
	err := workspaces.CommonStructValidatorPointer(dto, isPatch)
	return err
}

// Creates a set of natural language queries, which can be used with
// AI tools to create content or help with some tasks
var WidgetAskCmd cli.Command = cli.Command{
	Name:  "nlp",
	Usage: "Set of natural language queries which helps creating content or data",
	Subcommands: []cli.Command{
		{
			Name:  "sample",
			Usage: "Asks for generating sample by giving an example data",
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:  "format",
					Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
					Value: "yaml",
				},
				&cli.IntFlag{
					Name:  "count",
					Usage: "How many samples to ask",
					Value: 30,
				},
			},
			Action: func(c *cli.Context) error {
				v := &WidgetEntity{}
				format := c.String("format")
				request := "\033[1m" + `
I need you to create me an array of exact signature as the example given below,
with at least ` + fmt.Sprint(c.String("count")) + ` items, mock the content with few words, and guess the possible values
based on the common sense. I need the output to be a valid ` + format + ` file.
Make sure you wrap the entire array in 'items' field. Also before that, I provide some explanation of each field:
Name: (type: string) Description: 
Family: (type: string) Description: 
ProviderKey: (type: string) Description: 
And here is the actual object signature:
` + v.Seeder() + `
`
				fmt.Println(request)
				return nil
			},
		},
	},
}

func WidgetEntityPreSanitize(dto *WidgetEntity, query workspaces.QueryDSL) {
}
func WidgetEntityBeforeCreateAppend(dto *WidgetEntity, query workspaces.QueryDSL) {
	if dto.UniqueId == "" {
		dto.UniqueId = workspaces.UUID()
	}
	dto.WorkspaceId = &query.WorkspaceId
	dto.UserId = &query.UserId
	WidgetRecursiveAddUniqueId(dto, query)
}
func WidgetRecursiveAddUniqueId(dto *WidgetEntity, query workspaces.QueryDSL) {
}

/*
*
	Batch inserts, do not have all features that create
	operation does. Use it with unnormalized content,
	or read the source code carefully.
  This is not marked as an action, because it should not be available publicly
  at this moment.
*
*/
func WidgetMultiInsert(dtos []*WidgetEntity, query workspaces.QueryDSL) ([]*WidgetEntity, *workspaces.IError) {
	if len(dtos) > 0 {
		for index := range dtos {
			WidgetEntityPreSanitize(dtos[index], query)
			WidgetEntityBeforeCreateAppend(dtos[index], query)
		}
		var dbref *gorm.DB = nil
		if query.Tx == nil {
			dbref = workspaces.GetDbRef()
		} else {
			dbref = query.Tx
		}
		query.Tx = dbref
		err := dbref.Create(&dtos).Error
		if err != nil {
			return nil, workspaces.GormErrorToIError(err)
		}
	}
	return dtos, nil
}
func WidgetActionBatchCreateFn(dtos []*WidgetEntity, query workspaces.QueryDSL) ([]*WidgetEntity, *workspaces.IError) {
	if dtos != nil && len(dtos) > 0 {
		items := []*WidgetEntity{}
		for _, item := range dtos {
			s, err := WidgetActionCreateFn(item, query)
			if err != nil {
				return nil, err
			}
			items = append(items, s)
		}
		return items, nil
	}
	return dtos, nil
}
func WidgetDeleteEntireChildren(query workspaces.QueryDSL, dto *WidgetEntity) *workspaces.IError {
	// intentionally removed this. It's hard to implement it, and probably wrong without
	// proper on delete cascade
	return nil
}
func WidgetActionCreateFn(dto *WidgetEntity, query workspaces.QueryDSL) (*WidgetEntity, *workspaces.IError) {
	// 1. Validate always
	if iError := WidgetValidator(dto, false); iError != nil {
		return nil, iError
	}
	// 1.5 Sanitize the content coming of the front-end
	WidgetEntityPreSanitize(dto, query)
	// 2. Append the necessary information about user, workspace
	WidgetEntityBeforeCreateAppend(dto, query)
	// 3. Append the necessary translations, even if english
	WidgetPolyglotCreateHandler(dto, query)
	// 3.5. Create other entities if we want select from them
	WidgetRelationContentCreate(dto, query)
	// 4. Create the entity
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = workspaces.GetDbRef()
	} else {
		dbref = query.Tx
	}
	query.Tx = dbref
	err := dbref.Create(&dto).Error
	if err != nil {
		err := workspaces.GormErrorToIError(err)
		return dto, err
	}
	// 5. Create sub entities, objects or arrays, association to other entities
	WidgetAssociationCreate(dto, query)
	// 6. Fire the event into system
	event.MustFire(WIDGET_EVENT_CREATED, event.M{
		"entity":    dto,
		"entityKey": workspaces.GetTypeString(&WidgetEntity{}),
		"target":    "workspace",
		"unqiueId":  query.WorkspaceId,
	})
	return dto, nil
}
func WidgetActionGetOne(query workspaces.QueryDSL) (*WidgetEntity, *workspaces.IError) {
	refl := reflect.ValueOf(&WidgetEntity{})
	item, err := workspaces.GetOneEntity[WidgetEntity](query, refl)
	entityWidgetFormatter(item, query)
	return item, err
}
func WidgetActionGetByWorkspace(query workspaces.QueryDSL) (*WidgetEntity, *workspaces.IError) {
	refl := reflect.ValueOf(&WidgetEntity{})
	item, err := workspaces.GetOneByWorkspaceEntity[WidgetEntity](query, refl)
	entityWidgetFormatter(item, query)
	return item, err
}
func WidgetActionQuery(query workspaces.QueryDSL) ([]*WidgetEntity, *workspaces.QueryResultMeta, error) {
	refl := reflect.ValueOf(&WidgetEntity{})
	items, meta, err := workspaces.QueryEntitiesPointer[WidgetEntity](query, refl)
	for _, item := range items {
		entityWidgetFormatter(item, query)
	}
	return items, meta, err
}

var widgetMemoryItems []*WidgetEntity = []*WidgetEntity{}

func WidgetEntityIntoMemory() {
	q := workspaces.QueryDSL{
		ItemsPerPage: 500,
		StartIndex:   0,
	}
	_, qrm, _ := WidgetActionQuery(q)
	for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
		items, _, _ := WidgetActionQuery(q)
		widgetMemoryItems = append(widgetMemoryItems, items...)
		i += q.ItemsPerPage
		q.StartIndex = i
	}
}
func WidgetMemGet(id uint) *WidgetEntity {
	for _, item := range widgetMemoryItems {
		if item.ID == id {
			return item
		}
	}
	return nil
}
func WidgetMemJoin(items []uint) []*WidgetEntity {
	res := []*WidgetEntity{}
	for _, item := range items {
		v := WidgetMemGet(item)
		if v != nil {
			res = append(res, v)
		}
	}
	return res
}
func WidgetUpdateExec(dbref *gorm.DB, query workspaces.QueryDSL, fields *WidgetEntity) (*WidgetEntity, *workspaces.IError) {
	uniqueId := fields.UniqueId
	query.TriggerEventName = WIDGET_EVENT_UPDATED
	WidgetEntityPreSanitize(fields, query)
	var item WidgetEntity
	// If the entity is distinct by workspace, then the Query.WorkspaceId
	// which is selected is being used as the condition for create or update
	// if not, the unique Id is being used
	cond2 := &WidgetEntity{UniqueId: uniqueId}
	q := dbref.
		Where(cond2).
		FirstOrCreate(&item)
	err := q.UpdateColumns(fields).Error
	if err != nil {
		return nil, workspaces.GormErrorToIError(err)
	}
	query.Tx = dbref
	WidgetRelationContentUpdate(fields, query)
	WidgetPolyglotCreateHandler(fields, query)
	if ero := WidgetDeleteEntireChildren(query, fields); ero != nil {
		return nil, ero
	}
	// @meta(update has many)
	err = dbref.
		Preload(clause.Associations).
		Where(&WidgetEntity{UniqueId: uniqueId}).
		First(&item).Error
	event.MustFire(query.TriggerEventName, event.M{
		"entity":   &item,
		"target":   "workspace",
		"unqiueId": query.WorkspaceId,
	})
	if err != nil {
		return &item, workspaces.GormErrorToIError(err)
	}
	return &item, nil
}
func WidgetActionUpdateFn(query workspaces.QueryDSL, fields *WidgetEntity) (*WidgetEntity, *workspaces.IError) {
	if fields == nil {
		return nil, workspaces.Create401Error(&workspaces.WorkspacesMessages.BodyIsMissing, []string{})
	}
	// 1. Validate always
	if iError := WidgetValidator(fields, true); iError != nil {
		return nil, iError
	}
	// Let's not add this. I am not sure of the consequences
	// WidgetRecursiveAddUniqueId(fields, query)
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = workspaces.GetDbRef()
		var item *WidgetEntity
		vf := dbref.Transaction(func(tx *gorm.DB) error {
			dbref = tx
			var err *workspaces.IError
			item, err = WidgetUpdateExec(dbref, query, fields)
			if err == nil {
				return nil
			} else {
				return err
			}
		})
		return item, workspaces.CastToIError(vf)
	} else {
		dbref = query.Tx
		return WidgetUpdateExec(dbref, query, fields)
	}
}

var WidgetWipeCmd cli.Command = cli.Command{
	Name:  "wipe",
	Usage: "Wipes entire widgets ",
	Action: func(c *cli.Context) error {
		query := workspaces.CommonCliQueryDSLBuilderAuthorize(c, &workspaces.SecurityModel{
			ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_WIDGET_DELETE},
		})
		count, _ := WidgetActionWipeClean(query)
		fmt.Println("Removed", count, "of entities")
		return nil
	},
}

func WidgetActionRemove(query workspaces.QueryDSL) (int64, *workspaces.IError) {
	refl := reflect.ValueOf(&WidgetEntity{})
	query.ActionRequires = []workspaces.PermissionInfo{PERM_ROOT_WIDGET_DELETE}
	return workspaces.RemoveEntity[WidgetEntity](query, refl)
}
func WidgetActionWipeClean(query workspaces.QueryDSL) (int64, error) {
	var err error
	var count int64 = 0
	{
		subCount, subErr := workspaces.WipeCleanEntity[WidgetEntity]()
		if subErr != nil {
			fmt.Println("Error while wiping 'WidgetEntity'", subErr)
			return count, subErr
		} else {
			count += subCount
		}
	}
	return count, err
}
func WidgetActionBulkUpdate(
	query workspaces.QueryDSL, dto *workspaces.BulkRecordRequest[WidgetEntity]) (
	*workspaces.BulkRecordRequest[WidgetEntity], *workspaces.IError,
) {
	result := []*WidgetEntity{}
	err := workspaces.GetDbRef().Transaction(func(tx *gorm.DB) error {
		query.Tx = tx
		for _, record := range dto.Records {
			item, err := WidgetActionUpdate(query, record)
			if err != nil {
				return err
			} else {
				result = append(result, item)
			}
		}
		return nil
	})
	if err == nil {
		return dto, nil
	}
	return nil, err.(*workspaces.IError)
}
func (x *WidgetEntity) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}

var WidgetEntityMeta = workspaces.TableMetaData{
	EntityName:    "Widget",
	ExportKey:     "widgets",
	TableNameInDb: "fb_widget_entities",
	EntityObject:  &WidgetEntity{},
	ExportStream:  WidgetActionExportT,
	ImportQuery:   WidgetActionImport,
}

func WidgetActionExport(
	query workspaces.QueryDSL,
) (chan []byte, *workspaces.IError) {
	return workspaces.YamlExporterChannel[WidgetEntity](query, WidgetActionQuery, WidgetPreloadRelations)
}
func WidgetActionExportT(
	query workspaces.QueryDSL,
) (chan []interface{}, *workspaces.IError) {
	return workspaces.YamlExporterChannelT[WidgetEntity](query, WidgetActionQuery, WidgetPreloadRelations)
}
func WidgetActionImport(
	dto interface{}, query workspaces.QueryDSL,
) *workspaces.IError {
	var json = jsoniter.ConfigCompatibleWithStandardLibrary
	var content WidgetEntity
	cx, err2 := json.Marshal(dto)
	if err2 != nil {
		return workspaces.Create401Error(&workspaces.WorkspacesMessages.InvalidContent, []string{})
	}
	json.Unmarshal(cx, &content)
	_, err := WidgetActionCreate(&content, query)
	return err
}

var WidgetCommonCliFlags = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "name",
		Required: false,
		Usage:    `name`,
	},
	&cli.StringFlag{
		Name:     "family",
		Required: false,
		Usage:    `family`,
	},
	&cli.StringFlag{
		Name:     "provider-key",
		Required: false,
		Usage:    `providerKey`,
	},
}
var WidgetCommonInteractiveCliFlags = []workspaces.CliInteractiveFlag{
	{
		Name:        "name",
		StructField: "Name",
		Required:    false,
		Recommended: false,
		Usage:       `name`,
		Type:        "string",
	},
	{
		Name:        "family",
		StructField: "Family",
		Required:    false,
		Recommended: false,
		Usage:       `family`,
		Type:        "string",
	},
	{
		Name:        "providerKey",
		StructField: "ProviderKey",
		Required:    false,
		Recommended: false,
		Usage:       `providerKey`,
		Type:        "string",
	},
}
var WidgetCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "name",
		Required: false,
		Usage:    `name`,
	},
	&cli.StringFlag{
		Name:     "family",
		Required: false,
		Usage:    `family`,
	},
	&cli.StringFlag{
		Name:     "provider-key",
		Required: false,
		Usage:    `providerKey`,
	},
}
var WidgetCreateCmd cli.Command = WIDGET_ACTION_POST_ONE.ToCli()
var WidgetCreateInteractiveCmd cli.Command = cli.Command{
	Name:  "ic",
	Usage: "Creates a new entity, using requied fields in an interactive name",
	Flags: []cli.Flag{
		&cli.BoolFlag{
			Name:  "all",
			Usage: "Interactively asks for all inputs, not only required ones",
		},
	},
	Action: func(c *cli.Context) {
		query := workspaces.CommonCliQueryDSLBuilderAuthorize(c, &workspaces.SecurityModel{
			ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_WIDGET_CREATE},
		})
		entity := &WidgetEntity{}
		workspaces.PopulateInteractively(entity, c, WidgetCommonInteractiveCliFlags)
		if entity, err := WidgetActionCreate(entity, query); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := yaml.Marshal(entity)
			fmt.Println(workspaces.FormatYamlKeys(string(f)))
		}
	},
}
var WidgetUpdateCmd cli.Command = cli.Command{
	Name:    "update",
	Aliases: []string{"u"},
	Flags:   WidgetCommonCliFlagsOptional,
	Usage:   "Updates entity by passing the parameters",
	Action: func(c *cli.Context) error {
		query := workspaces.CommonCliQueryDSLBuilderAuthorize(c, &workspaces.SecurityModel{
			ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_WIDGET_UPDATE},
		})
		entity := CastWidgetFromCli(c)
		if entity, err := WidgetActionUpdate(query, entity); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := json.MarshalIndent(entity, "", "  ")
			fmt.Println(string(f))
		}
		return nil
	},
}

func (x *WidgetEntity) FromCli(c *cli.Context) *WidgetEntity {
	return CastWidgetFromCli(c)
}
func CastWidgetFromCli(c *cli.Context) *WidgetEntity {
	template := &WidgetEntity{}
	if c.IsSet("uid") {
		template.UniqueId = c.String("uid")
	}
	if c.IsSet("pid") {
		x := c.String("pid")
		template.ParentId = &x
	}
	if c.IsSet("name") {
		value := c.String("name")
		template.Name = &value
	}
	if c.IsSet("family") {
		value := c.String("family")
		template.Family = &value
	}
	if c.IsSet("provider-key") {
		value := c.String("provider-key")
		template.ProviderKey = &value
	}
	return template
}
func WidgetSyncSeederFromFs(fsRef *embed.FS, fileNames []string) {
	workspaces.SeederFromFSImport(
		workspaces.QueryDSL{},
		WidgetActionCreate,
		reflect.ValueOf(&WidgetEntity{}).Elem(),
		fsRef,
		fileNames,
		true,
	)
}
func WidgetSyncSeeders() {
	workspaces.SeederFromFSImport(
		workspaces.QueryDSL{WorkspaceId: workspaces.USER_SYSTEM},
		WidgetActionCreate,
		reflect.ValueOf(&WidgetEntity{}).Elem(),
		widgetSeedersFs,
		[]string{},
		true,
	)
}
func WidgetImportMocks() {
	workspaces.SeederFromFSImport(
		workspaces.QueryDSL{},
		WidgetActionCreate,
		reflect.ValueOf(&WidgetEntity{}).Elem(),
		&mocks.ViewsFs,
		[]string{},
		false,
	)
}
func WidgetWriteQueryMock(ctx workspaces.MockQueryContext) {
	for _, lang := range ctx.Languages {
		itemsPerPage := 9999
		if ctx.ItemsPerPage > 0 {
			itemsPerPage = ctx.ItemsPerPage
		}
		f := workspaces.QueryDSL{ItemsPerPage: itemsPerPage, Language: lang, WithPreloads: ctx.WithPreloads, Deep: true}
		items, count, _ := WidgetActionQuery(f)
		result := workspaces.QueryEntitySuccessResult(f, items, count)
		workspaces.WriteMockDataToFile(lang, "", "Widget", result)
	}
}
func WidgetsActionQueryString(keyword string, page int) ([]string, *workspaces.QueryResultMeta, error) {
	searchFields := []string{
		`unique_id %"{keyword}"%`,
		`name %"{keyword}"%`,
	}
	m := func(item *WidgetEntity) string {
		label := item.UniqueId
		// if item.Name != nil {
		// 	label += " >>> " + *item.Name
		// }
		return label
	}
	query := workspaces.QueryStringCastCli(searchFields, keyword, page)
	items, meta, err := WidgetActionQuery(query)
	stringItems := []string{}
	for _, item := range items {
		label := m(item)
		stringItems = append(stringItems, label)
	}
	return stringItems, meta, err
}

var WidgetImportExportCommands = []cli.Command{
	{
		Name:  "mock",
		Usage: "Generates mock records based on the entity definition",
		Flags: []cli.Flag{
			&cli.IntFlag{
				Name:  "count",
				Usage: "how many activation key do you need to be generated and stored in database",
				Value: 10,
			},
			&cli.BoolFlag{
				Name:  "batch",
				Usage: "Multiple insert into database mode. Might miss children and relations at the moment",
			},
		},
		Action: func(c *cli.Context) error {
			query := workspaces.CommonCliQueryDSLBuilderAuthorize(c, &workspaces.SecurityModel{
				ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_WIDGET_CREATE},
			})
			if c.Bool("batch") {
				WidgetActionSeederMultiple(query, c.Int("count"))
			} else {
				WidgetActionSeeder(query, c.Int("count"))
			}
			return nil
		},
	},
	{
		Name:    "init",
		Aliases: []string{"i"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Creates a basic seeder file for you, based on the definition module we have. You can populate this file as an example",
		Action: func(c *cli.Context) error {
			seed := WidgetActionSeederInit()
			workspaces.CommonInitSeeder(strings.TrimSpace(c.String("format")), seed)
			return nil
		},
	},
	{
		Name:    "validate",
		Aliases: []string{"v"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "file",
				Usage: "Validates an import file, such as yaml, json, csv, and gives some insights how the after import it would look like",
				Value: "widget-seeder-widget.yml",
				// Uncomment before publish, they need to specify
				// Required: true,
			},
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Reads a yaml file containing an array of widgets, you can run this to validate if your import file is correct, and how it would look like after import",
		Action: func(c *cli.Context) error {
			data := &[]WidgetEntity{}
			workspaces.ReadYamlFile(c.String("file"), data)
			fmt.Println(data)
			return nil
		},
	},
	cli.Command{
		Name:  "slist",
		Usage: "Prints the list of files attached to this module for syncing or bootstrapping project",
		Action: func(c *cli.Context) error {
			if entity, err := workspaces.GetSeederFilenames(widgetSeedersFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "ssync",
		Usage: "Tries to sync the embedded content into the database, the list could be seen by 'slist' command",
		Action: func(c *cli.Context) error {
			workspaces.CommonCliImportEmbedCmd(c,
				WidgetActionCreate,
				reflect.ValueOf(&WidgetEntity{}).Elem(),
				widgetSeedersFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:  "mlist",
		Usage: "Prints the list of embedded mocks into the app",
		Action: func(c *cli.Context) error {
			if entity, err := workspaces.GetSeederFilenames(&mocks.ViewsFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "msync",
		Usage: "Tries to sync mocks into the system",
		Action: func(c *cli.Context) error {
			workspaces.CommonCliImportEmbedCmd(c,
				WidgetActionCreate,
				reflect.ValueOf(&WidgetEntity{}).Elem(),
				&mocks.ViewsFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:    "export",
		Aliases: []string{"e"},
		Flags: append(workspaces.CommonQueryFlags,
			&cli.StringFlag{
				Name:     "file",
				Usage:    "The address of file you want the csv/yaml/json be exported to",
				Required: true,
			}),
		Usage: "Exports a query results into the csv/yaml/json format",
		Action: func(c *cli.Context) error {
			if strings.Contains(c.String("file"), ".csv") {
				workspaces.CommonCliExportCmd2(c,
					WidgetEntityStream,
					reflect.ValueOf(&WidgetEntity{}).Elem(),
					c.String("file"),
					&metas.MetaFs,
					"WidgetFieldMap.yml",
					WidgetPreloadRelations,
				)
			} else {
				workspaces.CommonCliExportCmd(c,
					WidgetActionQuery,
					reflect.ValueOf(&WidgetEntity{}).Elem(),
					c.String("file"),
					&metas.MetaFs,
					"WidgetFieldMap.yml",
					WidgetPreloadRelations,
				)
			}
			return nil
		},
	},
	cli.Command{
		Name: "import",
		Flags: append(
			append(
				workspaces.CommonQueryFlags,
				&cli.StringFlag{
					Name:     "file",
					Usage:    "The address of file you want the csv be imported from",
					Required: true,
				}),
			WidgetCommonCliFlagsOptional...,
		),
		Usage: "imports csv/yaml/json file and place it and its children into database",
		Action: func(c *cli.Context) error {
			workspaces.CommonCliImportCmdAuthorized(c,
				WidgetActionCreate,
				reflect.ValueOf(&WidgetEntity{}).Elem(),
				c.String("file"),
				&workspaces.SecurityModel{
					ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_WIDGET_CREATE},
				},
				func() WidgetEntity {
					v := CastWidgetFromCli(c)
					return *v
				},
			)
			return nil
		},
	},
}
var WidgetCliCommands []cli.Command = []cli.Command{
	WIDGET_ACTION_QUERY.ToCli(),
	WIDGET_ACTION_TABLE.ToCli(),
	WidgetCreateCmd,
	WidgetUpdateCmd,
	WidgetAskCmd,
	WidgetCreateInteractiveCmd,
	WidgetWipeCmd,
	workspaces.GetCommonRemoveQuery(reflect.ValueOf(&WidgetEntity{}).Elem(), WidgetActionRemove),
}

func WidgetCliFn() cli.Command {
	commands := append(WidgetImportExportCommands, WidgetCliCommands...)
	return cli.Command{
		Name:        "widget",
		Description: "Widgets module actions",
		Usage:       `Widget is an item which can be placed on a widget area, such as weather widget`,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "language",
				Value: "en",
			},
		},
		Subcommands: commands,
	}
}

var WIDGET_ACTION_TABLE = workspaces.Module2Action{
	Name:          "table",
	ActionAliases: []string{"t"},
	Flags:         workspaces.CommonQueryFlags,
	Description:   "Table formatted queries all of the entities in database based on the standard query format",
	Action:        WidgetActionQuery,
	CliAction: func(c *cli.Context, security *workspaces.SecurityModel) error {
		workspaces.CommonCliTableCmd2(c,
			WidgetActionQuery,
			security,
			reflect.ValueOf(&WidgetEntity{}).Elem(),
		)
		return nil
	},
}
var WIDGET_ACTION_QUERY = workspaces.Module2Action{
	Method: "GET",
	Url:    "/widgets",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_WIDGET_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpQueryEntity(c, WidgetActionQuery)
		},
	},
	Format:         "QUERY",
	Action:         WidgetActionQuery,
	ResponseEntity: &[]WidgetEntity{},
	Out: &workspaces.Module2ActionBody{
		Entity: "WidgetEntity",
	},
	CliAction: func(c *cli.Context, security *workspaces.SecurityModel) error {
		workspaces.CommonCliQueryCmd2(
			c,
			WidgetActionQuery,
			security,
		)
		return nil
	},
	CliName:       "query",
	Name:          "query",
	ActionAliases: []string{"q"},
	Flags:         workspaces.CommonQueryFlags,
	Description:   "Queries all of the entities in database based on the standard query format (s+)",
}
var WIDGET_ACTION_EXPORT = workspaces.Module2Action{
	Method: "GET",
	Url:    "/widgets/export",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_WIDGET_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpStreamFileChannel(c, WidgetActionExport)
		},
	},
	Format:         "QUERY",
	Action:         WidgetActionExport,
	ResponseEntity: &[]WidgetEntity{},
	Out: &workspaces.Module2ActionBody{
		Entity: "WidgetEntity",
	},
}
var WIDGET_ACTION_GET_ONE = workspaces.Module2Action{
	Method: "GET",
	Url:    "/widget/:uniqueId",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_WIDGET_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpGetEntity(c, WidgetActionGetOne)
		},
	},
	Format:         "GET_ONE",
	Action:         WidgetActionGetOne,
	ResponseEntity: &WidgetEntity{},
	Out: &workspaces.Module2ActionBody{
		Entity: "WidgetEntity",
	},
}
var WIDGET_ACTION_POST_ONE = workspaces.Module2Action{
	Name:          "create",
	ActionAliases: []string{"c"},
	Description:   "Create new widget",
	Flags:         WidgetCommonCliFlags,
	Method:        "POST",
	Url:           "/widget",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_WIDGET_CREATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpPostEntity(c, WidgetActionCreate)
		},
	},
	CliAction: func(c *cli.Context, security *workspaces.SecurityModel) error {
		result, err := workspaces.CliPostEntity(c, WidgetActionCreate, security)
		workspaces.HandleActionInCli(c, result, err, map[string]map[string]string{})
		return err
	},
	Action:         WidgetActionCreate,
	Format:         "POST_ONE",
	RequestEntity:  &WidgetEntity{},
	ResponseEntity: &WidgetEntity{},
	Out: &workspaces.Module2ActionBody{
		Entity: "WidgetEntity",
	},
	In: &workspaces.Module2ActionBody{
		Entity: "WidgetEntity",
	},
}
var WIDGET_ACTION_PATCH = workspaces.Module2Action{
	Name:          "update",
	ActionAliases: []string{"u"},
	Flags:         WidgetCommonCliFlagsOptional,
	Method:        "PATCH",
	Url:           "/widget",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_WIDGET_UPDATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpUpdateEntity(c, WidgetActionUpdate)
		},
	},
	Action:         WidgetActionUpdate,
	RequestEntity:  &WidgetEntity{},
	ResponseEntity: &WidgetEntity{},
	Format:         "PATCH_ONE",
	Out: &workspaces.Module2ActionBody{
		Entity: "WidgetEntity",
	},
	In: &workspaces.Module2ActionBody{
		Entity: "WidgetEntity",
	},
}
var WIDGET_ACTION_PATCH_BULK = workspaces.Module2Action{
	Method: "PATCH",
	Url:    "/widgets",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_WIDGET_UPDATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpUpdateEntities(c, WidgetActionBulkUpdate)
		},
	},
	Action:         WidgetActionBulkUpdate,
	Format:         "PATCH_BULK",
	RequestEntity:  &workspaces.BulkRecordRequest[WidgetEntity]{},
	ResponseEntity: &workspaces.BulkRecordRequest[WidgetEntity]{},
	Out: &workspaces.Module2ActionBody{
		Entity: "WidgetEntity",
	},
	In: &workspaces.Module2ActionBody{
		Entity: "WidgetEntity",
	},
}
var WIDGET_ACTION_DELETE = workspaces.Module2Action{
	Method: "DELETE",
	Url:    "/widget",
	Format: "DELETE_DSL",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_WIDGET_DELETE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpRemoveEntity(c, WidgetActionRemove)
		},
	},
	Action:         WidgetActionRemove,
	RequestEntity:  &workspaces.DeleteRequest{},
	ResponseEntity: &workspaces.DeleteResponse{},
	TargetEntity:   &WidgetEntity{},
}

/**
 *	Override this function on WidgetEntityHttp.go,
 *	In order to add your own http
 **/
var AppendWidgetRouter = func(r *[]workspaces.Module2Action) {}

func GetWidgetModule2Actions() []workspaces.Module2Action {
	routes := []workspaces.Module2Action{
		WIDGET_ACTION_QUERY,
		WIDGET_ACTION_EXPORT,
		WIDGET_ACTION_GET_ONE,
		WIDGET_ACTION_POST_ONE,
		WIDGET_ACTION_PATCH,
		WIDGET_ACTION_PATCH_BULK,
		WIDGET_ACTION_DELETE,
	}
	// Append user defined functions
	AppendWidgetRouter(&routes)
	return routes
}

var PERM_ROOT_WIDGET_DELETE = workspaces.PermissionInfo{
	CompleteKey: "root/modules/widget/widget/delete",
	Name:        "Delete widget",
}
var PERM_ROOT_WIDGET_CREATE = workspaces.PermissionInfo{
	CompleteKey: "root/modules/widget/widget/create",
	Name:        "Create widget",
}
var PERM_ROOT_WIDGET_UPDATE = workspaces.PermissionInfo{
	CompleteKey: "root/modules/widget/widget/update",
	Name:        "Update widget",
}
var PERM_ROOT_WIDGET_QUERY = workspaces.PermissionInfo{
	CompleteKey: "root/modules/widget/widget/query",
	Name:        "Query widget",
}
var PERM_ROOT_WIDGET = workspaces.PermissionInfo{
	CompleteKey: "root/modules/widget/widget/*",
	Name:        "Entire widget actions (*)",
}
var ALL_WIDGET_PERMISSIONS = []workspaces.PermissionInfo{
	PERM_ROOT_WIDGET_DELETE,
	PERM_ROOT_WIDGET_CREATE,
	PERM_ROOT_WIDGET_UPDATE,
	PERM_ROOT_WIDGET_QUERY,
	PERM_ROOT_WIDGET,
}
var WidgetEntityBundle = workspaces.EntityBundle{
	Permissions: ALL_WIDGET_PERMISSIONS,
	// Cli command has been exluded, since we use module to wrap all the entities
	// to be more easier to wrap up.
	// Create your own bundle if you need with Cli
	//CliCommands: []cli.Command{
	//	WidgetCliFn(),
	//},
	Actions:      GetWidgetModule2Actions(),
	MockProvider: WidgetImportMocks,
	AutoMigrationEntities: []interface{}{
		&WidgetEntity{},
		&WidgetEntityPolyglot{},
	},
}
