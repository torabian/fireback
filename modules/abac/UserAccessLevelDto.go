package abac

/*
*	Generated by fireback 1.2.1
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/torabian/fireback/modules/fireback"
	"github.com/urfave/cli"
)

func CastUserAccessLevelFromCli(c *cli.Context) *UserAccessLevelDto {
	template := &UserAccessLevelDto{}
	if c.IsSet("user-access-per-workspace-id") {
		template.UserAccessPerWorkspaceId = fireback.NewStringAutoNull(c.String("user-access-per-workspace-id"))
	}
	return template
}

var UserAccessLevelDtoCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "user-access-per-workspace-id",
		Required: false,
		Usage:    `userAccessPerWorkspace (one)`,
	},
}

type UserAccessLevelDto struct {
	UserAccessPerWorkspace   *fireback.UserAccessPerWorkspaceDto `json:"userAccessPerWorkspace" yaml:"userAccessPerWorkspace"    gorm:"foreignKey:UserAccessPerWorkspaceId;references:UniqueId"      `
	UserAccessPerWorkspaceId fireback.String                     `json:"userAccessPerWorkspaceId" yaml:"userAccessPerWorkspaceId"`
}
type UserAccessLevelDtoList struct {
	Items []*UserAccessLevelDto
}

func NewUserAccessLevelDtoList(items []*UserAccessLevelDto) *UserAccessLevelDtoList {
	return &UserAccessLevelDtoList{
		Items: items,
	}
}
func (x *UserAccessLevelDtoList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *UserAccessLevelDto) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	// Intentional trim (so strings lib is always imported)
	return strings.TrimSpace("")
}
func (x *UserAccessLevelDto) JsonPrint() {
	fmt.Println(x.Json())
}

// This is an experimental way to create new dtos, with exluding the pointers as helper.
func NewUserAccessLevelDto() UserAccessLevelDto {
	return UserAccessLevelDto{}
}
