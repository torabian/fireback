package abac

/*
*	Generated by fireback 1.2.4
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"embed"
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	jsoniter "github.com/json-iterator/go"
	"github.com/schollz/progressbar/v3"
	metas "github.com/torabian/fireback/modules/abac/metas"
	mocks "github.com/torabian/fireback/modules/abac/mocks/PendingWorkspaceInvite"
	seeders "github.com/torabian/fireback/modules/abac/seeders/PendingWorkspaceInvite"
	"github.com/torabian/fireback/modules/fireback"
	"github.com/urfave/cli"
	"gopkg.in/yaml.v2"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"log"
	reflect "reflect"
	"strings"
	"time"
)

var pendingWorkspaceInviteSeedersFs = &seeders.ViewsFs

func ResetPendingWorkspaceInviteSeeders(fs *embed.FS) {
	pendingWorkspaceInviteSeedersFs = fs
}

type PendingWorkspaceInviteEntityQs struct {
	Value         fireback.QueriableField `cli:"value" table:"pending_workspace_invite" typeof:"string" column:"value" qs:"value"`
	Type          fireback.QueriableField `cli:"type" table:"pending_workspace_invite" typeof:"string" column:"type" qs:"type"`
	CoverLetter   fireback.QueriableField `cli:"cover-letter" table:"pending_workspace_invite" typeof:"string" column:"cover_letter" qs:"coverLetter"`
	WorkspaceName fireback.QueriableField `cli:"workspace-name" table:"pending_workspace_invite" typeof:"string" column:"workspace_name" qs:"workspaceName"`
	Role          fireback.QueriableField `cli:"role" table:"pending_workspace_invite" typeof:"one" column:"role" qs:"role"`
}

func (x *PendingWorkspaceInviteEntityQs) GetQuery() string {
	return fireback.GenerateQueryStringStyle(reflect.ValueOf(x), "")
}

var PendingWorkspaceInviteQsFlags = []cli.Flag{
	&cli.StringFlag{
		Name:  "value",
		Usage: "",
	},
	&cli.StringFlag{
		Name:  "type",
		Usage: "",
	},
	&cli.StringFlag{
		Name:  "cover-letter",
		Usage: "",
	},
	&cli.StringFlag{
		Name:  "workspace-name",
		Usage: "",
	},
	&cli.StringFlag{
		Name:  "role",
		Usage: "",
	},
}

type PendingWorkspaceInviteEntity struct {
	// Defines the visibility of the record in the table.
	// Visibility is a detailed topic, you can check all of the visibility values in fireback/visibility.go
	// by default, visibility of record are 0, means they are protected by the workspace
	// which are being created, and visible to every member of the workspace
	Visibility fireback.String `json:"visibility,omitempty" yaml:"visibility,omitempty" xml:"visibility,omitempty"`
	// The unique-id of the workspace which content belongs to. Upon creation this will be designated
	// to the selected workspace by user, if they have write access. You can change this value
	// or prevent changes to it manually (on root features for example modifying other workspace)
	WorkspaceId fireback.String `json:"workspaceId,omitempty" xml:"workspaceId,omitempty" yaml:"workspaceId,omitempty"`
	// The unique-id of the parent table, which this record is being linked to.
	// used internally for making relations in fireback, generally does not need manual changes
	// or modification by the developer or user. For example, if you have a object inside an object
	// the unique-id of the parent will be written in the child.
	LinkerId fireback.String `json:"linkerId,omitempty" xml:"linkerId,omitempty" yaml:"linkerId,omitempty"`
	// Used for recursive or parent-child operations. Some tables, are having nested relations,
	// and this field makes the table self refrenceing. ParentId needs to exist in the table before
	// creating of modifying a record.
	ParentId fireback.String `json:"parentId,omitempty" xml:"parentId,omitempty" yaml:"parentId,omitempty"`
	// Makes a field deletable. Some records should not be deletable at all.
	// default it's true.
	IsDeletable *bool `json:"isDeletable,omitempty" xml:"isDeletable,omitempty" yaml:"isDeletable,omitempty" gorm:"default:true"`
	// Makes a field updatable. Some records should not be updatable at all.
	// default it's true.
	IsUpdatable *bool `json:"isUpdatable,omitempty" xml:"isUpdatable,omitempty" yaml:"isUpdatable,omitempty" gorm:"default:true"`
	// The unique-id of the user which is creating the record, or the record belongs to.
	// Administration might want to change this to any user, by default Fireback fills
	// it to the current authenticated user.
	UserId fireback.String `json:"userId,omitempty" xml:"userId,omitempty" yaml:"userId,omitempty"`
	// General mechanism to rank the elements. From code perspective, it's just a number,
	// but you can sort it based on any logic for records to make a ranking, sorting.
	// they should not be unique across a table.
	Rank fireback.Int64 `json:"rank,omitempty" yaml:"rank,omitempty" xml:"rank,omitempty" gorm:"type:int;name:rank"`
	// Primary numeric key in the database. This value is not meant to be exported to public
	// or be used to access data at all. Rather a mechanism of indexing columns internally
	// or cursor pagination in future releases of fireback, or better search performance.
	ID uint `gorm:"primaryKey;autoIncrement" json:"-" yaml:"-" xml:"-"`
	// Unique id of the record across the table. This value will be accessed from public APIs,
	// and many other places intead of numeric ID property.
	// Upon generation, a UUID automatically is being assigned, and if user has specified the
	// Unique id in the post body, it will be used. This mechanism allows to manage unsaved
	// content on front-end much easier than requiring parent to exists first.
	UniqueId string `json:"uniqueId,omitempty" xml:"uniqueId,omitempty" gorm:"unique;not null;size:100;" yaml:"uniqueId,omitempty"`
	// The time that the record has been updated in datetime.
	// the field will be automatically populated by gorm orm.
	UpdatedAt *time.Time `json:"updatedAt,omitempty" xml:"updatedAt,omitempty" yaml:"updatedAt,omitempty"`
	// The time that the record has been created in datetime.
	// the field will be automatically populated by gorm orm.
	CreatedAt *time.Time `json:"createdAt,omitempty" xml:"createdAt,omitempty" yaml:"createdAt,omitempty"`
	// The time that the record has been deleted softly (means the data still exists in database, but no longer visible to any feature) in nano datatime
	// you need to make sure check this field if writing custom sql queries.
	// the field will be automatically populated by gorm orm.
	DeletedAt *time.Time `json:"deletedAt,omitempty" xml:"deletedAt,omitempty" yaml:"deletedAt,omitempty"`
	// Record creation date time formatting based on locale of the headers, or other
	// possible factors.
	CreatedFormatted string `json:"createdFormatted,omitempty" xml:"createdFormatted,omitempty" yaml:"createdFormatted,omitempty" sql:"-" gorm:"-"`
	// Record update date time formatting based on locale of the headers, or other
	// possible factors.
	UpdatedFormatted string                          `json:"updatedFormatted,omitempty" xml:"updatedFormatted,omitempty" yaml:"updatedFormatted,omitempty" sql:"-" gorm:"-"`
	Value            string                          `json:"value" xml:"value" yaml:"value"        `
	Type             string                          `json:"type" xml:"type" yaml:"type"        `
	CoverLetter      string                          `json:"coverLetter" xml:"coverLetter" yaml:"coverLetter"        `
	WorkspaceName    string                          `json:"workspaceName" xml:"workspaceName" yaml:"workspaceName"        `
	Role             *RoleEntity                     `json:"role" xml:"role" yaml:"role"    gorm:"foreignKey:RoleId;references:UniqueId"      `
	RoleId           fireback.String                 `json:"roleId" yaml:"roleId" xml:"roleId"  `
	Children         []*PendingWorkspaceInviteEntity `csv:"-" gorm:"-" sql:"-" json:"children,omitempty" xml:"children,omitempty"  yaml:"children,omitempty"`
	LinkedTo         *PendingWorkspaceInviteEntity   `csv:"-" yaml:"-" gorm:"-" json:"-" sql:"-" xml:"-"`
}

func PendingWorkspaceInviteEntityStream(q fireback.QueryDSL) (chan []*PendingWorkspaceInviteEntity, *fireback.QueryResultMeta, *fireback.IError) {
	cn := make(chan []*PendingWorkspaceInviteEntity)
	q.ItemsPerPage = 50
	q.StartIndex = 0
	_, qrm, err := PendingWorkspaceInviteActions.Query(q)
	if err != nil {
		return nil, nil, err
	}
	go func() {
		defer close(cn)
		for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
			items, _, _ := PendingWorkspaceInviteActions.Query(q)
			i += q.ItemsPerPage
			q.StartIndex = i
			cn <- items
		}
	}()
	return cn, qrm, nil
}

type PendingWorkspaceInviteEntityList struct {
	Items []*PendingWorkspaceInviteEntity
}

func NewPendingWorkspaceInviteEntityList(items []*PendingWorkspaceInviteEntity) *PendingWorkspaceInviteEntityList {
	return &PendingWorkspaceInviteEntityList{
		Items: items,
	}
}
func (x *PendingWorkspaceInviteEntityList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *PendingWorkspaceInviteEntityList) ToTree() *fireback.TreeOperation[PendingWorkspaceInviteEntity] {
	return fireback.NewTreeOperation(
		x.Items,
		func(t *PendingWorkspaceInviteEntity) string {
			if !t.ParentId.Valid {
				return ""
			}
			return t.ParentId.String
		},
		func(t *PendingWorkspaceInviteEntity) string {
			return t.UniqueId
		},
	)
}

var PendingWorkspaceInvitePreloadRelations []string = []string{}

type pendingWorkspaceInviteActionsSig struct {
	Update         func(query fireback.QueryDSL, dto *PendingWorkspaceInviteEntity) (*PendingWorkspaceInviteEntity, *fireback.IError)
	Create         func(dto *PendingWorkspaceInviteEntity, query fireback.QueryDSL) (*PendingWorkspaceInviteEntity, *fireback.IError)
	Upsert         func(dto *PendingWorkspaceInviteEntity, query fireback.QueryDSL) (*PendingWorkspaceInviteEntity, *fireback.IError)
	SeederInit     func() *PendingWorkspaceInviteEntity
	Remove         func(query fireback.QueryDSL) (int64, *fireback.IError)
	MultiInsert    func(dtos []*PendingWorkspaceInviteEntity, query fireback.QueryDSL) ([]*PendingWorkspaceInviteEntity, *fireback.IError)
	GetOne         func(query fireback.QueryDSL) (*PendingWorkspaceInviteEntity, *fireback.IError)
	GetByWorkspace func(query fireback.QueryDSL) (*PendingWorkspaceInviteEntity, *fireback.IError)
	Query          func(query fireback.QueryDSL) ([]*PendingWorkspaceInviteEntity, *fireback.QueryResultMeta, *fireback.IError)
}

var PendingWorkspaceInviteActions pendingWorkspaceInviteActionsSig = pendingWorkspaceInviteActionsSig{
	Update:         PendingWorkspaceInviteActionUpdateFn,
	Create:         PendingWorkspaceInviteActionCreateFn,
	Upsert:         PendingWorkspaceInviteActionUpsertFn,
	Remove:         PendingWorkspaceInviteActionRemoveFn,
	SeederInit:     PendingWorkspaceInviteActionSeederInitFn,
	MultiInsert:    PendingWorkspaceInviteMultiInsertFn,
	GetOne:         PendingWorkspaceInviteActionGetOneFn,
	GetByWorkspace: PendingWorkspaceInviteActionGetByWorkspaceFn,
	Query:          PendingWorkspaceInviteActionQueryFn,
}

func PendingWorkspaceInviteActionUpsertFn(dto *PendingWorkspaceInviteEntity, query fireback.QueryDSL) (*PendingWorkspaceInviteEntity, *fireback.IError) {
	return nil, nil
}

var PENDING_WORKSPACE_INVITE_EVENT_CREATED = "pendingWorkspaceInvite.created"
var PENDING_WORKSPACE_INVITE_EVENT_UPDATED = "pendingWorkspaceInvite.updated"
var PENDING_WORKSPACE_INVITE_EVENT_DELETED = "pendingWorkspaceInvite.deleted"
var PENDING_WORKSPACE_INVITE_EVENTS = []string{
	PENDING_WORKSPACE_INVITE_EVENT_CREATED,
	PENDING_WORKSPACE_INVITE_EVENT_UPDATED,
	PENDING_WORKSPACE_INVITE_EVENT_DELETED,
}

type PendingWorkspaceInviteFieldMap struct {
	Value         fireback.TranslatedString `yaml:"value"`
	Type          fireback.TranslatedString `yaml:"type"`
	CoverLetter   fireback.TranslatedString `yaml:"coverLetter"`
	WorkspaceName fireback.TranslatedString `yaml:"workspaceName"`
	Role          fireback.TranslatedString `yaml:"role"`
}

var PendingWorkspaceInviteEntityMetaConfig map[string]int64 = map[string]int64{}
var PendingWorkspaceInviteEntityJsonSchema = fireback.ExtractEntityFields(reflect.ValueOf(&PendingWorkspaceInviteEntity{}))

func entityPendingWorkspaceInviteFormatter(dto *PendingWorkspaceInviteEntity, query fireback.QueryDSL) {
	if dto == nil {
		return
	}
}
func PendingWorkspaceInviteActionSeederMultiple(query fireback.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	batchSize := 100
	bar := progressbar.Default(int64(count))
	// Collect entities in batches
	var entitiesBatch []*PendingWorkspaceInviteEntity
	for i := 1; i <= count; i++ {
		entity := PendingWorkspaceInviteActions.SeederInit()
		entitiesBatch = append(entitiesBatch, entity)
		// When batch size is reached, perform the batch insert
		if len(entitiesBatch) == batchSize || i == count {
			// Insert batch
			_, err := PendingWorkspaceInviteActions.MultiInsert(entitiesBatch, query)
			if err == nil {
				successInsert += len(entitiesBatch)
			} else {
				fmt.Println(err)
				failureInsert += len(entitiesBatch)
			}
			// Clear the batch after insert
			entitiesBatch = nil
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func PendingWorkspaceInviteActionSeeder(query fireback.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	bar := progressbar.Default(int64(count))
	for i := 1; i <= count; i++ {
		entity := PendingWorkspaceInviteActions.SeederInit()
		_, err := PendingWorkspaceInviteActions.Create(entity, query)
		if err == nil {
			successInsert++
		} else {
			fmt.Println(err)
			failureInsert++
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func (x *PendingWorkspaceInviteEntity) Seeder() string {
	obj := PendingWorkspaceInviteActions.SeederInit()
	v, _ := json.MarshalIndent(obj, "", "  ")
	return string(v)
}
func PendingWorkspaceInviteActionSeederInitFn() *PendingWorkspaceInviteEntity {
	entity := &PendingWorkspaceInviteEntity{}
	return entity
}
func PendingWorkspaceInviteAssociationCreate(dto *PendingWorkspaceInviteEntity, query fireback.QueryDSL) error {
	return nil
}

/**
* These kind of content are coming from another entity, which is indepndent module
* If we want to create them, we need to do it before. This is not association.
**/
func PendingWorkspaceInviteRelationContentCreate(dto *PendingWorkspaceInviteEntity, query fireback.QueryDSL) error {
	return nil
}
func PendingWorkspaceInviteRelationContentUpdate(dto *PendingWorkspaceInviteEntity, query fireback.QueryDSL) error {
	return nil
}
func PendingWorkspaceInvitePolyglotUpdateHandler(dto *PendingWorkspaceInviteEntity, query fireback.QueryDSL) {
	if dto == nil {
		return
	}
}

/**
 * This will be validating your entity fully. Important note is that, you add validate:* tag
 * in your entity, it will automatically work here. For slices inside entity, make sure you add
 * extra line of AppendSliceErrors, otherwise they won't be detected
 */
func PendingWorkspaceInviteValidator(dto *PendingWorkspaceInviteEntity, isPatch bool) *fireback.IError {
	err := fireback.CommonStructValidatorPointer(dto, isPatch)
	return err
}

// Creates a set of natural language queries, which can be used with
// AI tools to create content or help with some tasks
var PendingWorkspaceInviteAskCmd cli.Command = cli.Command{
	Name:  "nlp",
	Usage: "Set of natural language queries which helps creating content or data",
	Subcommands: []cli.Command{
		{
			Name:  "sample",
			Usage: "Asks for generating sample by giving an example data",
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:  "format",
					Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
					Value: "yaml",
				},
				&cli.IntFlag{
					Name:  "count",
					Usage: "How many samples to ask",
					Value: 30,
				},
			},
			Action: func(c *cli.Context) error {
				v := &PendingWorkspaceInviteEntity{}
				format := c.String("format")
				request := "\033[1m" + `
I need you to create me an array of exact signature as the example given below,
with at least ` + fmt.Sprint(c.String("count")) + ` items, mock the content with few words, and guess the possible values
based on the common sense. I need the output to be a valid ` + format + ` file.
Make sure you wrap the entire array in 'items' field. Also before that, I provide some explanation of each field:
Value: (type: string) Description: 
Type: (type: string) Description: 
CoverLetter: (type: string) Description: 
WorkspaceName: (type: string) Description: 
Role: (type: one) Description: 
And here is the actual object signature:
` + v.Seeder() + `
`
				fmt.Println(request)
				return nil
			},
		},
	},
}

func PendingWorkspaceInviteEntityPreSanitize(dto *PendingWorkspaceInviteEntity, query fireback.QueryDSL) {
}
func PendingWorkspaceInviteEntityBeforeCreateAppend(dto *PendingWorkspaceInviteEntity, query fireback.QueryDSL) {
	if dto.UniqueId == "" {
		dto.UniqueId = fireback.UUID()
	}
	dto.WorkspaceId = fireback.NewString(query.WorkspaceId)
	dto.UserId = fireback.NewString(query.UserId)
	PendingWorkspaceInviteRecursiveAddUniqueId(dto, query)
}
func PendingWorkspaceInviteRecursiveAddUniqueId(dto *PendingWorkspaceInviteEntity, query fireback.QueryDSL) {
}

/*
*
	Batch inserts, do not have all features that create
	operation does. Use it with unnormalized content,
	or read the source code carefully.
  This is not marked as an action, because it should not be available publicly
  at this moment.
*
*/
func PendingWorkspaceInviteMultiInsertFn(dtos []*PendingWorkspaceInviteEntity, query fireback.QueryDSL) ([]*PendingWorkspaceInviteEntity, *fireback.IError) {
	if len(dtos) > 0 {
		for index := range dtos {
			PendingWorkspaceInviteEntityPreSanitize(dtos[index], query)
			PendingWorkspaceInviteEntityBeforeCreateAppend(dtos[index], query)
		}
		var dbref *gorm.DB = nil
		if query.Tx == nil {
			dbref = fireback.GetDbRef()
		} else {
			dbref = query.Tx
		}
		query.Tx = dbref
		err := dbref.Create(&dtos).Error
		if err != nil {
			return nil, fireback.GormErrorToIError(err)
		}
	}
	return dtos, nil
}
func PendingWorkspaceInviteActionBatchCreateFn(dtos []*PendingWorkspaceInviteEntity, query fireback.QueryDSL) ([]*PendingWorkspaceInviteEntity, *fireback.IError) {
	if dtos != nil && len(dtos) > 0 {
		items := []*PendingWorkspaceInviteEntity{}
		for _, item := range dtos {
			s, err := PendingWorkspaceInviteActions.Create(item, query)
			if err != nil {
				return nil, err
			}
			items = append(items, s)
		}
		return items, nil
	}
	return dtos, nil
}
func PendingWorkspaceInviteDeleteEntireChildren(query fireback.QueryDSL, dto *PendingWorkspaceInviteEntity) *fireback.IError {
	// intentionally removed this. It's hard to implement it, and probably wrong without
	// proper on delete cascade
	return nil
}
func PendingWorkspaceInviteActionCreateFn(dto *PendingWorkspaceInviteEntity, query fireback.QueryDSL) (*PendingWorkspaceInviteEntity, *fireback.IError) {
	// 1. Validate always
	if iError := PendingWorkspaceInviteValidator(dto, false); iError != nil {
		return nil, iError
	}
	// 1.5 Sanitize the content coming of the front-end
	PendingWorkspaceInviteEntityPreSanitize(dto, query)
	// 2. Append the necessary information about user, workspace
	PendingWorkspaceInviteEntityBeforeCreateAppend(dto, query)
	// 3. Create other entities if we want select from them
	PendingWorkspaceInviteRelationContentCreate(dto, query)
	// 4. Create the entity
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = fireback.GetDbRef()
	} else {
		dbref = query.Tx
	}
	query.Tx = dbref
	err := dbref.Create(&dto).Error
	if err != nil {
		err := fireback.GormErrorToIError(err)
		return nil, err
	}
	// 5. Create sub entities, objects or arrays, association to other entities
	PendingWorkspaceInviteAssociationCreate(dto, query)
	// 6. Fire the event into system
	actionEvent, eventErr := NewPendingWorkspaceInviteCreatedEvent(dto, &query)
	if actionEvent != nil && eventErr == nil {
		fireback.GetEventBusInstance().FireEvent(query, *actionEvent)
	} else {
		log.Default().Panicln("Creating event has failed for %v", dto)
	}
	/*
		event.MustFire(PENDING_WORKSPACE_INVITE_EVENT_CREATED, event.M{
			"entity":   dto,
			"entityKey": fireback.GetTypeString(&PendingWorkspaceInviteEntity{}),
			"target":   "workspace",
			"unqiueId": query.WorkspaceId,
		})
	*/
	return dto, nil
}
func PendingWorkspaceInviteActionGetOneFn(query fireback.QueryDSL) (*PendingWorkspaceInviteEntity, *fireback.IError) {
	refl := reflect.ValueOf(&PendingWorkspaceInviteEntity{})
	item, err := fireback.GetOneEntity[PendingWorkspaceInviteEntity](query, refl)
	entityPendingWorkspaceInviteFormatter(item, query)
	return item, err
}
func PendingWorkspaceInviteActionGetByWorkspaceFn(query fireback.QueryDSL) (*PendingWorkspaceInviteEntity, *fireback.IError) {
	refl := reflect.ValueOf(&PendingWorkspaceInviteEntity{})
	item, err := fireback.GetOneByWorkspaceEntity[PendingWorkspaceInviteEntity](query, refl)
	entityPendingWorkspaceInviteFormatter(item, query)
	return item, err
}
func PendingWorkspaceInviteActionQueryFn(query fireback.QueryDSL) ([]*PendingWorkspaceInviteEntity, *fireback.QueryResultMeta, *fireback.IError) {
	refl := reflect.ValueOf(&PendingWorkspaceInviteEntity{})
	items, meta, err := fireback.QueryEntitiesPointer[PendingWorkspaceInviteEntity](query, refl)
	for _, item := range items {
		entityPendingWorkspaceInviteFormatter(item, query)
	}
	return items, meta, err
}

var pendingWorkspaceInviteMemoryItems []*PendingWorkspaceInviteEntity = []*PendingWorkspaceInviteEntity{}

func PendingWorkspaceInviteEntityIntoMemory() {
	q := fireback.QueryDSL{
		ItemsPerPage: 500,
		StartIndex:   0,
	}
	_, qrm, _ := PendingWorkspaceInviteActions.Query(q)
	for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
		items, _, _ := PendingWorkspaceInviteActions.Query(q)
		pendingWorkspaceInviteMemoryItems = append(pendingWorkspaceInviteMemoryItems, items...)
		i += q.ItemsPerPage
		q.StartIndex = i
	}
}
func PendingWorkspaceInviteMemGet(id uint) *PendingWorkspaceInviteEntity {
	for _, item := range pendingWorkspaceInviteMemoryItems {
		if item.ID == id {
			return item
		}
	}
	return nil
}
func PendingWorkspaceInviteMemJoin(items []uint) []*PendingWorkspaceInviteEntity {
	res := []*PendingWorkspaceInviteEntity{}
	for _, item := range items {
		v := PendingWorkspaceInviteMemGet(item)
		if v != nil {
			res = append(res, v)
		}
	}
	return res
}
func PendingWorkspaceInviteUpdateExec(dbref *gorm.DB, query fireback.QueryDSL, fields *PendingWorkspaceInviteEntity) (*PendingWorkspaceInviteEntity, *fireback.IError) {
	uniqueId := fields.UniqueId
	query.TriggerEventName = PENDING_WORKSPACE_INVITE_EVENT_UPDATED
	PendingWorkspaceInviteEntityPreSanitize(fields, query)
	var item PendingWorkspaceInviteEntity
	var itemRefetched PendingWorkspaceInviteEntity
	// If the entity is distinct by workspace, then the Query.WorkspaceId
	// which is selected is being used as the condition for create or update
	// if not, the unique Id is being used
	cond2 := &PendingWorkspaceInviteEntity{UniqueId: uniqueId}
	q := dbref.
		Where(cond2).
		FirstOrCreate(&item)
	err := q.UpdateColumns(fields).Error
	if err != nil {
		return nil, fireback.GormErrorToIError(err)
	}
	query.Tx = dbref
	PendingWorkspaceInviteRelationContentUpdate(fields, query)
	PendingWorkspaceInvitePolyglotUpdateHandler(fields, query)
	if ero := PendingWorkspaceInviteDeleteEntireChildren(query, fields); ero != nil {
		return nil, ero
	}
	// @meta(update has many)
	err = dbref.
		Preload(clause.Associations).
		Where(&PendingWorkspaceInviteEntity{UniqueId: uniqueId}).
		First(&itemRefetched).Error
	if err != nil {
		return nil, fireback.GormErrorToIError(err)
	}
	actionEvent, eventErr := NewPendingWorkspaceInviteUpdatedEvent(fields, &query)
	if actionEvent != nil && eventErr == nil {
		fireback.GetEventBusInstance().FireEvent(query, *actionEvent)
	} else {
		log.Default().Panicln("Updating event has failed for %v", fields)
	}
	/*
	   event.MustFire(query.TriggerEventName, event.M{
	     "entity":   &item,
	     "target":   "workspace",
	     "unqiueId": query.WorkspaceId,
	   })*/
	return &itemRefetched, nil
}
func PendingWorkspaceInviteActionUpdateFn(query fireback.QueryDSL, fields *PendingWorkspaceInviteEntity) (*PendingWorkspaceInviteEntity, *fireback.IError) {
	if fields == nil {
		return nil, fireback.Create401Error(&fireback.FirebackMessages.BodyIsMissing, []string{})
	}
	// 1. Validate always
	if iError := PendingWorkspaceInviteValidator(fields, true); iError != nil {
		return nil, iError
	}
	// Let's not add this. I am not sure of the consequences
	// PendingWorkspaceInviteRecursiveAddUniqueId(fields, query)
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = fireback.GetDbRef()
		var item *PendingWorkspaceInviteEntity
		vf := dbref.Transaction(func(tx *gorm.DB) error {
			dbref = tx
			var err *fireback.IError
			item, err = PendingWorkspaceInviteUpdateExec(dbref, query, fields)
			if err == nil {
				return nil
			} else {
				return err
			}
		})
		return item, fireback.CastToIError(vf)
	} else {
		dbref = query.Tx
		return PendingWorkspaceInviteUpdateExec(dbref, query, fields)
	}
}

var PendingWorkspaceInviteWipeCmd cli.Command = cli.Command{
	Name:  "wipe",
	Usage: "Wipes entire pendingworkspaceinvites ",
	Action: func(c *cli.Context) error {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PENDING_WORKSPACE_INVITE_DELETE},
		})
		count, _ := PendingWorkspaceInviteActionWipeClean(query)
		fmt.Println("Removed", count, "of entities")
		return nil
	},
}

func PendingWorkspaceInviteActionRemoveFn(query fireback.QueryDSL) (int64, *fireback.IError) {
	refl := reflect.ValueOf(&PendingWorkspaceInviteEntity{})
	query.ActionRequires = []fireback.PermissionInfo{PERM_ROOT_PENDING_WORKSPACE_INVITE_DELETE}
	return fireback.RemoveEntity[PendingWorkspaceInviteEntity](query, refl)
}
func PendingWorkspaceInviteActionWipeClean(query fireback.QueryDSL) (int64, error) {
	var err error
	var count int64 = 0
	{
		subCount, subErr := fireback.WipeCleanEntity[PendingWorkspaceInviteEntity]()
		if subErr != nil {
			fmt.Println("Error while wiping 'PendingWorkspaceInviteEntity'", subErr)
			return count, subErr
		} else {
			count += subCount
		}
	}
	return count, err
}
func PendingWorkspaceInviteActionBulkUpdate(
	query fireback.QueryDSL, dto *fireback.BulkRecordRequest[PendingWorkspaceInviteEntity]) (
	*fireback.BulkRecordRequest[PendingWorkspaceInviteEntity], *fireback.IError,
) {
	result := []*PendingWorkspaceInviteEntity{}
	err := fireback.GetDbRef().Transaction(func(tx *gorm.DB) error {
		query.Tx = tx
		for _, record := range dto.Records {
			item, err := PendingWorkspaceInviteActions.Update(query, record)
			if err != nil {
				return err
			} else {
				result = append(result, item)
			}
		}
		return nil
	})
	if err == nil {
		return dto, nil
	}
	return nil, err.(*fireback.IError)
}
func (x *PendingWorkspaceInviteEntity) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}

var PendingWorkspaceInviteEntityMeta = fireback.TableMetaData{
	EntityName:    "PendingWorkspaceInvite",
	ExportKey:     "pending-workspace-invites",
	TableNameInDb: "pending-workspace-invite_entities",
	EntityObject:  &PendingWorkspaceInviteEntity{},
	ExportStream:  PendingWorkspaceInviteActionExportT,
	ImportQuery:   PendingWorkspaceInviteActionImport,
}

func PendingWorkspaceInviteActionExport(
	query fireback.QueryDSL,
) (chan []byte, *fireback.IError) {
	return fireback.YamlExporterChannel[PendingWorkspaceInviteEntity](query, PendingWorkspaceInviteActions.Query, PendingWorkspaceInvitePreloadRelations)
}
func PendingWorkspaceInviteActionExportT(
	query fireback.QueryDSL,
) (chan []interface{}, *fireback.IError) {
	return fireback.YamlExporterChannelT[PendingWorkspaceInviteEntity](query, PendingWorkspaceInviteActions.Query, PendingWorkspaceInvitePreloadRelations)
}
func PendingWorkspaceInviteActionImport(
	dto interface{}, query fireback.QueryDSL,
) *fireback.IError {
	var json = jsoniter.ConfigCompatibleWithStandardLibrary
	var content PendingWorkspaceInviteEntity
	cx, err2 := json.Marshal(dto)
	if err2 != nil {
		return fireback.Create401Error(&fireback.FirebackMessages.InvalidContent, []string{})
	}
	json.Unmarshal(cx, &content)
	_, err := PendingWorkspaceInviteActions.Create(&content, query)
	return err
}

var PendingWorkspaceInviteCommonCliFlags = []cli.Flag{
	&cli.StringFlag{
		Name:  "x-accept",
		Usage: "Return type of the the content, such as json or yaml",
	},
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "value",
		Required: false,
		Usage:    `value (string)`,
	},
	&cli.StringFlag{
		Name:     "type",
		Required: false,
		Usage:    `type (string)`,
	},
	&cli.StringFlag{
		Name:     "cover-letter",
		Required: false,
		Usage:    `coverLetter (string)`,
	},
	&cli.StringFlag{
		Name:     "workspace-name",
		Required: false,
		Usage:    `workspaceName (string)`,
	},
	&cli.StringFlag{
		Name:     "role-id",
		Required: false,
		Usage:    `role (one)`,
	},
}
var PendingWorkspaceInviteCommonInteractiveCliFlags = []fireback.CliInteractiveFlag{
	{
		Name:        "value",
		StructField: "Value",
		Required:    false,
		Recommended: false,
		Usage:       `value`,
		Type:        "string",
	},
	{
		Name:        "type",
		StructField: "Type",
		Required:    false,
		Recommended: false,
		Usage:       `type`,
		Type:        "string",
	},
	{
		Name:        "coverLetter",
		StructField: "CoverLetter",
		Required:    false,
		Recommended: false,
		Usage:       `coverLetter`,
		Type:        "string",
	},
	{
		Name:        "workspaceName",
		StructField: "WorkspaceName",
		Required:    false,
		Recommended: false,
		Usage:       `workspaceName`,
		Type:        "string",
	},
}
var PendingWorkspaceInviteCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "x-src",
		Required: false,
		Usage:    `Import the body of the request from a file (e.g. json/yaml) on the disk`,
	},
	&cli.StringFlag{
		Name:  "x-accept",
		Usage: "Return type of the the content, such as json or yaml",
	},
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "value",
		Required: false,
		Usage:    `value (string)`,
	},
	&cli.StringFlag{
		Name:     "type",
		Required: false,
		Usage:    `type (string)`,
	},
	&cli.StringFlag{
		Name:     "cover-letter",
		Required: false,
		Usage:    `coverLetter (string)`,
	},
	&cli.StringFlag{
		Name:     "workspace-name",
		Required: false,
		Usage:    `workspaceName (string)`,
	},
	&cli.StringFlag{
		Name:     "role-id",
		Required: false,
		Usage:    `role (one)`,
	},
}
var PendingWorkspaceInviteCreateCmd cli.Command = PENDING_WORKSPACE_INVITE_ACTION_POST_ONE.ToCli()
var PendingWorkspaceInviteCreateInteractiveCmd cli.Command = cli.Command{
	Name:  "ic",
	Usage: "Creates a new entity, using requied fields in an interactive name",
	Flags: []cli.Flag{
		&cli.BoolFlag{
			Name:  "all",
			Usage: "Interactively asks for all inputs, not only required ones",
		},
	},
	Action: func(c *cli.Context) {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PENDING_WORKSPACE_INVITE_CREATE},
		})
		entity := &PendingWorkspaceInviteEntity{}
		fireback.PopulateInteractively(entity, c, PendingWorkspaceInviteCommonInteractiveCliFlags)
		if entity, err := PendingWorkspaceInviteActions.Create(entity, query); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := yaml.Marshal(entity)
			fmt.Println(fireback.FormatYamlKeys(string(f)))
		}
	},
}
var PendingWorkspaceInviteUpdateCmd cli.Command = cli.Command{
	Name:    "update",
	Aliases: []string{"u"},
	Flags:   PendingWorkspaceInviteCommonCliFlagsOptional,
	Usage:   "Updates entity by passing the parameters",
	Action: func(c *cli.Context) error {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PENDING_WORKSPACE_INVITE_UPDATE},
		})
		entity := CastPendingWorkspaceInviteFromCli(c)
		if entity, err := PendingWorkspaceInviteActions.Update(query, entity); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := json.MarshalIndent(entity, "", "  ")
			fmt.Println(string(f))
		}
		return nil
	},
}

func (x *PendingWorkspaceInviteEntity) FromCli(c *cli.Context) *PendingWorkspaceInviteEntity {
	return CastPendingWorkspaceInviteFromCli(c)
}
func CastPendingWorkspaceInviteFromCli(c *cli.Context) *PendingWorkspaceInviteEntity {
	template := &PendingWorkspaceInviteEntity{}
	fireback.HandleXsrc(c, template)
	if c.IsSet("uid") {
		template.UniqueId = c.String("uid")
	}
	if c.IsSet("pid") {
		template.ParentId = fireback.NewStringAutoNull(c.String("pid"))
	}
	if c.IsSet("value") {
		template.Value = c.String("value")
	}
	if c.IsSet("type") {
		template.Type = c.String("type")
	}
	if c.IsSet("cover-letter") {
		template.CoverLetter = c.String("cover-letter")
	}
	if c.IsSet("workspace-name") {
		template.WorkspaceName = c.String("workspace-name")
	}
	if c.IsSet("role-id") {
		template.RoleId = fireback.NewStringAutoNull(c.String("role-id"))
	}
	return template
}
func PendingWorkspaceInviteSyncSeederFromFs(fsRef *embed.FS, fileNames []string, q fireback.QueryDSL) {
	fireback.SeederFromFSImport(
		q,
		PendingWorkspaceInviteActions.Create,
		reflect.ValueOf(&PendingWorkspaceInviteEntity{}).Elem(),
		fsRef,
		fileNames,
		true,
	)
}
func PendingWorkspaceInviteSyncSeeders() {
	fireback.SeederFromFSImport(
		fireback.QueryDSL{WorkspaceId: fireback.USER_SYSTEM},
		PendingWorkspaceInviteActions.Create,
		reflect.ValueOf(&PendingWorkspaceInviteEntity{}).Elem(),
		pendingWorkspaceInviteSeedersFs,
		[]string{},
		true,
	)
}
func PendingWorkspaceInviteImportMocks() {
	fireback.SeederFromFSImport(
		fireback.QueryDSL{},
		PendingWorkspaceInviteActions.Create,
		reflect.ValueOf(&PendingWorkspaceInviteEntity{}).Elem(),
		&mocks.ViewsFs,
		[]string{},
		false,
	)
}
func PendingWorkspaceInviteWriteQueryMock(ctx fireback.MockQueryContext) {
	for _, lang := range ctx.Languages {
		itemsPerPage := 9999
		if ctx.ItemsPerPage > 0 {
			itemsPerPage = ctx.ItemsPerPage
		}
		f := fireback.QueryDSL{ItemsPerPage: itemsPerPage, Language: lang, WithPreloads: ctx.WithPreloads, Deep: true}
		items, count, _ := PendingWorkspaceInviteActions.Query(f)
		result := fireback.QueryEntitySuccessResult(f, items, count)
		fireback.WriteMockDataToFile(lang, "", "PendingWorkspaceInvite", result)
	}
}
func PendingWorkspaceInvitesActionQueryString(keyword string, page int) ([]string, *fireback.QueryResultMeta, *fireback.IError) {
	searchFields := []string{
		`unique_id %"{keyword}"%`,
		`name %"{keyword}"%`,
	}
	m := func(item *PendingWorkspaceInviteEntity) string {
		label := item.UniqueId
		// if item.Name != nil {
		// 	label += " >>> " + *item.Name
		// }
		return label
	}
	query := fireback.QueryStringCastCli(searchFields, keyword, page)
	items, meta, err := PendingWorkspaceInviteActions.Query(query)
	stringItems := []string{}
	for _, item := range items {
		label := m(item)
		stringItems = append(stringItems, label)
	}
	return stringItems, meta, err
}

var PendingWorkspaceInviteDevCommands = []cli.Command{
	PendingWorkspaceInviteWipeCmd,
	{
		Name:  "mock",
		Usage: "Generates mock records based on the entity definition",
		Flags: []cli.Flag{
			&cli.IntFlag{
				Name:  "count",
				Usage: "how many activation key do you need to be generated and stored in database",
				Value: 10,
			},
			&cli.BoolFlag{
				Name:  "batch",
				Usage: "Multiple insert into database mode. Might miss children and relations at the moment",
			},
		},
		Action: func(c *cli.Context) error {
			query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
				ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PENDING_WORKSPACE_INVITE_CREATE},
			})
			if c.Bool("batch") {
				PendingWorkspaceInviteActionSeederMultiple(query, c.Int("count"))
			} else {
				PendingWorkspaceInviteActionSeeder(query, c.Int("count"))
			}
			return nil
		},
	},
	{
		Name:    "init",
		Aliases: []string{"i"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Creates a basic seeder file for you, based on the definition module we have. You can populate this file as an example",
		Action: func(c *cli.Context) error {
			seed := PendingWorkspaceInviteActions.SeederInit()
			fireback.CommonInitSeeder(strings.TrimSpace(c.String("format")), seed)
			return nil
		},
	},
	cli.Command{
		Name:  "mlist",
		Usage: "Prints the list of embedded mocks into the app",
		Action: func(c *cli.Context) error {
			if entity, err := fireback.GetSeederFilenames(&mocks.ViewsFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "msync",
		Usage: "Tries to sync mocks into the system",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportEmbedCmd(c,
				PendingWorkspaceInviteActions.Create,
				reflect.ValueOf(&PendingWorkspaceInviteEntity{}).Elem(),
				&mocks.ViewsFs,
			)
			return nil
		},
	},
}
var PendingWorkspaceInviteImportExportCommands = []cli.Command{
	{
		Name:    "validate",
		Aliases: []string{"v"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "file",
				Usage: "Validates an import file, such as yaml, json, csv, and gives some insights how the after import it would look like",
				Value: "pending-workspace-invite-seeder-pending-workspace-invite.yml",
				// Uncomment before publish, they need to specify
				// Required: true,
			},
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Reads a yaml file containing an array of pending-workspace-invites, you can run this to validate if your import file is correct, and how it would look like after import",
		Action: func(c *cli.Context) error {
			data := &[]PendingWorkspaceInviteEntity{}
			fireback.ReadYamlFile(c.String("file"), data)
			fmt.Println(data)
			return nil
		},
	},
	cli.Command{
		Name:  "slist",
		Usage: "Prints the list of files attached to this module for syncing or bootstrapping project",
		Action: func(c *cli.Context) error {
			if entity, err := fireback.GetSeederFilenames(pendingWorkspaceInviteSeedersFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "ssync",
		Usage: "Tries to sync the embedded content into the database, the list could be seen by 'slist' command",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportEmbedCmd(c,
				PendingWorkspaceInviteActions.Create,
				reflect.ValueOf(&PendingWorkspaceInviteEntity{}).Elem(),
				pendingWorkspaceInviteSeedersFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:    "export",
		Aliases: []string{"e"},
		Flags: append(fireback.CommonQueryFlags,
			&cli.StringFlag{
				Name:     "file",
				Usage:    "The address of file you want the csv/yaml/json be exported to",
				Required: true,
			}),
		Usage: "Exports a query results into the csv/yaml/json format",
		Action: func(c *cli.Context) error {
			return fireback.CommonCliExportCmd2(c,
				PendingWorkspaceInviteEntityStream,
				reflect.ValueOf(&PendingWorkspaceInviteEntity{}).Elem(),
				c.String("file"),
				&metas.MetaFs,
				"PendingWorkspaceInviteFieldMap.yml",
				PendingWorkspaceInvitePreloadRelations,
			)
		},
	},
	cli.Command{
		Name: "import",
		Flags: append(
			append(
				fireback.CommonQueryFlags,
				&cli.StringFlag{
					Name:     "file",
					Usage:    "The address of file you want the csv be imported from",
					Required: true,
				}),
			PendingWorkspaceInviteCommonCliFlagsOptional...,
		),
		Usage: "imports csv/yaml/json file and place it and its children into database",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportCmdAuthorized(c,
				PendingWorkspaceInviteActions.Create,
				reflect.ValueOf(&PendingWorkspaceInviteEntity{}).Elem(),
				c.String("file"),
				&fireback.SecurityModel{
					ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PENDING_WORKSPACE_INVITE_CREATE},
				},
				func() PendingWorkspaceInviteEntity {
					v := CastPendingWorkspaceInviteFromCli(c)
					return *v
				},
			)
			return nil
		},
	},
}
var PendingWorkspaceInviteCliCommands []cli.Command = []cli.Command{
	PENDING_WORKSPACE_INVITE_ACTION_QUERY.ToCli(),
	PENDING_WORKSPACE_INVITE_ACTION_TABLE.ToCli(),
	PENDING_WORKSPACE_INVITE_ACTION_PATCH.ToCli(),
	PendingWorkspaceInviteCreateCmd,
	PendingWorkspaceInviteAskCmd,
	PendingWorkspaceInviteCreateInteractiveCmd,
	fireback.GetCommonRemoveQuery(
		reflect.ValueOf(&PendingWorkspaceInviteEntity{}).Elem(),
		PendingWorkspaceInviteActions.Remove,
	),
}

func PendingWorkspaceInviteCliFn() cli.Command {
	commands := append(PendingWorkspaceInviteImportExportCommands, PendingWorkspaceInviteCliCommands...)
	if !fireback.GetConfig().Production {
		commands = append(commands, PendingWorkspaceInviteDevCommands...)
	}
	return cli.Command{
		Name:        "pendingworkspaceinvite",
		Description: "PendingWorkspaceInvites module actions",
		Usage:       ``,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "language",
				Value: "en",
			},
		},
		Subcommands: commands,
	}
}

var PENDING_WORKSPACE_INVITE_ACTION_TABLE = fireback.Module3Action{
	Name:          "table",
	ActionAliases: []string{"t"},
	Flags:         fireback.CommonQueryFlags,
	Description:   "Table formatted queries all of the entities in database based on the standard query format",
	Action:        PendingWorkspaceInviteActions.Query,
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		fireback.CommonCliTableCmd2(c,
			PendingWorkspaceInviteActions.Query,
			security,
			reflect.ValueOf(&PendingWorkspaceInviteEntity{}).Elem(),
		)
		return nil
	},
}
var PENDING_WORKSPACE_INVITE_ACTION_QUERY = fireback.Module3Action{
	Method: "GET",
	Url:    "/pending-workspace-invites",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PENDING_WORKSPACE_INVITE_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			qs := &PendingWorkspaceInviteEntityQs{}
			fireback.HttpQueryEntity(c, PendingWorkspaceInviteActions.Query, qs)
		},
	},
	Format:         "QUERY",
	Action:         PendingWorkspaceInviteActions.Query,
	ResponseEntity: &[]PendingWorkspaceInviteEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "PendingWorkspaceInviteEntity",
	},
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		qs := &PendingWorkspaceInviteEntityQs{}
		fireback.CommonCliQueryCmd3(
			c,
			PendingWorkspaceInviteActions.Query,
			security,
			qs,
		)
		return nil
	},
	CliName:       "query",
	Name:          "query",
	ActionAliases: []string{"q"},
	Flags:         append(fireback.CommonQueryFlags, PendingWorkspaceInviteQsFlags...),
	Description:   "Queries all of the entities in database based on the standard query format (s+)",
}
var PENDING_WORKSPACE_INVITE_ACTION_EXPORT = fireback.Module3Action{
	Method: "GET",
	Url:    "/pending-workspace-invites/export",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PENDING_WORKSPACE_INVITE_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpStreamFileChannel(c, PendingWorkspaceInviteActionExport)
		},
	},
	Format:         "QUERY",
	Action:         PendingWorkspaceInviteActionExport,
	ResponseEntity: &[]PendingWorkspaceInviteEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "PendingWorkspaceInviteEntity",
	},
}
var PENDING_WORKSPACE_INVITE_ACTION_GET_ONE = fireback.Module3Action{
	Method: "GET",
	Url:    "/pending-workspace-invite/:uniqueId",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PENDING_WORKSPACE_INVITE_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpGetEntity(c, PendingWorkspaceInviteActions.GetOne)
		},
	},
	Format:         "GET_ONE",
	Action:         PendingWorkspaceInviteActions.GetOne,
	ResponseEntity: &PendingWorkspaceInviteEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "PendingWorkspaceInviteEntity",
	},
}
var PENDING_WORKSPACE_INVITE_ACTION_POST_ONE = fireback.Module3Action{
	Name:          "create",
	ActionAliases: []string{"c"},
	Description:   "Create new pendingWorkspaceInvite",
	Flags:         PendingWorkspaceInviteCommonCliFlags,
	Method:        "POST",
	Url:           "/pending-workspace-invite",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PENDING_WORKSPACE_INVITE_CREATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpPostEntity(c, PendingWorkspaceInviteActions.Create)
		},
	},
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		result, err := fireback.CliPostEntity(c, PendingWorkspaceInviteActions.Create, security)
		fireback.HandleActionInCli(c, result, err, map[string]map[string]string{})
		if err != nil {
			return err
		}
		return nil
	},
	Action:         PendingWorkspaceInviteActions.Create,
	Format:         "POST_ONE",
	RequestEntity:  &PendingWorkspaceInviteEntity{},
	ResponseEntity: &PendingWorkspaceInviteEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "PendingWorkspaceInviteEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "PendingWorkspaceInviteEntity",
	},
}
var PENDING_WORKSPACE_INVITE_ACTION_PATCH = fireback.Module3Action{
	Name:          "update",
	ActionAliases: []string{"u"},
	Flags:         PendingWorkspaceInviteCommonCliFlagsOptional,
	Method:        "PATCH",
	Url:           "/pending-workspace-invite",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PENDING_WORKSPACE_INVITE_UPDATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntity(c, PendingWorkspaceInviteActions.Update)
		},
	},
	Action:         PendingWorkspaceInviteActions.Update,
	RequestEntity:  &PendingWorkspaceInviteEntity{},
	ResponseEntity: &PendingWorkspaceInviteEntity{},
	Format:         "PATCH_ONE",
	Out: &fireback.Module3ActionBody{
		Entity: "PendingWorkspaceInviteEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "PendingWorkspaceInviteEntity",
	},
	Description: "Update the PendingWorkspaceInvite entity by unique id",
	CliName:     "update",
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		result, err := fireback.CliPatchEntity(c, PendingWorkspaceInviteActions.Update, security)
		fireback.HandleActionInCli(c, result, err, map[string]map[string]string{})
		if err != nil {
			return err
		}
		return nil
	},
}
var PENDING_WORKSPACE_INVITE_ACTION_PATCH_BULK = fireback.Module3Action{
	Method: "PATCH",
	Url:    "/pending-workspace-invites",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PENDING_WORKSPACE_INVITE_UPDATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntities(c, PendingWorkspaceInviteActionBulkUpdate)
		},
	},
	Action:         PendingWorkspaceInviteActionBulkUpdate,
	Format:         "PATCH_BULK",
	RequestEntity:  &fireback.BulkRecordRequest[PendingWorkspaceInviteEntity]{},
	ResponseEntity: &fireback.BulkRecordRequest[PendingWorkspaceInviteEntity]{},
	Out: &fireback.Module3ActionBody{
		Entity: "PendingWorkspaceInviteEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "PendingWorkspaceInviteEntity",
	},
}
var PENDING_WORKSPACE_INVITE_ACTION_DELETE = fireback.Module3Action{
	Method: "DELETE",
	Url:    "/pending-workspace-invite",
	Format: "DELETE_DSL",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PENDING_WORKSPACE_INVITE_DELETE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpRemoveEntity(c, PendingWorkspaceInviteActions.Remove)
		},
	},
	Action:         PendingWorkspaceInviteActions.Remove,
	RequestEntity:  &fireback.DeleteRequest{},
	ResponseEntity: &fireback.DeleteResponse{},
	TargetEntity:   &PendingWorkspaceInviteEntity{},
}

/**
 *	Override this function on PendingWorkspaceInviteEntityHttp.go,
 *	In order to add your own http
 **/
var AppendPendingWorkspaceInviteRouter = func(r *[]fireback.Module3Action) {}

func GetPendingWorkspaceInviteModule3Actions() []fireback.Module3Action {
	routes := []fireback.Module3Action{
		PENDING_WORKSPACE_INVITE_ACTION_QUERY,
		PENDING_WORKSPACE_INVITE_ACTION_EXPORT,
		PENDING_WORKSPACE_INVITE_ACTION_GET_ONE,
		PENDING_WORKSPACE_INVITE_ACTION_POST_ONE,
		PENDING_WORKSPACE_INVITE_ACTION_PATCH,
		PENDING_WORKSPACE_INVITE_ACTION_PATCH_BULK,
		PENDING_WORKSPACE_INVITE_ACTION_DELETE,
	}
	// Append user defined functions
	AppendPendingWorkspaceInviteRouter(&routes)
	return routes
}

var PERM_ROOT_PENDING_WORKSPACE_INVITE = fireback.PermissionInfo{
	CompleteKey: "root.modules.abac.pending-workspace-invite.*",
	Name:        "Entire pending workspace invite actions (*)",
	Description: "",
}
var PERM_ROOT_PENDING_WORKSPACE_INVITE_DELETE = fireback.PermissionInfo{
	CompleteKey: "root.modules.abac.pending-workspace-invite.delete",
	Name:        "Delete pending workspace invite",
	Description: "",
}
var PERM_ROOT_PENDING_WORKSPACE_INVITE_CREATE = fireback.PermissionInfo{
	CompleteKey: "root.modules.abac.pending-workspace-invite.create",
	Name:        "Create pending workspace invite",
	Description: "",
}
var PERM_ROOT_PENDING_WORKSPACE_INVITE_UPDATE = fireback.PermissionInfo{
	CompleteKey: "root.modules.abac.pending-workspace-invite.update",
	Name:        "Update pending workspace invite",
	Description: "",
}
var PERM_ROOT_PENDING_WORKSPACE_INVITE_QUERY = fireback.PermissionInfo{
	CompleteKey: "root.modules.abac.pending-workspace-invite.query",
	Name:        "Query pending workspace invite",
	Description: "",
}
var ALL_PENDING_WORKSPACE_INVITE_PERMISSIONS = []fireback.PermissionInfo{
	PERM_ROOT_PENDING_WORKSPACE_INVITE_DELETE,
	PERM_ROOT_PENDING_WORKSPACE_INVITE_CREATE,
	PERM_ROOT_PENDING_WORKSPACE_INVITE_UPDATE,
	PERM_ROOT_PENDING_WORKSPACE_INVITE_QUERY,
	PERM_ROOT_PENDING_WORKSPACE_INVITE,
}

func NewPendingWorkspaceInviteCreatedEvent(
	payload *PendingWorkspaceInviteEntity,
	query *fireback.QueryDSL,
) (*fireback.Event, error) {
	event := &fireback.Event{
		Name:    "PendingWorkspaceInviteCreated",
		Payload: payload,
		Security: &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{
				PERM_ROOT_PENDING_WORKSPACE_INVITE_QUERY,
			},
		},
		CacheKey: "*abac.PendingWorkspaceInviteEntity",
	}
	// Apply the source of the event based on querydsl
	fireback.ApplyQueryDslContextToEvent(event, *query)
	return event, nil
}
func NewPendingWorkspaceInviteUpdatedEvent(
	payload *PendingWorkspaceInviteEntity,
	query *fireback.QueryDSL,
) (*fireback.Event, error) {
	event := &fireback.Event{
		Name:    "PendingWorkspaceInviteUpdated",
		Payload: payload,
		Security: &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{
				PERM_ROOT_PENDING_WORKSPACE_INVITE_QUERY,
			},
		},
		CacheKey: "*abac.PendingWorkspaceInviteEntity",
	}
	// Apply the source of the event based on querydsl
	fireback.ApplyQueryDslContextToEvent(event, *query)
	return event, nil
}

var PendingWorkspaceInviteEntityBundle = fireback.EntityBundle{
	Permissions: ALL_PENDING_WORKSPACE_INVITE_PERMISSIONS,
	// Cli command has been exluded, since we use module to wrap all the entities
	// to be more easier to wrap up.
	// Create your own bundle if you need with Cli
	//CliCommands: []cli.Command{
	//	PendingWorkspaceInviteCliFn(),
	//},
	Actions:      GetPendingWorkspaceInviteModule3Actions(),
	MockProvider: PendingWorkspaceInviteImportMocks,
	AutoMigrationEntities: []interface{}{
		&PendingWorkspaceInviteEntity{},
	},
	MigrationScripts: []fireback.MigrationScript{},
}
