name: abac
actions:
  - name: osLoginAuthenticate
    method: get
    url: /passports/os/login
    cliName: oslogin
    description: 
      Logins into the system using operating system (current) user, and store the information
      for them. Useful for desktop applications.
    out:
      dto: UserSessionDto
  - name: acceptInvite
    method: post
    url: /user/invitation/accept
    description: 
      Use it when user accepts an invitation, and it will complete the joining process
    security:
      resolveStrategy: user
        
    in:
      fields:
        - name: invitationUniqueId
          type: string
          validate: required
          description: 
            The invitation id which will be used to process


  - name: oauthAuthenticate
    description: 
      When a token is got from a oauth service such as google,
      we send the token here to authenticate the user.
      To me seems this doesn't need to have 2FA or anything, so we return
      the session directly, or maybe there needs to be next step.
    url: /passport/via-oauth
    method: post
    in:
      fields:
      - name: token
        type: string
        description: 
          The token that Auth2 provider returned to the front-end, which will
          be used to validate the backend
      - name: service
        type: string
        description: 
          The service name, such as "google" which later backend will use to authorize the token
          and create the user.
    out:
      fields:
      - name: session
        type: one
        target: UserSessionDto
      - name: next
        type: arrayP
        primitive: string
        description: 
          The next possible action which is suggested.
  
  # - name: addPassport
  #   url: /users/passports/add
  #   security:
  #     resolveStrategy: user
  #   method: post
  #   in:
  #     fields:
  #       - name: value
  #         description: 
  #           The new passport value
      
  - name: userPassports
    url: /user/passports
    security:
      resolveStrategy: user
    description: 
      Returns list of passports belongs to an specific user.
    actionAliases:
      - upass
    format: query
    method: get
    out:
      fields:
        - name: value
          type: string
          description: 
            The passport value, such as email address or phone number
        - name: uniqueId
          type: string
          description: 
            Unique identifier of the passport to operate some action on top of it
        - name: type
          type: string
          description: 
            The type of the passport, such as email, phone number
        - name: totpConfirmed
          type: bool
          description: 
            Regardless of the secret, user needs to confirm his secret. There is an extra action
            to confirm user totp, could be used after signup or prior to login.
  - name: changePassword
    url: /passport/change-password
    security:
      resolveStrategy: user
    description: 
      Change the password for a given passport of the user. User needs to be authenticated in
      order to be able to change the password for a given account.
    actionAliases:
      - cp
    format: POST_ONE
    method: post
    in:
      fields:
        - name: password
          type: string
          description: 
            New password meeting the security requirements.
          validate: required
        - name: uniqueId
          validate: required
          description: 
            The passport uniqueId (not the email or phone number) which password would be applied to.
            Don't confuse with value.
          type: string
  - name: userInvitations
    description: 
      Shows the invitations for an specific user, if the invited member already has a account.
      It's based on the passports, so if the passport is authenticated we will show them.
    format: query
    url: /users/invitations
    method: get
    security:
      resolveStrategy: user
    out:
      dto: UserInvitationsQueryColumns
  - name: confirmClassicPassportTotp
    description: 
      When user requires to setup the totp for an specifc passport, they can use this endpoint to confirm
      it.
    method: post
    url: /passport/totp/confirm
    in:
      fields:
        - name: value
          type: string
          validate: required
          description: 
            Passport value, email or phone number which is already successfully registered.
        - name: password
          type: string
          validate: required
          description: 
            Password related to the passport. Totp is only available for passports with a password.
            Basically totp is protecting passport, not otp over email or sms.
        - name: totpCode
          type: string
          validate: required
          description: 
            The totp code generated by authenticator such as google or microsft apps.
    out:
      fields:
      - name: session
        type: one
        target: UserSessionDto
  - name: checkPassportMethods
    url: /passports/available-methods
    description: 
      Publicly available information to create the authentication form, and show users
      how they can signin or signup to the system. Based on the PassportMethod entities,
      it will compute the available methods for the user, considering their region (IP for example)
    method: get
    out:
      fields:
        - name: email
          type: bool
          default: false
        - name: phone
          type: bool
          default: false
        - name: google
          type: bool
          default: false
        - name: facebook
          type: bool
          default: false
        - name: googleOAuthClientKey
          type: string
        - name: facebookAppId
          type: string
        - name: enabledRecaptcha2
          type: bool
          default: false
        - name: recaptcha2ClientKey
          type: string
  - name: queryWorkspaceTypesPublicly
    format: query
    method: get
    url: /workspace/public/types
    cliName: public-types
    description: 
      Returns the workspaces types available in the project publicly without authentication,
      and the value could be used upon signup to go different route.
    out:
      fields:
      - name: title
        type: string
      - name: description
        type: string
      - name: uniqueId
        type: string
      - name: slug
        type: string
  
  - name: queryUserRoleWorkspaces
    format: query
    method: get
    url: /urw/query
    cliName: urw
    security:
      resolveStrategy: user
    description: 
      Returns the workspaces that user belongs to, as well as his role in there,
      and the permissions for each role
    out:
      fields:
      - name: name
        type: string
      - name: capabilities
        type: arrayP
        description: 
          Workspace level capabilities which are available
        primitive: string
      - name: uniqueId
        type: string
      - name: roles
        type: array
        fields:
        - name: name
          type: string
        - name: uniqueId
          type: string
        - name: capabilities
          type: arrayP
          description: 
            Capabilities related to this role which are available
          primitive: string

  - name: signout
    url: /passport/signout
    description: Signout the user, clears cookies or does anything else if needed.
    method: post
    
  - name: reactiveSearch
    description: 
      Reactive search is a general purpose search mechanism for different modules,
      and could be used in mobile apps or front-end to quickly search for a entity.
    url: reactive-search
    method: reactive
    format: reactive
  - name: importUser
    url: /user/import
    method: post
    
    description: 'Imports users, and creates their passports, and all details'
    in:
      fields:
        - name: path
          type: string
    out:
      dto: OkayResponseDto
  - name: sendEmail
    url: /email/send
    cliName: email
    method: post
    description: Send a email using default root notification configuration
    in:
      fields:
        - name: toAddress
          validate: required
          type: string
        - name: body
          validate: required
          type: string
    out:
      fields:
      - name: queueId
        type: string
  - name: sendEmailWithProvider
    url: /emailProvider/send
    cliName: emailp
    method: post
    description: Send a text message using an specific gsm provider
    in:
      fields:
        - name: emailProvider
          type: one
          target: EmailProviderEntity
        - name: toAddress
          validate: required
          type: string
        - name: body
          validate: required
          type: string
    out:
      fields:
        - name: queueId
          type: string
  - name: inviteToWorkspace
    url: /workspace/invite
    cliName: invite
    method: post
    description: 'Invite a new person (either a user, with passport or without passport)'
    in:
      entity: WorkspaceInviteEntity
    out:
      entity: WorkspaceInviteEntity
  - name: gsmSendSms
    url: /gsm/send/sms
    cliName: sms
    method: post
    description: Send a text message using default root notification configuration
    in:
      fields:
        - name: toNumber
          validate: required
          type: string
        - name: body
          validate: required
          type: string
    out:
      fields:
        - name: queueId
          type: string
  - name: gsmSendSmsWithProvider
    url: /gsmProvider/send/sms
    cliName: smsp
    method: post
    description: Send a text message using an specific gsm provider
    in:
      fields:
        - name: gsmProvider
          type: one
          target: GsmProviderEntity
        - name: toNumber
          validate: required
          type: string
        - name: body
          validate: required
          type: string
    out:
      fields:
        - name: queueId
          type: string
  - name: classicSignin
    url: /passports/signin/classic
    cliName: in
    description: 'Signin publicly to and account using class passports (email, password)'
    method: post
    in:
      fields:
        - name: value
          type: string
          validate: required
        - name: password
          type: string
          validate: required
        - name: totpCode
          type: string
          description: 
            Accepts login with totp code. If enabled, first login would return a success response
            with next[enter-totp] value and ui can understand that user needs to be navigated
            into the screen other screen.
        - name: sessionSecret
          type: string
          description: 
            Session secret when logging in to the application requires
            more steps to complete.
    out:
      fields:
      - name: session
        type: one
        target: UserSessionDto
      - name: next
        type: arrayP
        primitive: string
        description: 
          The next possible action which is suggested.
      - name: totpUrl
        type: string
        description: 
          In case the account doesn't have totp, but enforced by installation,
          this value will contain the link
      - name: sessionSecret
        type: string
        description: 
          Returns a secret session if the authentication requires more steps.
  - name: classicSignup
    url: /passports/signup/classic
    cliName: up
    description: >-
      Signup a user into system via public access (aka website visitors) using
      either email or phone number.
    method: post
    in:
      fields:
        - name: value
          validate: required
          type: string
        - name: sessionSecret
          type: string
          description: 
            Required when the account creation requires recaptcha, or otp approval
            first. If such requirements are there, you first need to follow the otp
            apis, get the session secret and pass it here to complete the setup.
        - name: type
          type: enum
          of:
            - k: phonenumber
            - k: email
          validate: required
        - name: password
          type: string
          validate: required
        - name: firstName
          type: string
          validate: required
        - name: lastName
          type: string
          validate: required
        - name: inviteId
          type: string?
        - name: publicJoinKeyId
          type: string?
        - name: workspaceTypeId
          type: string?
          validate: required
    out:
      fields:
      - name: session
        type: one
        target: UserSessionDto
        description: 
          Returns the user session in case that signup is completely successful.
      - name: totpUrl
        type: string
        description: 
          If time based otp is available, we add it response to make it easier for ui.
      - name: continueToTotp
        type: bool
        description: 
          Returns true and session will be empty if, the totp is required by the installation.
          In such scenario, you need to forward user to setup totp screen.
      - name: forcedTotp
        type: bool
        description: 
          Determines if user must complete totp in order to continue based on workspace
          or installation
  - name: createWorkspace
    method: post
    url: /workspaces/create
    in:
      fields:
        - name: name
          type: string
        - name: workspace
          type: one
          target: WorkspaceEntity
        - name: workspaceId
          type: string?
    out:
      entity: WorkspaceEntity
  - name: checkClassicPassport
    method: post
    cliName: ccp
    description: >-
      Checks if a classic passport (email, phone) exists or not, used in multi
      step authentication
    url: /workspace/passport/check
    in:
      fields:
        - name: value
          type: string
          validate: required
        - name: securityToken
          type: string
          description: 
            This can be the value of recaptcha2, recaptch3, or generate security image or voice
            for verification. Will be used based on the configuration.
    out:
      fields:
        - name: next
          type: arrayP
          primitive: string
          description: 
            The next possible action which is suggested.
        - name: flags
          type: arrayP
          primitive: string
          description: 
            Extra information that can be useful actually when doing onboarding.
            Make sure sensetive information doesn't go out.
        - name: otpInfo
          type: object
          description: 
            If the endpoint automatically triggers a send otp, then it would be holding that information,
            Also the otp information can become available.
          fields:
            - name: suspendUntil
              type: int64
            - name: validUntil
              type: int64
            - name: blockedUntil
              type: int64
            - name: secondsToUnblock
              type: int64
              description: The amount of time left to unblock for next request
  - name: classicPassportOtp
    description: >-
      Authenticate the user publicly for classic methods using communication
      service, such as sms, call, or email. You need to call classicPassportRequestOtp
      beforehand to send a otp code, and then validate it with this API.
      Also checkClassicPassport action might already sent the otp, so make sure you don't
      send it twice.
    method: post
    cliName: otp
    url: /workspace/passport/otp
    in:
      fields:
        - name: value
          type: string
          validate: required
        - name: otp
          validate: required
          type: string
    out:
      fields:
        - name: session
          type: one
          target: UserSessionDto
        - name: totpUrl
          type: string
          description: 
            If time based otp is available, we add it response to make it easier for ui.
        - name: sessionSecret
          type: string
          description: The session secret will be used to call complete user registeration api.
        - name: continueWithCreation
          type: bool
          description: 
            If return true, means the OTP is correct and user needs to be created
            before continue the authentication processs.
  - name: classicPassportRequestOtp
    description: >-
      Triggers an otp request, and will send an sms or email to the passport.
      This endpoint is not used for login, but rather makes a request at initial
      step. Later you can call classicPassportOtp to get in.
    method: post
    cliName: otp-request
    url: /workspace/passport/request-otp
    in:
      fields:
        - name: value
          type: string
          validate: required
          description: 
            Passport value (email, phone number) which would be recieving the otp code.
    out:
      fields:
        - name: suspendUntil
          type: int64
        - name: validUntil
          type: int64
        - name: blockedUntil
          type: int64
        - name: secondsToUnblock
          type: int64
          description: The amount of time left to unblock for next request
dtos:
  - name: userImport
    fields:
      - name: avatar
        type: string
      - name: passports
        type: array
        fields:
          - name: value
            type: string
          - name: password
            type: string
      - name: address
        type: object
        fields:
          - name: street
            type: string
          - name: zipCode
            type: string
          - name: city
            type: string
          - name: country
            type: string
  - name: permissionInfo
    fields:
      - name: name
        type: string
      - name: description
        type: string
      - name: completeKey
        type: string
  - name: userRoleWorkspace
    fields:
      - name: roleId
        type: string
      - name: capabilities
        type: arrayP
        primitive: string
  - name: importRequest
    fields:
      - name: file
        type: string
  - name: okayResponse
  - name: testMail
    fields:
      - name: senderId
        type: string
      - name: toName
        type: string
      - name: toEmail
        type: string
      - name: subject
        type: string
      - name: content
        type: string
  - name: assignRole
    fields:
      - name: roleId
        type: string
      - name: userId
        type: string
      - name: visibility
        type: string
      - name: updated
        type: int64
      - name: created
        type: int64
  - name: exchangeKeyInformation
    fields:
      - name: key
        type: string
      - name: visibility
        type: string

  - name: reactiveSearchResult
    fields:
      - type: string
        name: uniqueId
      - type: string
        name: phrase
      - type: string
        name: icon
      - type: string
        name: description
      - type: string
        name: group
      - type: string
        name: uiLocation
      - type: string
        name: actionFn
  - name: classicAuth
    fields:
      - name: value
        type: string
        validate: required
      - name: password
        type: string
        validate: required
      - name: firstName
        type: string
        validate: required
      - name: lastName
        type: string
        validate: required
      - name: inviteId
        type: string
      - name: publicJoinKeyId
        type: string
      - name: workspaceTypeId
        type: string
  - name: emailAccountSignin
    fields:
      - name: email
        type: string
        validate: required
      - name: password
        validate: required
        type: string
  - name: phoneNumberAccountCreation
    fields:
      - name: phoneNumber
        type: string
  - name: userSession
    fields:
      - name: passport
        type: one
        target: PassportEntity
      - name: token
        type: string
      - name: exchangeKey
        type: string
      - name: userWorkspaces
        type: many2many
        target: UserWorkspaceEntity
      - name: user
        type: one
        target: UserEntity
      - name: userId
        type: string?
  - name: otpAuthenticate
    fields:
      - name: value
        type: string
        validate: required
      - name: otp
        type: string
      - name: type
        type: string
        validate: required
      - name: password
        type: string
        validate: required
  - name: emailOtpResponse
    fields:
      - name: request
        type: one
        target: PublicAuthenticationEntity
      - name: userSession
        type: one
        target: UserSessionDto
  - name: resetEmail
    fields:
      - name: password
        type: string
entities:
  - name: timezoneGroup
    description: World timezone information
    queryScope: public
    cliName: tz
    fields:
      - name: value
        type: string
        translate: true
      - name: abbr
        type: string
      - name: offset
        type: int64
      - name: isdst
        type: bool
      - name: text
        type: string
        translate: true
      - name: utcItems
        type: array
        fields:
          - name: name
            type: string
            translate: true
            validate: required

  - name: file
    description: 'File manager, uploading files and actions related.'
    permRewrite:
      replace: root.modules
      with: root.manage
    fields:
      - name: name
        type: string
      - name: diskPath
        type: string
      - name: size
        type: int64
      - name: virtualPath
        type: string
      - name: type
        type: string
      - name: variations
        type: array
        fields:
          - name: name
            type: string
  - name: tableViewSizing
    cliShort: tvs
    description: >-
      Used to store meta data about user tables (in front-end, or apps for
      example) about the size of the columns
    fields:
      - name: tableName
        type: string
        validate: required
      - name: sizes
        type: string
  - name: appMenu
    cte: true
    description: 'Manages the menus in the app, (for example tab views, sidebar items, etc.)'
    fields:
      - name: label
        type: string
        translate: true
        recommended: true
        description: 
          Label that will be visible to user
      - name: href
        type: string
        recommended: true
        description: 
          Location that will be navigated in case of click or selection on ui
      - name: icon
        type: string
        recommended: true
        description: 
          Icon string address which matches the resources on the front-end apps.
      - name: activeMatcher
        type: string
        description: 
          Custom window location url matchers, for inner screens.
      - name: capability
        type: one
        target: CapabilityEntity
        fields: []
        module: fireback
        description: 
          The permission which is required for the menu to be visible.
  - name: backupTableMeta
    cliName: backup
    permRewrite:
      replace: root.modules
      with: root.manage
    description: >-
      Keeps information about which tables to be used during backup (mostly
      internal)
    fields:
      - name: tableNameInDb
        type: string
  - name: notificationConfig
    distinctBy: workspace
    permRewrite:
      replace: root.modules
      with: root.manage
    security:
      writeOnRoot: true
      resolveStrategy: workspace
    description: >-
      Configuration for the notifications used in the app, such as default gsm
      number, email senders, and many more
    cliShort: config
    fields:
      - name: cascadeToSubWorkspaces
        type: bool
      - name: forcedCascadeEmailProvider
        type: bool
      - name: generalEmailProvider
        type: one
        target: EmailProviderEntity
        allowCreate: false
      - name: generalGsmProvider
        type: one
        target: GsmProviderEntity
        allowCreate: false
      - name: inviteToWorkspaceContent
        type: string
        gorm: text
      - name: inviteToWorkspaceContentExcerpt
        gorm: text
        type: string
      - name: inviteToWorkspaceContentDefault
        gorm: text
        sql: '-'
        type: string
      - name: inviteToWorkspaceContentDefaultExcerpt
        type: string
        gorm: text
        sql: '-'
      - name: inviteToWorkspaceTitle
        type: string
      - name: inviteToWorkspaceTitleDefault
        sql: '-'
        type: string
      - name: inviteToWorkspaceSender
        type: one
        target: EmailSenderEntity
      - name: accountCenterEmailSender
        type: one
        target: EmailSenderEntity
      - name: forgetPasswordContent
        gorm: text
        type: string
      - name: forgetPasswordContentExcerpt
        gorm: text
        type: string
      - name: forgetPasswordContentDefault
        gorm: text
        type: string
        sql: '-'
      - name: forgetPasswordContentDefaultExcerpt
        gorm: text
        sql: '-'
        type: string
      - name: forgetPasswordTitle
        gorm: text
        type: string
      - name: forgetPasswordTitleDefault
        gorm: text
        sql: '-'
        type: string
      - name: forgetPasswordSender
        type: one
        target: EmailSenderEntity
      - name: acceptLanguage
        type: text
      - name: confirmEmailSender
        type: one
        target: EmailSenderEntity
        fields: []
      - name: confirmEmailContent
        gorm: text
        type: string
      - name: confirmEmailContentExcerpt
        gorm: text
        type: string
      - name: confirmEmailContentDefault
        type: string
        gorm: text
        sql: '-'
      - name: confirmEmailContentDefaultExcerpt
        gorm: text
        sql: '-'
        type: string
      - name: confirmEmailTitle
        type: string
      - name: confirmEmailTitleDefault
        type: string
        sql: '-'
  - name: passportMethod
    cliShort: method
    permRewrite:
      replace: root.modules
      with: root.manage
    features:
      mock: false
      msync: false
    security:
      writeOnRoot: true
      resolveStrategy: workspace
    description: >-
      Login/Signup methods which are available in the app for different regions
      (Email, Phone Number, Google, etc)
    fields:
      - name: type
        type: enum
        validate: oneof=email phone google facebook,required
        of:
          - k: email
            description: Authenticate users using email
          - k: phone
            description: Authenticat users using phone number, can be sms, calls, or whatsapp.
          - k: google
            description: Users can be authenticated using their google account
          - k: facebook
            description: Users can be authenticated using their facebook account
      - name: region
        type: enum
        default: global
        description: 
          The region which would be using this method of passports for authentication.
          In Fireback open-source, only 'global' is available.
        of:
          - k: global
        validate: required,oneof=global
      - name: clientKey
        type: string
        description: Client key for those methods such as 'google' which require oauth client key
      # - name: configuration
      #   type: json
      #   description:
      #     Configuration related to the passport method, for different types
  - name: workspaceInvite
    cliShort: invite
    description: >-
      Active invitations for non-users or already users to join an specific
      workspace, created by administration of the workspace
    fields:
      - name: publicKey
        type: string
        description: 
          A long hash to get the user into the confirm or signup page without sending
          the email or phone number, for example if an administrator wants to copy the link.
      - name: coverLetter
        type: string
        description: 
          The content that user will receive to understand the reason of the letter.
      - name: targetUserLocale
        type: string
        description: 
          If the invited person has a different language, then you can define
          that so the interface for him will be automatically translated.
      - name: email
        type: string
        description: 
          The email address of the person which is invited.
      - name: phonenumber
        type: string
        description: 
          The phone number of the person which is invited.
      - name: workspace
        type: one
        target: WorkspaceEntity
        allowCreate: false
        description: 
          Workspace which user is being invite to.
      - name: firstName
        type: string
        validate: required
        description: 
          First name of the person which is invited
      - name: lastName
        validate: required
        type: string
        description: 
          Last name of the person which is invited.
      - name: forceEmailAddress
        type: bool?
        description: 
          If forced, the email address cannot be changed by the user which has been invited.
      - name: forcePhoneNumber
        type: bool?
        description: 
          If forced, user cannot change the phone number and needs to complete signup.
      - name: role
        type: one
        description: 
          The role which invitee get if they accept the request.
        validate: required
        target: RoleEntity
        allowCreate: false
        fields: []
  - name: pendingWorkspaceInvite
    fields:
      - name: value
        type: string
      - name: type
        type: string
      - name: coverLetter
        type: string
      - name: workspaceName
        type: string
      - name: role
        type: one
        target: RoleEntity
        allowCreate: false
        fields: []
  - name: preference
    fields:
      - name: timezone
        type: string
  - name: token
    security:
      writeOnRoot: true
    permRewrite:
      replace: root.modules
      with: root.manage
    fields:
      - name: user
        type: one
        allowCreate: false
        target: UserEntity
        fields: []
      - name: token
        type: string
      - name: validUntil
        type: datetime
  - name: userWorkspace
    permRewrite:
      replace: root.modules
      with: root.manage
    cliShort: user
    description: >-
      Manage the workspaces that user belongs to (either its himselves or adding
      by invitation)
    security:
      resolveStrategy: user
    gormMap:
      workspaceId: 'index:userworkspace_idx,unique'
      userId: 'index:userworkspace_idx,unique'
    fields:
      - name: user
        type: one
        target: UserEntity
      - name: workspace
        type: one
        target: WorkspaceEntity
        fields: []
      - name: userPermissions
        gorm: '-'
        sql: '-'
        type: arrayP
        primitive: string
      - name: rolePermission
        gorm: '-'
        sql: '-'
        type: arrayP
        primitive: UserRoleWorkspaceDto
      - name: workspacePermissions
        gorm: '-'
        sql: '-'
        type: arrayP
        primitive: string
  - name: workspaceRole
    permRewrite:
      replace: root.modules
      with: root.manage
    cliShort: role
    description: >-
      Manage roles assigned to an specific workspace or created by the workspace
      itself
    fields:
      - name: userWorkspace
        type: one
        target: UserWorkspaceEntity
        idFieldGorm: 'index:workspacerole_idx,unique'
      - name: role
        type: one
        target: RoleEntity
        idFieldGorm: 'index:workspacerole_idx,unique'
        fields: []
  - name: user
    permRewrite:
      replace: root.modules
      with: root.manage
    security:
      writeOnRoot: true
    rpc:
      query:
        qs:
          - name: withImages
            type: bool?
    description: Manage the users who are in the current app (root only)
    events:
    - name: Googoli2
      description: Googlievent
      payload:
        fields:
          - name: entity
            type: string
    fields:
      - name: firstName
        type: string
        validate: required
      - name: lastName
        type: string
        validate: required
      - name: photo
        type: string
      - name: gender
        type: int?
      - name: title
        type: string
      - name: birthDate
        type: date
      - name: avatar
        type: string
      - name: lastIpAddress
        type: string
        description: 
          User last connecting ip address
      - name: primaryAddress
        type: embed
        description: 
          User primary address location. Can be useful for simple projects that a user is associated
          with a single address. 
        fields:
        - name: addressLine1       
          description: Street address, building number
          type: string
        - name: addressLine2       
          description: Apartment, suite, floor (optional)
          type: string?
        - name: city             
          description: City or locality
          type: string?
        - name: stateOrProvince   
          description: State, region, or province
          type: string?
        - name: postalCode         
          description: ZIP or postal code
          type: string?
        - name: countryCode        
          description: ISO 3166-1 alpha-2 (e.g., \"US\", \"DE\")
          type: string?


  - name: userProfile
    fields:
      - name: firstName
        type: string
      - name: lastName
        type: string
  - name: workspace
    cte: true
    cliName: ws
    security:
      readOnRoot: true
      writeOnRoot: true
    permRewrite:
      replace: root.modules
      with: root.manage
    description: 'Fireback general user role, workspaces services.'
    fields:
      - name: description
        type: string
      - name: name
        validate: required
        type: string
      - name: type
        type: one
        target: WorkspaceTypeEntity
        validate: required
        fields: []
  - name: role
    description: 'Manage roles within the workspaces, or root configuration'
    messages:
      roleNeedsOneCapability:
        en: Role atleast needs one capability to be selected.
    fields:
      - name: name
        type: string
        validate: 'required,omitempty,min=1,max=200'
      - name: capabilities
        type: many2many
        target: CapabilityEntity
        allowCreate: false
        module: fireback
  - name: workspaceConfig
    cliName: config
    permRewrite:
      replace: root.modules
      with: root.manage
    distinctBy: workspace
    description: 
      Contains configuration which would be necessary for application environment to be running.
      At the moment, a single record is allowed, and only for root workspace. But in theory
      it could be configured per each workspace independently.
      For sub projects do not touch this, rather create a custom config entity if workspaces
      in the product need extra config.
    security:
      writeOnRoot: true
      readOnRoot: true
      resolveStrategy: workspace
    fields:
      - name: enableRecaptcha2
        type: bool?
        description: Enables the recaptcha2 for authentication flow.
      - name: enableOtp
        recommended: true
        type: bool?
        description: 
          Enables the otp option. It's not forcing it, so user can choose if they want otp or password.
      - name: requireOtpOnSignup
        type: bool?
        recommended: true
        description: 
          Forces the user to have otp verification before can create an account.
          They can define their password still.
      - name: requireOtpOnSignin
        type: bool?
        recommended: true
        description: 
          Forces the user to use otp when signing in. Even if they have password set,
          they won't use it and only will be able to signin using that otp.
        default: false
      - name: recaptcha2ServerKey
        type: string
        description: 
          Secret which would be used to decrypt if the recaptcha is correct.
          Should not be available publicly.
      - name: recaptcha2ClientKey
        type: string
        description: 
          Secret which would be used for recaptcha2 on the client side. Can be publicly visible,
          and upon authenticating users it would be sent to front-end.
      - name: enableTotp
        type: bool?
        recommended: true
        description: 
          Enables user to make 2FA using apps such as google authenticator or microsoft authenticator.
      - name: forceTotp
        type: bool?
        recommended: true
        description: 
          Forces the user to setup a 2FA in order to access their account. 
          Users which did not setup this won't be affected.
      - name: forcePasswordOnPhone
        type: bool?
        description: 
          Forces users who want to create account using phone number to 
          also set a password on their account
      - name: forcePersonNameOnPhone
        type: bool?
        description: 
          Forces the creation of account using phone number to ask for user firstname and lastname
        
  - name: gsmProvider
    permRewrite:
      replace: root.modules
      with: root.manage
    fields:
      - name: apiKey
        type: string
      - name: mainSenderNumber
        type: string
        validate: required
      - name: type
        validate: required
        type: enum
        of:
          - k: url
          - k: terminal
          - k: mediana
      - name: invokeUrl
        type: string
      - name: invokeBody
        type: string
  - name: workspaceType
    permRewrite:
      replace: root.modules
      with: root.manage
    cliName: type
    features:
      mock: false
      msync: false
    security:
      writeOnRoot: true
      readOnRoot: true
    messages:
      roleIsNecessary:
        en: Role needs to be defined and exist.
      roleIsNotAccessible:
        en: Role is not accessible unfortunately. Make sure you the role chose exists.
      onlyRootRoleIsAccepted:
        en: You can only select a role which is created or belong to 'root' workspace.
      roleNeedsToHaveCapabilities:
        en: Role needs to have at least one capability before could be assigned.
      cannotCreateWorkspaceType:
        en: You cannot create workspace type due to some validation errors.
      cannotModifyWorkspaceType:
        en: You cannot modify workspace type due to some validation errors.

    description: Defines a type for workspace, and the role which it can have as a whole.
      In systems with multiple types of services, e.g. student, teachers, schools
      this is useful to set those default types and limit the access of the users.
    fields:
      - name: title
        translate: true
        type: string
        validate: 'required,omitempty,min=1,max=250'
      - name: description
        translate: true
        type: string
      - name: slug
        type: string
        validate: 'required,omitempty,min=2,max=50'
      - name: role
        type: one
        target: RoleEntity
        validate: required
        description:
          The role which will be used to define the functionality of this workspace,
          Role needs to be created before hand, and only roles which belong to root workspace
          are possible to be selected
        fields: []
  - name: emailProvider
    permRewrite:
      replace: root.modules
      with: root.manage
    description: Thirdparty services which will send email, allows each workspace graphically
      configure their token without the need of restarting servers
    security:
      writeOnRoot: true
    fields:
      - name: type
        validate: required
        type: enum
        of:
          - k: terminal
          - k: sendgrid
      - name: apiKey
        type: string
  - name: emailSender
    permRewrite:
      replace: root.modules
      with: root.manage
    security:
      writeOnRoot: true
    description: >-
      All emails going from the system need to have a virtual sender (nick name,
      email address, etc)
    fields:
      - name: fromName
        type: string
        validate: required
      - name: fromEmailAddress
        type: string
        gorm: unique
        validate: required
      - name: replyTo
        type: string
        validate: required
      - name: nickName
        validate: required
        type: string
  - name: phoneConfirmation
    permRewrite:
      replace: root.modules
      with: root.manage
    fields:
      - name: user
        target: UserEntity
        allowCreate: false
        type: one
        fields: []
      - name: status
        type: string
      - name: phoneNumber
        type: string
      - name: key
        type: string
      - name: expiresAt
        type: string
  - name: publicJoinKey
    description: Joining to different workspaces using a public link directly
    fields:
      - name: role
        type: one
        allowCreate: false
        target: RoleEntity
      - name: workspace
        type: one
        allowCreate: false
        target: WorkspaceEntity
        fields: []
  - name: emailConfirmation
    fields:
      - name: user
        target: UserEntity
        allowCreate: false
        type: one
        fields: []
      - name: status
        type: string
      - name: email
        type: string
      - name: key
        type: string
      - name: expiresAt
        type: string
  - name: passport
    description:
      Represent a mean to login in into the system, each user could have multiple passport (email, phone)
      and authenticate into the system.
    permRewrite:
      replace: root.modules
      with: root.manage
    security:
      writeOnRoot: true
    fields:
      - name: thirdPartyVerifier
        type: string
        default: false
        description: 
          When user creates account via oauth services such as google, 
          it's essential to set the provider and do not allow passwordless logins
          if it's not via that specific provider.
      - name: type
        type: string
        validate: required
      - name: user
        type: one
        target: UserEntity
        fields: []
      - name: value
        type: string
        validate: required
        gorm: unique
      - name: totpSecret
        type: string
        description: 
          Store the secret of 2FA using time based dual factor authentication here for this specific
          passport. If set, during authorization will be asked.
      - name: totpConfirmed
        type: bool?
        description: 
          Regardless of the secret, user needs to confirm his secret. There is an extra action
          to confirm user totp, could be used after signup or prior to login.
      - name: password
        type: string
        json: '-'
        yaml: '-'
      - name: confirmed
        type: bool?
      - name: accessToken
        type: string
  - name: regionalContent
    cliShort: rc
    permRewrite:
      replace: root.modules
      with: root.manage
    security:
      writeOnRoot: true
    description: >-
      Email templates, sms templates or other textual content which can be
      accessed.
    fields:
      - name: content
        type: html
        validate: required
      - name: region
        validate: required
        type: string
      - name: title
        type: string
      - name: languageId
        validate: required
        gorm: 'index:regional_content_index,unique'
        type: string
      - name: keyGroup
        validate: required
        type: enum
        of:
          - k: SMS_OTP
            description: Used when an email would be sent with one time password
          - k: EMAIL_OTP
            description: Used when an sms would be sent with one time password
        gorm: 'index:regional_content_index,unique'
  - name: publicAuthentication
    cliShort: pa
    security:
      writeOnRoot: true
    permRewrite:
      replace: root.modules
      with: root.manage
    description: 
      Keeps information about user onboarding, otp state, and other things
      which are necessary for onboarding new users in multiple endpoints
    fields:
      - name: user
        target: UserEntity
        allowCreate: false
        type: one
      - name: totpSecret
        type: string
        description: 
          If the application requires totp dual factor upon account creation,
          we create a secret here and pass the link
      - name: totpLink
        type: string
        description: 
          The url which will be converted into QR code on client side to scan
      - name: passport
        target: PassportEntity
        allowCreate: false
        type: one
        fields: []
      - name: sessionSecret
        type: string
        description: 
          This is a long hash generated and will be used to authenticate user after 
          he confirmed the otp to finish the signup process and add more information
          before creating an account
      - name: passportValue
        type: string
      - name: isInCreationProcess
        type: bool?
      - name: status
        type: string
      - name: blockedUntil
        type: datenano
      - name: otp
        type: string
      - name: recoveryAbsoluteUrl
        type: string
        sql: '-'
messages:
  recaptcha2Error:
    en: Recaptcha is not correct. Try again to solve the recaptcha.
  recaptcha2Needed:
    en: You need to provide recaptcha2 for this api.
  dataTypeDoesNotExistsInFireback:
    en: This data type does not exist in fireback. %name %location
  inviteToWorkspaceMailSenderMissing:
    en: >-
      We cannot send the invitation via email address, because sender email is
      not available, or not configurated.
    fa: >-
      امکان ارسال دعوت نامه از طریق ایمیل وجود ندارد، چون مدیریت تنظیمات لازم
      برای ایمیل را انجام نداده یا آن را برای شما محدود کرده است.
  userWhichHasThisTokenDoesNotExist:
    en: User which has this token does not exists
    fa: >-
      کاربری که با این دسترسی وارد شده بود وجود ندارد. لطفا دوباره به سیستم وارد
      شوید
  provideTokenInAuthorization:
    en: >-
      Request requires authroization, please make sure you are logged in, and
      have enough access level
    fa: شما باید توکن دسترسی را در بخش هدر و قسمت authorization وارد کنید
  
  tokenNotFound:
    en: Token not found or no longer valid.
  
  userNotFoundOrDeleted:
    en: >-
      User not found, your account might be deleted, or access level has been
      reduced.
    fa: >-
      کاربر پیدا نشد ممکن است اکانت حذف شده باشد یا سطح دسترسی آن کاهش پیدا کرده
      باشد
  selectWorkspaceId:
    en: You need to select a correct workspace-id in header section
    fa: شما باید تیم یا ورک اسپیس را در بخش هدر با فیلد workspace-id تعیین کنید
  emailConfigurationMissing:
    en: Email configuration is not available
  gsmConfigurationIsNotAvailable:
    en: GSM Services configuration is not available
  emailConfigurationIsNotAvailable:
    en: Email configuration is not available
  passportUserNotAvailable:
    en: User with this passport is not available at this moment
  userDoesNotExist:
    en: User is not available.
  alreadyConfirmed:
    en: Already confirmed
  emailNotFound:
    en: Email is not found
  emailIsNotValid:
    en: The email address is not valid.
  phoneNumberIsNotValid:
    en: The phone number is not valid.
  invitationExpired:
    en: Invitation has been expired.
  passwordRequired:
    en: Password is required
  passportNotAvailable:
    en: This passport is not available. Please check credentials and try again
  resetNotFound:
    en: Reset not found
  passportNotFound:
    en: This passport is not available. Please check credentials and try again
  passwordDidNotUpdated:
    en: Password did not get updated for some unknown reason.
  otaRequestBlockedUntil:
    en: Request is blocked until.
  emailIsNotConfigured:
    en: Email server is not configured
  otpCodeInvalid:
    en: Otp code is invalid
  invalidContent:
    en: Body content is not correct. You need a valid json.
  bodyIsMissing:
    en: Body content is not correct. You need a valid json.
  notEnoughPermission:
    en: You do not have enough permission for this section
  invalidExchangeKey:
    en: Invalid exchange key
  smsNotSent:
    en: Sending text message has failed.
  invokeUrlMissing:
    en: Invoking url is missing
  fileNotFound:
    en: File not found
  validationFailedOnSomeFields:
    en: Validation has failed on some fields
  actionOnlyInRoot:
    en: This action is only allowed when user belongs to root workspace, and root is selected
  otpNotAvailableForThisType:
    en: This type of account does not have any otp method for authentication.
  sessionSecretIsNeeded:
    en: Session secret is needed to continue creating a user. Use checkClassicPassport first with value, to get the required steps for account creation.
  totpIsNotAvailableForThisPassport:
    en: This passport doesn't have totp setup. Contact the administrator to set it up for you.
  totpCodeIsNotValid:
    en: The totp code from the app is incorrect. Double check and try again.
  passportTotpNotConfirmed:
    en: The totp code from app is correct, but we could not store it in your account. You might be asked to setup again later.
  sessionSecretIsNotAvailable:
    en: Session secret is not available or expired. Try to use the checkClassicPassport flow again.
  otpFailed:
    en: At the moment we cannot send you one time password. Please contact the support.
  passwordDoesNotMeetTheSecurityRequirement:
    en: Password choosen doesn't meet the security requirement.
  fieldRequired:
    en: This field is required
  fieldInvalidEmail:
    en: Invalid email address
  fieldOneOf:
    en: "The value you have provided needs to be one of these values: %s"
  unsupportedOAuth:
    en: OAuth service is not available or not supported yet.
  invalidToken:
    en: Token provided is not valid.
  failedToDecodeGoogle:
    en: Failed to decode the google token, it's not available at this moment.
  invitationNotFound:
    en: Invitation not found or expired.

description: This is the fireback core module, which includes everything. In fact you could say workspaces is fireback itself. Maybe in the future that would be changed
queries:
  - name: userInvitations
    description: 
      Gets the invitations necessary for the specific user, so he can reject or accept
      them and join the fireback.
    columns:
      fields:
        - name: userId
          type: string
          description: UserUniqueId
        - name: uniqueId
          type: string
          description: Invitation unique id
        - name: value
          type: string
          description: The value of the passport (email/phone)
        - name: roleName
          type: string
          description: Name of the role that user will get
        - name: workspaceName
          type: string
          description: Name of the workspace which user is invited to.
        - name: type
          type: string
          description: The method of the invitation, such as email.
        - name: coverLetter
          type: string
          description: 
            The content that user will receive to understand the reason of the letter.

    query: |
      {{ define "content" }}
      SELECT 
        passport_entities.`value`,
        passport_entities.`type`,
        passport_entities.user_id,
        workspace_invite_entities.unique_id,
        workspace_invite_entities.role_id,
        workspace_invite_entities.cover_letter,
        role_entities.name AS `role_name`,
        workspace_entities.name as `workspace_name`
      FROM  workspace_invite_entities
      LEFT JOIN passport_entities ON 
        workspace_invite_entities.{{ . }} = passport_entities.value 
      left join role_entities on role_entities.unique_id = workspace_invite_entities.role_id
      left join workspace_entities on workspace_entities.unique_id = workspace_invite_entities.workspace_id
      WHERE passport_entities.user_id = "(userId)"

      {{ end }}
      
      {{ template "content" "email" }}
      union
      {{ template "content" "phonenumber" }}
     