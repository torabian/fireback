package abac

/*
*	Generated by fireback 1.2.2
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/torabian/fireback/modules/fireback"
	"github.com/urfave/cli"
)

func CastUserSessionFromCli(c *cli.Context) *UserSessionDto {
	template := &UserSessionDto{}
	if c.IsSet("passport-id") {
		template.PassportId = fireback.NewStringAutoNull(c.String("passport-id"))
	}
	if c.IsSet("token") {
		template.Token = c.String("token")
	}
	if c.IsSet("exchange-key") {
		template.ExchangeKey = c.String("exchange-key")
	}
	if c.IsSet("user-workspaces") {
		value := c.String("user-workspaces")
		template.UserWorkspacesListId = strings.Split(value, ",")
	} else {
		template.UserWorkspacesListId = fireback.CliInteractiveSearchAndSelect(
			"Select UserWorkspaces",
			UserWorkspacesActionQueryString,
		)
	}
	if c.IsSet("user-id") {
		template.UserId = fireback.NewStringAutoNull(c.String("user-id"))
	}
	if c.IsSet("user-id") {
		template.UserId = fireback.NewStringAutoNull(c.String("user-id"))
	}
	return template
}

var UserSessionDtoCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "passport-id",
		Required: false,
		Usage:    `passport (one)`,
	},
	&cli.StringFlag{
		Name:     "token",
		Required: false,
		Usage:    `token (string)`,
	},
	&cli.StringFlag{
		Name:     "exchange-key",
		Required: false,
		Usage:    `exchangeKey (string)`,
	},
	&cli.StringSliceFlag{
		Name:     "user-workspaces",
		Required: false,
		Usage:    `userWorkspaces (many2many)`,
	},
	&cli.StringFlag{
		Name:     "user-id",
		Required: false,
		Usage:    `user (one)`,
	},
	&cli.StringFlag{
		Name:     "user-id",
		Required: false,
		Usage:    `userId (string?)`,
	},
}

type UserSessionDto struct {
	Passport             *PassportEntity        `json:"passport" xml:"passport" yaml:"passport"    gorm:"foreignKey:PassportId;references:UniqueId"      `
	PassportId           fireback.String        `json:"passportId" yaml:"passportId" xml:"passportId"  `
	Token                string                 `json:"token" xml:"token" yaml:"token"        `
	ExchangeKey          string                 `json:"exchangeKey" xml:"exchangeKey" yaml:"exchangeKey"        `
	UserWorkspaces       []*UserWorkspaceEntity `json:"userWorkspaces" xml:"userWorkspaces" yaml:"userWorkspaces"    gorm:"many2many:_userWorkspaces;foreignKey:UniqueId;references:UniqueId"      `
	UserWorkspacesListId []string               `json:"userWorkspacesListId" yaml:"userWorkspacesListId" xml:"userWorkspacesListId" gorm:"-" sql:"-"`
	User                 *UserEntity            `json:"user" xml:"user" yaml:"user"    gorm:"foreignKey:UserId;references:UniqueId"      `
	UserId               fireback.String        `json:"userId" xml:"userId" yaml:"userId"        `
}
type UserSessionDtoList struct {
	Items []*UserSessionDto
}

func NewUserSessionDtoList(items []*UserSessionDto) *UserSessionDtoList {
	return &UserSessionDtoList{
		Items: items,
	}
}
func (x *UserSessionDtoList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *UserSessionDto) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	// Intentional trim (so strings lib is always imported)
	return strings.TrimSpace("")
}
func (x *UserSessionDto) JsonPrint() {
	fmt.Println(x.Json())
	// Somehow to make the import always needed, makes no sense.
	_ = fireback.Body
}

// This is an experimental way to create new dtos, with exluding the pointers as helper.
func NewUserSessionDto(
	Token string,
	ExchangeKey string,
) UserSessionDto {
	return UserSessionDto{
		Token:       Token,
		ExchangeKey: ExchangeKey,
	}
}
