package abac

/*
*	Generated by fireback 1.2.2
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"encoding/json"
	"fmt"
	"github.com/torabian/fireback/modules/workspaces"
	"github.com/urfave/cli"
	"strings"
)

func CastClassicAuthFromCli(c *cli.Context) *ClassicAuthDto {
	template := &ClassicAuthDto{}
	if c.IsSet("value") {
		template.Value = c.String("value")
	}
	if c.IsSet("password") {
		template.Password = c.String("password")
	}
	if c.IsSet("first-name") {
		template.FirstName = c.String("first-name")
	}
	if c.IsSet("last-name") {
		template.LastName = c.String("last-name")
	}
	if c.IsSet("invite-id") {
		template.InviteId = c.String("invite-id")
	}
	if c.IsSet("public-join-key-id") {
		template.PublicJoinKeyId = c.String("public-join-key-id")
	}
	if c.IsSet("workspace-type-id") {
		template.WorkspaceTypeId = c.String("workspace-type-id")
	}
	return template
}

var ClassicAuthDtoCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "value",
		Required: true,
		Usage:    `value (string)`,
	},
	&cli.StringFlag{
		Name:     "password",
		Required: true,
		Usage:    `password (string)`,
	},
	&cli.StringFlag{
		Name:     "first-name",
		Required: true,
		Usage:    `firstName (string)`,
	},
	&cli.StringFlag{
		Name:     "last-name",
		Required: true,
		Usage:    `lastName (string)`,
	},
	&cli.StringFlag{
		Name:     "invite-id",
		Required: false,
		Usage:    `inviteId (string)`,
	},
	&cli.StringFlag{
		Name:     "public-join-key-id",
		Required: false,
		Usage:    `publicJoinKeyId (string)`,
	},
	&cli.StringFlag{
		Name:     "workspace-type-id",
		Required: false,
		Usage:    `workspaceTypeId (string)`,
	},
}

type ClassicAuthDto struct {
	Value           string `json:"value" xml:"value" yaml:"value"  validate:"required"        `
	Password        string `json:"password" xml:"password" yaml:"password"  validate:"required"        `
	FirstName       string `json:"firstName" xml:"firstName" yaml:"firstName"  validate:"required"        `
	LastName        string `json:"lastName" xml:"lastName" yaml:"lastName"  validate:"required"        `
	InviteId        string `json:"inviteId" xml:"inviteId" yaml:"inviteId"        `
	PublicJoinKeyId string `json:"publicJoinKeyId" xml:"publicJoinKeyId" yaml:"publicJoinKeyId"        `
	WorkspaceTypeId string `json:"workspaceTypeId" xml:"workspaceTypeId" yaml:"workspaceTypeId"        `
}
type ClassicAuthDtoList struct {
	Items []*ClassicAuthDto
}

func NewClassicAuthDtoList(items []*ClassicAuthDto) *ClassicAuthDtoList {
	return &ClassicAuthDtoList{
		Items: items,
	}
}
func (x *ClassicAuthDtoList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *ClassicAuthDto) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	// Intentional trim (so strings lib is always imported)
	return strings.TrimSpace("")
}
func (x *ClassicAuthDto) JsonPrint() {
	fmt.Println(x.Json())
	// Somehow to make the import always needed, makes no sense.
	_ = workspaces.Body
}

// This is an experimental way to create new dtos, with exluding the pointers as helper.
func NewClassicAuthDto(
	Value string,
	Password string,
	FirstName string,
	LastName string,
	InviteId string,
	PublicJoinKeyId string,
	WorkspaceTypeId string,
) ClassicAuthDto {
	return ClassicAuthDto{
		Value:           Value,
		Password:        Password,
		FirstName:       FirstName,
		LastName:        LastName,
		InviteId:        InviteId,
		PublicJoinKeyId: PublicJoinKeyId,
		WorkspaceTypeId: WorkspaceTypeId,
	}
}
