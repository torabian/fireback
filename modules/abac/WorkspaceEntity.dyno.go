package abac

/*
*	Generated by fireback 1.2.3
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	jsoniter "github.com/json-iterator/go"
	"github.com/schollz/progressbar/v3"
	queries "github.com/torabian/fireback/modules/abac/queries"
	"github.com/torabian/fireback/modules/fireback"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"log"
	"strings"
	//queries github.com/torabian/fireback - modules/abac"
	"embed"
	metas "github.com/torabian/fireback/modules/abac/metas"
	mocks "github.com/torabian/fireback/modules/abac/mocks/Workspace"
	seeders "github.com/torabian/fireback/modules/abac/seeders/Workspace"
	"github.com/urfave/cli"
	"gopkg.in/yaml.v2"
	reflect "reflect"
	"time"
)

var workspaceSeedersFs = &seeders.ViewsFs

func ResetWorkspaceSeeders(fs *embed.FS) {
	workspaceSeedersFs = fs
}

type WorkspaceEntityQs struct {
	Description fireback.QueriableField `cli:"description" table:"workspace" typeof:"string" column:"description" qs:"description"`
	Name        fireback.QueriableField `cli:"name" table:"workspace" typeof:"string" column:"name" qs:"name"`
	Type        fireback.QueriableField `cli:"type" table:"workspace" typeof:"one" column:"type" qs:"type"`
}

func (x *WorkspaceEntityQs) GetQuery() string {
	return fireback.GenerateQueryStringStyle(reflect.ValueOf(x), "")
}

var WorkspaceQsFlags = []cli.Flag{
	&cli.StringFlag{
		Name:  "description",
		Usage: "",
	},
	&cli.StringFlag{
		Name:  "name",
		Usage: "",
	},
	&cli.StringFlag{
		Name:  "type",
		Usage: "",
	},
}

type WorkspaceEntity struct {
	// Defines the visibility of the record in the table.
	// Visibility is a detailed topic, you can check all of the visibility values in fireback/visibility.go
	// by default, visibility of record are 0, means they are protected by the workspace
	// which are being created, and visible to every member of the workspace
	Visibility fireback.String `json:"visibility,omitempty" yaml:"visibility,omitempty" xml:"visibility,omitempty"`
	// The unique-id of the workspace which content belongs to. Upon creation this will be designated
	// to the selected workspace by user, if they have write access. You can change this value
	// or prevent changes to it manually (on root features for example modifying other workspace)
	WorkspaceId fireback.String `json:"workspaceId,omitempty" xml:"workspaceId,omitempty" yaml:"workspaceId,omitempty"`
	// The unique-id of the parent table, which this record is being linked to.
	// used internally for making relations in fireback, generally does not need manual changes
	// or modification by the developer or user. For example, if you have a object inside an object
	// the unique-id of the parent will be written in the child.
	LinkerId fireback.String `json:"linkerId,omitempty" xml:"linkerId,omitempty" yaml:"linkerId,omitempty"`
	// Used for recursive or parent-child operations. Some tables, are having nested relations,
	// and this field makes the table self refrenceing. ParentId needs to exist in the table before
	// creating of modifying a record.
	ParentId fireback.String `json:"parentId,omitempty" xml:"parentId,omitempty" yaml:"parentId,omitempty"`
	// Makes a field deletable. Some records should not be deletable at all.
	// default it's true.
	IsDeletable *bool `json:"isDeletable,omitempty" xml:"isDeletable,omitempty" yaml:"isDeletable,omitempty" gorm:"default:true"`
	// Makes a field updatable. Some records should not be updatable at all.
	// default it's true.
	IsUpdatable *bool `json:"isUpdatable,omitempty" xml:"isUpdatable,omitempty" yaml:"isUpdatable,omitempty" gorm:"default:true"`
	// The unique-id of the user which is creating the record, or the record belongs to.
	// Administration might want to change this to any user, by default Fireback fills
	// it to the current authenticated user.
	UserId fireback.String `json:"userId,omitempty" xml:"userId,omitempty" yaml:"userId,omitempty"`
	// General mechanism to rank the elements. From code perspective, it's just a number,
	// but you can sort it based on any logic for records to make a ranking, sorting.
	// they should not be unique across a table.
	Rank fireback.Int64 `json:"rank,omitempty" yaml:"rank,omitempty" xml:"rank,omitempty" gorm:"type:int;name:rank"`
	// Primary numeric key in the database. This value is not meant to be exported to public
	// or be used to access data at all. Rather a mechanism of indexing columns internally
	// or cursor pagination in future releases of fireback, or better search performance.
	ID uint `gorm:"primaryKey;autoIncrement" json:"-" yaml:"-" xml:"-"`
	// Unique id of the record across the table. This value will be accessed from public APIs,
	// and many other places intead of numeric ID property.
	// Upon generation, a UUID automatically is being assigned, and if user has specified the
	// Unique id in the post body, it will be used. This mechanism allows to manage unsaved
	// content on front-end much easier than requiring parent to exists first.
	UniqueId string `json:"uniqueId,omitempty" xml:"uniqueId,omitempty" gorm:"unique;not null;size:100;" yaml:"uniqueId,omitempty"`
	// The time that the record has been updated in datetime.
	// the field will be automatically populated by gorm orm.
	UpdatedAt *time.Time `json:"updatedAt,omitempty" xml:"updatedAt,omitempty" yaml:"updatedAt,omitempty"`
	// The time that the record has been created in datetime.
	// the field will be automatically populated by gorm orm.
	CreatedAt *time.Time `json:"createdAt,omitempty" xml:"createdAt,omitempty" yaml:"createdAt,omitempty"`
	// The time that the record has been deleted softly (means the data still exists in database, but no longer visible to any feature) in nano datatime
	// you need to make sure check this field if writing custom sql queries.
	// the field will be automatically populated by gorm orm.
	DeletedAt *time.Time `json:"deletedAt,omitempty" xml:"deletedAt,omitempty" yaml:"deletedAt,omitempty"`
	// Record creation date time formatting based on locale of the headers, or other
	// possible factors.
	CreatedFormatted string `json:"createdFormatted,omitempty" xml:"createdFormatted,omitempty" yaml:"createdFormatted,omitempty" sql:"-" gorm:"-"`
	// Record update date time formatting based on locale of the headers, or other
	// possible factors.
	UpdatedFormatted string               `json:"updatedFormatted,omitempty" xml:"updatedFormatted,omitempty" yaml:"updatedFormatted,omitempty" sql:"-" gorm:"-"`
	Description      string               `json:"description" xml:"description" yaml:"description"        `
	Name             string               `json:"name" xml:"name" yaml:"name"  validate:"required"        `
	Type             *WorkspaceTypeEntity `json:"type" xml:"type" yaml:"type"    gorm:"foreignKey:TypeId;references:UniqueId"      `
	TypeId           fireback.String      `json:"typeId" yaml:"typeId" xml:"typeId"   validate:"required" `
	Children         []*WorkspaceEntity   `csv:"-" gorm:"-" sql:"-" json:"children,omitempty" xml:"children,omitempty"  yaml:"children,omitempty"`
	LinkedTo         *WorkspaceEntity     `csv:"-" yaml:"-" gorm:"-" json:"-" sql:"-" xml:"-"`
}

func WorkspaceEntityStream(q fireback.QueryDSL) (chan []*WorkspaceEntity, *fireback.QueryResultMeta, *fireback.IError) {
	cn := make(chan []*WorkspaceEntity)
	q.ItemsPerPage = 50
	q.StartIndex = 0
	_, qrm, err := WorkspaceActions.Query(q)
	if err != nil {
		return nil, nil, err
	}
	go func() {
		defer close(cn)
		for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
			items, _, _ := WorkspaceActions.Query(q)
			i += q.ItemsPerPage
			q.StartIndex = i
			cn <- items
		}
	}()
	return cn, qrm, nil
}

type WorkspaceEntityList struct {
	Items []*WorkspaceEntity
}

func NewWorkspaceEntityList(items []*WorkspaceEntity) *WorkspaceEntityList {
	return &WorkspaceEntityList{
		Items: items,
	}
}
func (x *WorkspaceEntityList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *WorkspaceEntityList) ToTree() *fireback.TreeOperation[WorkspaceEntity] {
	return fireback.NewTreeOperation(
		x.Items,
		func(t *WorkspaceEntity) string {
			if !t.ParentId.Valid {
				return ""
			}
			return t.ParentId.String
		},
		func(t *WorkspaceEntity) string {
			return t.UniqueId
		},
	)
}

var WorkspacePreloadRelations []string = []string{}

type workspaceActionsSig struct {
	Update         func(query fireback.QueryDSL, dto *WorkspaceEntity) (*WorkspaceEntity, *fireback.IError)
	Create         func(dto *WorkspaceEntity, query fireback.QueryDSL) (*WorkspaceEntity, *fireback.IError)
	Upsert         func(dto *WorkspaceEntity, query fireback.QueryDSL) (*WorkspaceEntity, *fireback.IError)
	SeederInit     func() *WorkspaceEntity
	Remove         func(query fireback.QueryDSL) (int64, *fireback.IError)
	MultiInsert    func(dtos []*WorkspaceEntity, query fireback.QueryDSL) ([]*WorkspaceEntity, *fireback.IError)
	GetOne         func(query fireback.QueryDSL) (*WorkspaceEntity, *fireback.IError)
	GetByWorkspace func(query fireback.QueryDSL) (*WorkspaceEntity, *fireback.IError)
	Query          func(query fireback.QueryDSL) ([]*WorkspaceEntity, *fireback.QueryResultMeta, *fireback.IError)
	CteQuery       func(query fireback.QueryDSL) ([]*WorkspaceEntity, *fireback.QueryResultMeta, *fireback.IError)
}

var WorkspaceActions workspaceActionsSig = workspaceActionsSig{
	Update:         WorkspaceActionUpdateFn,
	Create:         WorkspaceActionCreateFn,
	Upsert:         WorkspaceActionUpsertFn,
	Remove:         WorkspaceActionRemoveFn,
	SeederInit:     WorkspaceActionSeederInitFn,
	MultiInsert:    WorkspaceMultiInsertFn,
	GetOne:         WorkspaceActionGetOneFn,
	GetByWorkspace: WorkspaceActionGetByWorkspaceFn,
	Query:          WorkspaceActionQueryFn,
	CteQuery:       WorkspaceActionCteQueryFn,
}

func WorkspaceActionUpsertFn(dto *WorkspaceEntity, query fireback.QueryDSL) (*WorkspaceEntity, *fireback.IError) {
	return nil, nil
}

var WORKSPACE_EVENT_CREATED = "workspace.created"
var WORKSPACE_EVENT_UPDATED = "workspace.updated"
var WORKSPACE_EVENT_DELETED = "workspace.deleted"
var WORKSPACE_EVENTS = []string{
	WORKSPACE_EVENT_CREATED,
	WORKSPACE_EVENT_UPDATED,
	WORKSPACE_EVENT_DELETED,
}

type WorkspaceFieldMap struct {
	Description fireback.TranslatedString `yaml:"description"`
	Name        fireback.TranslatedString `yaml:"name"`
	Type        fireback.TranslatedString `yaml:"type"`
}

var WorkspaceEntityMetaConfig map[string]int64 = map[string]int64{}
var WorkspaceEntityJsonSchema = fireback.ExtractEntityFields(reflect.ValueOf(&WorkspaceEntity{}))

func entityWorkspaceFormatter(dto *WorkspaceEntity, query fireback.QueryDSL) {
	if dto == nil {
		return
	}
}
func WorkspaceActionSeederMultiple(query fireback.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	batchSize := 100
	bar := progressbar.Default(int64(count))
	// Collect entities in batches
	var entitiesBatch []*WorkspaceEntity
	for i := 1; i <= count; i++ {
		entity := WorkspaceActions.SeederInit()
		entitiesBatch = append(entitiesBatch, entity)
		// When batch size is reached, perform the batch insert
		if len(entitiesBatch) == batchSize || i == count {
			// Insert batch
			_, err := WorkspaceActions.MultiInsert(entitiesBatch, query)
			if err == nil {
				successInsert += len(entitiesBatch)
			} else {
				fmt.Println(err)
				failureInsert += len(entitiesBatch)
			}
			// Clear the batch after insert
			entitiesBatch = nil
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func WorkspaceActionSeeder(query fireback.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	bar := progressbar.Default(int64(count))
	for i := 1; i <= count; i++ {
		entity := WorkspaceActions.SeederInit()
		_, err := WorkspaceActions.Create(entity, query)
		if err == nil {
			successInsert++
		} else {
			fmt.Println(err)
			failureInsert++
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func (x *WorkspaceEntity) Seeder() string {
	obj := WorkspaceActions.SeederInit()
	v, _ := json.MarshalIndent(obj, "", "  ")
	return string(v)
}
func WorkspaceActionSeederInitFn() *WorkspaceEntity {
	entity := &WorkspaceEntity{}
	return entity
}
func WorkspaceAssociationCreate(dto *WorkspaceEntity, query fireback.QueryDSL) error {
	return nil
}

/**
* These kind of content are coming from another entity, which is indepndent module
* If we want to create them, we need to do it before. This is not association.
**/
func WorkspaceRelationContentCreate(dto *WorkspaceEntity, query fireback.QueryDSL) error {
	return nil
}
func WorkspaceRelationContentUpdate(dto *WorkspaceEntity, query fireback.QueryDSL) error {
	return nil
}
func WorkspacePolyglotUpdateHandler(dto *WorkspaceEntity, query fireback.QueryDSL) {
	if dto == nil {
		return
	}
}

/**
 * This will be validating your entity fully. Important note is that, you add validate:* tag
 * in your entity, it will automatically work here. For slices inside entity, make sure you add
 * extra line of AppendSliceErrors, otherwise they won't be detected
 */
func WorkspaceValidator(dto *WorkspaceEntity, isPatch bool) *fireback.IError {
	err := fireback.CommonStructValidatorPointer(dto, isPatch)
	return err
}

// Creates a set of natural language queries, which can be used with
// AI tools to create content or help with some tasks
var WorkspaceAskCmd cli.Command = cli.Command{
	Name:  "nlp",
	Usage: "Set of natural language queries which helps creating content or data",
	Subcommands: []cli.Command{
		{
			Name:  "sample",
			Usage: "Asks for generating sample by giving an example data",
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:  "format",
					Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
					Value: "yaml",
				},
				&cli.IntFlag{
					Name:  "count",
					Usage: "How many samples to ask",
					Value: 30,
				},
			},
			Action: func(c *cli.Context) error {
				v := &WorkspaceEntity{}
				format := c.String("format")
				request := "\033[1m" + `
I need you to create me an array of exact signature as the example given below,
with at least ` + fmt.Sprint(c.String("count")) + ` items, mock the content with few words, and guess the possible values
based on the common sense. I need the output to be a valid ` + format + ` file.
Make sure you wrap the entire array in 'items' field. Also before that, I provide some explanation of each field:
Description: (type: string) Description: 
Name: (type: string) Description: 
Type: (type: one) Description: 
And here is the actual object signature:
` + v.Seeder() + `
`
				fmt.Println(request)
				return nil
			},
		},
	},
}

func WorkspaceEntityPreSanitize(dto *WorkspaceEntity, query fireback.QueryDSL) {
}
func WorkspaceEntityBeforeCreateAppend(dto *WorkspaceEntity, query fireback.QueryDSL) {
	if dto.UniqueId == "" {
		dto.UniqueId = fireback.UUID()
	}
	dto.WorkspaceId = fireback.NewString(query.WorkspaceId)
	dto.UserId = fireback.NewString(query.UserId)
	WorkspaceRecursiveAddUniqueId(dto, query)
}
func WorkspaceRecursiveAddUniqueId(dto *WorkspaceEntity, query fireback.QueryDSL) {
}

/*
*
	Batch inserts, do not have all features that create
	operation does. Use it with unnormalized content,
	or read the source code carefully.
  This is not marked as an action, because it should not be available publicly
  at this moment.
*
*/
func WorkspaceMultiInsertFn(dtos []*WorkspaceEntity, query fireback.QueryDSL) ([]*WorkspaceEntity, *fireback.IError) {
	if len(dtos) > 0 {
		for index := range dtos {
			WorkspaceEntityPreSanitize(dtos[index], query)
			WorkspaceEntityBeforeCreateAppend(dtos[index], query)
		}
		var dbref *gorm.DB = nil
		if query.Tx == nil {
			dbref = fireback.GetDbRef()
		} else {
			dbref = query.Tx
		}
		query.Tx = dbref
		err := dbref.Create(&dtos).Error
		if err != nil {
			return nil, fireback.GormErrorToIError(err)
		}
	}
	return dtos, nil
}
func WorkspaceActionBatchCreateFn(dtos []*WorkspaceEntity, query fireback.QueryDSL) ([]*WorkspaceEntity, *fireback.IError) {
	if dtos != nil && len(dtos) > 0 {
		items := []*WorkspaceEntity{}
		for _, item := range dtos {
			s, err := WorkspaceActions.Create(item, query)
			if err != nil {
				return nil, err
			}
			items = append(items, s)
		}
		return items, nil
	}
	return dtos, nil
}
func WorkspaceDeleteEntireChildren(query fireback.QueryDSL, dto *WorkspaceEntity) *fireback.IError {
	// intentionally removed this. It's hard to implement it, and probably wrong without
	// proper on delete cascade
	return nil
}
func WorkspaceActionCreateFn(dto *WorkspaceEntity, query fireback.QueryDSL) (*WorkspaceEntity, *fireback.IError) {
	// 1. Validate always
	if iError := WorkspaceValidator(dto, false); iError != nil {
		return nil, iError
	}
	// 1.5 Sanitize the content coming of the front-end
	WorkspaceEntityPreSanitize(dto, query)
	// 2. Append the necessary information about user, workspace
	WorkspaceEntityBeforeCreateAppend(dto, query)
	// 3. Create other entities if we want select from them
	WorkspaceRelationContentCreate(dto, query)
	// 4. Create the entity
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = fireback.GetDbRef()
	} else {
		dbref = query.Tx
	}
	query.Tx = dbref
	err := dbref.Create(&dto).Error
	if err != nil {
		err := fireback.GormErrorToIError(err)
		return nil, err
	}
	// 5. Create sub entities, objects or arrays, association to other entities
	WorkspaceAssociationCreate(dto, query)
	// 6. Fire the event into system
	actionEvent, eventErr := NewWorkspaceCreatedEvent(dto, &query)
	if actionEvent != nil && eventErr == nil {
		fireback.GetEventBusInstance().FireEvent(query, *actionEvent)
	} else {
		log.Default().Panicln("Creating event has failed for %v", dto)
	}
	/*
		event.MustFire(WORKSPACE_EVENT_CREATED, event.M{
			"entity":   dto,
			"entityKey": fireback.GetTypeString(&WorkspaceEntity{}),
			"target":   "workspace",
			"unqiueId": query.WorkspaceId,
		})
	*/
	return dto, nil
}
func WorkspaceActionGetOneFn(query fireback.QueryDSL) (*WorkspaceEntity, *fireback.IError) {
	refl := reflect.ValueOf(&WorkspaceEntity{})
	item, err := fireback.GetOneEntity[WorkspaceEntity](query, refl)
	entityWorkspaceFormatter(item, query)
	return item, err
}
func WorkspaceActionGetByWorkspaceFn(query fireback.QueryDSL) (*WorkspaceEntity, *fireback.IError) {
	refl := reflect.ValueOf(&WorkspaceEntity{})
	item, err := fireback.GetOneByWorkspaceEntity[WorkspaceEntity](query, refl)
	entityWorkspaceFormatter(item, query)
	return item, err
}
func WorkspaceActionQueryFn(query fireback.QueryDSL) ([]*WorkspaceEntity, *fireback.QueryResultMeta, *fireback.IError) {
	refl := reflect.ValueOf(&WorkspaceEntity{})
	items, meta, err := fireback.QueryEntitiesPointer[WorkspaceEntity](query, refl)
	for _, item := range items {
		entityWorkspaceFormatter(item, query)
	}
	return items, meta, err
}

var workspaceMemoryItems []*WorkspaceEntity = []*WorkspaceEntity{}

func WorkspaceEntityIntoMemory() {
	q := fireback.QueryDSL{
		ItemsPerPage: 500,
		StartIndex:   0,
	}
	_, qrm, _ := WorkspaceActions.Query(q)
	for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
		items, _, _ := WorkspaceActions.Query(q)
		workspaceMemoryItems = append(workspaceMemoryItems, items...)
		i += q.ItemsPerPage
		q.StartIndex = i
	}
}
func WorkspaceMemGet(id uint) *WorkspaceEntity {
	for _, item := range workspaceMemoryItems {
		if item.ID == id {
			return item
		}
	}
	return nil
}
func WorkspaceMemJoin(items []uint) []*WorkspaceEntity {
	res := []*WorkspaceEntity{}
	for _, item := range items {
		v := WorkspaceMemGet(item)
		if v != nil {
			res = append(res, v)
		}
	}
	return res
}
func (dto *WorkspaceEntity) Size() int {
	var size int = len(dto.Children)
	for _, c := range dto.Children {
		size += c.Size()
	}
	return size
}
func (dto *WorkspaceEntity) Add(nodes ...*WorkspaceEntity) bool {
	var size = dto.Size()
	for _, n := range nodes {
		if n.ParentId.Valid && n.ParentId.String == dto.UniqueId {
			dto.Children = append(dto.Children, n)
		} else {
			for _, c := range dto.Children {
				if c.Add(n) {
					break
				}
			}
		}
	}
	return dto.Size() == size+len(nodes)
}
func WorkspaceActionCommonPivotQuery(query fireback.QueryDSL) ([]*fireback.PivotResult, *fireback.QueryResultMeta, *fireback.IError) {
	items, meta, err := fireback.UnsafeQuerySqlFromFs[fireback.PivotResult](
		&queries.QueriesFs, "WorkspaceCommonPivot.sqlite.dyno", query,
	)
	return items, meta, err
}
func WorkspaceActionCteQueryFn(query fireback.QueryDSL) ([]*WorkspaceEntity, *fireback.QueryResultMeta, *fireback.IError) {
	refl := reflect.ValueOf(&WorkspaceEntity{})
	items, meta, err := fireback.ContextAwareVSqlOperation[WorkspaceEntity](
		refl, &queries.QueriesFs, "WorkspaceCte.vsql", query,
	)
	for _, item := range items {
		entityWorkspaceFormatter(item, query)
	}
	var tree []*WorkspaceEntity
	for _, item := range items {
		if !item.ParentId.Valid {
			root := item
			root.Add(items...)
			tree = append(tree, root)
		}
	}
	return tree, meta, err
}
func WorkspaceUpdateExec(dbref *gorm.DB, query fireback.QueryDSL, fields *WorkspaceEntity) (*WorkspaceEntity, *fireback.IError) {
	uniqueId := fields.UniqueId
	query.TriggerEventName = WORKSPACE_EVENT_UPDATED
	WorkspaceEntityPreSanitize(fields, query)
	var item WorkspaceEntity
	var itemRefetched WorkspaceEntity
	// If the entity is distinct by workspace, then the Query.WorkspaceId
	// which is selected is being used as the condition for create or update
	// if not, the unique Id is being used
	cond2 := &WorkspaceEntity{UniqueId: uniqueId}
	q := dbref.
		Where(cond2).
		FirstOrCreate(&item)
	err := q.UpdateColumns(fields).Error
	if err != nil {
		return nil, fireback.GormErrorToIError(err)
	}
	query.Tx = dbref
	WorkspaceRelationContentUpdate(fields, query)
	WorkspacePolyglotUpdateHandler(fields, query)
	if ero := WorkspaceDeleteEntireChildren(query, fields); ero != nil {
		return nil, ero
	}
	// @meta(update has many)
	err = dbref.
		Preload(clause.Associations).
		Where(&WorkspaceEntity{UniqueId: uniqueId}).
		First(&itemRefetched).Error
	if err != nil {
		return nil, fireback.GormErrorToIError(err)
	}
	actionEvent, eventErr := NewWorkspaceUpdatedEvent(fields, &query)
	if actionEvent != nil && eventErr == nil {
		fireback.GetEventBusInstance().FireEvent(query, *actionEvent)
	} else {
		log.Default().Panicln("Updating event has failed for %v", fields)
	}
	/*
	   event.MustFire(query.TriggerEventName, event.M{
	     "entity":   &item,
	     "target":   "workspace",
	     "unqiueId": query.WorkspaceId,
	   })*/
	return &itemRefetched, nil
}
func WorkspaceActionUpdateFn(query fireback.QueryDSL, fields *WorkspaceEntity) (*WorkspaceEntity, *fireback.IError) {
	if fields == nil {
		return nil, fireback.Create401Error(&fireback.FirebackMessages.BodyIsMissing, []string{})
	}
	// 1. Validate always
	if iError := WorkspaceValidator(fields, true); iError != nil {
		return nil, iError
	}
	// Let's not add this. I am not sure of the consequences
	// WorkspaceRecursiveAddUniqueId(fields, query)
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = fireback.GetDbRef()
		var item *WorkspaceEntity
		vf := dbref.Transaction(func(tx *gorm.DB) error {
			dbref = tx
			var err *fireback.IError
			item, err = WorkspaceUpdateExec(dbref, query, fields)
			if err == nil {
				return nil
			} else {
				return err
			}
		})
		return item, fireback.CastToIError(vf)
	} else {
		dbref = query.Tx
		return WorkspaceUpdateExec(dbref, query, fields)
	}
}

var WorkspaceWipeCmd cli.Command = cli.Command{
	Name:  "wipe",
	Usage: "Wipes entire workspaces ",
	Action: func(c *cli.Context) error {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_DELETE},
			AllowOnRoot:    true,
		})
		count, _ := WorkspaceActionWipeClean(query)
		fmt.Println("Removed", count, "of entities")
		return nil
	},
}

func WorkspaceActionRemoveFn(query fireback.QueryDSL) (int64, *fireback.IError) {
	refl := reflect.ValueOf(&WorkspaceEntity{})
	query.ActionRequires = []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_DELETE}
	return fireback.RemoveEntity[WorkspaceEntity](query, refl)
}
func WorkspaceActionWipeClean(query fireback.QueryDSL) (int64, error) {
	var err error
	var count int64 = 0
	{
		subCount, subErr := fireback.WipeCleanEntity[WorkspaceEntity]()
		if subErr != nil {
			fmt.Println("Error while wiping 'WorkspaceEntity'", subErr)
			return count, subErr
		} else {
			count += subCount
		}
	}
	return count, err
}
func WorkspaceActionBulkUpdate(
	query fireback.QueryDSL, dto *fireback.BulkRecordRequest[WorkspaceEntity]) (
	*fireback.BulkRecordRequest[WorkspaceEntity], *fireback.IError,
) {
	result := []*WorkspaceEntity{}
	err := fireback.GetDbRef().Transaction(func(tx *gorm.DB) error {
		query.Tx = tx
		for _, record := range dto.Records {
			item, err := WorkspaceActions.Update(query, record)
			if err != nil {
				return err
			} else {
				result = append(result, item)
			}
		}
		return nil
	})
	if err == nil {
		return dto, nil
	}
	return nil, err.(*fireback.IError)
}
func (x *WorkspaceEntity) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}

var WorkspaceEntityMeta = fireback.TableMetaData{
	EntityName:    "Workspace",
	ExportKey:     "workspaces",
	TableNameInDb: "workspace_entities",
	EntityObject:  &WorkspaceEntity{},
	ExportStream:  WorkspaceActionExportT,
	ImportQuery:   WorkspaceActionImport,
}

func WorkspaceActionExport(
	query fireback.QueryDSL,
) (chan []byte, *fireback.IError) {
	return fireback.YamlExporterChannel[WorkspaceEntity](query, WorkspaceActions.Query, WorkspacePreloadRelations)
}
func WorkspaceActionExportT(
	query fireback.QueryDSL,
) (chan []interface{}, *fireback.IError) {
	return fireback.YamlExporterChannelT[WorkspaceEntity](query, WorkspaceActions.Query, WorkspacePreloadRelations)
}
func WorkspaceActionImport(
	dto interface{}, query fireback.QueryDSL,
) *fireback.IError {
	var json = jsoniter.ConfigCompatibleWithStandardLibrary
	var content WorkspaceEntity
	cx, err2 := json.Marshal(dto)
	if err2 != nil {
		return fireback.Create401Error(&fireback.FirebackMessages.InvalidContent, []string{})
	}
	json.Unmarshal(cx, &content)
	_, err := WorkspaceActions.Create(&content, query)
	return err
}

var WorkspaceCommonCliFlags = []cli.Flag{
	&cli.StringFlag{
		Name:  "x-accept",
		Usage: "Return type of the the content, such as json or yaml",
	},
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "description",
		Required: false,
		Usage:    `description (string)`,
	},
	&cli.StringFlag{
		Name:     "name",
		Required: true,
		Usage:    `name (string)`,
	},
	&cli.StringFlag{
		Name:     "type-id",
		Required: true,
		Usage:    `type (one)`,
	},
}
var WorkspaceCommonInteractiveCliFlags = []fireback.CliInteractiveFlag{
	{
		Name:        "description",
		StructField: "Description",
		Required:    false,
		Recommended: false,
		Usage:       `description`,
		Type:        "string",
	},
	{
		Name:        "name",
		StructField: "Name",
		Required:    true,
		Recommended: false,
		Usage:       `name`,
		Type:        "string",
	},
}
var WorkspaceCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "x-src",
		Required: false,
		Usage:    `Import the body of the request from a file (e.g. json/yaml) on the disk`,
	},
	&cli.StringFlag{
		Name:  "x-accept",
		Usage: "Return type of the the content, such as json or yaml",
	},
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "description",
		Required: false,
		Usage:    `description (string)`,
	},
	&cli.StringFlag{
		Name:     "name",
		Required: true,
		Usage:    `name (string)`,
	},
	&cli.StringFlag{
		Name:     "type-id",
		Required: true,
		Usage:    `type (one)`,
	},
}
var WorkspaceCreateCmd cli.Command = WORKSPACE_ACTION_POST_ONE.ToCli()
var WorkspaceCreateInteractiveCmd cli.Command = cli.Command{
	Name:  "ic",
	Usage: "Creates a new entity, using requied fields in an interactive name",
	Flags: []cli.Flag{
		&cli.BoolFlag{
			Name:  "all",
			Usage: "Interactively asks for all inputs, not only required ones",
		},
	},
	Action: func(c *cli.Context) {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_CREATE},
			AllowOnRoot:    true,
		})
		entity := &WorkspaceEntity{}
		fireback.PopulateInteractively(entity, c, WorkspaceCommonInteractiveCliFlags)
		if entity, err := WorkspaceActions.Create(entity, query); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := yaml.Marshal(entity)
			fmt.Println(fireback.FormatYamlKeys(string(f)))
		}
	},
}
var WorkspaceUpdateCmd cli.Command = cli.Command{
	Name:    "update",
	Aliases: []string{"u"},
	Flags:   WorkspaceCommonCliFlagsOptional,
	Usage:   "Updates entity by passing the parameters",
	Action: func(c *cli.Context) error {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_UPDATE},
			AllowOnRoot:    true,
		})
		entity := CastWorkspaceFromCli(c)
		if entity, err := WorkspaceActions.Update(query, entity); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := json.MarshalIndent(entity, "", "  ")
			fmt.Println(string(f))
		}
		return nil
	},
}

func (x *WorkspaceEntity) FromCli(c *cli.Context) *WorkspaceEntity {
	return CastWorkspaceFromCli(c)
}
func CastWorkspaceFromCli(c *cli.Context) *WorkspaceEntity {
	template := &WorkspaceEntity{}
	fireback.HandleXsrc(c, template)
	if c.IsSet("uid") {
		template.UniqueId = c.String("uid")
	}
	if c.IsSet("pid") {
		template.ParentId = fireback.NewStringAutoNull(c.String("pid"))
	}
	if c.IsSet("description") {
		template.Description = c.String("description")
	}
	if c.IsSet("name") {
		template.Name = c.String("name")
	}
	if c.IsSet("type-id") {
		template.TypeId = fireback.NewStringAutoNull(c.String("type-id"))
	}
	return template
}
func WorkspaceSyncSeederFromFs(fsRef *embed.FS, fileNames []string, q fireback.QueryDSL) {
	fireback.SeederFromFSImport(
		q,
		WorkspaceActions.Create,
		reflect.ValueOf(&WorkspaceEntity{}).Elem(),
		fsRef,
		fileNames,
		true,
	)
}
func WorkspaceSyncSeeders() {
	fireback.SeederFromFSImport(
		fireback.QueryDSL{WorkspaceId: fireback.USER_SYSTEM},
		WorkspaceActions.Create,
		reflect.ValueOf(&WorkspaceEntity{}).Elem(),
		workspaceSeedersFs,
		[]string{},
		true,
	)
}
func WorkspaceImportMocks() {
	fireback.SeederFromFSImport(
		fireback.QueryDSL{},
		WorkspaceActions.Create,
		reflect.ValueOf(&WorkspaceEntity{}).Elem(),
		&mocks.ViewsFs,
		[]string{},
		false,
	)
}
func WorkspaceWriteQueryMock(ctx fireback.MockQueryContext) {
	for _, lang := range ctx.Languages {
		itemsPerPage := 9999
		if ctx.ItemsPerPage > 0 {
			itemsPerPage = ctx.ItemsPerPage
		}
		f := fireback.QueryDSL{ItemsPerPage: itemsPerPage, Language: lang, WithPreloads: ctx.WithPreloads, Deep: true}
		items, count, _ := WorkspaceActions.Query(f)
		result := fireback.QueryEntitySuccessResult(f, items, count)
		fireback.WriteMockDataToFile(lang, "", "Workspace", result)
	}
}
func WorkspacesActionQueryString(keyword string, page int) ([]string, *fireback.QueryResultMeta, *fireback.IError) {
	searchFields := []string{
		`unique_id %"{keyword}"%`,
		`name %"{keyword}"%`,
	}
	m := func(item *WorkspaceEntity) string {
		label := item.UniqueId
		// if item.Name != nil {
		// 	label += " >>> " + *item.Name
		// }
		return label
	}
	query := fireback.QueryStringCastCli(searchFields, keyword, page)
	items, meta, err := WorkspaceActions.Query(query)
	stringItems := []string{}
	for _, item := range items {
		label := m(item)
		stringItems = append(stringItems, label)
	}
	return stringItems, meta, err
}

var WorkspaceDevCommands = []cli.Command{
	WorkspaceWipeCmd,
	{
		Name:  "mock",
		Usage: "Generates mock records based on the entity definition",
		Flags: []cli.Flag{
			&cli.IntFlag{
				Name:  "count",
				Usage: "how many activation key do you need to be generated and stored in database",
				Value: 10,
			},
			&cli.BoolFlag{
				Name:  "batch",
				Usage: "Multiple insert into database mode. Might miss children and relations at the moment",
			},
		},
		Action: func(c *cli.Context) error {
			query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
				ActionRequires: []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_CREATE},
				AllowOnRoot:    true,
			})
			if c.Bool("batch") {
				WorkspaceActionSeederMultiple(query, c.Int("count"))
			} else {
				WorkspaceActionSeeder(query, c.Int("count"))
			}
			return nil
		},
	},
	{
		Name:    "init",
		Aliases: []string{"i"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Creates a basic seeder file for you, based on the definition module we have. You can populate this file as an example",
		Action: func(c *cli.Context) error {
			seed := WorkspaceActions.SeederInit()
			fireback.CommonInitSeeder(strings.TrimSpace(c.String("format")), seed)
			return nil
		},
	},
	cli.Command{
		Name:  "mlist",
		Usage: "Prints the list of embedded mocks into the app",
		Action: func(c *cli.Context) error {
			if entity, err := fireback.GetSeederFilenames(&mocks.ViewsFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "msync",
		Usage: "Tries to sync mocks into the system",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportEmbedCmd(c,
				WorkspaceActions.Create,
				reflect.ValueOf(&WorkspaceEntity{}).Elem(),
				&mocks.ViewsFs,
			)
			return nil
		},
	},
}
var WorkspaceImportExportCommands = []cli.Command{
	{
		Name:    "validate",
		Aliases: []string{"v"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "file",
				Usage: "Validates an import file, such as yaml, json, csv, and gives some insights how the after import it would look like",
				Value: "workspace-seeder-workspace.yml",
				// Uncomment before publish, they need to specify
				// Required: true,
			},
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Reads a yaml file containing an array of workspaces, you can run this to validate if your import file is correct, and how it would look like after import",
		Action: func(c *cli.Context) error {
			data := &[]WorkspaceEntity{}
			fireback.ReadYamlFile(c.String("file"), data)
			fmt.Println(data)
			return nil
		},
	},
	cli.Command{
		Name:  "slist",
		Usage: "Prints the list of files attached to this module for syncing or bootstrapping project",
		Action: func(c *cli.Context) error {
			if entity, err := fireback.GetSeederFilenames(workspaceSeedersFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "ssync",
		Usage: "Tries to sync the embedded content into the database, the list could be seen by 'slist' command",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportEmbedCmd(c,
				WorkspaceActions.Create,
				reflect.ValueOf(&WorkspaceEntity{}).Elem(),
				workspaceSeedersFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:    "export",
		Aliases: []string{"e"},
		Flags: append(fireback.CommonQueryFlags,
			&cli.StringFlag{
				Name:     "file",
				Usage:    "The address of file you want the csv/yaml/json be exported to",
				Required: true,
			}),
		Usage: "Exports a query results into the csv/yaml/json format",
		Action: func(c *cli.Context) error {
			return fireback.CommonCliExportCmd2(c,
				WorkspaceEntityStream,
				reflect.ValueOf(&WorkspaceEntity{}).Elem(),
				c.String("file"),
				&metas.MetaFs,
				"WorkspaceFieldMap.yml",
				WorkspacePreloadRelations,
			)
		},
	},
	cli.Command{
		Name: "import",
		Flags: append(
			append(
				fireback.CommonQueryFlags,
				&cli.StringFlag{
					Name:     "file",
					Usage:    "The address of file you want the csv be imported from",
					Required: true,
				}),
			WorkspaceCommonCliFlagsOptional...,
		),
		Usage: "imports csv/yaml/json file and place it and its children into database",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportCmdAuthorized(c,
				WorkspaceActions.Create,
				reflect.ValueOf(&WorkspaceEntity{}).Elem(),
				c.String("file"),
				&fireback.SecurityModel{
					ActionRequires: []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_CREATE},
					AllowOnRoot:    true,
				},
				func() WorkspaceEntity {
					v := CastWorkspaceFromCli(c)
					return *v
				},
			)
			return nil
		},
	},
}
var WorkspaceCliCommands []cli.Command = []cli.Command{
	WORKSPACE_ACTION_QUERY.ToCli(),
	WORKSPACE_ACTION_TABLE.ToCli(),
	WORKSPACE_ACTION_PATCH.ToCli(),
	WorkspaceCreateCmd,
	WorkspaceAskCmd,
	WorkspaceCreateInteractiveCmd,
	fireback.GetCommonRemoveQuery(
		reflect.ValueOf(&WorkspaceEntity{}).Elem(),
		WorkspaceActions.Remove,
	),
	fireback.GetCommonCteQuery(WorkspaceActions.CteQuery),
	fireback.GetCommonPivotQuery(WorkspaceActionCommonPivotQuery),
}

func WorkspaceCliFn() cli.Command {
	commands := append(WorkspaceImportExportCommands, WorkspaceCliCommands...)
	if !fireback.GetConfig().Production {
		commands = append(commands, WorkspaceDevCommands...)
	}
	return cli.Command{
		Name:        "ws",
		Description: "Workspaces module actions",
		Usage:       `Fireback general user role, workspaces services.`,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "language",
				Value: "en",
			},
		},
		Subcommands: commands,
	}
}

var WORKSPACE_ACTION_TABLE = fireback.Module3Action{
	Name:          "table",
	ActionAliases: []string{"t"},
	Flags:         fireback.CommonQueryFlags,
	Description:   "Table formatted queries all of the entities in database based on the standard query format",
	Action:        WorkspaceActions.Query,
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		fireback.CommonCliTableCmd2(c,
			WorkspaceActions.Query,
			security,
			reflect.ValueOf(&WorkspaceEntity{}).Elem(),
		)
		return nil
	},
}
var WORKSPACE_ACTION_QUERY = fireback.Module3Action{
	Method: "GET",
	Url:    "/workspaces",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_QUERY},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			qs := &WorkspaceEntityQs{}
			fireback.HttpQueryEntity(c, WorkspaceActions.Query, qs)
		},
	},
	Format:         "QUERY",
	Action:         WorkspaceActions.Query,
	ResponseEntity: &[]WorkspaceEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "WorkspaceEntity",
	},
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		qs := &WorkspaceEntityQs{}
		fireback.CommonCliQueryCmd3(
			c,
			WorkspaceActions.Query,
			security,
			qs,
		)
		return nil
	},
	CliName:       "query",
	Name:          "query",
	ActionAliases: []string{"q"},
	Flags:         append(fireback.CommonQueryFlags, WorkspaceQsFlags...),
	Description:   "Queries all of the entities in database based on the standard query format (s+)",
}
var WORKSPACE_ACTION_QUERY_CTE = fireback.Module3Action{
	Method: "GET",
	Url:    "/cte-workspaces",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_QUERY},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			qs := &WorkspaceEntityQs{}
			fireback.HttpQueryEntity(c, WorkspaceActions.CteQuery, qs)
		},
	},
	Format:         "QUERY",
	Action:         WorkspaceActions.CteQuery,
	ResponseEntity: &[]WorkspaceEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "WorkspaceEntity",
	},
}
var WORKSPACE_ACTION_EXPORT = fireback.Module3Action{
	Method: "GET",
	Url:    "/workspaces/export",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_QUERY},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpStreamFileChannel(c, WorkspaceActionExport)
		},
	},
	Format:         "QUERY",
	Action:         WorkspaceActionExport,
	ResponseEntity: &[]WorkspaceEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "WorkspaceEntity",
	},
}
var WORKSPACE_ACTION_GET_ONE = fireback.Module3Action{
	Method: "GET",
	Url:    "/workspace/:uniqueId",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_QUERY},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpGetEntity(c, WorkspaceActions.GetOne)
		},
	},
	Format:         "GET_ONE",
	Action:         WorkspaceActions.GetOne,
	ResponseEntity: &WorkspaceEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "WorkspaceEntity",
	},
}
var WORKSPACE_ACTION_POST_ONE = fireback.Module3Action{
	Name:          "create",
	ActionAliases: []string{"c"},
	Description:   "Create new workspace",
	Flags:         WorkspaceCommonCliFlags,
	Method:        "POST",
	Url:           "/workspace",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_CREATE},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpPostEntity(c, WorkspaceActions.Create)
		},
	},
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		result, err := fireback.CliPostEntity(c, WorkspaceActions.Create, security)
		fireback.HandleActionInCli(c, result, err, map[string]map[string]string{})
		if err != nil {
			return err
		}
		return nil
	},
	Action:         WorkspaceActions.Create,
	Format:         "POST_ONE",
	RequestEntity:  &WorkspaceEntity{},
	ResponseEntity: &WorkspaceEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "WorkspaceEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "WorkspaceEntity",
	},
}
var WORKSPACE_ACTION_PATCH = fireback.Module3Action{
	Name:          "update",
	ActionAliases: []string{"u"},
	Flags:         WorkspaceCommonCliFlagsOptional,
	Method:        "PATCH",
	Url:           "/workspace",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_UPDATE},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntity(c, WorkspaceActions.Update)
		},
	},
	Action:         WorkspaceActions.Update,
	RequestEntity:  &WorkspaceEntity{},
	ResponseEntity: &WorkspaceEntity{},
	Format:         "PATCH_ONE",
	Out: &fireback.Module3ActionBody{
		Entity: "WorkspaceEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "WorkspaceEntity",
	},
	Description: "Update the Workspace entity by unique id",
	CliName:     "update",
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		result, err := fireback.CliPatchEntity(c, WorkspaceActions.Update, security)
		fireback.HandleActionInCli(c, result, err, map[string]map[string]string{})
		if err != nil {
			return err
		}
		return err
	},
}
var WORKSPACE_ACTION_PATCH_BULK = fireback.Module3Action{
	Method: "PATCH",
	Url:    "/workspaces",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_UPDATE},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntities(c, WorkspaceActionBulkUpdate)
		},
	},
	Action:         WorkspaceActionBulkUpdate,
	Format:         "PATCH_BULK",
	RequestEntity:  &fireback.BulkRecordRequest[WorkspaceEntity]{},
	ResponseEntity: &fireback.BulkRecordRequest[WorkspaceEntity]{},
	Out: &fireback.Module3ActionBody{
		Entity: "WorkspaceEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "WorkspaceEntity",
	},
}
var WORKSPACE_ACTION_DELETE = fireback.Module3Action{
	Method: "DELETE",
	Url:    "/workspace",
	Format: "DELETE_DSL",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_DELETE},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpRemoveEntity(c, WorkspaceActions.Remove)
		},
	},
	Action:         WorkspaceActions.Remove,
	RequestEntity:  &fireback.DeleteRequest{},
	ResponseEntity: &fireback.DeleteResponse{},
	TargetEntity:   &WorkspaceEntity{},
}

/**
 *	Override this function on WorkspaceEntityHttp.go,
 *	In order to add your own http
 **/
var AppendWorkspaceRouter = func(r *[]fireback.Module3Action) {}

func GetWorkspaceModule3Actions() []fireback.Module3Action {
	routes := []fireback.Module3Action{
		WORKSPACE_ACTION_QUERY_CTE,
		WORKSPACE_ACTION_QUERY,
		WORKSPACE_ACTION_EXPORT,
		WORKSPACE_ACTION_GET_ONE,
		WORKSPACE_ACTION_POST_ONE,
		WORKSPACE_ACTION_PATCH,
		WORKSPACE_ACTION_PATCH_BULK,
		WORKSPACE_ACTION_DELETE,
	}
	// Append user defined functions
	AppendWorkspaceRouter(&routes)
	return routes
}

var PERM_ROOT_WORKSPACE = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.workspace.*",
	Name:        "Entire workspace actions (*)",
	Description: "",
}
var PERM_ROOT_WORKSPACE_DELETE = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.workspace.delete",
	Name:        "Delete workspace",
	Description: "",
}
var PERM_ROOT_WORKSPACE_CREATE = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.workspace.create",
	Name:        "Create workspace",
	Description: "",
}
var PERM_ROOT_WORKSPACE_UPDATE = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.workspace.update",
	Name:        "Update workspace",
	Description: "",
}
var PERM_ROOT_WORKSPACE_QUERY = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.workspace.query",
	Name:        "Query workspace",
	Description: "",
}
var ALL_WORKSPACE_PERMISSIONS = []fireback.PermissionInfo{
	PERM_ROOT_WORKSPACE_DELETE,
	PERM_ROOT_WORKSPACE_CREATE,
	PERM_ROOT_WORKSPACE_UPDATE,
	PERM_ROOT_WORKSPACE_QUERY,
	PERM_ROOT_WORKSPACE,
}

func NewWorkspaceCreatedEvent(
	payload *WorkspaceEntity,
	query *fireback.QueryDSL,
) (*fireback.Event, error) {
	event := &fireback.Event{
		Name:    "WorkspaceCreated",
		Payload: payload,
		Security: &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{
				PERM_ROOT_WORKSPACE_QUERY,
			},
			AllowOnRoot: true,
		},
		CacheKey: "*abac.WorkspaceEntity",
	}
	// Apply the source of the event based on querydsl
	fireback.ApplyQueryDslContextToEvent(event, *query)
	return event, nil
}
func NewWorkspaceUpdatedEvent(
	payload *WorkspaceEntity,
	query *fireback.QueryDSL,
) (*fireback.Event, error) {
	event := &fireback.Event{
		Name:    "WorkspaceUpdated",
		Payload: payload,
		Security: &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{
				PERM_ROOT_WORKSPACE_QUERY,
			},
			AllowOnRoot: true,
		},
		CacheKey: "*abac.WorkspaceEntity",
	}
	// Apply the source of the event based on querydsl
	fireback.ApplyQueryDslContextToEvent(event, *query)
	return event, nil
}

var WorkspaceEntityBundle = fireback.EntityBundle{
	Permissions: ALL_WORKSPACE_PERMISSIONS,
	// Cli command has been exluded, since we use module to wrap all the entities
	// to be more easier to wrap up.
	// Create your own bundle if you need with Cli
	//CliCommands: []cli.Command{
	//	WorkspaceCliFn(),
	//},
	Actions:      GetWorkspaceModule3Actions(),
	MockProvider: WorkspaceImportMocks,
	AutoMigrationEntities: []interface{}{
		&WorkspaceEntity{},
	},
	MigrationScripts: []fireback.MigrationScript{},
}
