package abac

/*
*	Generated by fireback 1.2.2
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"embed"
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	jsoniter "github.com/json-iterator/go"
	"github.com/schollz/progressbar/v3"
	metas "github.com/torabian/fireback/modules/abac/metas"
	mocks "github.com/torabian/fireback/modules/abac/mocks/GsmProvider"
	seeders "github.com/torabian/fireback/modules/abac/seeders/GsmProvider"
	"github.com/torabian/fireback/modules/fireback"
	"github.com/urfave/cli"
	"gopkg.in/yaml.v2"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"log"
	reflect "reflect"
	"strings"
)

var gsmProviderSeedersFs = &seeders.ViewsFs

func ResetGsmProviderSeeders(fs *embed.FS) {
	gsmProviderSeedersFs = fs
}

type GsmProviderEntityQs struct {
	ApiKey           fireback.QueriableField `cli:"api-key" table:"gsm_provider" column:"api_key" qs:"apiKey"`
	MainSenderNumber fireback.QueriableField `cli:"main-sender-number" table:"gsm_provider" column:"main_sender_number" qs:"mainSenderNumber"`
	Type             fireback.QueriableField `cli:"type" table:"gsm_provider" column:"type" qs:"type"`
	InvokeUrl        fireback.QueriableField `cli:"invoke-url" table:"gsm_provider" column:"invoke_url" qs:"invokeUrl"`
	InvokeBody       fireback.QueriableField `cli:"invoke-body" table:"gsm_provider" column:"invoke_body" qs:"invokeBody"`
}

func (x *GsmProviderEntityQs) GetQuery() string {
	return fireback.GenerateQueryStringStyle(reflect.ValueOf(x), "")
}

var GsmProviderQsFlags = []cli.Flag{
	&cli.StringFlag{
		Name:  "api-key",
		Usage: "",
	},
	&cli.StringFlag{
		Name:  "main-sender-number",
		Usage: "",
	},
	&cli.StringFlag{
		Name:  "type",
		Usage: "",
	},
	&cli.StringFlag{
		Name:  "invoke-url",
		Usage: "",
	},
	&cli.StringFlag{
		Name:  "invoke-body",
		Usage: "",
	},
}

type GsmProviderEntity struct {
	// Defines the visibility of the record in the table.
	// Visibility is a detailed topic, you can check all of the visibility values in workspaces/visibility.go
	// by default, visibility of record are 0, means they are protected by the workspace
	// which are being created, and visible to every member of the workspace
	Visibility fireback.String `json:"visibility,omitempty" yaml:"visibility,omitempty" xml:"visibility,omitempty"`
	// The unique-id of the workspace which content belongs to. Upon creation this will be designated
	// to the selected workspace by user, if they have write access. You can change this value
	// or prevent changes to it manually (on root features for example modifying other workspace)
	WorkspaceId fireback.String `json:"workspaceId,omitempty" xml:"workspaceId,omitempty" yaml:"workspaceId,omitempty"`
	// The unique-id of the parent table, which this record is being linked to.
	// used internally for making relations in fireback, generally does not need manual changes
	// or modification by the developer or user. For example, if you have a object inside an object
	// the unique-id of the parent will be written in the child.
	LinkerId fireback.String `json:"linkerId,omitempty" xml:"linkerId,omitempty" yaml:"linkerId,omitempty"`
	// Used for recursive or parent-child operations. Some tables, are having nested relations,
	// and this field makes the table self refrenceing. ParentId needs to exist in the table before
	// creating of modifying a record.
	ParentId fireback.String `json:"parentId,omitempty" xml:"parentId,omitempty" yaml:"parentId,omitempty"`
	// Makes a field deletable. Some records should not be deletable at all.
	// default it's true.
	IsDeletable *bool `json:"isDeletable,omitempty" xml:"isDeletable,omitempty" yaml:"isDeletable,omitempty" gorm:"default:true"`
	// Makes a field updatable. Some records should not be updatable at all.
	// default it's true.
	IsUpdatable *bool `json:"isUpdatable,omitempty" xml:"isUpdatable,omitempty" yaml:"isUpdatable,omitempty" gorm:"default:true"`
	// The unique-id of the user which is creating the record, or the record belongs to.
	// Administration might want to change this to any user, by default Fireback fills
	// it to the current authenticated user.
	UserId fireback.String `json:"userId,omitempty" xml:"userId,omitempty" yaml:"userId,omitempty"`
	// General mechanism to rank the elements. From code perspective, it's just a number,
	// but you can sort it based on any logic for records to make a ranking, sorting.
	// they should not be unique across a table.
	Rank fireback.Int64 `json:"rank,omitempty" yaml:"rank,omitempty" xml:"rank,omitempty" gorm:"type:int;name:rank"`
	// Primary numeric key in the database. This value is not meant to be exported to public
	// or be used to access data at all. Rather a mechanism of indexing columns internally
	// or cursor pagination in future releases of fireback, or better search performance.
	ID uint `gorm:"primaryKey;autoIncrement" json:"-" yaml:"-" xml:"-"`
	// Unique id of the record across the table. This value will be accessed from public APIs,
	// and many other places intead of numeric ID property.
	// Upon generation, a UUID automatically is being assigned, and if user has specified the
	// Unique id in the post body, it will be used. This mechanism allows to manage unsaved
	// content on front-end much easier than requiring parent to exists first.
	UniqueId string `json:"uniqueId,omitempty" xml:"uniqueId,omitempty" gorm:"unique;not null;size:100;" yaml:"uniqueId,omitempty"`
	// The time that the record has been created in nano-seconds.
	// the field will be automatically populated by gorm orm.
	Created int64 `json:"created,omitempty" xml:"created,omitempty" yaml:"created,omitempty" gorm:"autoUpdateTime:nano"`
	// The time that the record has been updated in nano-seconds.
	// the field will be automatically populated by gorm orm.
	Updated int64 `json:"updated,omitempty" xml:"updated,omitempty" yaml:"updated,omitempty"`
	// The time that the record has been deleted softly (means the data still exists in database, but no longer visible to any feature) in nano seconds
	// you need to make sure check this field if writing custom sql queries.
	// the field will be automatically populated by gorm orm.
	Deleted int64 `json:"deleted,omitempty" xml:"deleted,omitempty" yaml:"deleted,omitempty"`
	// Record creation date time formatting based on locale of the headers, or other
	// possible factors.
	CreatedFormatted string `json:"createdFormatted,omitempty" xml:"createdFormatted,omitempty" yaml:"createdFormatted,omitempty" sql:"-" gorm:"-"`
	// Record update date time formatting based on locale of the headers, or other
	// possible factors.
	UpdatedFormatted string               `json:"updatedFormatted,omitempty" xml:"updatedFormatted,omitempty" yaml:"updatedFormatted,omitempty" sql:"-" gorm:"-"`
	ApiKey           string               `json:"apiKey" xml:"apiKey" yaml:"apiKey"        `
	MainSenderNumber string               `json:"mainSenderNumber" xml:"mainSenderNumber" yaml:"mainSenderNumber"  validate:"required"        `
	Type             string               `json:"type" xml:"type" yaml:"type"  validate:"required"        `
	InvokeUrl        string               `json:"invokeUrl" xml:"invokeUrl" yaml:"invokeUrl"        `
	InvokeBody       string               `json:"invokeBody" xml:"invokeBody" yaml:"invokeBody"        `
	Children         []*GsmProviderEntity `csv:"-" gorm:"-" sql:"-" json:"children,omitempty" xml:"children,omitempty"  yaml:"children,omitempty"`
	LinkedTo         *GsmProviderEntity   `csv:"-" yaml:"-" gorm:"-" json:"-" sql:"-" xml:"-"`
}

func GsmProviderEntityStream(q fireback.QueryDSL) (chan []*GsmProviderEntity, *fireback.QueryResultMeta, error) {
	cn := make(chan []*GsmProviderEntity)
	q.ItemsPerPage = 50
	q.StartIndex = 0
	_, qrm, err := GsmProviderActions.Query(q)
	if err != nil {
		return nil, nil, err
	}
	go func() {
		defer close(cn)
		for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
			items, _, _ := GsmProviderActions.Query(q)
			i += q.ItemsPerPage
			q.StartIndex = i
			cn <- items
		}
	}()
	return cn, qrm, nil
}

type GsmProviderEntityList struct {
	Items []*GsmProviderEntity
}

func NewGsmProviderEntityList(items []*GsmProviderEntity) *GsmProviderEntityList {
	return &GsmProviderEntityList{
		Items: items,
	}
}
func (x *GsmProviderEntityList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *GsmProviderEntityList) ToTree() *fireback.TreeOperation[GsmProviderEntity] {
	return fireback.NewTreeOperation(
		x.Items,
		func(t *GsmProviderEntity) string {
			if !t.ParentId.Valid {
				return ""
			}
			return t.ParentId.String
		},
		func(t *GsmProviderEntity) string {
			return t.UniqueId
		},
	)
}

var GsmProviderPreloadRelations []string = []string{}

type gsmProviderActionsSig struct {
	Update         func(query fireback.QueryDSL, dto *GsmProviderEntity) (*GsmProviderEntity, *fireback.IError)
	Create         func(dto *GsmProviderEntity, query fireback.QueryDSL) (*GsmProviderEntity, *fireback.IError)
	Upsert         func(dto *GsmProviderEntity, query fireback.QueryDSL) (*GsmProviderEntity, *fireback.IError)
	SeederInit     func() *GsmProviderEntity
	Remove         func(query fireback.QueryDSL) (int64, *fireback.IError)
	MultiInsert    func(dtos []*GsmProviderEntity, query fireback.QueryDSL) ([]*GsmProviderEntity, *fireback.IError)
	GetOne         func(query fireback.QueryDSL) (*GsmProviderEntity, *fireback.IError)
	GetByWorkspace func(query fireback.QueryDSL) (*GsmProviderEntity, *fireback.IError)
	Query          func(query fireback.QueryDSL) ([]*GsmProviderEntity, *fireback.QueryResultMeta, error)
}

var GsmProviderActions gsmProviderActionsSig = gsmProviderActionsSig{
	Update:         GsmProviderActionUpdateFn,
	Create:         GsmProviderActionCreateFn,
	Upsert:         GsmProviderActionUpsertFn,
	Remove:         GsmProviderActionRemoveFn,
	SeederInit:     GsmProviderActionSeederInitFn,
	MultiInsert:    GsmProviderMultiInsertFn,
	GetOne:         GsmProviderActionGetOneFn,
	GetByWorkspace: GsmProviderActionGetByWorkspaceFn,
	Query:          GsmProviderActionQueryFn,
}

func GsmProviderActionUpsertFn(dto *GsmProviderEntity, query fireback.QueryDSL) (*GsmProviderEntity, *fireback.IError) {
	return nil, nil
}

var GSM_PROVIDER_EVENT_CREATED = "gsmProvider.created"
var GSM_PROVIDER_EVENT_UPDATED = "gsmProvider.updated"
var GSM_PROVIDER_EVENT_DELETED = "gsmProvider.deleted"
var GSM_PROVIDER_EVENTS = []string{
	GSM_PROVIDER_EVENT_CREATED,
	GSM_PROVIDER_EVENT_UPDATED,
	GSM_PROVIDER_EVENT_DELETED,
}

type GsmProviderFieldMap struct {
	ApiKey           fireback.TranslatedString `yaml:"apiKey"`
	MainSenderNumber fireback.TranslatedString `yaml:"mainSenderNumber"`
	Type             fireback.TranslatedString `yaml:"type"`
	InvokeUrl        fireback.TranslatedString `yaml:"invokeUrl"`
	InvokeBody       fireback.TranslatedString `yaml:"invokeBody"`
}

var GsmProviderEntityMetaConfig map[string]int64 = map[string]int64{}
var GsmProviderEntityJsonSchema = fireback.ExtractEntityFields(reflect.ValueOf(&GsmProviderEntity{}))

func entityGsmProviderFormatter(dto *GsmProviderEntity, query fireback.QueryDSL) {
	if dto == nil {
		return
	}
	if dto.Created > 0 {
		dto.CreatedFormatted = fireback.FormatDateBasedOnQuery(dto.Created, query)
	}
	if dto.Updated > 0 {
		dto.CreatedFormatted = fireback.FormatDateBasedOnQuery(dto.Updated, query)
	}
}
func GsmProviderActionSeederMultiple(query fireback.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	batchSize := 100
	bar := progressbar.Default(int64(count))
	// Collect entities in batches
	var entitiesBatch []*GsmProviderEntity
	for i := 1; i <= count; i++ {
		entity := GsmProviderActions.SeederInit()
		entitiesBatch = append(entitiesBatch, entity)
		// When batch size is reached, perform the batch insert
		if len(entitiesBatch) == batchSize || i == count {
			// Insert batch
			_, err := GsmProviderActions.MultiInsert(entitiesBatch, query)
			if err == nil {
				successInsert += len(entitiesBatch)
			} else {
				fmt.Println(err)
				failureInsert += len(entitiesBatch)
			}
			// Clear the batch after insert
			entitiesBatch = nil
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func GsmProviderActionSeeder(query fireback.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	bar := progressbar.Default(int64(count))
	for i := 1; i <= count; i++ {
		entity := GsmProviderActions.SeederInit()
		_, err := GsmProviderActions.Create(entity, query)
		if err == nil {
			successInsert++
		} else {
			fmt.Println(err)
			failureInsert++
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func (x *GsmProviderEntity) Seeder() string {
	obj := GsmProviderActions.SeederInit()
	v, _ := json.MarshalIndent(obj, "", "  ")
	return string(v)
}
func GsmProviderActionSeederInitFn() *GsmProviderEntity {
	entity := &GsmProviderEntity{}
	return entity
}
func GsmProviderAssociationCreate(dto *GsmProviderEntity, query fireback.QueryDSL) error {
	return nil
}

/**
* These kind of content are coming from another entity, which is indepndent module
* If we want to create them, we need to do it before. This is not association.
**/
func GsmProviderRelationContentCreate(dto *GsmProviderEntity, query fireback.QueryDSL) error {
	return nil
}
func GsmProviderRelationContentUpdate(dto *GsmProviderEntity, query fireback.QueryDSL) error {
	return nil
}
func GsmProviderPolyglotUpdateHandler(dto *GsmProviderEntity, query fireback.QueryDSL) {
	if dto == nil {
		return
	}
}

/**
 * This will be validating your entity fully. Important note is that, you add validate:* tag
 * in your entity, it will automatically work here. For slices inside entity, make sure you add
 * extra line of AppendSliceErrors, otherwise they won't be detected
 */
func GsmProviderValidator(dto *GsmProviderEntity, isPatch bool) *fireback.IError {
	err := fireback.CommonStructValidatorPointer(dto, isPatch)
	return err
}

// Creates a set of natural language queries, which can be used with
// AI tools to create content or help with some tasks
var GsmProviderAskCmd cli.Command = cli.Command{
	Name:  "nlp",
	Usage: "Set of natural language queries which helps creating content or data",
	Subcommands: []cli.Command{
		{
			Name:  "sample",
			Usage: "Asks for generating sample by giving an example data",
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:  "format",
					Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
					Value: "yaml",
				},
				&cli.IntFlag{
					Name:  "count",
					Usage: "How many samples to ask",
					Value: 30,
				},
			},
			Action: func(c *cli.Context) error {
				v := &GsmProviderEntity{}
				format := c.String("format")
				request := "\033[1m" + `
I need you to create me an array of exact signature as the example given below,
with at least ` + fmt.Sprint(c.String("count")) + ` items, mock the content with few words, and guess the possible values
based on the common sense. I need the output to be a valid ` + format + ` file.
Make sure you wrap the entire array in 'items' field. Also before that, I provide some explanation of each field:
ApiKey: (type: string) Description: 
MainSenderNumber: (type: string) Description: 
Type: (type: enum) Description: 
InvokeUrl: (type: string) Description: 
InvokeBody: (type: string) Description: 
And here is the actual object signature:
` + v.Seeder() + `
`
				fmt.Println(request)
				return nil
			},
		},
	},
}

func GsmProviderEntityPreSanitize(dto *GsmProviderEntity, query fireback.QueryDSL) {
}
func GsmProviderEntityBeforeCreateAppend(dto *GsmProviderEntity, query fireback.QueryDSL) {
	if dto.UniqueId == "" {
		dto.UniqueId = fireback.UUID()
	}
	dto.WorkspaceId = fireback.NewString(query.WorkspaceId)
	dto.UserId = fireback.NewString(query.UserId)
	GsmProviderRecursiveAddUniqueId(dto, query)
}
func GsmProviderRecursiveAddUniqueId(dto *GsmProviderEntity, query fireback.QueryDSL) {
}

/*
*
	Batch inserts, do not have all features that create
	operation does. Use it with unnormalized content,
	or read the source code carefully.
  This is not marked as an action, because it should not be available publicly
  at this moment.
*
*/
func GsmProviderMultiInsertFn(dtos []*GsmProviderEntity, query fireback.QueryDSL) ([]*GsmProviderEntity, *fireback.IError) {
	if len(dtos) > 0 {
		for index := range dtos {
			GsmProviderEntityPreSanitize(dtos[index], query)
			GsmProviderEntityBeforeCreateAppend(dtos[index], query)
		}
		var dbref *gorm.DB = nil
		if query.Tx == nil {
			dbref = fireback.GetDbRef()
		} else {
			dbref = query.Tx
		}
		query.Tx = dbref
		err := dbref.Create(&dtos).Error
		if err != nil {
			return nil, fireback.GormErrorToIError(err)
		}
	}
	return dtos, nil
}
func GsmProviderActionBatchCreateFn(dtos []*GsmProviderEntity, query fireback.QueryDSL) ([]*GsmProviderEntity, *fireback.IError) {
	if dtos != nil && len(dtos) > 0 {
		items := []*GsmProviderEntity{}
		for _, item := range dtos {
			s, err := GsmProviderActions.Create(item, query)
			if err != nil {
				return nil, err
			}
			items = append(items, s)
		}
		return items, nil
	}
	return dtos, nil
}
func GsmProviderDeleteEntireChildren(query fireback.QueryDSL, dto *GsmProviderEntity) *fireback.IError {
	// intentionally removed this. It's hard to implement it, and probably wrong without
	// proper on delete cascade
	return nil
}
func GsmProviderActionCreateFn(dto *GsmProviderEntity, query fireback.QueryDSL) (*GsmProviderEntity, *fireback.IError) {
	// 1. Validate always
	if iError := GsmProviderValidator(dto, false); iError != nil {
		return nil, iError
	}
	// 1.5 Sanitize the content coming of the front-end
	GsmProviderEntityPreSanitize(dto, query)
	// 2. Append the necessary information about user, workspace
	GsmProviderEntityBeforeCreateAppend(dto, query)
	// 3. Create other entities if we want select from them
	GsmProviderRelationContentCreate(dto, query)
	// 4. Create the entity
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = fireback.GetDbRef()
	} else {
		dbref = query.Tx
	}
	query.Tx = dbref
	err := dbref.Create(&dto).Error
	if err != nil {
		err := fireback.GormErrorToIError(err)
		return nil, err
	}
	// 5. Create sub entities, objects or arrays, association to other entities
	GsmProviderAssociationCreate(dto, query)
	// 6. Fire the event into system
	actionEvent, eventErr := NewGsmProviderCreatedEvent(dto, &query)
	if actionEvent != nil && eventErr == nil {
		fireback.GetEventBusInstance().FireEvent(query, *actionEvent)
	} else {
		log.Default().Panicln("Creating event has failed for %v", dto)
	}
	/*
		event.MustFire(GSM_PROVIDER_EVENT_CREATED, event.M{
			"entity":   dto,
			"entityKey": fireback.GetTypeString(&GsmProviderEntity{}),
			"target":   "workspace",
			"unqiueId": query.WorkspaceId,
		})
	*/
	return dto, nil
}
func GsmProviderActionGetOneFn(query fireback.QueryDSL) (*GsmProviderEntity, *fireback.IError) {
	refl := reflect.ValueOf(&GsmProviderEntity{})
	item, err := fireback.GetOneEntity[GsmProviderEntity](query, refl)
	entityGsmProviderFormatter(item, query)
	return item, err
}
func GsmProviderActionGetByWorkspaceFn(query fireback.QueryDSL) (*GsmProviderEntity, *fireback.IError) {
	refl := reflect.ValueOf(&GsmProviderEntity{})
	item, err := fireback.GetOneByWorkspaceEntity[GsmProviderEntity](query, refl)
	entityGsmProviderFormatter(item, query)
	return item, err
}
func GsmProviderActionQueryFn(query fireback.QueryDSL) ([]*GsmProviderEntity, *fireback.QueryResultMeta, error) {
	refl := reflect.ValueOf(&GsmProviderEntity{})
	items, meta, err := fireback.QueryEntitiesPointer[GsmProviderEntity](query, refl)
	for _, item := range items {
		entityGsmProviderFormatter(item, query)
	}
	return items, meta, err
}

var gsmProviderMemoryItems []*GsmProviderEntity = []*GsmProviderEntity{}

func GsmProviderEntityIntoMemory() {
	q := fireback.QueryDSL{
		ItemsPerPage: 500,
		StartIndex:   0,
	}
	_, qrm, _ := GsmProviderActions.Query(q)
	for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
		items, _, _ := GsmProviderActions.Query(q)
		gsmProviderMemoryItems = append(gsmProviderMemoryItems, items...)
		i += q.ItemsPerPage
		q.StartIndex = i
	}
}
func GsmProviderMemGet(id uint) *GsmProviderEntity {
	for _, item := range gsmProviderMemoryItems {
		if item.ID == id {
			return item
		}
	}
	return nil
}
func GsmProviderMemJoin(items []uint) []*GsmProviderEntity {
	res := []*GsmProviderEntity{}
	for _, item := range items {
		v := GsmProviderMemGet(item)
		if v != nil {
			res = append(res, v)
		}
	}
	return res
}
func GsmProviderUpdateExec(dbref *gorm.DB, query fireback.QueryDSL, fields *GsmProviderEntity) (*GsmProviderEntity, *fireback.IError) {
	uniqueId := fields.UniqueId
	query.TriggerEventName = GSM_PROVIDER_EVENT_UPDATED
	GsmProviderEntityPreSanitize(fields, query)
	var item GsmProviderEntity
	var itemRefetched GsmProviderEntity
	// If the entity is distinct by workspace, then the Query.WorkspaceId
	// which is selected is being used as the condition for create or update
	// if not, the unique Id is being used
	cond2 := &GsmProviderEntity{UniqueId: uniqueId}
	q := dbref.
		Where(cond2).
		FirstOrCreate(&item)
	err := q.UpdateColumns(fields).Error
	if err != nil {
		return nil, fireback.GormErrorToIError(err)
	}
	query.Tx = dbref
	GsmProviderRelationContentUpdate(fields, query)
	GsmProviderPolyglotUpdateHandler(fields, query)
	if ero := GsmProviderDeleteEntireChildren(query, fields); ero != nil {
		return nil, ero
	}
	// @meta(update has many)
	err = dbref.
		Preload(clause.Associations).
		Where(&GsmProviderEntity{UniqueId: uniqueId}).
		First(&itemRefetched).Error
	if err != nil {
		return nil, fireback.GormErrorToIError(err)
	}
	actionEvent, eventErr := NewGsmProviderUpdatedEvent(fields, &query)
	if actionEvent != nil && eventErr == nil {
		fireback.GetEventBusInstance().FireEvent(query, *actionEvent)
	} else {
		log.Default().Panicln("Updating event has failed for %v", fields)
	}
	/*
	   event.MustFire(query.TriggerEventName, event.M{
	     "entity":   &item,
	     "target":   "workspace",
	     "unqiueId": query.WorkspaceId,
	   })*/
	return &itemRefetched, nil
}
func GsmProviderActionUpdateFn(query fireback.QueryDSL, fields *GsmProviderEntity) (*GsmProviderEntity, *fireback.IError) {
	if fields == nil {
		return nil, fireback.Create401Error(&fireback.FirebackMessages.BodyIsMissing, []string{})
	}
	// 1. Validate always
	if iError := GsmProviderValidator(fields, true); iError != nil {
		return nil, iError
	}
	// Let's not add this. I am not sure of the consequences
	// GsmProviderRecursiveAddUniqueId(fields, query)
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = fireback.GetDbRef()
		var item *GsmProviderEntity
		vf := dbref.Transaction(func(tx *gorm.DB) error {
			dbref = tx
			var err *fireback.IError
			item, err = GsmProviderUpdateExec(dbref, query, fields)
			if err == nil {
				return nil
			} else {
				return err
			}
		})
		return item, fireback.CastToIError(vf)
	} else {
		dbref = query.Tx
		return GsmProviderUpdateExec(dbref, query, fields)
	}
}

var GsmProviderWipeCmd cli.Command = cli.Command{
	Name:  "wipe",
	Usage: "Wipes entire gsmproviders ",
	Action: func(c *cli.Context) error {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_GSM_PROVIDER_DELETE},
		})
		count, _ := GsmProviderActionWipeClean(query)
		fmt.Println("Removed", count, "of entities")
		return nil
	},
}

func GsmProviderActionRemoveFn(query fireback.QueryDSL) (int64, *fireback.IError) {
	refl := reflect.ValueOf(&GsmProviderEntity{})
	query.ActionRequires = []fireback.PermissionInfo{PERM_ROOT_GSM_PROVIDER_DELETE}
	return fireback.RemoveEntity[GsmProviderEntity](query, refl)
}
func GsmProviderActionWipeClean(query fireback.QueryDSL) (int64, error) {
	var err error
	var count int64 = 0
	{
		subCount, subErr := fireback.WipeCleanEntity[GsmProviderEntity]()
		if subErr != nil {
			fmt.Println("Error while wiping 'GsmProviderEntity'", subErr)
			return count, subErr
		} else {
			count += subCount
		}
	}
	return count, err
}
func GsmProviderActionBulkUpdate(
	query fireback.QueryDSL, dto *fireback.BulkRecordRequest[GsmProviderEntity]) (
	*fireback.BulkRecordRequest[GsmProviderEntity], *fireback.IError,
) {
	result := []*GsmProviderEntity{}
	err := fireback.GetDbRef().Transaction(func(tx *gorm.DB) error {
		query.Tx = tx
		for _, record := range dto.Records {
			item, err := GsmProviderActions.Update(query, record)
			if err != nil {
				return err
			} else {
				result = append(result, item)
			}
		}
		return nil
	})
	if err == nil {
		return dto, nil
	}
	return nil, err.(*fireback.IError)
}
func (x *GsmProviderEntity) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}

var GsmProviderEntityMeta = fireback.TableMetaData{
	EntityName:    "GsmProvider",
	ExportKey:     "gsm-providers",
	TableNameInDb: "gsm-provider_entities",
	EntityObject:  &GsmProviderEntity{},
	ExportStream:  GsmProviderActionExportT,
	ImportQuery:   GsmProviderActionImport,
}

func GsmProviderActionExport(
	query fireback.QueryDSL,
) (chan []byte, *fireback.IError) {
	return fireback.YamlExporterChannel[GsmProviderEntity](query, GsmProviderActions.Query, GsmProviderPreloadRelations)
}
func GsmProviderActionExportT(
	query fireback.QueryDSL,
) (chan []interface{}, *fireback.IError) {
	return fireback.YamlExporterChannelT[GsmProviderEntity](query, GsmProviderActions.Query, GsmProviderPreloadRelations)
}
func GsmProviderActionImport(
	dto interface{}, query fireback.QueryDSL,
) *fireback.IError {
	var json = jsoniter.ConfigCompatibleWithStandardLibrary
	var content GsmProviderEntity
	cx, err2 := json.Marshal(dto)
	if err2 != nil {
		return fireback.Create401Error(&fireback.FirebackMessages.InvalidContent, []string{})
	}
	json.Unmarshal(cx, &content)
	_, err := GsmProviderActions.Create(&content, query)
	return err
}

var GsmProviderCommonCliFlags = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "api-key",
		Required: false,
		Usage:    `apiKey (string)`,
	},
	&cli.StringFlag{
		Name:     "main-sender-number",
		Required: true,
		Usage:    `mainSenderNumber (string)`,
	},
	&cli.StringFlag{
		Name:     "type",
		Required: true,
		Usage:    `One of: 'url', 'terminal', 'mediana' (enum)`,
	},
	&cli.StringFlag{
		Name:     "invoke-url",
		Required: false,
		Usage:    `invokeUrl (string)`,
	},
	&cli.StringFlag{
		Name:     "invoke-body",
		Required: false,
		Usage:    `invokeBody (string)`,
	},
}
var GsmProviderCommonInteractiveCliFlags = []fireback.CliInteractiveFlag{
	{
		Name:        "apiKey",
		StructField: "ApiKey",
		Required:    false,
		Recommended: false,
		Usage:       `apiKey`,
		Type:        "string",
	},
	{
		Name:        "mainSenderNumber",
		StructField: "MainSenderNumber",
		Required:    true,
		Recommended: false,
		Usage:       `mainSenderNumber`,
		Type:        "string",
	},
	{
		Name:        "type",
		StructField: "Type",
		Required:    true,
		Recommended: false,
		Usage:       `One of: 'url', 'terminal', 'mediana'`,
		Type:        "string",
	},
	{
		Name:        "invokeUrl",
		StructField: "InvokeUrl",
		Required:    false,
		Recommended: false,
		Usage:       `invokeUrl`,
		Type:        "string",
	},
	{
		Name:        "invokeBody",
		StructField: "InvokeBody",
		Required:    false,
		Recommended: false,
		Usage:       `invokeBody`,
		Type:        "string",
	},
}
var GsmProviderCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "api-key",
		Required: false,
		Usage:    `apiKey (string)`,
	},
	&cli.StringFlag{
		Name:     "main-sender-number",
		Required: true,
		Usage:    `mainSenderNumber (string)`,
	},
	&cli.StringFlag{
		Name:     "type",
		Required: true,
		Usage:    `One of: 'url', 'terminal', 'mediana' (enum)`,
	},
	&cli.StringFlag{
		Name:     "invoke-url",
		Required: false,
		Usage:    `invokeUrl (string)`,
	},
	&cli.StringFlag{
		Name:     "invoke-body",
		Required: false,
		Usage:    `invokeBody (string)`,
	},
}
var GsmProviderCreateCmd cli.Command = GSM_PROVIDER_ACTION_POST_ONE.ToCli()
var GsmProviderCreateInteractiveCmd cli.Command = cli.Command{
	Name:  "ic",
	Usage: "Creates a new entity, using requied fields in an interactive name",
	Flags: []cli.Flag{
		&cli.BoolFlag{
			Name:  "all",
			Usage: "Interactively asks for all inputs, not only required ones",
		},
	},
	Action: func(c *cli.Context) {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_GSM_PROVIDER_CREATE},
		})
		entity := &GsmProviderEntity{}
		fireback.PopulateInteractively(entity, c, GsmProviderCommonInteractiveCliFlags)
		if entity, err := GsmProviderActions.Create(entity, query); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := yaml.Marshal(entity)
			fmt.Println(fireback.FormatYamlKeys(string(f)))
		}
	},
}
var GsmProviderUpdateCmd cli.Command = cli.Command{
	Name:    "update",
	Aliases: []string{"u"},
	Flags:   GsmProviderCommonCliFlagsOptional,
	Usage:   "Updates entity by passing the parameters",
	Action: func(c *cli.Context) error {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_GSM_PROVIDER_UPDATE},
		})
		entity := CastGsmProviderFromCli(c)
		if entity, err := GsmProviderActions.Update(query, entity); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := json.MarshalIndent(entity, "", "  ")
			fmt.Println(string(f))
		}
		return nil
	},
}

func (x *GsmProviderEntity) FromCli(c *cli.Context) *GsmProviderEntity {
	return CastGsmProviderFromCli(c)
}
func CastGsmProviderFromCli(c *cli.Context) *GsmProviderEntity {
	template := &GsmProviderEntity{}
	if c.IsSet("uid") {
		template.UniqueId = c.String("uid")
	}
	if c.IsSet("pid") {
		template.ParentId = fireback.NewStringAutoNull(c.String("pid"))
	}
	if c.IsSet("api-key") {
		template.ApiKey = c.String("api-key")
	}
	if c.IsSet("main-sender-number") {
		template.MainSenderNumber = c.String("main-sender-number")
	}
	if c.IsSet("type") {
		template.Type = c.String("type")
	}
	if c.IsSet("invoke-url") {
		template.InvokeUrl = c.String("invoke-url")
	}
	if c.IsSet("invoke-body") {
		template.InvokeBody = c.String("invoke-body")
	}
	return template
}
func GsmProviderSyncSeederFromFs(fsRef *embed.FS, fileNames []string, q fireback.QueryDSL) {
	fireback.SeederFromFSImport(
		q,
		GsmProviderActions.Create,
		reflect.ValueOf(&GsmProviderEntity{}).Elem(),
		fsRef,
		fileNames,
		true,
	)
}
func GsmProviderSyncSeeders() {
	fireback.SeederFromFSImport(
		fireback.QueryDSL{WorkspaceId: fireback.USER_SYSTEM},
		GsmProviderActions.Create,
		reflect.ValueOf(&GsmProviderEntity{}).Elem(),
		gsmProviderSeedersFs,
		[]string{},
		true,
	)
}
func GsmProviderImportMocks() {
	fireback.SeederFromFSImport(
		fireback.QueryDSL{},
		GsmProviderActions.Create,
		reflect.ValueOf(&GsmProviderEntity{}).Elem(),
		&mocks.ViewsFs,
		[]string{},
		false,
	)
}
func GsmProviderWriteQueryMock(ctx fireback.MockQueryContext) {
	for _, lang := range ctx.Languages {
		itemsPerPage := 9999
		if ctx.ItemsPerPage > 0 {
			itemsPerPage = ctx.ItemsPerPage
		}
		f := fireback.QueryDSL{ItemsPerPage: itemsPerPage, Language: lang, WithPreloads: ctx.WithPreloads, Deep: true}
		items, count, _ := GsmProviderActions.Query(f)
		result := fireback.QueryEntitySuccessResult(f, items, count)
		fireback.WriteMockDataToFile(lang, "", "GsmProvider", result)
	}
}
func GsmProvidersActionQueryString(keyword string, page int) ([]string, *fireback.QueryResultMeta, error) {
	searchFields := []string{
		`unique_id %"{keyword}"%`,
		`name %"{keyword}"%`,
	}
	m := func(item *GsmProviderEntity) string {
		label := item.UniqueId
		// if item.Name != nil {
		// 	label += " >>> " + *item.Name
		// }
		return label
	}
	query := fireback.QueryStringCastCli(searchFields, keyword, page)
	items, meta, err := GsmProviderActions.Query(query)
	stringItems := []string{}
	for _, item := range items {
		label := m(item)
		stringItems = append(stringItems, label)
	}
	return stringItems, meta, err
}

var GsmProviderDevCommands = []cli.Command{
	GsmProviderWipeCmd,
	{
		Name:  "mock",
		Usage: "Generates mock records based on the entity definition",
		Flags: []cli.Flag{
			&cli.IntFlag{
				Name:  "count",
				Usage: "how many activation key do you need to be generated and stored in database",
				Value: 10,
			},
			&cli.BoolFlag{
				Name:  "batch",
				Usage: "Multiple insert into database mode. Might miss children and relations at the moment",
			},
		},
		Action: func(c *cli.Context) error {
			query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
				ActionRequires: []fireback.PermissionInfo{PERM_ROOT_GSM_PROVIDER_CREATE},
			})
			if c.Bool("batch") {
				GsmProviderActionSeederMultiple(query, c.Int("count"))
			} else {
				GsmProviderActionSeeder(query, c.Int("count"))
			}
			return nil
		},
	},
	{
		Name:    "init",
		Aliases: []string{"i"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Creates a basic seeder file for you, based on the definition module we have. You can populate this file as an example",
		Action: func(c *cli.Context) error {
			seed := GsmProviderActions.SeederInit()
			fireback.CommonInitSeeder(strings.TrimSpace(c.String("format")), seed)
			return nil
		},
	},
	cli.Command{
		Name:  "mlist",
		Usage: "Prints the list of embedded mocks into the app",
		Action: func(c *cli.Context) error {
			if entity, err := fireback.GetSeederFilenames(&mocks.ViewsFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "msync",
		Usage: "Tries to sync mocks into the system",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportEmbedCmd(c,
				GsmProviderActions.Create,
				reflect.ValueOf(&GsmProviderEntity{}).Elem(),
				&mocks.ViewsFs,
			)
			return nil
		},
	},
}
var GsmProviderImportExportCommands = []cli.Command{
	{
		Name:    "validate",
		Aliases: []string{"v"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "file",
				Usage: "Validates an import file, such as yaml, json, csv, and gives some insights how the after import it would look like",
				Value: "gsm-provider-seeder-gsm-provider.yml",
				// Uncomment before publish, they need to specify
				// Required: true,
			},
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Reads a yaml file containing an array of gsm-providers, you can run this to validate if your import file is correct, and how it would look like after import",
		Action: func(c *cli.Context) error {
			data := &[]GsmProviderEntity{}
			fireback.ReadYamlFile(c.String("file"), data)
			fmt.Println(data)
			return nil
		},
	},
	cli.Command{
		Name:  "slist",
		Usage: "Prints the list of files attached to this module for syncing or bootstrapping project",
		Action: func(c *cli.Context) error {
			if entity, err := fireback.GetSeederFilenames(gsmProviderSeedersFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "ssync",
		Usage: "Tries to sync the embedded content into the database, the list could be seen by 'slist' command",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportEmbedCmd(c,
				GsmProviderActions.Create,
				reflect.ValueOf(&GsmProviderEntity{}).Elem(),
				gsmProviderSeedersFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:    "export",
		Aliases: []string{"e"},
		Flags: append(fireback.CommonQueryFlags,
			&cli.StringFlag{
				Name:     "file",
				Usage:    "The address of file you want the csv/yaml/json be exported to",
				Required: true,
			}),
		Usage: "Exports a query results into the csv/yaml/json format",
		Action: func(c *cli.Context) error {
			return fireback.CommonCliExportCmd2(c,
				GsmProviderEntityStream,
				reflect.ValueOf(&GsmProviderEntity{}).Elem(),
				c.String("file"),
				&metas.MetaFs,
				"GsmProviderFieldMap.yml",
				GsmProviderPreloadRelations,
			)
		},
	},
	cli.Command{
		Name: "import",
		Flags: append(
			append(
				fireback.CommonQueryFlags,
				&cli.StringFlag{
					Name:     "file",
					Usage:    "The address of file you want the csv be imported from",
					Required: true,
				}),
			GsmProviderCommonCliFlagsOptional...,
		),
		Usage: "imports csv/yaml/json file and place it and its children into database",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportCmdAuthorized(c,
				GsmProviderActions.Create,
				reflect.ValueOf(&GsmProviderEntity{}).Elem(),
				c.String("file"),
				&fireback.SecurityModel{
					ActionRequires: []fireback.PermissionInfo{PERM_ROOT_GSM_PROVIDER_CREATE},
				},
				func() GsmProviderEntity {
					v := CastGsmProviderFromCli(c)
					return *v
				},
			)
			return nil
		},
	},
}
var GsmProviderCliCommands []cli.Command = []cli.Command{
	GSM_PROVIDER_ACTION_QUERY.ToCli(),
	GSM_PROVIDER_ACTION_TABLE.ToCli(),
	GsmProviderCreateCmd,
	GsmProviderUpdateCmd,
	GsmProviderAskCmd,
	GsmProviderCreateInteractiveCmd,
	fireback.GetCommonRemoveQuery(
		reflect.ValueOf(&GsmProviderEntity{}).Elem(),
		GsmProviderActions.Remove,
	),
}

func GsmProviderCliFn() cli.Command {
	commands := append(GsmProviderImportExportCommands, GsmProviderCliCommands...)
	if !fireback.GetConfig().Production {
		commands = append(commands, GsmProviderDevCommands...)
	}
	return cli.Command{
		Name:        "gsmprovider",
		Description: "GsmProviders module actions",
		Usage:       ``,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "language",
				Value: "en",
			},
		},
		Subcommands: commands,
	}
}

var GSM_PROVIDER_ACTION_TABLE = fireback.Module3Action{
	Name:          "table",
	ActionAliases: []string{"t"},
	Flags:         fireback.CommonQueryFlags,
	Description:   "Table formatted queries all of the entities in database based on the standard query format",
	Action:        GsmProviderActions.Query,
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		fireback.CommonCliTableCmd2(c,
			GsmProviderActions.Query,
			security,
			reflect.ValueOf(&GsmProviderEntity{}).Elem(),
		)
		return nil
	},
}
var GSM_PROVIDER_ACTION_QUERY = fireback.Module3Action{
	Method: "GET",
	Url:    "/gsm-providers",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_GSM_PROVIDER_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			qs := &GsmProviderEntityQs{}
			fireback.HttpQueryEntity(c, GsmProviderActions.Query, qs)
		},
	},
	Format:         "QUERY",
	Action:         GsmProviderActions.Query,
	ResponseEntity: &[]GsmProviderEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "GsmProviderEntity",
	},
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		qs := &GsmProviderEntityQs{}
		fireback.CommonCliQueryCmd3(
			c,
			GsmProviderActions.Query,
			security,
			qs,
		)
		return nil
	},
	CliName:       "query",
	Name:          "query",
	ActionAliases: []string{"q"},
	Flags:         append(fireback.CommonQueryFlags, GsmProviderQsFlags...),
	Description:   "Queries all of the entities in database based on the standard query format (s+)",
}
var GSM_PROVIDER_ACTION_EXPORT = fireback.Module3Action{
	Method: "GET",
	Url:    "/gsm-providers/export",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_GSM_PROVIDER_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpStreamFileChannel(c, GsmProviderActionExport)
		},
	},
	Format:         "QUERY",
	Action:         GsmProviderActionExport,
	ResponseEntity: &[]GsmProviderEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "GsmProviderEntity",
	},
}
var GSM_PROVIDER_ACTION_GET_ONE = fireback.Module3Action{
	Method: "GET",
	Url:    "/gsm-provider/:uniqueId",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_GSM_PROVIDER_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpGetEntity(c, GsmProviderActions.GetOne)
		},
	},
	Format:         "GET_ONE",
	Action:         GsmProviderActions.GetOne,
	ResponseEntity: &GsmProviderEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "GsmProviderEntity",
	},
}
var GSM_PROVIDER_ACTION_POST_ONE = fireback.Module3Action{
	Name:          "create",
	ActionAliases: []string{"c"},
	Description:   "Create new gsmProvider",
	Flags:         GsmProviderCommonCliFlags,
	Method:        "POST",
	Url:           "/gsm-provider",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_GSM_PROVIDER_CREATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpPostEntity(c, GsmProviderActions.Create)
		},
	},
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		result, err := fireback.CliPostEntity(c, GsmProviderActions.Create, security)
		fireback.HandleActionInCli(c, result, err, map[string]map[string]string{})
		return err
	},
	Action:         GsmProviderActions.Create,
	Format:         "POST_ONE",
	RequestEntity:  &GsmProviderEntity{},
	ResponseEntity: &GsmProviderEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "GsmProviderEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "GsmProviderEntity",
	},
}
var GSM_PROVIDER_ACTION_PATCH = fireback.Module3Action{
	Name:          "update",
	ActionAliases: []string{"u"},
	Flags:         GsmProviderCommonCliFlagsOptional,
	Method:        "PATCH",
	Url:           "/gsm-provider",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_GSM_PROVIDER_UPDATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntity(c, GsmProviderActions.Update)
		},
	},
	Action:         GsmProviderActions.Update,
	RequestEntity:  &GsmProviderEntity{},
	ResponseEntity: &GsmProviderEntity{},
	Format:         "PATCH_ONE",
	Out: &fireback.Module3ActionBody{
		Entity: "GsmProviderEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "GsmProviderEntity",
	},
}
var GSM_PROVIDER_ACTION_PATCH_BULK = fireback.Module3Action{
	Method: "PATCH",
	Url:    "/gsm-providers",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_GSM_PROVIDER_UPDATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntities(c, GsmProviderActionBulkUpdate)
		},
	},
	Action:         GsmProviderActionBulkUpdate,
	Format:         "PATCH_BULK",
	RequestEntity:  &fireback.BulkRecordRequest[GsmProviderEntity]{},
	ResponseEntity: &fireback.BulkRecordRequest[GsmProviderEntity]{},
	Out: &fireback.Module3ActionBody{
		Entity: "GsmProviderEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "GsmProviderEntity",
	},
}
var GSM_PROVIDER_ACTION_DELETE = fireback.Module3Action{
	Method: "DELETE",
	Url:    "/gsm-provider",
	Format: "DELETE_DSL",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_GSM_PROVIDER_DELETE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpRemoveEntity(c, GsmProviderActions.Remove)
		},
	},
	Action:         GsmProviderActions.Remove,
	RequestEntity:  &fireback.DeleteRequest{},
	ResponseEntity: &fireback.DeleteResponse{},
	TargetEntity:   &GsmProviderEntity{},
}

/**
 *	Override this function on GsmProviderEntityHttp.go,
 *	In order to add your own http
 **/
var AppendGsmProviderRouter = func(r *[]fireback.Module3Action) {}

func GetGsmProviderModule3Actions() []fireback.Module3Action {
	routes := []fireback.Module3Action{
		GSM_PROVIDER_ACTION_QUERY,
		GSM_PROVIDER_ACTION_EXPORT,
		GSM_PROVIDER_ACTION_GET_ONE,
		GSM_PROVIDER_ACTION_POST_ONE,
		GSM_PROVIDER_ACTION_PATCH,
		GSM_PROVIDER_ACTION_PATCH_BULK,
		GSM_PROVIDER_ACTION_DELETE,
	}
	// Append user defined functions
	AppendGsmProviderRouter(&routes)
	return routes
}

var PERM_ROOT_GSM_PROVIDER = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.gsm-provider.*",
	Name:        "Entire gsm provider actions (*)",
	Description: "",
}
var PERM_ROOT_GSM_PROVIDER_DELETE = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.gsm-provider.delete",
	Name:        "Delete gsm provider",
	Description: "",
}
var PERM_ROOT_GSM_PROVIDER_CREATE = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.gsm-provider.create",
	Name:        "Create gsm provider",
	Description: "",
}
var PERM_ROOT_GSM_PROVIDER_UPDATE = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.gsm-provider.update",
	Name:        "Update gsm provider",
	Description: "",
}
var PERM_ROOT_GSM_PROVIDER_QUERY = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.gsm-provider.query",
	Name:        "Query gsm provider",
	Description: "",
}
var ALL_GSM_PROVIDER_PERMISSIONS = []fireback.PermissionInfo{
	PERM_ROOT_GSM_PROVIDER_DELETE,
	PERM_ROOT_GSM_PROVIDER_CREATE,
	PERM_ROOT_GSM_PROVIDER_UPDATE,
	PERM_ROOT_GSM_PROVIDER_QUERY,
	PERM_ROOT_GSM_PROVIDER,
}
var GsmProviderType = newGsmProviderType()

func newGsmProviderType() *xGsmProviderType {
	return &xGsmProviderType{
		Url:      "url",
		Terminal: "terminal",
		Mediana:  "mediana",
	}
}

type xGsmProviderType struct {
	Url      string
	Terminal string
	Mediana  string
}

func NewGsmProviderCreatedEvent(
	payload *GsmProviderEntity,
	query *fireback.QueryDSL,
) (*fireback.Event, error) {
	event := &fireback.Event{
		Name:    "GsmProviderCreated",
		Payload: payload,
		Security: &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{
				PERM_ROOT_GSM_PROVIDER_QUERY,
			},
		},
		CacheKey: "*abac.GsmProviderEntity",
	}
	// Apply the source of the event based on querydsl
	fireback.ApplyQueryDslContextToEvent(event, *query)
	return event, nil
}
func NewGsmProviderUpdatedEvent(
	payload *GsmProviderEntity,
	query *fireback.QueryDSL,
) (*fireback.Event, error) {
	event := &fireback.Event{
		Name:    "GsmProviderUpdated",
		Payload: payload,
		Security: &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{
				PERM_ROOT_GSM_PROVIDER_QUERY,
			},
		},
		CacheKey: "*abac.GsmProviderEntity",
	}
	// Apply the source of the event based on querydsl
	fireback.ApplyQueryDslContextToEvent(event, *query)
	return event, nil
}

var GsmProviderEntityBundle = fireback.EntityBundle{
	Permissions: ALL_GSM_PROVIDER_PERMISSIONS,
	// Cli command has been exluded, since we use module to wrap all the entities
	// to be more easier to wrap up.
	// Create your own bundle if you need with Cli
	//CliCommands: []cli.Command{
	//	GsmProviderCliFn(),
	//},
	Actions:      GetGsmProviderModule3Actions(),
	MockProvider: GsmProviderImportMocks,
	AutoMigrationEntities: []interface{}{
		&GsmProviderEntity{},
	},
}
