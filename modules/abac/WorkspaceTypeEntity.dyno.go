package abac

/*
*	Generated by fireback 1.2.2
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"embed"
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	jsoniter "github.com/json-iterator/go"
	"github.com/schollz/progressbar/v3"
	metas "github.com/torabian/fireback/modules/abac/metas"
	mocks "github.com/torabian/fireback/modules/abac/mocks/WorkspaceType"
	seeders "github.com/torabian/fireback/modules/abac/seeders/WorkspaceType"
	"github.com/torabian/fireback/modules/fireback"
	"github.com/urfave/cli"
	"gopkg.in/yaml.v2"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"log"
	reflect "reflect"
	"strings"
	"time"
)

var workspaceTypeSeedersFs = &seeders.ViewsFs

func ResetWorkspaceTypeSeeders(fs *embed.FS) {
	workspaceTypeSeedersFs = fs
}

type WorkspaceTypeEntityQs struct {
	Title       fireback.QueriableField `cli:"title" table:"workspace_type" column:"title" qs:"title"`
	Description fireback.QueriableField `cli:"description" table:"workspace_type" column:"description" qs:"description"`
	Slug        fireback.QueriableField `cli:"slug" table:"workspace_type" column:"slug" qs:"slug"`
	Role        fireback.QueriableField `cli:"role" table:"workspace_type" column:"role" qs:"role"`
}

func (x *WorkspaceTypeEntityQs) GetQuery() string {
	return fireback.GenerateQueryStringStyle(reflect.ValueOf(x), "")
}

var WorkspaceTypeQsFlags = []cli.Flag{
	&cli.StringFlag{
		Name:  "title",
		Usage: "",
	},
	&cli.StringFlag{
		Name:  "description",
		Usage: "",
	},
	&cli.StringFlag{
		Name:  "slug",
		Usage: "",
	},
	&cli.StringFlag{
		Name:  "role",
		Usage: "The role which will be used to define the functionality of this workspace, Role needs to be created before hand, and only roles which belong to root workspace are possible to be selected",
	},
}

type WorkspaceTypeEntity struct {
	// Defines the visibility of the record in the table.
	// Visibility is a detailed topic, you can check all of the visibility values in fireback/visibility.go
	// by default, visibility of record are 0, means they are protected by the workspace
	// which are being created, and visible to every member of the workspace
	Visibility fireback.String `json:"visibility,omitempty" yaml:"visibility,omitempty" xml:"visibility,omitempty"`
	// The unique-id of the workspace which content belongs to. Upon creation this will be designated
	// to the selected workspace by user, if they have write access. You can change this value
	// or prevent changes to it manually (on root features for example modifying other workspace)
	WorkspaceId fireback.String `json:"workspaceId,omitempty" xml:"workspaceId,omitempty" yaml:"workspaceId,omitempty"`
	// The unique-id of the parent table, which this record is being linked to.
	// used internally for making relations in fireback, generally does not need manual changes
	// or modification by the developer or user. For example, if you have a object inside an object
	// the unique-id of the parent will be written in the child.
	LinkerId fireback.String `json:"linkerId,omitempty" xml:"linkerId,omitempty" yaml:"linkerId,omitempty"`
	// Used for recursive or parent-child operations. Some tables, are having nested relations,
	// and this field makes the table self refrenceing. ParentId needs to exist in the table before
	// creating of modifying a record.
	ParentId fireback.String `json:"parentId,omitempty" xml:"parentId,omitempty" yaml:"parentId,omitempty"`
	// Makes a field deletable. Some records should not be deletable at all.
	// default it's true.
	IsDeletable *bool `json:"isDeletable,omitempty" xml:"isDeletable,omitempty" yaml:"isDeletable,omitempty" gorm:"default:true"`
	// Makes a field updatable. Some records should not be updatable at all.
	// default it's true.
	IsUpdatable *bool `json:"isUpdatable,omitempty" xml:"isUpdatable,omitempty" yaml:"isUpdatable,omitempty" gorm:"default:true"`
	// The unique-id of the user which is creating the record, or the record belongs to.
	// Administration might want to change this to any user, by default Fireback fills
	// it to the current authenticated user.
	UserId fireback.String `json:"userId,omitempty" xml:"userId,omitempty" yaml:"userId,omitempty"`
	// General mechanism to rank the elements. From code perspective, it's just a number,
	// but you can sort it based on any logic for records to make a ranking, sorting.
	// they should not be unique across a table.
	Rank fireback.Int64 `json:"rank,omitempty" yaml:"rank,omitempty" xml:"rank,omitempty" gorm:"type:int;name:rank"`
	// Primary numeric key in the database. This value is not meant to be exported to public
	// or be used to access data at all. Rather a mechanism of indexing columns internally
	// or cursor pagination in future releases of fireback, or better search performance.
	ID uint `gorm:"primaryKey;autoIncrement" json:"-" yaml:"-" xml:"-"`
	// Unique id of the record across the table. This value will be accessed from public APIs,
	// and many other places intead of numeric ID property.
	// Upon generation, a UUID automatically is being assigned, and if user has specified the
	// Unique id in the post body, it will be used. This mechanism allows to manage unsaved
	// content on front-end much easier than requiring parent to exists first.
	UniqueId string `json:"uniqueId,omitempty" xml:"uniqueId,omitempty" gorm:"unique;not null;size:100;" yaml:"uniqueId,omitempty"`
	// The time that the record has been updated in datetime.
	// the field will be automatically populated by gorm orm.
	UpdatedAt *time.Time `json:"updatedAt,omitempty" xml:"updatedAt,omitempty" yaml:"updatedAt,omitempty"`
	// The time that the record has been created in datetime.
	// the field will be automatically populated by gorm orm.
	CreatedAt *time.Time `json:"createdAt,omitempty" xml:"createdAt,omitempty" yaml:"createdAt,omitempty"`
	// The time that the record has been deleted softly (means the data still exists in database, but no longer visible to any feature) in nano datatime
	// you need to make sure check this field if writing custom sql queries.
	// the field will be automatically populated by gorm orm.
	DeletedAt *time.Time `json:"deletedAt,omitempty" xml:"deletedAt,omitempty" yaml:"deletedAt,omitempty"`
	// Record creation date time formatting based on locale of the headers, or other
	// possible factors.
	CreatedFormatted string `json:"createdFormatted,omitempty" xml:"createdFormatted,omitempty" yaml:"createdFormatted,omitempty" sql:"-" gorm:"-"`
	// Record update date time formatting based on locale of the headers, or other
	// possible factors.
	UpdatedFormatted string `json:"updatedFormatted,omitempty" xml:"updatedFormatted,omitempty" yaml:"updatedFormatted,omitempty" sql:"-" gorm:"-"`
	Title            string `json:"title" xml:"title" yaml:"title"  validate:"required,omitempty,min=1,max=250"        translate:"true"  `
	Description      string `json:"description" xml:"description" yaml:"description"        translate:"true"  `
	Slug             string `json:"slug" xml:"slug" yaml:"slug"  validate:"required,omitempty,min=2,max=50"        `
	// The role which will be used to define the functionality of this workspace, Role needs to be created before hand, and only roles which belong to root workspace are possible to be selected
	Role         *RoleEntity                    `json:"role" xml:"role" yaml:"role"    gorm:"foreignKey:RoleId;references:UniqueId"      `
	RoleId       fireback.String                `json:"roleId" yaml:"roleId" xml:"roleId"   validate:"required" `
	Translations []*WorkspaceTypeEntityPolyglot `json:"translations,omitempty" xml:"translations,omitempty" yaml:"translations,omitempty" gorm:"foreignKey:LinkerId;references:UniqueId;constraint:OnDelete:CASCADE"`
	Children     []*WorkspaceTypeEntity         `csv:"-" gorm:"-" sql:"-" json:"children,omitempty" xml:"children,omitempty"  yaml:"children,omitempty"`
	LinkedTo     *WorkspaceTypeEntity           `csv:"-" yaml:"-" gorm:"-" json:"-" sql:"-" xml:"-"`
}

func WorkspaceTypeEntityStream(q fireback.QueryDSL) (chan []*WorkspaceTypeEntity, *fireback.QueryResultMeta, error) {
	cn := make(chan []*WorkspaceTypeEntity)
	q.ItemsPerPage = 50
	q.StartIndex = 0
	_, qrm, err := WorkspaceTypeActions.Query(q)
	if err != nil {
		return nil, nil, err
	}
	go func() {
		defer close(cn)
		for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
			items, _, _ := WorkspaceTypeActions.Query(q)
			i += q.ItemsPerPage
			q.StartIndex = i
			cn <- items
		}
	}()
	return cn, qrm, nil
}

type WorkspaceTypeEntityList struct {
	Items []*WorkspaceTypeEntity
}

func NewWorkspaceTypeEntityList(items []*WorkspaceTypeEntity) *WorkspaceTypeEntityList {
	return &WorkspaceTypeEntityList{
		Items: items,
	}
}
func (x *WorkspaceTypeEntityList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *WorkspaceTypeEntityList) ToTree() *fireback.TreeOperation[WorkspaceTypeEntity] {
	return fireback.NewTreeOperation(
		x.Items,
		func(t *WorkspaceTypeEntity) string {
			if !t.ParentId.Valid {
				return ""
			}
			return t.ParentId.String
		},
		func(t *WorkspaceTypeEntity) string {
			return t.UniqueId
		},
	)
}

var WorkspaceTypePreloadRelations []string = []string{}

type workspaceTypeActionsSig struct {
	Update         func(query fireback.QueryDSL, dto *WorkspaceTypeEntity) (*WorkspaceTypeEntity, *fireback.IError)
	Create         func(dto *WorkspaceTypeEntity, query fireback.QueryDSL) (*WorkspaceTypeEntity, *fireback.IError)
	Upsert         func(dto *WorkspaceTypeEntity, query fireback.QueryDSL) (*WorkspaceTypeEntity, *fireback.IError)
	SeederInit     func() *WorkspaceTypeEntity
	Remove         func(query fireback.QueryDSL) (int64, *fireback.IError)
	MultiInsert    func(dtos []*WorkspaceTypeEntity, query fireback.QueryDSL) ([]*WorkspaceTypeEntity, *fireback.IError)
	GetOne         func(query fireback.QueryDSL) (*WorkspaceTypeEntity, *fireback.IError)
	GetByWorkspace func(query fireback.QueryDSL) (*WorkspaceTypeEntity, *fireback.IError)
	Query          func(query fireback.QueryDSL) ([]*WorkspaceTypeEntity, *fireback.QueryResultMeta, error)
}

var WorkspaceTypeActions workspaceTypeActionsSig = workspaceTypeActionsSig{
	Update:         WorkspaceTypeActionUpdateFn,
	Create:         WorkspaceTypeActionCreateFn,
	Upsert:         WorkspaceTypeActionUpsertFn,
	Remove:         WorkspaceTypeActionRemoveFn,
	SeederInit:     WorkspaceTypeActionSeederInitFn,
	MultiInsert:    WorkspaceTypeMultiInsertFn,
	GetOne:         WorkspaceTypeActionGetOneFn,
	GetByWorkspace: WorkspaceTypeActionGetByWorkspaceFn,
	Query:          WorkspaceTypeActionQueryFn,
}

func WorkspaceTypeActionUpsertFn(dto *WorkspaceTypeEntity, query fireback.QueryDSL) (*WorkspaceTypeEntity, *fireback.IError) {
	return nil, nil
}

var WORKSPACE_TYPE_EVENT_CREATED = "workspaceType.created"
var WORKSPACE_TYPE_EVENT_UPDATED = "workspaceType.updated"
var WORKSPACE_TYPE_EVENT_DELETED = "workspaceType.deleted"
var WORKSPACE_TYPE_EVENTS = []string{
	WORKSPACE_TYPE_EVENT_CREATED,
	WORKSPACE_TYPE_EVENT_UPDATED,
	WORKSPACE_TYPE_EVENT_DELETED,
}

type WorkspaceTypeFieldMap struct {
	Title       fireback.TranslatedString `yaml:"title"`
	Description fireback.TranslatedString `yaml:"description"`
	Slug        fireback.TranslatedString `yaml:"slug"`
	Role        fireback.TranslatedString `yaml:"role"`
}

var WorkspaceTypeEntityMetaConfig map[string]int64 = map[string]int64{}
var WorkspaceTypeEntityJsonSchema = fireback.ExtractEntityFields(reflect.ValueOf(&WorkspaceTypeEntity{}))

type WorkspaceTypeEntityPolyglot struct {
	LinkerId    string `gorm:"uniqueId;not null;size:100;" json:"linkerId,omitempty" yaml:"linkerId,omitempty" xml:"linkerId,omitempty"`
	LanguageId  string `gorm:"uniqueId;not null;size:100;" json:"languageId,omitempty" xml:"languageId,omitempty" yaml:"languageId,omitempty"`
	Title       string `yaml:"title,omitempty" xml:"title,omitempty" json:"title,omitempty"`
	Description string `yaml:"description,omitempty" xml:"description,omitempty" json:"description,omitempty"`
}

func entityWorkspaceTypeFormatter(dto *WorkspaceTypeEntity, query fireback.QueryDSL) {
	if dto == nil {
		return
	}
}
func WorkspaceTypeActionSeederMultiple(query fireback.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	batchSize := 100
	bar := progressbar.Default(int64(count))
	// Collect entities in batches
	var entitiesBatch []*WorkspaceTypeEntity
	for i := 1; i <= count; i++ {
		entity := WorkspaceTypeActions.SeederInit()
		entitiesBatch = append(entitiesBatch, entity)
		// When batch size is reached, perform the batch insert
		if len(entitiesBatch) == batchSize || i == count {
			// Insert batch
			_, err := WorkspaceTypeActions.MultiInsert(entitiesBatch, query)
			if err == nil {
				successInsert += len(entitiesBatch)
			} else {
				fmt.Println(err)
				failureInsert += len(entitiesBatch)
			}
			// Clear the batch after insert
			entitiesBatch = nil
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func WorkspaceTypeActionSeeder(query fireback.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	bar := progressbar.Default(int64(count))
	for i := 1; i <= count; i++ {
		entity := WorkspaceTypeActions.SeederInit()
		_, err := WorkspaceTypeActions.Create(entity, query)
		if err == nil {
			successInsert++
		} else {
			fmt.Println(err)
			failureInsert++
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func (x *WorkspaceTypeEntity) GetTitleTranslated(language string) string {
	if x.Translations != nil && len(x.Translations) > 0 {
		for _, item := range x.Translations {
			if item.LanguageId == language {
				return item.Title
			}
		}
	}
	return ""
}
func (x *WorkspaceTypeEntity) GetDescriptionTranslated(language string) string {
	if x.Translations != nil && len(x.Translations) > 0 {
		for _, item := range x.Translations {
			if item.LanguageId == language {
				return item.Description
			}
		}
	}
	return ""
}
func (x *WorkspaceTypeEntity) Seeder() string {
	obj := WorkspaceTypeActions.SeederInit()
	v, _ := json.MarshalIndent(obj, "", "  ")
	return string(v)
}
func WorkspaceTypeActionSeederInitFn() *WorkspaceTypeEntity {
	entity := &WorkspaceTypeEntity{}
	return entity
}
func WorkspaceTypeAssociationCreate(dto *WorkspaceTypeEntity, query fireback.QueryDSL) error {
	return nil
}

/**
* These kind of content are coming from another entity, which is indepndent module
* If we want to create them, we need to do it before. This is not association.
**/
func WorkspaceTypeRelationContentCreate(dto *WorkspaceTypeEntity, query fireback.QueryDSL) error {
	return nil
}
func WorkspaceTypeRelationContentUpdate(dto *WorkspaceTypeEntity, query fireback.QueryDSL) error {
	return nil
}
func WorkspaceTypePolyglotUpdateHandler(dto *WorkspaceTypeEntity, query fireback.QueryDSL) {
	if dto == nil {
		return
	}
	fireback.PolyglotUpdateHandler(dto, &WorkspaceTypeEntityPolyglot{}, query)
}

/**
 * This will be validating your entity fully. Important note is that, you add validate:* tag
 * in your entity, it will automatically work here. For slices inside entity, make sure you add
 * extra line of AppendSliceErrors, otherwise they won't be detected
 */
func WorkspaceTypeValidator(dto *WorkspaceTypeEntity, isPatch bool) *fireback.IError {
	err := fireback.CommonStructValidatorPointer(dto, isPatch)
	return err
}

// Creates a set of natural language queries, which can be used with
// AI tools to create content or help with some tasks
var WorkspaceTypeAskCmd cli.Command = cli.Command{
	Name:  "nlp",
	Usage: "Set of natural language queries which helps creating content or data",
	Subcommands: []cli.Command{
		{
			Name:  "sample",
			Usage: "Asks for generating sample by giving an example data",
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:  "format",
					Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
					Value: "yaml",
				},
				&cli.IntFlag{
					Name:  "count",
					Usage: "How many samples to ask",
					Value: 30,
				},
			},
			Action: func(c *cli.Context) error {
				v := &WorkspaceTypeEntity{}
				format := c.String("format")
				request := "\033[1m" + `
I need you to create me an array of exact signature as the example given below,
with at least ` + fmt.Sprint(c.String("count")) + ` items, mock the content with few words, and guess the possible values
based on the common sense. I need the output to be a valid ` + format + ` file.
Make sure you wrap the entire array in 'items' field. Also before that, I provide some explanation of each field:
Title: (type: string) Description: 
Description: (type: string) Description: 
Slug: (type: string) Description: 
Role: (type: one) Description: The role which will be used to define the functionality of this workspace, Role needs to be created before hand, and only roles which belong to root workspace are possible to be selected
And here is the actual object signature:
` + v.Seeder() + `
`
				fmt.Println(request)
				return nil
			},
		},
	},
}

func WorkspaceTypeEntityPreSanitize(dto *WorkspaceTypeEntity, query fireback.QueryDSL) {
}
func WorkspaceTypeEntityBeforeCreateAppend(dto *WorkspaceTypeEntity, query fireback.QueryDSL) {
	if dto.UniqueId == "" {
		dto.UniqueId = fireback.UUID()
	}
	dto.WorkspaceId = fireback.NewString(query.WorkspaceId)
	dto.UserId = fireback.NewString(query.UserId)
	WorkspaceTypeRecursiveAddUniqueId(dto, query)
}
func WorkspaceTypeRecursiveAddUniqueId(dto *WorkspaceTypeEntity, query fireback.QueryDSL) {
}

/*
*
	Batch inserts, do not have all features that create
	operation does. Use it with unnormalized content,
	or read the source code carefully.
  This is not marked as an action, because it should not be available publicly
  at this moment.
*
*/
func WorkspaceTypeMultiInsertFn(dtos []*WorkspaceTypeEntity, query fireback.QueryDSL) ([]*WorkspaceTypeEntity, *fireback.IError) {
	if len(dtos) > 0 {
		for index := range dtos {
			WorkspaceTypeEntityPreSanitize(dtos[index], query)
			WorkspaceTypeEntityBeforeCreateAppend(dtos[index], query)
		}
		var dbref *gorm.DB = nil
		if query.Tx == nil {
			dbref = fireback.GetDbRef()
		} else {
			dbref = query.Tx
		}
		query.Tx = dbref
		err := dbref.Create(&dtos).Error
		if err != nil {
			return nil, fireback.GormErrorToIError(err)
		}
	}
	return dtos, nil
}
func WorkspaceTypeActionBatchCreateFn(dtos []*WorkspaceTypeEntity, query fireback.QueryDSL) ([]*WorkspaceTypeEntity, *fireback.IError) {
	if dtos != nil && len(dtos) > 0 {
		items := []*WorkspaceTypeEntity{}
		for _, item := range dtos {
			s, err := WorkspaceTypeActions.Create(item, query)
			if err != nil {
				return nil, err
			}
			items = append(items, s)
		}
		return items, nil
	}
	return dtos, nil
}
func WorkspaceTypeDeleteEntireChildren(query fireback.QueryDSL, dto *WorkspaceTypeEntity) *fireback.IError {
	// intentionally removed this. It's hard to implement it, and probably wrong without
	// proper on delete cascade
	return nil
}
func WorkspaceTypeActionCreateFn(dto *WorkspaceTypeEntity, query fireback.QueryDSL) (*WorkspaceTypeEntity, *fireback.IError) {
	// 1. Validate always
	if iError := WorkspaceTypeValidator(dto, false); iError != nil {
		return nil, iError
	}
	// 1.5 Sanitize the content coming of the front-end
	WorkspaceTypeEntityPreSanitize(dto, query)
	// 2. Append the necessary information about user, workspace
	WorkspaceTypeEntityBeforeCreateAppend(dto, query)
	// 3. Create other entities if we want select from them
	WorkspaceTypeRelationContentCreate(dto, query)
	// 4. Create the entity
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = fireback.GetDbRef()
	} else {
		dbref = query.Tx
	}
	query.Tx = dbref
	err := dbref.Create(&dto).Error
	if err != nil {
		err := fireback.GormErrorToIError(err)
		return nil, err
	}
	// 5. Create sub entities, objects or arrays, association to other entities
	WorkspaceTypeAssociationCreate(dto, query)
	// 6. Fire the event into system
	actionEvent, eventErr := NewWorkspaceTypeCreatedEvent(dto, &query)
	if actionEvent != nil && eventErr == nil {
		fireback.GetEventBusInstance().FireEvent(query, *actionEvent)
	} else {
		log.Default().Panicln("Creating event has failed for %v", dto)
	}
	/*
		event.MustFire(WORKSPACE_TYPE_EVENT_CREATED, event.M{
			"entity":   dto,
			"entityKey": fireback.GetTypeString(&WorkspaceTypeEntity{}),
			"target":   "workspace",
			"unqiueId": query.WorkspaceId,
		})
	*/
	return dto, nil
}
func WorkspaceTypeActionGetOneFn(query fireback.QueryDSL) (*WorkspaceTypeEntity, *fireback.IError) {
	refl := reflect.ValueOf(&WorkspaceTypeEntity{})
	item, err := fireback.GetOneEntity[WorkspaceTypeEntity](query, refl)
	entityWorkspaceTypeFormatter(item, query)
	return item, err
}
func WorkspaceTypeActionGetByWorkspaceFn(query fireback.QueryDSL) (*WorkspaceTypeEntity, *fireback.IError) {
	refl := reflect.ValueOf(&WorkspaceTypeEntity{})
	item, err := fireback.GetOneByWorkspaceEntity[WorkspaceTypeEntity](query, refl)
	entityWorkspaceTypeFormatter(item, query)
	return item, err
}
func WorkspaceTypeActionQueryFn(query fireback.QueryDSL) ([]*WorkspaceTypeEntity, *fireback.QueryResultMeta, error) {
	refl := reflect.ValueOf(&WorkspaceTypeEntity{})
	items, meta, err := fireback.QueryEntitiesPointer[WorkspaceTypeEntity](query, refl)
	for _, item := range items {
		entityWorkspaceTypeFormatter(item, query)
	}
	return items, meta, err
}

var workspaceTypeMemoryItems []*WorkspaceTypeEntity = []*WorkspaceTypeEntity{}

func WorkspaceTypeEntityIntoMemory() {
	q := fireback.QueryDSL{
		ItemsPerPage: 500,
		StartIndex:   0,
	}
	_, qrm, _ := WorkspaceTypeActions.Query(q)
	for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
		items, _, _ := WorkspaceTypeActions.Query(q)
		workspaceTypeMemoryItems = append(workspaceTypeMemoryItems, items...)
		i += q.ItemsPerPage
		q.StartIndex = i
	}
}
func WorkspaceTypeMemGet(id uint) *WorkspaceTypeEntity {
	for _, item := range workspaceTypeMemoryItems {
		if item.ID == id {
			return item
		}
	}
	return nil
}
func WorkspaceTypeMemJoin(items []uint) []*WorkspaceTypeEntity {
	res := []*WorkspaceTypeEntity{}
	for _, item := range items {
		v := WorkspaceTypeMemGet(item)
		if v != nil {
			res = append(res, v)
		}
	}
	return res
}
func WorkspaceTypeUpdateExec(dbref *gorm.DB, query fireback.QueryDSL, fields *WorkspaceTypeEntity) (*WorkspaceTypeEntity, *fireback.IError) {
	uniqueId := fields.UniqueId
	query.TriggerEventName = WORKSPACE_TYPE_EVENT_UPDATED
	WorkspaceTypeEntityPreSanitize(fields, query)
	var item WorkspaceTypeEntity
	var itemRefetched WorkspaceTypeEntity
	// If the entity is distinct by workspace, then the Query.WorkspaceId
	// which is selected is being used as the condition for create or update
	// if not, the unique Id is being used
	cond2 := &WorkspaceTypeEntity{UniqueId: uniqueId}
	q := dbref.
		Where(cond2).
		FirstOrCreate(&item)
	err := q.UpdateColumns(fields).Error
	if err != nil {
		return nil, fireback.GormErrorToIError(err)
	}
	query.Tx = dbref
	WorkspaceTypeRelationContentUpdate(fields, query)
	WorkspaceTypePolyglotUpdateHandler(fields, query)
	if ero := WorkspaceTypeDeleteEntireChildren(query, fields); ero != nil {
		return nil, ero
	}
	// @meta(update has many)
	err = dbref.
		Preload(clause.Associations).
		Where(&WorkspaceTypeEntity{UniqueId: uniqueId}).
		First(&itemRefetched).Error
	if err != nil {
		return nil, fireback.GormErrorToIError(err)
	}
	actionEvent, eventErr := NewWorkspaceTypeUpdatedEvent(fields, &query)
	if actionEvent != nil && eventErr == nil {
		fireback.GetEventBusInstance().FireEvent(query, *actionEvent)
	} else {
		log.Default().Panicln("Updating event has failed for %v", fields)
	}
	/*
	   event.MustFire(query.TriggerEventName, event.M{
	     "entity":   &item,
	     "target":   "workspace",
	     "unqiueId": query.WorkspaceId,
	   })*/
	return &itemRefetched, nil
}
func WorkspaceTypeActionUpdateFn(query fireback.QueryDSL, fields *WorkspaceTypeEntity) (*WorkspaceTypeEntity, *fireback.IError) {
	if fields == nil {
		return nil, fireback.Create401Error(&fireback.FirebackMessages.BodyIsMissing, []string{})
	}
	// 1. Validate always
	if iError := WorkspaceTypeValidator(fields, true); iError != nil {
		return nil, iError
	}
	// Let's not add this. I am not sure of the consequences
	// WorkspaceTypeRecursiveAddUniqueId(fields, query)
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = fireback.GetDbRef()
		var item *WorkspaceTypeEntity
		vf := dbref.Transaction(func(tx *gorm.DB) error {
			dbref = tx
			var err *fireback.IError
			item, err = WorkspaceTypeUpdateExec(dbref, query, fields)
			if err == nil {
				return nil
			} else {
				return err
			}
		})
		return item, fireback.CastToIError(vf)
	} else {
		dbref = query.Tx
		return WorkspaceTypeUpdateExec(dbref, query, fields)
	}
}

var WorkspaceTypeWipeCmd cli.Command = cli.Command{
	Name:  "wipe",
	Usage: "Wipes entire workspacetypes ",
	Action: func(c *cli.Context) error {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_TYPE_DELETE},
			AllowOnRoot:    true,
		})
		count, _ := WorkspaceTypeActionWipeClean(query)
		fmt.Println("Removed", count, "of entities")
		return nil
	},
}

func WorkspaceTypeActionRemoveFn(query fireback.QueryDSL) (int64, *fireback.IError) {
	refl := reflect.ValueOf(&WorkspaceTypeEntity{})
	query.ActionRequires = []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_TYPE_DELETE}
	return fireback.RemoveEntity[WorkspaceTypeEntity](query, refl)
}
func WorkspaceTypeActionWipeClean(query fireback.QueryDSL) (int64, error) {
	var err error
	var count int64 = 0
	{
		subCount, subErr := fireback.WipeCleanEntity[WorkspaceTypeEntity]()
		if subErr != nil {
			fmt.Println("Error while wiping 'WorkspaceTypeEntity'", subErr)
			return count, subErr
		} else {
			count += subCount
		}
	}
	return count, err
}
func WorkspaceTypeActionBulkUpdate(
	query fireback.QueryDSL, dto *fireback.BulkRecordRequest[WorkspaceTypeEntity]) (
	*fireback.BulkRecordRequest[WorkspaceTypeEntity], *fireback.IError,
) {
	result := []*WorkspaceTypeEntity{}
	err := fireback.GetDbRef().Transaction(func(tx *gorm.DB) error {
		query.Tx = tx
		for _, record := range dto.Records {
			item, err := WorkspaceTypeActions.Update(query, record)
			if err != nil {
				return err
			} else {
				result = append(result, item)
			}
		}
		return nil
	})
	if err == nil {
		return dto, nil
	}
	return nil, err.(*fireback.IError)
}
func (x *WorkspaceTypeEntity) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}

var WorkspaceTypeEntityMeta = fireback.TableMetaData{
	EntityName:    "WorkspaceType",
	ExportKey:     "workspace-types",
	TableNameInDb: "workspace-type_entities",
	EntityObject:  &WorkspaceTypeEntity{},
	ExportStream:  WorkspaceTypeActionExportT,
	ImportQuery:   WorkspaceTypeActionImport,
}

func WorkspaceTypeActionExport(
	query fireback.QueryDSL,
) (chan []byte, *fireback.IError) {
	return fireback.YamlExporterChannel[WorkspaceTypeEntity](query, WorkspaceTypeActions.Query, WorkspaceTypePreloadRelations)
}
func WorkspaceTypeActionExportT(
	query fireback.QueryDSL,
) (chan []interface{}, *fireback.IError) {
	return fireback.YamlExporterChannelT[WorkspaceTypeEntity](query, WorkspaceTypeActions.Query, WorkspaceTypePreloadRelations)
}
func WorkspaceTypeActionImport(
	dto interface{}, query fireback.QueryDSL,
) *fireback.IError {
	var json = jsoniter.ConfigCompatibleWithStandardLibrary
	var content WorkspaceTypeEntity
	cx, err2 := json.Marshal(dto)
	if err2 != nil {
		return fireback.Create401Error(&fireback.FirebackMessages.InvalidContent, []string{})
	}
	json.Unmarshal(cx, &content)
	_, err := WorkspaceTypeActions.Create(&content, query)
	return err
}

var WorkspaceTypeCommonCliFlags = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "title",
		Required: true,
		Usage:    `title (string)`,
	},
	&cli.StringFlag{
		Name:     "description",
		Required: false,
		Usage:    `description (string)`,
	},
	&cli.StringFlag{
		Name:     "slug",
		Required: true,
		Usage:    `slug (string)`,
	},
	&cli.StringFlag{
		Name:     "role-id",
		Required: true,
		Usage:    `The role which will be used to define the functionality of this workspace, Role needs to be created before hand, and only roles which belong to root workspace are possible to be selected (one)`,
	},
}
var WorkspaceTypeCommonInteractiveCliFlags = []fireback.CliInteractiveFlag{
	{
		Name:        "title",
		StructField: "Title",
		Required:    true,
		Recommended: false,
		Usage:       `title`,
		Type:        "string",
	},
	{
		Name:        "description",
		StructField: "Description",
		Required:    false,
		Recommended: false,
		Usage:       `description`,
		Type:        "string",
	},
	{
		Name:        "slug",
		StructField: "Slug",
		Required:    true,
		Recommended: false,
		Usage:       `slug`,
		Type:        "string",
	},
}
var WorkspaceTypeCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "title",
		Required: true,
		Usage:    `title (string)`,
	},
	&cli.StringFlag{
		Name:     "description",
		Required: false,
		Usage:    `description (string)`,
	},
	&cli.StringFlag{
		Name:     "slug",
		Required: true,
		Usage:    `slug (string)`,
	},
	&cli.StringFlag{
		Name:     "role-id",
		Required: true,
		Usage:    `The role which will be used to define the functionality of this workspace, Role needs to be created before hand, and only roles which belong to root workspace are possible to be selected (one)`,
	},
}
var WorkspaceTypeCreateCmd cli.Command = WORKSPACE_TYPE_ACTION_POST_ONE.ToCli()
var WorkspaceTypeCreateInteractiveCmd cli.Command = cli.Command{
	Name:  "ic",
	Usage: "Creates a new entity, using requied fields in an interactive name",
	Flags: []cli.Flag{
		&cli.BoolFlag{
			Name:  "all",
			Usage: "Interactively asks for all inputs, not only required ones",
		},
	},
	Action: func(c *cli.Context) {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_TYPE_CREATE},
			AllowOnRoot:    true,
		})
		entity := &WorkspaceTypeEntity{}
		fireback.PopulateInteractively(entity, c, WorkspaceTypeCommonInteractiveCliFlags)
		if entity, err := WorkspaceTypeActions.Create(entity, query); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := yaml.Marshal(entity)
			fmt.Println(fireback.FormatYamlKeys(string(f)))
		}
	},
}
var WorkspaceTypeUpdateCmd cli.Command = cli.Command{
	Name:    "update",
	Aliases: []string{"u"},
	Flags:   WorkspaceTypeCommonCliFlagsOptional,
	Usage:   "Updates entity by passing the parameters",
	Action: func(c *cli.Context) error {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_TYPE_UPDATE},
			AllowOnRoot:    true,
		})
		entity := CastWorkspaceTypeFromCli(c)
		if entity, err := WorkspaceTypeActions.Update(query, entity); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := json.MarshalIndent(entity, "", "  ")
			fmt.Println(string(f))
		}
		return nil
	},
}

func (x *WorkspaceTypeEntity) FromCli(c *cli.Context) *WorkspaceTypeEntity {
	return CastWorkspaceTypeFromCli(c)
}
func CastWorkspaceTypeFromCli(c *cli.Context) *WorkspaceTypeEntity {
	template := &WorkspaceTypeEntity{}
	if c.IsSet("uid") {
		template.UniqueId = c.String("uid")
	}
	if c.IsSet("pid") {
		template.ParentId = fireback.NewStringAutoNull(c.String("pid"))
	}
	if c.IsSet("title") {
		template.Title = c.String("title")
	}
	if c.IsSet("description") {
		template.Description = c.String("description")
	}
	if c.IsSet("slug") {
		template.Slug = c.String("slug")
	}
	if c.IsSet("role-id") {
		template.RoleId = fireback.NewStringAutoNull(c.String("role-id"))
	}
	return template
}
func WorkspaceTypeSyncSeederFromFs(fsRef *embed.FS, fileNames []string, q fireback.QueryDSL) {
	fireback.SeederFromFSImport(
		q,
		WorkspaceTypeActions.Create,
		reflect.ValueOf(&WorkspaceTypeEntity{}).Elem(),
		fsRef,
		fileNames,
		true,
	)
}
func WorkspaceTypeSyncSeeders() {
	fireback.SeederFromFSImport(
		fireback.QueryDSL{WorkspaceId: fireback.USER_SYSTEM},
		WorkspaceTypeActions.Create,
		reflect.ValueOf(&WorkspaceTypeEntity{}).Elem(),
		workspaceTypeSeedersFs,
		[]string{},
		true,
	)
}
func WorkspaceTypeImportMocks() {
	fireback.SeederFromFSImport(
		fireback.QueryDSL{},
		WorkspaceTypeActions.Create,
		reflect.ValueOf(&WorkspaceTypeEntity{}).Elem(),
		&mocks.ViewsFs,
		[]string{},
		false,
	)
}
func WorkspaceTypeWriteQueryMock(ctx fireback.MockQueryContext) {
	for _, lang := range ctx.Languages {
		itemsPerPage := 9999
		if ctx.ItemsPerPage > 0 {
			itemsPerPage = ctx.ItemsPerPage
		}
		f := fireback.QueryDSL{ItemsPerPage: itemsPerPage, Language: lang, WithPreloads: ctx.WithPreloads, Deep: true}
		items, count, _ := WorkspaceTypeActions.Query(f)
		result := fireback.QueryEntitySuccessResult(f, items, count)
		fireback.WriteMockDataToFile(lang, "", "WorkspaceType", result)
	}
}
func WorkspaceTypesActionQueryString(keyword string, page int) ([]string, *fireback.QueryResultMeta, error) {
	searchFields := []string{
		`unique_id %"{keyword}"%`,
		`name %"{keyword}"%`,
	}
	m := func(item *WorkspaceTypeEntity) string {
		label := item.UniqueId
		// if item.Name != nil {
		// 	label += " >>> " + *item.Name
		// }
		return label
	}
	query := fireback.QueryStringCastCli(searchFields, keyword, page)
	items, meta, err := WorkspaceTypeActions.Query(query)
	stringItems := []string{}
	for _, item := range items {
		label := m(item)
		stringItems = append(stringItems, label)
	}
	return stringItems, meta, err
}

var WorkspaceTypeDevCommands = []cli.Command{
	WorkspaceTypeWipeCmd,
	{
		Name:    "init",
		Aliases: []string{"i"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Creates a basic seeder file for you, based on the definition module we have. You can populate this file as an example",
		Action: func(c *cli.Context) error {
			seed := WorkspaceTypeActions.SeederInit()
			fireback.CommonInitSeeder(strings.TrimSpace(c.String("format")), seed)
			return nil
		},
	},
}
var WorkspaceTypeImportExportCommands = []cli.Command{
	{
		Name:    "validate",
		Aliases: []string{"v"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "file",
				Usage: "Validates an import file, such as yaml, json, csv, and gives some insights how the after import it would look like",
				Value: "workspace-type-seeder-workspace-type.yml",
				// Uncomment before publish, they need to specify
				// Required: true,
			},
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Reads a yaml file containing an array of workspace-types, you can run this to validate if your import file is correct, and how it would look like after import",
		Action: func(c *cli.Context) error {
			data := &[]WorkspaceTypeEntity{}
			fireback.ReadYamlFile(c.String("file"), data)
			fmt.Println(data)
			return nil
		},
	},
	cli.Command{
		Name:  "slist",
		Usage: "Prints the list of files attached to this module for syncing or bootstrapping project",
		Action: func(c *cli.Context) error {
			if entity, err := fireback.GetSeederFilenames(workspaceTypeSeedersFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "ssync",
		Usage: "Tries to sync the embedded content into the database, the list could be seen by 'slist' command",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportEmbedCmd(c,
				WorkspaceTypeActions.Create,
				reflect.ValueOf(&WorkspaceTypeEntity{}).Elem(),
				workspaceTypeSeedersFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:    "export",
		Aliases: []string{"e"},
		Flags: append(fireback.CommonQueryFlags,
			&cli.StringFlag{
				Name:     "file",
				Usage:    "The address of file you want the csv/yaml/json be exported to",
				Required: true,
			}),
		Usage: "Exports a query results into the csv/yaml/json format",
		Action: func(c *cli.Context) error {
			return fireback.CommonCliExportCmd2(c,
				WorkspaceTypeEntityStream,
				reflect.ValueOf(&WorkspaceTypeEntity{}).Elem(),
				c.String("file"),
				&metas.MetaFs,
				"WorkspaceTypeFieldMap.yml",
				WorkspaceTypePreloadRelations,
			)
		},
	},
	cli.Command{
		Name: "import",
		Flags: append(
			append(
				fireback.CommonQueryFlags,
				&cli.StringFlag{
					Name:     "file",
					Usage:    "The address of file you want the csv be imported from",
					Required: true,
				}),
			WorkspaceTypeCommonCliFlagsOptional...,
		),
		Usage: "imports csv/yaml/json file and place it and its children into database",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportCmdAuthorized(c,
				WorkspaceTypeActions.Create,
				reflect.ValueOf(&WorkspaceTypeEntity{}).Elem(),
				c.String("file"),
				&fireback.SecurityModel{
					ActionRequires: []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_TYPE_CREATE},
					AllowOnRoot:    true,
				},
				func() WorkspaceTypeEntity {
					v := CastWorkspaceTypeFromCli(c)
					return *v
				},
			)
			return nil
		},
	},
}
var WorkspaceTypeCliCommands []cli.Command = []cli.Command{
	WORKSPACE_TYPE_ACTION_QUERY.ToCli(),
	WORKSPACE_TYPE_ACTION_TABLE.ToCli(),
	WorkspaceTypeCreateCmd,
	WorkspaceTypeUpdateCmd,
	WorkspaceTypeAskCmd,
	WorkspaceTypeCreateInteractiveCmd,
	fireback.GetCommonRemoveQuery(
		reflect.ValueOf(&WorkspaceTypeEntity{}).Elem(),
		WorkspaceTypeActions.Remove,
	),
}

func WorkspaceTypeCliFn() cli.Command {
	commands := append(WorkspaceTypeImportExportCommands, WorkspaceTypeCliCommands...)
	if !fireback.GetConfig().Production {
		commands = append(commands, WorkspaceTypeDevCommands...)
	}
	return cli.Command{
		Name:        "type",
		Description: "WorkspaceTypes module actions",
		Usage:       `Defines a type for workspace, and the role which it can have as a whole. In systems with multiple types of services, e.g. student, teachers, schools this is useful to set those default types and limit the access of the users.`,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "language",
				Value: "en",
			},
		},
		Subcommands: commands,
	}
}

var WORKSPACE_TYPE_ACTION_TABLE = fireback.Module3Action{
	Name:          "table",
	ActionAliases: []string{"t"},
	Flags:         fireback.CommonQueryFlags,
	Description:   "Table formatted queries all of the entities in database based on the standard query format",
	Action:        WorkspaceTypeActions.Query,
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		fireback.CommonCliTableCmd2(c,
			WorkspaceTypeActions.Query,
			security,
			reflect.ValueOf(&WorkspaceTypeEntity{}).Elem(),
		)
		return nil
	},
}
var WORKSPACE_TYPE_ACTION_QUERY = fireback.Module3Action{
	Method: "GET",
	Url:    "/workspace-types",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_TYPE_QUERY},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			qs := &WorkspaceTypeEntityQs{}
			fireback.HttpQueryEntity(c, WorkspaceTypeActions.Query, qs)
		},
	},
	Format:         "QUERY",
	Action:         WorkspaceTypeActions.Query,
	ResponseEntity: &[]WorkspaceTypeEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "WorkspaceTypeEntity",
	},
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		qs := &WorkspaceTypeEntityQs{}
		fireback.CommonCliQueryCmd3(
			c,
			WorkspaceTypeActions.Query,
			security,
			qs,
		)
		return nil
	},
	CliName:       "query",
	Name:          "query",
	ActionAliases: []string{"q"},
	Flags:         append(fireback.CommonQueryFlags, WorkspaceTypeQsFlags...),
	Description:   "Queries all of the entities in database based on the standard query format (s+)",
}
var WORKSPACE_TYPE_ACTION_EXPORT = fireback.Module3Action{
	Method: "GET",
	Url:    "/workspace-types/export",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_TYPE_QUERY},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpStreamFileChannel(c, WorkspaceTypeActionExport)
		},
	},
	Format:         "QUERY",
	Action:         WorkspaceTypeActionExport,
	ResponseEntity: &[]WorkspaceTypeEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "WorkspaceTypeEntity",
	},
}
var WORKSPACE_TYPE_ACTION_GET_ONE = fireback.Module3Action{
	Method: "GET",
	Url:    "/workspace-type/:uniqueId",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_TYPE_QUERY},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpGetEntity(c, WorkspaceTypeActions.GetOne)
		},
	},
	Format:         "GET_ONE",
	Action:         WorkspaceTypeActions.GetOne,
	ResponseEntity: &WorkspaceTypeEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "WorkspaceTypeEntity",
	},
}
var WORKSPACE_TYPE_ACTION_POST_ONE = fireback.Module3Action{
	Name:          "create",
	ActionAliases: []string{"c"},
	Description:   "Create new workspaceType",
	Flags:         WorkspaceTypeCommonCliFlags,
	Method:        "POST",
	Url:           "/workspace-type",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_TYPE_CREATE},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpPostEntity(c, WorkspaceTypeActions.Create)
		},
	},
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		result, err := fireback.CliPostEntity(c, WorkspaceTypeActions.Create, security)
		fireback.HandleActionInCli(c, result, err, map[string]map[string]string{})
		return err
	},
	Action:         WorkspaceTypeActions.Create,
	Format:         "POST_ONE",
	RequestEntity:  &WorkspaceTypeEntity{},
	ResponseEntity: &WorkspaceTypeEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "WorkspaceTypeEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "WorkspaceTypeEntity",
	},
}
var WORKSPACE_TYPE_ACTION_PATCH = fireback.Module3Action{
	Name:          "update",
	ActionAliases: []string{"u"},
	Flags:         WorkspaceTypeCommonCliFlagsOptional,
	Method:        "PATCH",
	Url:           "/workspace-type",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_TYPE_UPDATE},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntity(c, WorkspaceTypeActions.Update)
		},
	},
	Action:         WorkspaceTypeActions.Update,
	RequestEntity:  &WorkspaceTypeEntity{},
	ResponseEntity: &WorkspaceTypeEntity{},
	Format:         "PATCH_ONE",
	Out: &fireback.Module3ActionBody{
		Entity: "WorkspaceTypeEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "WorkspaceTypeEntity",
	},
}
var WORKSPACE_TYPE_ACTION_PATCH_BULK = fireback.Module3Action{
	Method: "PATCH",
	Url:    "/workspace-types",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_TYPE_UPDATE},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntities(c, WorkspaceTypeActionBulkUpdate)
		},
	},
	Action:         WorkspaceTypeActionBulkUpdate,
	Format:         "PATCH_BULK",
	RequestEntity:  &fireback.BulkRecordRequest[WorkspaceTypeEntity]{},
	ResponseEntity: &fireback.BulkRecordRequest[WorkspaceTypeEntity]{},
	Out: &fireback.Module3ActionBody{
		Entity: "WorkspaceTypeEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "WorkspaceTypeEntity",
	},
}
var WORKSPACE_TYPE_ACTION_DELETE = fireback.Module3Action{
	Method: "DELETE",
	Url:    "/workspace-type",
	Format: "DELETE_DSL",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_TYPE_DELETE},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpRemoveEntity(c, WorkspaceTypeActions.Remove)
		},
	},
	Action:         WorkspaceTypeActions.Remove,
	RequestEntity:  &fireback.DeleteRequest{},
	ResponseEntity: &fireback.DeleteResponse{},
	TargetEntity:   &WorkspaceTypeEntity{},
}

/**
 *	Override this function on WorkspaceTypeEntityHttp.go,
 *	In order to add your own http
 **/
var AppendWorkspaceTypeRouter = func(r *[]fireback.Module3Action) {}

func GetWorkspaceTypeModule3Actions() []fireback.Module3Action {
	routes := []fireback.Module3Action{
		WORKSPACE_TYPE_ACTION_QUERY,
		WORKSPACE_TYPE_ACTION_EXPORT,
		WORKSPACE_TYPE_ACTION_GET_ONE,
		WORKSPACE_TYPE_ACTION_POST_ONE,
		WORKSPACE_TYPE_ACTION_PATCH,
		WORKSPACE_TYPE_ACTION_PATCH_BULK,
		WORKSPACE_TYPE_ACTION_DELETE,
	}
	// Append user defined functions
	AppendWorkspaceTypeRouter(&routes)
	return routes
}

var PERM_ROOT_WORKSPACE_TYPE = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.workspace-type.*",
	Name:        "Entire workspace type actions (*)",
	Description: "",
}
var PERM_ROOT_WORKSPACE_TYPE_DELETE = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.workspace-type.delete",
	Name:        "Delete workspace type",
	Description: "",
}
var PERM_ROOT_WORKSPACE_TYPE_CREATE = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.workspace-type.create",
	Name:        "Create workspace type",
	Description: "",
}
var PERM_ROOT_WORKSPACE_TYPE_UPDATE = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.workspace-type.update",
	Name:        "Update workspace type",
	Description: "",
}
var PERM_ROOT_WORKSPACE_TYPE_QUERY = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.workspace-type.query",
	Name:        "Query workspace type",
	Description: "",
}
var ALL_WORKSPACE_TYPE_PERMISSIONS = []fireback.PermissionInfo{
	PERM_ROOT_WORKSPACE_TYPE_DELETE,
	PERM_ROOT_WORKSPACE_TYPE_CREATE,
	PERM_ROOT_WORKSPACE_TYPE_UPDATE,
	PERM_ROOT_WORKSPACE_TYPE_QUERY,
	PERM_ROOT_WORKSPACE_TYPE,
}

type workspaceTypeCode string

const (
	CannotCreateWorkspaceType   workspaceTypeCode = "CannotCreateWorkspaceType"
	CannotModifyWorkspaceType   workspaceTypeCode = "CannotModifyWorkspaceType"
	OnlyRootRoleIsAccepted      workspaceTypeCode = "OnlyRootRoleIsAccepted"
	RoleIsNecessary             workspaceTypeCode = "RoleIsNecessary"
	RoleIsNotAccessible         workspaceTypeCode = "RoleIsNotAccessible"
	RoleNeedsToHaveCapabilities workspaceTypeCode = "RoleNeedsToHaveCapabilities"
)

var WorkspaceTypeMessages = newWorkspaceTypeMessageCode()

func newWorkspaceTypeMessageCode() *workspaceTypeMsgs {
	return &workspaceTypeMsgs{
		CannotCreateWorkspaceType: fireback.ErrorItem{
			"$":  "CannotCreateWorkspaceType",
			"en": "You cannot create workspace type due to some validation errors.",
		},
		CannotModifyWorkspaceType: fireback.ErrorItem{
			"$":  "CannotModifyWorkspaceType",
			"en": "You cannot modify workspace type due to some validation errors.",
		},
		OnlyRootRoleIsAccepted: fireback.ErrorItem{
			"$":  "OnlyRootRoleIsAccepted",
			"en": "You can only select a role which is created or belong to 'root' workspace.",
		},
		RoleIsNecessary: fireback.ErrorItem{
			"$":  "RoleIsNecessary",
			"en": "Role needs to be defined and exist.",
		},
		RoleIsNotAccessible: fireback.ErrorItem{
			"$":  "RoleIsNotAccessible",
			"en": "Role is not accessible unfortunately. Make sure you the role chose exists.",
		},
		RoleNeedsToHaveCapabilities: fireback.ErrorItem{
			"$":  "RoleNeedsToHaveCapabilities",
			"en": "Role needs to have at least one capability before could be assigned.",
		},
	}
}

type workspaceTypeMsgs struct {
	CannotCreateWorkspaceType   fireback.ErrorItem
	CannotModifyWorkspaceType   fireback.ErrorItem
	OnlyRootRoleIsAccepted      fireback.ErrorItem
	RoleIsNecessary             fireback.ErrorItem
	RoleIsNotAccessible         fireback.ErrorItem
	RoleNeedsToHaveCapabilities fireback.ErrorItem
}

func NewWorkspaceTypeCreatedEvent(
	payload *WorkspaceTypeEntity,
	query *fireback.QueryDSL,
) (*fireback.Event, error) {
	event := &fireback.Event{
		Name:    "WorkspaceTypeCreated",
		Payload: payload,
		Security: &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{
				PERM_ROOT_WORKSPACE_TYPE_QUERY,
			},
			AllowOnRoot: true,
		},
		CacheKey: "*abac.WorkspaceTypeEntity",
	}
	// Apply the source of the event based on querydsl
	fireback.ApplyQueryDslContextToEvent(event, *query)
	return event, nil
}
func NewWorkspaceTypeUpdatedEvent(
	payload *WorkspaceTypeEntity,
	query *fireback.QueryDSL,
) (*fireback.Event, error) {
	event := &fireback.Event{
		Name:    "WorkspaceTypeUpdated",
		Payload: payload,
		Security: &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{
				PERM_ROOT_WORKSPACE_TYPE_QUERY,
			},
			AllowOnRoot: true,
		},
		CacheKey: "*abac.WorkspaceTypeEntity",
	}
	// Apply the source of the event based on querydsl
	fireback.ApplyQueryDslContextToEvent(event, *query)
	return event, nil
}

var WorkspaceTypeEntityBundle = fireback.EntityBundle{
	Permissions: ALL_WORKSPACE_TYPE_PERMISSIONS,
	// Cli command has been exluded, since we use module to wrap all the entities
	// to be more easier to wrap up.
	// Create your own bundle if you need with Cli
	//CliCommands: []cli.Command{
	//	WorkspaceTypeCliFn(),
	//},
	Actions:      GetWorkspaceTypeModule3Actions(),
	MockProvider: WorkspaceTypeImportMocks,
	AutoMigrationEntities: []interface{}{
		&WorkspaceTypeEntity{},
		&WorkspaceTypeEntityPolyglot{},
	},
	MigrationScripts: []fireback.MigrationScript{},
}
