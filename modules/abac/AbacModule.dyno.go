package abac

/*
*	Generated by fireback 1.2.2
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import "github.com/torabian/fireback/modules/workspaces"
import queries "github.com/torabian/fireback/modules/abac/queries"
import "encoding/json"
import "github.com/urfave/cli"
import "gopkg.in/yaml.v2"
import "fmt"
import (
	"reflect"
)

func AbacJson() string {
	e := cli.BoolFlag{}
	_ = e
	fmt.Println("Module test config")
	str2, _ := yaml.Marshal("")
	_ = str2
	str, _ := json.MarshalIndent("dont remove me", "", "  ")
	return (string(str))
}

// Module dynamic things comes here. Don't touch it :D
var PERM_ROOT_ABAC_EVERYTHING = workspaces.PermissionInfo{
	CompleteKey: "root.modules.abac.*",
}
var ALL_PERM_ABAC_MODULE = []workspaces.PermissionInfo{
	PERM_ROOT_ABAC_EVERYTHING,
}

type abacCode string

const (
	ActionOnlyInRoot                          abacCode = "ActionOnlyInRoot"
	AlreadyConfirmed                          abacCode = "AlreadyConfirmed"
	BodyIsMissing                             abacCode = "BodyIsMissing"
	DataTypeDoesNotExistsInFireback           abacCode = "DataTypeDoesNotExistsInFireback"
	EmailConfigurationIsNotAvailable          abacCode = "EmailConfigurationIsNotAvailable"
	EmailConfigurationMissing                 abacCode = "EmailConfigurationMissing"
	EmailIsNotConfigured                      abacCode = "EmailIsNotConfigured"
	EmailIsNotValid                           abacCode = "EmailIsNotValid"
	EmailNotFound                             abacCode = "EmailNotFound"
	FailedToDecodeGoogle                      abacCode = "FailedToDecodeGoogle"
	FieldInvalidEmail                         abacCode = "FieldInvalidEmail"
	FieldOneOf                                abacCode = "FieldOneOf"
	FieldRequired                             abacCode = "FieldRequired"
	FileNotFound                              abacCode = "FileNotFound"
	GsmConfigurationIsNotAvailable            abacCode = "GsmConfigurationIsNotAvailable"
	InvalidContent                            abacCode = "InvalidContent"
	InvalidExchangeKey                        abacCode = "InvalidExchangeKey"
	InvalidToken                              abacCode = "InvalidToken"
	InvitationExpired                         abacCode = "InvitationExpired"
	InvitationNotFound                        abacCode = "InvitationNotFound"
	InviteToWorkspaceMailSenderMissing        abacCode = "InviteToWorkspaceMailSenderMissing"
	InvokeUrlMissing                          abacCode = "InvokeUrlMissing"
	NotEnoughPermission                       abacCode = "NotEnoughPermission"
	OtaRequestBlockedUntil                    abacCode = "OtaRequestBlockedUntil"
	OtpCodeInvalid                            abacCode = "OtpCodeInvalid"
	OtpFailed                                 abacCode = "OtpFailed"
	OtpNotAvailableForThisType                abacCode = "OtpNotAvailableForThisType"
	PassportNotAvailable                      abacCode = "PassportNotAvailable"
	PassportNotFound                          abacCode = "PassportNotFound"
	PassportTotpNotConfirmed                  abacCode = "PassportTotpNotConfirmed"
	PassportUserNotAvailable                  abacCode = "PassportUserNotAvailable"
	PasswordDidNotUpdated                     abacCode = "PasswordDidNotUpdated"
	PasswordDoesNotMeetTheSecurityRequirement abacCode = "PasswordDoesNotMeetTheSecurityRequirement"
	PasswordRequired                          abacCode = "PasswordRequired"
	PhoneNumberIsNotValid                     abacCode = "PhoneNumberIsNotValid"
	ProvideTokenInAuthorization               abacCode = "ProvideTokenInAuthorization"
	Recaptcha2Error                           abacCode = "Recaptcha2Error"
	Recaptcha2Needed                          abacCode = "Recaptcha2Needed"
	ResetNotFound                             abacCode = "ResetNotFound"
	SelectWorkspaceId                         abacCode = "SelectWorkspaceId"
	SessionSecretIsNeeded                     abacCode = "SessionSecretIsNeeded"
	SessionSecretIsNotAvailable               abacCode = "SessionSecretIsNotAvailable"
	SmsNotSent                                abacCode = "SmsNotSent"
	TotpCodeIsNotValid                        abacCode = "TotpCodeIsNotValid"
	TotpIsNotAvailableForThisPassport         abacCode = "TotpIsNotAvailableForThisPassport"
	UnsupportedOAuth                          abacCode = "UnsupportedOAuth"
	UserDoesNotExist                          abacCode = "UserDoesNotExist"
	UserNotFoundOrDeleted                     abacCode = "UserNotFoundOrDeleted"
	UserWhichHasThisTokenDoesNotExist         abacCode = "UserWhichHasThisTokenDoesNotExist"
	ValidationFailedOnSomeFields              abacCode = "ValidationFailedOnSomeFields"
)

var AbacMessages = newAbacMessageCode()

func newAbacMessageCode() *abacMsgs {
	return &abacMsgs{
		ActionOnlyInRoot: workspaces.ErrorItem{
			"$":  "ActionOnlyInRoot",
			"en": "This action is only allowed when user belongs to root workspace, and root is selected",
		},
		AlreadyConfirmed: workspaces.ErrorItem{
			"$":  "AlreadyConfirmed",
			"en": "Already confirmed",
		},
		BodyIsMissing: workspaces.ErrorItem{
			"$":  "BodyIsMissing",
			"en": "Body content is not correct. You need a valid json.",
		},
		DataTypeDoesNotExistsInFireback: workspaces.ErrorItem{
			"$":  "DataTypeDoesNotExistsInFireback",
			"en": "This data type does not exist in fireback. %name %location",
		},
		EmailConfigurationIsNotAvailable: workspaces.ErrorItem{
			"$":  "EmailConfigurationIsNotAvailable",
			"en": "Email configuration is not available",
		},
		EmailConfigurationMissing: workspaces.ErrorItem{
			"$":  "EmailConfigurationMissing",
			"en": "Email configuration is not available",
		},
		EmailIsNotConfigured: workspaces.ErrorItem{
			"$":  "EmailIsNotConfigured",
			"en": "Email server is not configured",
		},
		EmailIsNotValid: workspaces.ErrorItem{
			"$":  "EmailIsNotValid",
			"en": "The email address is not valid.",
		},
		EmailNotFound: workspaces.ErrorItem{
			"$":  "EmailNotFound",
			"en": "Email is not found",
		},
		FailedToDecodeGoogle: workspaces.ErrorItem{
			"$":  "FailedToDecodeGoogle",
			"en": "Failed to decode the google token, it's not available at this moment.",
		},
		FieldInvalidEmail: workspaces.ErrorItem{
			"$":  "FieldInvalidEmail",
			"en": "Invalid email address",
		},
		FieldOneOf: workspaces.ErrorItem{
			"$":  "FieldOneOf",
			"en": "The value you have provided needs to be one of these values: %s",
		},
		FieldRequired: workspaces.ErrorItem{
			"$":  "FieldRequired",
			"en": "This field is required",
		},
		FileNotFound: workspaces.ErrorItem{
			"$":  "FileNotFound",
			"en": "File not found",
		},
		GsmConfigurationIsNotAvailable: workspaces.ErrorItem{
			"$":  "GsmConfigurationIsNotAvailable",
			"en": "GSM Services configuration is not available",
		},
		InvalidContent: workspaces.ErrorItem{
			"$":  "InvalidContent",
			"en": "Body content is not correct. You need a valid json.",
		},
		InvalidExchangeKey: workspaces.ErrorItem{
			"$":  "InvalidExchangeKey",
			"en": "Invalid exchange key",
		},
		InvalidToken: workspaces.ErrorItem{
			"$":  "InvalidToken",
			"en": "Token provided is not valid.",
		},
		InvitationExpired: workspaces.ErrorItem{
			"$":  "InvitationExpired",
			"en": "Invitation has been expired.",
		},
		InvitationNotFound: workspaces.ErrorItem{
			"$":  "InvitationNotFound",
			"en": "Invitation not found or expired.",
		},
		InviteToWorkspaceMailSenderMissing: workspaces.ErrorItem{
			"$":  "InviteToWorkspaceMailSenderMissing",
			"en": "We cannot send the invitation via email address, because sender email is not available, or not configurated.",
			"fa": "امکان ارسال دعوت نامه از طریق ایمیل وجود ندارد، چون مدیریت تنظیمات لازم برای ایمیل را انجام نداده یا آن را برای شما محدود کرده است.",
		},
		InvokeUrlMissing: workspaces.ErrorItem{
			"$":  "InvokeUrlMissing",
			"en": "Invoking url is missing",
		},
		NotEnoughPermission: workspaces.ErrorItem{
			"$":  "NotEnoughPermission",
			"en": "You do not have enough permission for this section",
		},
		OtaRequestBlockedUntil: workspaces.ErrorItem{
			"$":  "OtaRequestBlockedUntil",
			"en": "Request is blocked until.",
		},
		OtpCodeInvalid: workspaces.ErrorItem{
			"$":  "OtpCodeInvalid",
			"en": "Otp code is invalid",
		},
		OtpFailed: workspaces.ErrorItem{
			"$":  "OtpFailed",
			"en": "At the moment we cannot send you one time password. Please contact the support.",
		},
		OtpNotAvailableForThisType: workspaces.ErrorItem{
			"$":  "OtpNotAvailableForThisType",
			"en": "This type of account does not have any otp method for authentication.",
		},
		PassportNotAvailable: workspaces.ErrorItem{
			"$":  "PassportNotAvailable",
			"en": "This passport is not available. Please check credentials and try again",
		},
		PassportNotFound: workspaces.ErrorItem{
			"$":  "PassportNotFound",
			"en": "This passport is not available. Please check credentials and try again",
		},
		PassportTotpNotConfirmed: workspaces.ErrorItem{
			"$":  "PassportTotpNotConfirmed",
			"en": "The totp code from app is correct, but we could not store it in your account. You might be asked to setup again later.",
		},
		PassportUserNotAvailable: workspaces.ErrorItem{
			"$":  "PassportUserNotAvailable",
			"en": "User with this passport is not available at this moment",
		},
		PasswordDidNotUpdated: workspaces.ErrorItem{
			"$":  "PasswordDidNotUpdated",
			"en": "Password did not get updated for some unknown reason.",
		},
		PasswordDoesNotMeetTheSecurityRequirement: workspaces.ErrorItem{
			"$":  "PasswordDoesNotMeetTheSecurityRequirement",
			"en": "Password choosen doesn't meet the security requirement.",
		},
		PasswordRequired: workspaces.ErrorItem{
			"$":  "PasswordRequired",
			"en": "Password is required",
		},
		PhoneNumberIsNotValid: workspaces.ErrorItem{
			"$":  "PhoneNumberIsNotValid",
			"en": "The phone number is not valid.",
		},
		ProvideTokenInAuthorization: workspaces.ErrorItem{
			"$":  "ProvideTokenInAuthorization",
			"en": "Request requires authroization, please make sure you are logged in, and have enough access level",
			"fa": "شما باید توکن دسترسی را در بخش هدر و قسمت authorization وارد کنید",
		},
		Recaptcha2Error: workspaces.ErrorItem{
			"$":  "Recaptcha2Error",
			"en": "Recaptcha is not correct. Try again to solve the recaptcha.",
		},
		Recaptcha2Needed: workspaces.ErrorItem{
			"$":  "Recaptcha2Needed",
			"en": "You need to provide recaptcha2 for this api.",
		},
		ResetNotFound: workspaces.ErrorItem{
			"$":  "ResetNotFound",
			"en": "Reset not found",
		},
		SelectWorkspaceId: workspaces.ErrorItem{
			"$":  "SelectWorkspaceId",
			"en": "You need to select a correct workspace-id in header section",
			"fa": "شما باید تیم یا ورک اسپیس را در بخش هدر با فیلد workspace-id تعیین کنید",
		},
		SessionSecretIsNeeded: workspaces.ErrorItem{
			"$":  "SessionSecretIsNeeded",
			"en": "Session secret is needed to continue creating a user. Use checkClassicPassport first with value, to get the required steps for account creation.",
		},
		SessionSecretIsNotAvailable: workspaces.ErrorItem{
			"$":  "SessionSecretIsNotAvailable",
			"en": "Session secret is not available or expired. Try to use the checkClassicPassport flow again.",
		},
		SmsNotSent: workspaces.ErrorItem{
			"$":  "SmsNotSent",
			"en": "Sending text message has failed.",
		},
		TotpCodeIsNotValid: workspaces.ErrorItem{
			"$":  "TotpCodeIsNotValid",
			"en": "The totp code from the app is incorrect. Double check and try again.",
		},
		TotpIsNotAvailableForThisPassport: workspaces.ErrorItem{
			"$":  "TotpIsNotAvailableForThisPassport",
			"en": "This passport doesn't have totp setup. Contact the administrator to set it up for you.",
		},
		UnsupportedOAuth: workspaces.ErrorItem{
			"$":  "UnsupportedOAuth",
			"en": "OAuth service is not available or not supported yet.",
		},
		UserDoesNotExist: workspaces.ErrorItem{
			"$":  "UserDoesNotExist",
			"en": "User is not available.",
		},
		UserNotFoundOrDeleted: workspaces.ErrorItem{
			"$":  "UserNotFoundOrDeleted",
			"en": "User not found, your account might be deleted, or access level has been reduced.",
			"fa": "کاربر پیدا نشد ممکن است اکانت حذف شده باشد یا سطح دسترسی آن کاهش پیدا کرده باشد",
		},
		UserWhichHasThisTokenDoesNotExist: workspaces.ErrorItem{
			"$":  "UserWhichHasThisTokenDoesNotExist",
			"en": "User which has this token does not exists",
			"fa": "کاربری که با این دسترسی وارد شده بود وجود ندارد. لطفا دوباره به سیستم وارد شوید",
		},
		ValidationFailedOnSomeFields: workspaces.ErrorItem{
			"$":  "ValidationFailedOnSomeFields",
			"en": "Validation has failed on some fields",
		},
	}
}

type abacMsgs struct {
	ActionOnlyInRoot                          workspaces.ErrorItem
	AlreadyConfirmed                          workspaces.ErrorItem
	BodyIsMissing                             workspaces.ErrorItem
	DataTypeDoesNotExistsInFireback           workspaces.ErrorItem
	EmailConfigurationIsNotAvailable          workspaces.ErrorItem
	EmailConfigurationMissing                 workspaces.ErrorItem
	EmailIsNotConfigured                      workspaces.ErrorItem
	EmailIsNotValid                           workspaces.ErrorItem
	EmailNotFound                             workspaces.ErrorItem
	FailedToDecodeGoogle                      workspaces.ErrorItem
	FieldInvalidEmail                         workspaces.ErrorItem
	FieldOneOf                                workspaces.ErrorItem
	FieldRequired                             workspaces.ErrorItem
	FileNotFound                              workspaces.ErrorItem
	GsmConfigurationIsNotAvailable            workspaces.ErrorItem
	InvalidContent                            workspaces.ErrorItem
	InvalidExchangeKey                        workspaces.ErrorItem
	InvalidToken                              workspaces.ErrorItem
	InvitationExpired                         workspaces.ErrorItem
	InvitationNotFound                        workspaces.ErrorItem
	InviteToWorkspaceMailSenderMissing        workspaces.ErrorItem
	InvokeUrlMissing                          workspaces.ErrorItem
	NotEnoughPermission                       workspaces.ErrorItem
	OtaRequestBlockedUntil                    workspaces.ErrorItem
	OtpCodeInvalid                            workspaces.ErrorItem
	OtpFailed                                 workspaces.ErrorItem
	OtpNotAvailableForThisType                workspaces.ErrorItem
	PassportNotAvailable                      workspaces.ErrorItem
	PassportNotFound                          workspaces.ErrorItem
	PassportTotpNotConfirmed                  workspaces.ErrorItem
	PassportUserNotAvailable                  workspaces.ErrorItem
	PasswordDidNotUpdated                     workspaces.ErrorItem
	PasswordDoesNotMeetTheSecurityRequirement workspaces.ErrorItem
	PasswordRequired                          workspaces.ErrorItem
	PhoneNumberIsNotValid                     workspaces.ErrorItem
	ProvideTokenInAuthorization               workspaces.ErrorItem
	Recaptcha2Error                           workspaces.ErrorItem
	Recaptcha2Needed                          workspaces.ErrorItem
	ResetNotFound                             workspaces.ErrorItem
	SelectWorkspaceId                         workspaces.ErrorItem
	SessionSecretIsNeeded                     workspaces.ErrorItem
	SessionSecretIsNotAvailable               workspaces.ErrorItem
	SmsNotSent                                workspaces.ErrorItem
	TotpCodeIsNotValid                        workspaces.ErrorItem
	TotpIsNotAvailableForThisPassport         workspaces.ErrorItem
	UnsupportedOAuth                          workspaces.ErrorItem
	UserDoesNotExist                          workspaces.ErrorItem
	UserNotFoundOrDeleted                     workspaces.ErrorItem
	UserWhichHasThisTokenDoesNotExist         workspaces.ErrorItem
	ValidationFailedOnSomeFields              workspaces.ErrorItem
}

// There are queries to be created
/*
  // userInvitations
*/
type UserInvitationsQueryColumns struct {
	// UserUniqueId
	UserId string `json:"userId" yaml:"userId"        `
	// Invitation unique id
	UniqueId string `json:"uniqueId" yaml:"uniqueId"        `
	// The value of the passport (email/phone)
	Value string `json:"value" yaml:"value"        `
	// Name of the role that user will get
	RoleName string `json:"roleName" yaml:"roleName"        `
	// Name of the workspace which user is invited to.
	WorkspaceName string `json:"workspaceName" yaml:"workspaceName"        `
	// The method of the invitation, such as email.
	Type string `json:"type" yaml:"type"        `
	// The content that user will receive to understand the reason of the letter.
	CoverLetter string `json:"coverLetter" yaml:"coverLetter"        `
}

func (x *UserInvitationsQueryColumns) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func UserInvitationsQuery(query workspaces.QueryDSL) ([]*UserInvitationsQueryColumns, *workspaces.QueryResultMeta, error) {
	refl := reflect.ValueOf(&UserInvitationsQueryColumns{})
	items, meta, err := workspaces.ContextAwareVSqlOperation[UserInvitationsQueryColumns](
		refl, &queries.QueriesFs, "UserInvitations.vsql", query,
	)
	return items, meta, err
}
