package abac

/*
*	Generated by fireback 1.2.2
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"embed"
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	jsoniter "github.com/json-iterator/go"
	"github.com/schollz/progressbar/v3"
	metas "github.com/torabian/fireback/modules/abac/metas"
	mocks "github.com/torabian/fireback/modules/abac/mocks/WorkspaceConfig"
	seeders "github.com/torabian/fireback/modules/abac/seeders/WorkspaceConfig"
	"github.com/torabian/fireback/modules/fireback"
	"github.com/urfave/cli"
	"gopkg.in/yaml.v2"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"log"
	reflect "reflect"
	"strings"
	"time"
)

var workspaceConfigSeedersFs = &seeders.ViewsFs

func ResetWorkspaceConfigSeeders(fs *embed.FS) {
	workspaceConfigSeedersFs = fs
}

type WorkspaceConfigEntityQs struct {
	EnableRecaptcha2       fireback.QueriableField `cli:"enable-recaptcha2" table:"workspace_config" column:"enable_recaptcha2" qs:"enableRecaptcha2"`
	EnableOtp              fireback.QueriableField `cli:"enable-otp" table:"workspace_config" column:"enable_otp" qs:"enableOtp"`
	RequireOtpOnSignup     fireback.QueriableField `cli:"require-otp-on-signup" table:"workspace_config" column:"require_otp_on_signup" qs:"requireOtpOnSignup"`
	RequireOtpOnSignin     fireback.QueriableField `cli:"require-otp-on-signin" table:"workspace_config" column:"require_otp_on_signin" qs:"requireOtpOnSignin"`
	Recaptcha2ServerKey    fireback.QueriableField `cli:"recaptcha2-server-key" table:"workspace_config" column:"recaptcha2_server_key" qs:"recaptcha2ServerKey"`
	Recaptcha2ClientKey    fireback.QueriableField `cli:"recaptcha2-client-key" table:"workspace_config" column:"recaptcha2_client_key" qs:"recaptcha2ClientKey"`
	EnableTotp             fireback.QueriableField `cli:"enable-totp" table:"workspace_config" column:"enable_totp" qs:"enableTotp"`
	ForceTotp              fireback.QueriableField `cli:"force-totp" table:"workspace_config" column:"force_totp" qs:"forceTotp"`
	ForcePasswordOnPhone   fireback.QueriableField `cli:"force-password-on-phone" table:"workspace_config" column:"force_password_on_phone" qs:"forcePasswordOnPhone"`
	ForcePersonNameOnPhone fireback.QueriableField `cli:"force-person-name-on-phone" table:"workspace_config" column:"force_person_name_on_phone" qs:"forcePersonNameOnPhone"`
}

func (x *WorkspaceConfigEntityQs) GetQuery() string {
	return fireback.GenerateQueryStringStyle(reflect.ValueOf(x), "")
}

var WorkspaceConfigQsFlags = []cli.Flag{
	&cli.StringFlag{
		Name:  "enable-recaptcha2",
		Usage: "Enables the recaptcha2 for authentication flow.",
	},
	&cli.StringFlag{
		Name:  "enable-otp",
		Usage: "Enables the otp option. It's not forcing it, so user can choose if they want otp or password.",
	},
	&cli.StringFlag{
		Name:  "require-otp-on-signup",
		Usage: "Forces the user to have otp verification before can create an account. They can define their password still.",
	},
	&cli.StringFlag{
		Name:  "require-otp-on-signin",
		Usage: "Forces the user to use otp when signing in. Even if they have password set, they won't use it and only will be able to signin using that otp.",
	},
	&cli.StringFlag{
		Name:  "recaptcha2-server-key",
		Usage: "Secret which would be used to decrypt if the recaptcha is correct. Should not be available publicly.",
	},
	&cli.StringFlag{
		Name:  "recaptcha2-client-key",
		Usage: "Secret which would be used for recaptcha2 on the client side. Can be publicly visible, and upon authenticating users it would be sent to front-end.",
	},
	&cli.StringFlag{
		Name:  "enable-totp",
		Usage: "Enables user to make 2FA using apps such as google authenticator or microsoft authenticator.",
	},
	&cli.StringFlag{
		Name:  "force-totp",
		Usage: "Forces the user to setup a 2FA in order to access their account. Users which did not setup this won't be affected.",
	},
	&cli.StringFlag{
		Name:  "force-password-on-phone",
		Usage: "Forces users who want to create account using phone number to also set a password on their account",
	},
	&cli.StringFlag{
		Name:  "force-person-name-on-phone",
		Usage: "Forces the creation of account using phone number to ask for user firstname and lastname",
	},
}

type WorkspaceConfigEntity struct {
	// Defines the visibility of the record in the table.
	// Visibility is a detailed topic, you can check all of the visibility values in fireback/visibility.go
	// by default, visibility of record are 0, means they are protected by the workspace
	// which are being created, and visible to every member of the workspace
	Visibility fireback.String `json:"visibility,omitempty" yaml:"visibility,omitempty" xml:"visibility,omitempty"`
	// The unique-id of the workspace which content belongs to. Upon creation this will be designated
	// to the selected workspace by user, if they have write access. You can change this value
	// or prevent changes to it manually (on root features for example modifying other workspace)
	WorkspaceId fireback.String `json:"workspaceId,omitempty" xml:"workspaceId,omitempty" yaml:"workspaceId,omitempty" gorm:"unique;not null;" `
	// The unique-id of the parent table, which this record is being linked to.
	// used internally for making relations in fireback, generally does not need manual changes
	// or modification by the developer or user. For example, if you have a object inside an object
	// the unique-id of the parent will be written in the child.
	LinkerId fireback.String `json:"linkerId,omitempty" xml:"linkerId,omitempty" yaml:"linkerId,omitempty"`
	// Used for recursive or parent-child operations. Some tables, are having nested relations,
	// and this field makes the table self refrenceing. ParentId needs to exist in the table before
	// creating of modifying a record.
	ParentId fireback.String `json:"parentId,omitempty" xml:"parentId,omitempty" yaml:"parentId,omitempty"`
	// Makes a field deletable. Some records should not be deletable at all.
	// default it's true.
	IsDeletable *bool `json:"isDeletable,omitempty" xml:"isDeletable,omitempty" yaml:"isDeletable,omitempty" gorm:"default:true"`
	// Makes a field updatable. Some records should not be updatable at all.
	// default it's true.
	IsUpdatable *bool `json:"isUpdatable,omitempty" xml:"isUpdatable,omitempty" yaml:"isUpdatable,omitempty" gorm:"default:true"`
	// The unique-id of the user which is creating the record, or the record belongs to.
	// Administration might want to change this to any user, by default Fireback fills
	// it to the current authenticated user.
	UserId fireback.String `json:"userId,omitempty" xml:"userId,omitempty" yaml:"userId,omitempty"`
	// General mechanism to rank the elements. From code perspective, it's just a number,
	// but you can sort it based on any logic for records to make a ranking, sorting.
	// they should not be unique across a table.
	Rank fireback.Int64 `json:"rank,omitempty" yaml:"rank,omitempty" xml:"rank,omitempty" gorm:"type:int;name:rank"`
	// Primary numeric key in the database. This value is not meant to be exported to public
	// or be used to access data at all. Rather a mechanism of indexing columns internally
	// or cursor pagination in future releases of fireback, or better search performance.
	ID uint `gorm:"primaryKey;autoIncrement" json:"-" yaml:"-" xml:"-"`
	// Unique id of the record across the table. This value will be accessed from public APIs,
	// and many other places intead of numeric ID property.
	// Upon generation, a UUID automatically is being assigned, and if user has specified the
	// Unique id in the post body, it will be used. This mechanism allows to manage unsaved
	// content on front-end much easier than requiring parent to exists first.
	UniqueId string `json:"uniqueId,omitempty" xml:"uniqueId,omitempty" gorm:"unique;not null;size:100;" yaml:"uniqueId,omitempty"`
	// The time that the record has been updated in datetime.
	// the field will be automatically populated by gorm orm.
	UpdatedAt *time.Time `json:"updatedAt,omitempty" xml:"updatedAt,omitempty" yaml:"updatedAt,omitempty"`
	// The time that the record has been created in datetime.
	// the field will be automatically populated by gorm orm.
	CreatedAt *time.Time `json:"createdAt,omitempty" xml:"createdAt,omitempty" yaml:"createdAt,omitempty"`
	// The time that the record has been deleted softly (means the data still exists in database, but no longer visible to any feature) in nano datatime
	// you need to make sure check this field if writing custom sql queries.
	// the field will be automatically populated by gorm orm.
	DeletedAt *time.Time `json:"deletedAt,omitempty" xml:"deletedAt,omitempty" yaml:"deletedAt,omitempty"`
	// Record creation date time formatting based on locale of the headers, or other
	// possible factors.
	CreatedFormatted string `json:"createdFormatted,omitempty" xml:"createdFormatted,omitempty" yaml:"createdFormatted,omitempty" sql:"-" gorm:"-"`
	// Record update date time formatting based on locale of the headers, or other
	// possible factors.
	UpdatedFormatted string `json:"updatedFormatted,omitempty" xml:"updatedFormatted,omitempty" yaml:"updatedFormatted,omitempty" sql:"-" gorm:"-"`
	// Enables the recaptcha2 for authentication flow.
	EnableRecaptcha2 fireback.Bool `json:"enableRecaptcha2" xml:"enableRecaptcha2" yaml:"enableRecaptcha2"        `
	// Enables the otp option. It's not forcing it, so user can choose if they want otp or password.
	EnableOtp fireback.Bool `json:"enableOtp" xml:"enableOtp" yaml:"enableOtp"        `
	// Forces the user to have otp verification before can create an account. They can define their password still.
	RequireOtpOnSignup fireback.Bool `json:"requireOtpOnSignup" xml:"requireOtpOnSignup" yaml:"requireOtpOnSignup"        `
	// Forces the user to use otp when signing in. Even if they have password set, they won't use it and only will be able to signin using that otp.
	RequireOtpOnSignin fireback.Bool `json:"requireOtpOnSignin" xml:"requireOtpOnSignin" yaml:"requireOtpOnSignin"        `
	// Secret which would be used to decrypt if the recaptcha is correct. Should not be available publicly.
	Recaptcha2ServerKey string `json:"recaptcha2ServerKey" xml:"recaptcha2ServerKey" yaml:"recaptcha2ServerKey"        `
	// Secret which would be used for recaptcha2 on the client side. Can be publicly visible, and upon authenticating users it would be sent to front-end.
	Recaptcha2ClientKey string `json:"recaptcha2ClientKey" xml:"recaptcha2ClientKey" yaml:"recaptcha2ClientKey"        `
	// Enables user to make 2FA using apps such as google authenticator or microsoft authenticator.
	EnableTotp fireback.Bool `json:"enableTotp" xml:"enableTotp" yaml:"enableTotp"        `
	// Forces the user to setup a 2FA in order to access their account. Users which did not setup this won't be affected.
	ForceTotp fireback.Bool `json:"forceTotp" xml:"forceTotp" yaml:"forceTotp"        `
	// Forces users who want to create account using phone number to also set a password on their account
	ForcePasswordOnPhone fireback.Bool `json:"forcePasswordOnPhone" xml:"forcePasswordOnPhone" yaml:"forcePasswordOnPhone"        `
	// Forces the creation of account using phone number to ask for user firstname and lastname
	ForcePersonNameOnPhone fireback.Bool            `json:"forcePersonNameOnPhone" xml:"forcePersonNameOnPhone" yaml:"forcePersonNameOnPhone"        `
	Children               []*WorkspaceConfigEntity `csv:"-" gorm:"-" sql:"-" json:"children,omitempty" xml:"children,omitempty"  yaml:"children,omitempty"`
	LinkedTo               *WorkspaceConfigEntity   `csv:"-" yaml:"-" gorm:"-" json:"-" sql:"-" xml:"-"`
}

func WorkspaceConfigEntityStream(q fireback.QueryDSL) (chan []*WorkspaceConfigEntity, *fireback.QueryResultMeta, error) {
	cn := make(chan []*WorkspaceConfigEntity)
	q.ItemsPerPage = 50
	q.StartIndex = 0
	_, qrm, err := WorkspaceConfigActions.Query(q)
	if err != nil {
		return nil, nil, err
	}
	go func() {
		defer close(cn)
		for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
			items, _, _ := WorkspaceConfigActions.Query(q)
			i += q.ItemsPerPage
			q.StartIndex = i
			cn <- items
		}
	}()
	return cn, qrm, nil
}

type WorkspaceConfigEntityList struct {
	Items []*WorkspaceConfigEntity
}

func NewWorkspaceConfigEntityList(items []*WorkspaceConfigEntity) *WorkspaceConfigEntityList {
	return &WorkspaceConfigEntityList{
		Items: items,
	}
}
func (x *WorkspaceConfigEntityList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *WorkspaceConfigEntityList) ToTree() *fireback.TreeOperation[WorkspaceConfigEntity] {
	return fireback.NewTreeOperation(
		x.Items,
		func(t *WorkspaceConfigEntity) string {
			if !t.ParentId.Valid {
				return ""
			}
			return t.ParentId.String
		},
		func(t *WorkspaceConfigEntity) string {
			return t.UniqueId
		},
	)
}

var WorkspaceConfigPreloadRelations []string = []string{}

type workspaceConfigActionsSig struct {
	Update         func(query fireback.QueryDSL, dto *WorkspaceConfigEntity) (*WorkspaceConfigEntity, *fireback.IError)
	Create         func(dto *WorkspaceConfigEntity, query fireback.QueryDSL) (*WorkspaceConfigEntity, *fireback.IError)
	Upsert         func(dto *WorkspaceConfigEntity, query fireback.QueryDSL) (*WorkspaceConfigEntity, *fireback.IError)
	SeederInit     func() *WorkspaceConfigEntity
	Remove         func(query fireback.QueryDSL) (int64, *fireback.IError)
	MultiInsert    func(dtos []*WorkspaceConfigEntity, query fireback.QueryDSL) ([]*WorkspaceConfigEntity, *fireback.IError)
	GetOne         func(query fireback.QueryDSL) (*WorkspaceConfigEntity, *fireback.IError)
	GetByWorkspace func(query fireback.QueryDSL) (*WorkspaceConfigEntity, *fireback.IError)
	Query          func(query fireback.QueryDSL) ([]*WorkspaceConfigEntity, *fireback.QueryResultMeta, error)
}

var WorkspaceConfigActions workspaceConfigActionsSig = workspaceConfigActionsSig{
	Update:         WorkspaceConfigActionUpdateFn,
	Create:         WorkspaceConfigActionCreateFn,
	Upsert:         WorkspaceConfigActionUpsertFn,
	Remove:         WorkspaceConfigActionRemoveFn,
	SeederInit:     WorkspaceConfigActionSeederInitFn,
	MultiInsert:    WorkspaceConfigMultiInsertFn,
	GetOne:         WorkspaceConfigActionGetOneFn,
	GetByWorkspace: WorkspaceConfigActionGetByWorkspaceFn,
	Query:          WorkspaceConfigActionQueryFn,
}

func WorkspaceConfigActionUpsertFn(dto *WorkspaceConfigEntity, query fireback.QueryDSL) (*WorkspaceConfigEntity, *fireback.IError) {
	return nil, nil
}

var WORKSPACE_CONFIG_EVENT_CREATED = "workspaceConfig.created"
var WORKSPACE_CONFIG_EVENT_UPDATED = "workspaceConfig.updated"
var WORKSPACE_CONFIG_EVENT_DELETED = "workspaceConfig.deleted"
var WORKSPACE_CONFIG_EVENTS = []string{
	WORKSPACE_CONFIG_EVENT_CREATED,
	WORKSPACE_CONFIG_EVENT_UPDATED,
	WORKSPACE_CONFIG_EVENT_DELETED,
}

type WorkspaceConfigFieldMap struct {
	EnableRecaptcha2       fireback.TranslatedString `yaml:"enableRecaptcha2"`
	EnableOtp              fireback.TranslatedString `yaml:"enableOtp"`
	RequireOtpOnSignup     fireback.TranslatedString `yaml:"requireOtpOnSignup"`
	RequireOtpOnSignin     fireback.TranslatedString `yaml:"requireOtpOnSignin"`
	Recaptcha2ServerKey    fireback.TranslatedString `yaml:"recaptcha2ServerKey"`
	Recaptcha2ClientKey    fireback.TranslatedString `yaml:"recaptcha2ClientKey"`
	EnableTotp             fireback.TranslatedString `yaml:"enableTotp"`
	ForceTotp              fireback.TranslatedString `yaml:"forceTotp"`
	ForcePasswordOnPhone   fireback.TranslatedString `yaml:"forcePasswordOnPhone"`
	ForcePersonNameOnPhone fireback.TranslatedString `yaml:"forcePersonNameOnPhone"`
}

var WorkspaceConfigEntityMetaConfig map[string]int64 = map[string]int64{}
var WorkspaceConfigEntityJsonSchema = fireback.ExtractEntityFields(reflect.ValueOf(&WorkspaceConfigEntity{}))

func entityWorkspaceConfigFormatter(dto *WorkspaceConfigEntity, query fireback.QueryDSL) {
	if dto == nil {
		return
	}
}
func WorkspaceConfigActionSeederMultiple(query fireback.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	batchSize := 100
	bar := progressbar.Default(int64(count))
	// Collect entities in batches
	var entitiesBatch []*WorkspaceConfigEntity
	for i := 1; i <= count; i++ {
		entity := WorkspaceConfigActions.SeederInit()
		entitiesBatch = append(entitiesBatch, entity)
		// When batch size is reached, perform the batch insert
		if len(entitiesBatch) == batchSize || i == count {
			// Insert batch
			_, err := WorkspaceConfigActions.MultiInsert(entitiesBatch, query)
			if err == nil {
				successInsert += len(entitiesBatch)
			} else {
				fmt.Println(err)
				failureInsert += len(entitiesBatch)
			}
			// Clear the batch after insert
			entitiesBatch = nil
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func WorkspaceConfigActionSeeder(query fireback.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	bar := progressbar.Default(int64(count))
	for i := 1; i <= count; i++ {
		entity := WorkspaceConfigActions.SeederInit()
		_, err := WorkspaceConfigActions.Create(entity, query)
		if err == nil {
			successInsert++
		} else {
			fmt.Println(err)
			failureInsert++
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func (x *WorkspaceConfigEntity) Seeder() string {
	obj := WorkspaceConfigActions.SeederInit()
	v, _ := json.MarshalIndent(obj, "", "  ")
	return string(v)
}
func WorkspaceConfigActionSeederInitFn() *WorkspaceConfigEntity {
	entity := &WorkspaceConfigEntity{}
	return entity
}
func WorkspaceConfigAssociationCreate(dto *WorkspaceConfigEntity, query fireback.QueryDSL) error {
	return nil
}

/**
* These kind of content are coming from another entity, which is indepndent module
* If we want to create them, we need to do it before. This is not association.
**/
func WorkspaceConfigRelationContentCreate(dto *WorkspaceConfigEntity, query fireback.QueryDSL) error {
	return nil
}
func WorkspaceConfigRelationContentUpdate(dto *WorkspaceConfigEntity, query fireback.QueryDSL) error {
	return nil
}
func WorkspaceConfigPolyglotUpdateHandler(dto *WorkspaceConfigEntity, query fireback.QueryDSL) {
	if dto == nil {
		return
	}
}

/**
 * This will be validating your entity fully. Important note is that, you add validate:* tag
 * in your entity, it will automatically work here. For slices inside entity, make sure you add
 * extra line of AppendSliceErrors, otherwise they won't be detected
 */
func WorkspaceConfigValidator(dto *WorkspaceConfigEntity, isPatch bool) *fireback.IError {
	err := fireback.CommonStructValidatorPointer(dto, isPatch)
	return err
}

// Creates a set of natural language queries, which can be used with
// AI tools to create content or help with some tasks
var WorkspaceConfigAskCmd cli.Command = cli.Command{
	Name:  "nlp",
	Usage: "Set of natural language queries which helps creating content or data",
	Subcommands: []cli.Command{
		{
			Name:  "sample",
			Usage: "Asks for generating sample by giving an example data",
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:  "format",
					Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
					Value: "yaml",
				},
				&cli.IntFlag{
					Name:  "count",
					Usage: "How many samples to ask",
					Value: 30,
				},
			},
			Action: func(c *cli.Context) error {
				v := &WorkspaceConfigEntity{}
				format := c.String("format")
				request := "\033[1m" + `
I need you to create me an array of exact signature as the example given below,
with at least ` + fmt.Sprint(c.String("count")) + ` items, mock the content with few words, and guess the possible values
based on the common sense. I need the output to be a valid ` + format + ` file.
Make sure you wrap the entire array in 'items' field. Also before that, I provide some explanation of each field:
EnableRecaptcha2: (type: bool?) Description: Enables the recaptcha2 for authentication flow.
EnableOtp: (type: bool?) Description: Enables the otp option. It's not forcing it, so user can choose if they want otp or password.
RequireOtpOnSignup: (type: bool?) Description: Forces the user to have otp verification before can create an account. They can define their password still.
RequireOtpOnSignin: (type: bool?) Description: Forces the user to use otp when signing in. Even if they have password set, they won't use it and only will be able to signin using that otp.
Recaptcha2ServerKey: (type: string) Description: Secret which would be used to decrypt if the recaptcha is correct. Should not be available publicly.
Recaptcha2ClientKey: (type: string) Description: Secret which would be used for recaptcha2 on the client side. Can be publicly visible, and upon authenticating users it would be sent to front-end.
EnableTotp: (type: bool?) Description: Enables user to make 2FA using apps such as google authenticator or microsoft authenticator.
ForceTotp: (type: bool?) Description: Forces the user to setup a 2FA in order to access their account. Users which did not setup this won't be affected.
ForcePasswordOnPhone: (type: bool?) Description: Forces users who want to create account using phone number to also set a password on their account
ForcePersonNameOnPhone: (type: bool?) Description: Forces the creation of account using phone number to ask for user firstname and lastname
And here is the actual object signature:
` + v.Seeder() + `
`
				fmt.Println(request)
				return nil
			},
		},
	},
}

func WorkspaceConfigEntityPreSanitize(dto *WorkspaceConfigEntity, query fireback.QueryDSL) {
}
func WorkspaceConfigEntityBeforeCreateAppend(dto *WorkspaceConfigEntity, query fireback.QueryDSL) {
	if dto.UniqueId == "" {
		dto.UniqueId = fireback.UUID()
	}
	dto.WorkspaceId = fireback.NewString(query.WorkspaceId)
	dto.UserId = fireback.NewString(query.UserId)
	WorkspaceConfigRecursiveAddUniqueId(dto, query)
}
func WorkspaceConfigRecursiveAddUniqueId(dto *WorkspaceConfigEntity, query fireback.QueryDSL) {
}

/*
*
	Batch inserts, do not have all features that create
	operation does. Use it with unnormalized content,
	or read the source code carefully.
  This is not marked as an action, because it should not be available publicly
  at this moment.
*
*/
func WorkspaceConfigMultiInsertFn(dtos []*WorkspaceConfigEntity, query fireback.QueryDSL) ([]*WorkspaceConfigEntity, *fireback.IError) {
	if len(dtos) > 0 {
		for index := range dtos {
			WorkspaceConfigEntityPreSanitize(dtos[index], query)
			WorkspaceConfigEntityBeforeCreateAppend(dtos[index], query)
		}
		var dbref *gorm.DB = nil
		if query.Tx == nil {
			dbref = fireback.GetDbRef()
		} else {
			dbref = query.Tx
		}
		query.Tx = dbref
		err := dbref.Create(&dtos).Error
		if err != nil {
			return nil, fireback.GormErrorToIError(err)
		}
	}
	return dtos, nil
}
func WorkspaceConfigActionBatchCreateFn(dtos []*WorkspaceConfigEntity, query fireback.QueryDSL) ([]*WorkspaceConfigEntity, *fireback.IError) {
	if dtos != nil && len(dtos) > 0 {
		items := []*WorkspaceConfigEntity{}
		for _, item := range dtos {
			s, err := WorkspaceConfigActions.Create(item, query)
			if err != nil {
				return nil, err
			}
			items = append(items, s)
		}
		return items, nil
	}
	return dtos, nil
}
func WorkspaceConfigDeleteEntireChildren(query fireback.QueryDSL, dto *WorkspaceConfigEntity) *fireback.IError {
	// intentionally removed this. It's hard to implement it, and probably wrong without
	// proper on delete cascade
	return nil
}
func WorkspaceConfigActionCreateFn(dto *WorkspaceConfigEntity, query fireback.QueryDSL) (*WorkspaceConfigEntity, *fireback.IError) {
	// 1. Validate always
	if iError := WorkspaceConfigValidator(dto, false); iError != nil {
		return nil, iError
	}
	// 1.5 Sanitize the content coming of the front-end
	WorkspaceConfigEntityPreSanitize(dto, query)
	// 2. Append the necessary information about user, workspace
	WorkspaceConfigEntityBeforeCreateAppend(dto, query)
	// 3. Create other entities if we want select from them
	WorkspaceConfigRelationContentCreate(dto, query)
	// 4. Create the entity
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = fireback.GetDbRef()
	} else {
		dbref = query.Tx
	}
	query.Tx = dbref
	err := dbref.Create(&dto).Error
	if err != nil {
		err := fireback.GormErrorToIError(err)
		return nil, err
	}
	// 5. Create sub entities, objects or arrays, association to other entities
	WorkspaceConfigAssociationCreate(dto, query)
	// 6. Fire the event into system
	actionEvent, eventErr := NewWorkspaceConfigCreatedEvent(dto, &query)
	if actionEvent != nil && eventErr == nil {
		fireback.GetEventBusInstance().FireEvent(query, *actionEvent)
	} else {
		log.Default().Panicln("Creating event has failed for %v", dto)
	}
	/*
		event.MustFire(WORKSPACE_CONFIG_EVENT_CREATED, event.M{
			"entity":   dto,
			"entityKey": fireback.GetTypeString(&WorkspaceConfigEntity{}),
			"target":   "workspace",
			"unqiueId": query.WorkspaceId,
		})
	*/
	return dto, nil
}
func WorkspaceConfigActionGetOneFn(query fireback.QueryDSL) (*WorkspaceConfigEntity, *fireback.IError) {
	refl := reflect.ValueOf(&WorkspaceConfigEntity{})
	item, err := fireback.GetOneEntity[WorkspaceConfigEntity](query, refl)
	entityWorkspaceConfigFormatter(item, query)
	return item, err
}
func WorkspaceConfigActionGetByWorkspaceFn(query fireback.QueryDSL) (*WorkspaceConfigEntity, *fireback.IError) {
	refl := reflect.ValueOf(&WorkspaceConfigEntity{})
	item, err := fireback.GetOneByWorkspaceEntity[WorkspaceConfigEntity](query, refl)
	entityWorkspaceConfigFormatter(item, query)
	return item, err
}
func WorkspaceConfigActionQueryFn(query fireback.QueryDSL) ([]*WorkspaceConfigEntity, *fireback.QueryResultMeta, error) {
	refl := reflect.ValueOf(&WorkspaceConfigEntity{})
	items, meta, err := fireback.QueryEntitiesPointer[WorkspaceConfigEntity](query, refl)
	for _, item := range items {
		entityWorkspaceConfigFormatter(item, query)
	}
	return items, meta, err
}

var workspaceConfigMemoryItems []*WorkspaceConfigEntity = []*WorkspaceConfigEntity{}

func WorkspaceConfigEntityIntoMemory() {
	q := fireback.QueryDSL{
		ItemsPerPage: 500,
		StartIndex:   0,
	}
	_, qrm, _ := WorkspaceConfigActions.Query(q)
	for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
		items, _, _ := WorkspaceConfigActions.Query(q)
		workspaceConfigMemoryItems = append(workspaceConfigMemoryItems, items...)
		i += q.ItemsPerPage
		q.StartIndex = i
	}
}
func WorkspaceConfigMemGet(id uint) *WorkspaceConfigEntity {
	for _, item := range workspaceConfigMemoryItems {
		if item.ID == id {
			return item
		}
	}
	return nil
}
func WorkspaceConfigMemJoin(items []uint) []*WorkspaceConfigEntity {
	res := []*WorkspaceConfigEntity{}
	for _, item := range items {
		v := WorkspaceConfigMemGet(item)
		if v != nil {
			res = append(res, v)
		}
	}
	return res
}
func WorkspaceConfigUpdateExec(dbref *gorm.DB, query fireback.QueryDSL, fields *WorkspaceConfigEntity) (*WorkspaceConfigEntity, *fireback.IError) {
	uniqueId := fields.UniqueId
	query.TriggerEventName = WORKSPACE_CONFIG_EVENT_UPDATED
	WorkspaceConfigEntityPreSanitize(fields, query)
	var item WorkspaceConfigEntity
	var itemRefetched WorkspaceConfigEntity
	// If the entity is distinct by workspace, then the Query.WorkspaceId
	// which is selected is being used as the condition for create or update
	// if not, the unique Id is being used
	cond2 := &WorkspaceConfigEntity{WorkspaceId: fireback.NewString(query.WorkspaceId)}
	q := dbref.
		Where(cond2).
		FirstOrCreate(&item)
	err := q.UpdateColumns(fields).Error
	if err != nil {
		return nil, fireback.GormErrorToIError(err)
	}
	query.Tx = dbref
	WorkspaceConfigRelationContentUpdate(fields, query)
	WorkspaceConfigPolyglotUpdateHandler(fields, query)
	if ero := WorkspaceConfigDeleteEntireChildren(query, fields); ero != nil {
		return nil, ero
	}
	// @meta(update has many)
	err = dbref.
		Preload(clause.Associations).
		Where(&WorkspaceConfigEntity{UniqueId: uniqueId}).
		First(&itemRefetched).Error
	if err != nil {
		return nil, fireback.GormErrorToIError(err)
	}
	actionEvent, eventErr := NewWorkspaceConfigUpdatedEvent(fields, &query)
	if actionEvent != nil && eventErr == nil {
		fireback.GetEventBusInstance().FireEvent(query, *actionEvent)
	} else {
		log.Default().Panicln("Updating event has failed for %v", fields)
	}
	/*
	   event.MustFire(query.TriggerEventName, event.M{
	     "entity":   &item,
	     "target":   "workspace",
	     "unqiueId": query.WorkspaceId,
	   })*/
	return &itemRefetched, nil
}
func WorkspaceConfigActionUpdateFn(query fireback.QueryDSL, fields *WorkspaceConfigEntity) (*WorkspaceConfigEntity, *fireback.IError) {
	if fields == nil {
		return nil, fireback.Create401Error(&fireback.FirebackMessages.BodyIsMissing, []string{})
	}
	// 1. Validate always
	if iError := WorkspaceConfigValidator(fields, true); iError != nil {
		return nil, iError
	}
	// Let's not add this. I am not sure of the consequences
	// WorkspaceConfigRecursiveAddUniqueId(fields, query)
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = fireback.GetDbRef()
		var item *WorkspaceConfigEntity
		vf := dbref.Transaction(func(tx *gorm.DB) error {
			dbref = tx
			var err *fireback.IError
			item, err = WorkspaceConfigUpdateExec(dbref, query, fields)
			if err == nil {
				return nil
			} else {
				return err
			}
		})
		return item, fireback.CastToIError(vf)
	} else {
		dbref = query.Tx
		return WorkspaceConfigUpdateExec(dbref, query, fields)
	}
}

var WorkspaceConfigWipeCmd cli.Command = cli.Command{
	Name:  "wipe",
	Usage: "Wipes entire workspaceconfigs ",
	Action: func(c *cli.Context) error {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_CONFIG_DELETE},
			ResolveStrategy: "workspace",
			AllowOnRoot:     true,
		})
		count, _ := WorkspaceConfigActionWipeClean(query)
		fmt.Println("Removed", count, "of entities")
		return nil
	},
}

func WorkspaceConfigActionRemoveFn(query fireback.QueryDSL) (int64, *fireback.IError) {
	refl := reflect.ValueOf(&WorkspaceConfigEntity{})
	query.ActionRequires = []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_CONFIG_DELETE}
	return fireback.RemoveEntity[WorkspaceConfigEntity](query, refl)
}
func WorkspaceConfigActionWipeClean(query fireback.QueryDSL) (int64, error) {
	var err error
	var count int64 = 0
	{
		subCount, subErr := fireback.WipeCleanEntity[WorkspaceConfigEntity]()
		if subErr != nil {
			fmt.Println("Error while wiping 'WorkspaceConfigEntity'", subErr)
			return count, subErr
		} else {
			count += subCount
		}
	}
	return count, err
}
func WorkspaceConfigActionBulkUpdate(
	query fireback.QueryDSL, dto *fireback.BulkRecordRequest[WorkspaceConfigEntity]) (
	*fireback.BulkRecordRequest[WorkspaceConfigEntity], *fireback.IError,
) {
	result := []*WorkspaceConfigEntity{}
	err := fireback.GetDbRef().Transaction(func(tx *gorm.DB) error {
		query.Tx = tx
		for _, record := range dto.Records {
			item, err := WorkspaceConfigActions.Update(query, record)
			if err != nil {
				return err
			} else {
				result = append(result, item)
			}
		}
		return nil
	})
	if err == nil {
		return dto, nil
	}
	return nil, err.(*fireback.IError)
}
func (x *WorkspaceConfigEntity) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}

var WorkspaceConfigEntityMeta = fireback.TableMetaData{
	EntityName:    "WorkspaceConfig",
	ExportKey:     "workspace-configs",
	TableNameInDb: "workspace-config_entities",
	EntityObject:  &WorkspaceConfigEntity{},
	ExportStream:  WorkspaceConfigActionExportT,
	ImportQuery:   WorkspaceConfigActionImport,
}

func WorkspaceConfigActionExport(
	query fireback.QueryDSL,
) (chan []byte, *fireback.IError) {
	return fireback.YamlExporterChannel[WorkspaceConfigEntity](query, WorkspaceConfigActions.Query, WorkspaceConfigPreloadRelations)
}
func WorkspaceConfigActionExportT(
	query fireback.QueryDSL,
) (chan []interface{}, *fireback.IError) {
	return fireback.YamlExporterChannelT[WorkspaceConfigEntity](query, WorkspaceConfigActions.Query, WorkspaceConfigPreloadRelations)
}
func WorkspaceConfigActionImport(
	dto interface{}, query fireback.QueryDSL,
) *fireback.IError {
	var json = jsoniter.ConfigCompatibleWithStandardLibrary
	var content WorkspaceConfigEntity
	cx, err2 := json.Marshal(dto)
	if err2 != nil {
		return fireback.Create401Error(&fireback.FirebackMessages.InvalidContent, []string{})
	}
	json.Unmarshal(cx, &content)
	_, err := WorkspaceConfigActions.Create(&content, query)
	return err
}

var WorkspaceConfigCommonCliFlags = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "enable-recaptcha2",
		Required: false,
		Usage:    `Enables the recaptcha2 for authentication flow. (bool?)`,
	},
	&cli.StringFlag{
		Name:     "enable-otp",
		Required: false,
		Usage:    `Enables the otp option. It's not forcing it, so user can choose if they want otp or password. (bool?)`,
	},
	&cli.StringFlag{
		Name:     "require-otp-on-signup",
		Required: false,
		Usage:    `Forces the user to have otp verification before can create an account. They can define their password still. (bool?)`,
	},
	&cli.StringFlag{
		Name:     "require-otp-on-signin",
		Required: false,
		Usage:    `Forces the user to use otp when signing in. Even if they have password set, they won't use it and only will be able to signin using that otp. (bool?)`,
	},
	&cli.StringFlag{
		Name:     "recaptcha2-server-key",
		Required: false,
		Usage:    `Secret which would be used to decrypt if the recaptcha is correct. Should not be available publicly. (string)`,
	},
	&cli.StringFlag{
		Name:     "recaptcha2-client-key",
		Required: false,
		Usage:    `Secret which would be used for recaptcha2 on the client side. Can be publicly visible, and upon authenticating users it would be sent to front-end. (string)`,
	},
	&cli.StringFlag{
		Name:     "enable-totp",
		Required: false,
		Usage:    `Enables user to make 2FA using apps such as google authenticator or microsoft authenticator. (bool?)`,
	},
	&cli.StringFlag{
		Name:     "force-totp",
		Required: false,
		Usage:    `Forces the user to setup a 2FA in order to access their account. Users which did not setup this won't be affected. (bool?)`,
	},
	&cli.StringFlag{
		Name:     "force-password-on-phone",
		Required: false,
		Usage:    `Forces users who want to create account using phone number to also set a password on their account (bool?)`,
	},
	&cli.StringFlag{
		Name:     "force-person-name-on-phone",
		Required: false,
		Usage:    `Forces the creation of account using phone number to ask for user firstname and lastname (bool?)`,
	},
}
var WorkspaceConfigCommonInteractiveCliFlags = []fireback.CliInteractiveFlag{
	{
		Name:        "recaptcha2ServerKey",
		StructField: "Recaptcha2ServerKey",
		Required:    false,
		Recommended: false,
		Usage:       `Secret which would be used to decrypt if the recaptcha is correct. Should not be available publicly.`,
		Type:        "string",
	},
	{
		Name:        "recaptcha2ClientKey",
		StructField: "Recaptcha2ClientKey",
		Required:    false,
		Recommended: false,
		Usage:       `Secret which would be used for recaptcha2 on the client side. Can be publicly visible, and upon authenticating users it would be sent to front-end.`,
		Type:        "string",
	},
}
var WorkspaceConfigCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "enable-recaptcha2",
		Required: false,
		Usage:    `Enables the recaptcha2 for authentication flow. (bool?)`,
	},
	&cli.StringFlag{
		Name:     "enable-otp",
		Required: false,
		Usage:    `Enables the otp option. It's not forcing it, so user can choose if they want otp or password. (bool?)`,
	},
	&cli.StringFlag{
		Name:     "require-otp-on-signup",
		Required: false,
		Usage:    `Forces the user to have otp verification before can create an account. They can define their password still. (bool?)`,
	},
	&cli.StringFlag{
		Name:     "require-otp-on-signin",
		Required: false,
		Usage:    `Forces the user to use otp when signing in. Even if they have password set, they won't use it and only will be able to signin using that otp. (bool?)`,
	},
	&cli.StringFlag{
		Name:     "recaptcha2-server-key",
		Required: false,
		Usage:    `Secret which would be used to decrypt if the recaptcha is correct. Should not be available publicly. (string)`,
	},
	&cli.StringFlag{
		Name:     "recaptcha2-client-key",
		Required: false,
		Usage:    `Secret which would be used for recaptcha2 on the client side. Can be publicly visible, and upon authenticating users it would be sent to front-end. (string)`,
	},
	&cli.StringFlag{
		Name:     "enable-totp",
		Required: false,
		Usage:    `Enables user to make 2FA using apps such as google authenticator or microsoft authenticator. (bool?)`,
	},
	&cli.StringFlag{
		Name:     "force-totp",
		Required: false,
		Usage:    `Forces the user to setup a 2FA in order to access their account. Users which did not setup this won't be affected. (bool?)`,
	},
	&cli.StringFlag{
		Name:     "force-password-on-phone",
		Required: false,
		Usage:    `Forces users who want to create account using phone number to also set a password on their account (bool?)`,
	},
	&cli.StringFlag{
		Name:     "force-person-name-on-phone",
		Required: false,
		Usage:    `Forces the creation of account using phone number to ask for user firstname and lastname (bool?)`,
	},
}
var WorkspaceConfigCreateCmd cli.Command = WORKSPACE_CONFIG_ACTION_POST_ONE.ToCli()
var WorkspaceConfigCreateInteractiveCmd cli.Command = cli.Command{
	Name:  "ic",
	Usage: "Creates a new entity, using requied fields in an interactive name",
	Flags: []cli.Flag{
		&cli.BoolFlag{
			Name:  "all",
			Usage: "Interactively asks for all inputs, not only required ones",
		},
	},
	Action: func(c *cli.Context) {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_CONFIG_CREATE},
			ResolveStrategy: "workspace",
			AllowOnRoot:     true,
		})
		entity := &WorkspaceConfigEntity{}
		fireback.PopulateInteractively(entity, c, WorkspaceConfigCommonInteractiveCliFlags)
		if entity, err := WorkspaceConfigActions.Create(entity, query); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := yaml.Marshal(entity)
			fmt.Println(fireback.FormatYamlKeys(string(f)))
		}
	},
}
var WorkspaceConfigUpdateCmd cli.Command = cli.Command{
	Name:    "update",
	Aliases: []string{"u"},
	Flags:   WorkspaceConfigCommonCliFlagsOptional,
	Usage:   "Updates entity by passing the parameters",
	Action: func(c *cli.Context) error {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_CONFIG_UPDATE},
			ResolveStrategy: "workspace",
			AllowOnRoot:     true,
		})
		entity := CastWorkspaceConfigFromCli(c)
		if entity, err := WorkspaceConfigActions.Update(query, entity); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := json.MarshalIndent(entity, "", "  ")
			fmt.Println(string(f))
		}
		return nil
	},
}

func (x *WorkspaceConfigEntity) FromCli(c *cli.Context) *WorkspaceConfigEntity {
	return CastWorkspaceConfigFromCli(c)
}
func CastWorkspaceConfigFromCli(c *cli.Context) *WorkspaceConfigEntity {
	template := &WorkspaceConfigEntity{}
	if c.IsSet("uid") {
		template.UniqueId = c.String("uid")
	}
	if c.IsSet("pid") {
		template.ParentId = fireback.NewStringAutoNull(c.String("pid"))
	}
	if c.IsSet("recaptcha2-server-key") {
		template.Recaptcha2ServerKey = c.String("recaptcha2-server-key")
	}
	if c.IsSet("recaptcha2-client-key") {
		template.Recaptcha2ClientKey = c.String("recaptcha2-client-key")
	}
	return template
}
func WorkspaceConfigSyncSeederFromFs(fsRef *embed.FS, fileNames []string, q fireback.QueryDSL) {
	fireback.SeederFromFSImport(
		q,
		WorkspaceConfigActions.Create,
		reflect.ValueOf(&WorkspaceConfigEntity{}).Elem(),
		fsRef,
		fileNames,
		true,
	)
}
func WorkspaceConfigSyncSeeders() {
	fireback.SeederFromFSImport(
		fireback.QueryDSL{WorkspaceId: fireback.USER_SYSTEM},
		WorkspaceConfigActions.Create,
		reflect.ValueOf(&WorkspaceConfigEntity{}).Elem(),
		workspaceConfigSeedersFs,
		[]string{},
		true,
	)
}
func WorkspaceConfigImportMocks() {
	fireback.SeederFromFSImport(
		fireback.QueryDSL{},
		WorkspaceConfigActions.Create,
		reflect.ValueOf(&WorkspaceConfigEntity{}).Elem(),
		&mocks.ViewsFs,
		[]string{},
		false,
	)
}
func WorkspaceConfigWriteQueryMock(ctx fireback.MockQueryContext) {
	for _, lang := range ctx.Languages {
		itemsPerPage := 9999
		if ctx.ItemsPerPage > 0 {
			itemsPerPage = ctx.ItemsPerPage
		}
		f := fireback.QueryDSL{ItemsPerPage: itemsPerPage, Language: lang, WithPreloads: ctx.WithPreloads, Deep: true}
		items, count, _ := WorkspaceConfigActions.Query(f)
		result := fireback.QueryEntitySuccessResult(f, items, count)
		fireback.WriteMockDataToFile(lang, "", "WorkspaceConfig", result)
	}
}
func WorkspaceConfigsActionQueryString(keyword string, page int) ([]string, *fireback.QueryResultMeta, error) {
	searchFields := []string{
		`unique_id %"{keyword}"%`,
		`name %"{keyword}"%`,
	}
	m := func(item *WorkspaceConfigEntity) string {
		label := item.UniqueId
		// if item.Name != nil {
		// 	label += " >>> " + *item.Name
		// }
		return label
	}
	query := fireback.QueryStringCastCli(searchFields, keyword, page)
	items, meta, err := WorkspaceConfigActions.Query(query)
	stringItems := []string{}
	for _, item := range items {
		label := m(item)
		stringItems = append(stringItems, label)
	}
	return stringItems, meta, err
}

var WorkspaceConfigDevCommands = []cli.Command{
	WorkspaceConfigWipeCmd,
	{
		Name:  "mock",
		Usage: "Generates mock records based on the entity definition",
		Flags: []cli.Flag{
			&cli.IntFlag{
				Name:  "count",
				Usage: "how many activation key do you need to be generated and stored in database",
				Value: 10,
			},
			&cli.BoolFlag{
				Name:  "batch",
				Usage: "Multiple insert into database mode. Might miss children and relations at the moment",
			},
		},
		Action: func(c *cli.Context) error {
			query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
				ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_CONFIG_CREATE},
				ResolveStrategy: "workspace",
				AllowOnRoot:     true,
			})
			if c.Bool("batch") {
				WorkspaceConfigActionSeederMultiple(query, c.Int("count"))
			} else {
				WorkspaceConfigActionSeeder(query, c.Int("count"))
			}
			return nil
		},
	},
	{
		Name:    "init",
		Aliases: []string{"i"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Creates a basic seeder file for you, based on the definition module we have. You can populate this file as an example",
		Action: func(c *cli.Context) error {
			seed := WorkspaceConfigActions.SeederInit()
			fireback.CommonInitSeeder(strings.TrimSpace(c.String("format")), seed)
			return nil
		},
	},
	cli.Command{
		Name:  "mlist",
		Usage: "Prints the list of embedded mocks into the app",
		Action: func(c *cli.Context) error {
			if entity, err := fireback.GetSeederFilenames(&mocks.ViewsFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "msync",
		Usage: "Tries to sync mocks into the system",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportEmbedCmd(c,
				WorkspaceConfigActions.Create,
				reflect.ValueOf(&WorkspaceConfigEntity{}).Elem(),
				&mocks.ViewsFs,
			)
			return nil
		},
	},
}
var WorkspaceConfigImportExportCommands = []cli.Command{
	{
		Name:    "validate",
		Aliases: []string{"v"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "file",
				Usage: "Validates an import file, such as yaml, json, csv, and gives some insights how the after import it would look like",
				Value: "workspace-config-seeder-workspace-config.yml",
				// Uncomment before publish, they need to specify
				// Required: true,
			},
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Reads a yaml file containing an array of workspace-configs, you can run this to validate if your import file is correct, and how it would look like after import",
		Action: func(c *cli.Context) error {
			data := &[]WorkspaceConfigEntity{}
			fireback.ReadYamlFile(c.String("file"), data)
			fmt.Println(data)
			return nil
		},
	},
	cli.Command{
		Name:  "slist",
		Usage: "Prints the list of files attached to this module for syncing or bootstrapping project",
		Action: func(c *cli.Context) error {
			if entity, err := fireback.GetSeederFilenames(workspaceConfigSeedersFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "ssync",
		Usage: "Tries to sync the embedded content into the database, the list could be seen by 'slist' command",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportEmbedCmd(c,
				WorkspaceConfigActions.Create,
				reflect.ValueOf(&WorkspaceConfigEntity{}).Elem(),
				workspaceConfigSeedersFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:    "export",
		Aliases: []string{"e"},
		Flags: append(fireback.CommonQueryFlags,
			&cli.StringFlag{
				Name:     "file",
				Usage:    "The address of file you want the csv/yaml/json be exported to",
				Required: true,
			}),
		Usage: "Exports a query results into the csv/yaml/json format",
		Action: func(c *cli.Context) error {
			return fireback.CommonCliExportCmd2(c,
				WorkspaceConfigEntityStream,
				reflect.ValueOf(&WorkspaceConfigEntity{}).Elem(),
				c.String("file"),
				&metas.MetaFs,
				"WorkspaceConfigFieldMap.yml",
				WorkspaceConfigPreloadRelations,
			)
		},
	},
	cli.Command{
		Name: "import",
		Flags: append(
			append(
				fireback.CommonQueryFlags,
				&cli.StringFlag{
					Name:     "file",
					Usage:    "The address of file you want the csv be imported from",
					Required: true,
				}),
			WorkspaceConfigCommonCliFlagsOptional...,
		),
		Usage: "imports csv/yaml/json file and place it and its children into database",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportCmdAuthorized(c,
				WorkspaceConfigActions.Create,
				reflect.ValueOf(&WorkspaceConfigEntity{}).Elem(),
				c.String("file"),
				&fireback.SecurityModel{
					ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_CONFIG_CREATE},
					ResolveStrategy: "workspace",
					AllowOnRoot:     true,
				},
				func() WorkspaceConfigEntity {
					v := CastWorkspaceConfigFromCli(c)
					return *v
				},
			)
			return nil
		},
	},
}
var WorkspaceConfigCliCommands []cli.Command = []cli.Command{
	WORKSPACE_CONFIG_ACTION_QUERY.ToCli(),
	WORKSPACE_CONFIG_ACTION_TABLE.ToCli(),
	WorkspaceConfigCreateCmd,
	WorkspaceConfigUpdateCmd,
	WorkspaceConfigAskCmd,
	WorkspaceConfigCreateInteractiveCmd,
	fireback.GetCommonRemoveQuery(
		reflect.ValueOf(&WorkspaceConfigEntity{}).Elem(),
		WorkspaceConfigActions.Remove,
	),
}

func WorkspaceConfigCliFn() cli.Command {
	commands := append(WorkspaceConfigImportExportCommands, WorkspaceConfigCliCommands...)
	if !fireback.GetConfig().Production {
		commands = append(commands, WorkspaceConfigDevCommands...)
	}
	return cli.Command{
		Name:        "config",
		Description: "WorkspaceConfigs module actions",
		Usage:       `Contains configuration which would be necessary for application environment to be running. At the moment, a single record is allowed, and only for root workspace. But in theory it could be configured per each workspace independently. For sub projects do not touch this, rather create a custom config entity if workspaces in the product need extra config.`,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "language",
				Value: "en",
			},
		},
		Subcommands: commands,
	}
}

var WORKSPACE_CONFIG_ACTION_TABLE = fireback.Module3Action{
	Name:          "table",
	ActionAliases: []string{"t"},
	Flags:         fireback.CommonQueryFlags,
	Description:   "Table formatted queries all of the entities in database based on the standard query format",
	Action:        WorkspaceConfigActions.Query,
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		fireback.CommonCliTableCmd2(c,
			WorkspaceConfigActions.Query,
			security,
			reflect.ValueOf(&WorkspaceConfigEntity{}).Elem(),
		)
		return nil
	},
}
var WORKSPACE_CONFIG_ACTION_QUERY = fireback.Module3Action{
	Method: "GET",
	Url:    "/workspace-configs",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_CONFIG_QUERY},
		ResolveStrategy: "workspace",
		AllowOnRoot:     true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			qs := &WorkspaceConfigEntityQs{}
			fireback.HttpQueryEntity(c, WorkspaceConfigActions.Query, qs)
		},
	},
	Format:         "QUERY",
	Action:         WorkspaceConfigActions.Query,
	ResponseEntity: &[]WorkspaceConfigEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "WorkspaceConfigEntity",
	},
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		qs := &WorkspaceConfigEntityQs{}
		fireback.CommonCliQueryCmd3(
			c,
			WorkspaceConfigActions.Query,
			security,
			qs,
		)
		return nil
	},
	CliName:       "query",
	Name:          "query",
	ActionAliases: []string{"q"},
	Flags:         append(fireback.CommonQueryFlags, WorkspaceConfigQsFlags...),
	Description:   "Queries all of the entities in database based on the standard query format (s+)",
}
var WORKSPACE_CONFIG_ACTION_EXPORT = fireback.Module3Action{
	Method: "GET",
	Url:    "/workspace-configs/export",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_CONFIG_QUERY},
		ResolveStrategy: "workspace",
		AllowOnRoot:     true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpStreamFileChannel(c, WorkspaceConfigActionExport)
		},
	},
	Format:         "QUERY",
	Action:         WorkspaceConfigActionExport,
	ResponseEntity: &[]WorkspaceConfigEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "WorkspaceConfigEntity",
	},
}
var WORKSPACE_CONFIG_ACTION_GET_ONE = fireback.Module3Action{
	Method: "GET",
	Url:    "/workspace-config/:uniqueId",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_CONFIG_QUERY},
		ResolveStrategy: "workspace",
		AllowOnRoot:     true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpGetEntity(c, WorkspaceConfigActions.GetOne)
		},
	},
	Format:         "GET_ONE",
	Action:         WorkspaceConfigActions.GetOne,
	ResponseEntity: &WorkspaceConfigEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "WorkspaceConfigEntity",
	},
}
var WORKSPACE_CONFIG_ACTION_POST_ONE = fireback.Module3Action{
	Name:          "create",
	ActionAliases: []string{"c"},
	Description:   "Create new workspaceConfig",
	Flags:         WorkspaceConfigCommonCliFlags,
	Method:        "POST",
	Url:           "/workspace-config",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_CONFIG_CREATE},
		ResolveStrategy: "workspace",
		AllowOnRoot:     true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpPostEntity(c, WorkspaceConfigActions.Create)
		},
	},
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		result, err := fireback.CliPostEntity(c, WorkspaceConfigActions.Create, security)
		fireback.HandleActionInCli(c, result, err, map[string]map[string]string{})
		return err
	},
	Action:         WorkspaceConfigActions.Create,
	Format:         "POST_ONE",
	RequestEntity:  &WorkspaceConfigEntity{},
	ResponseEntity: &WorkspaceConfigEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "WorkspaceConfigEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "WorkspaceConfigEntity",
	},
}
var WORKSPACE_CONFIG_ACTION_PATCH = fireback.Module3Action{
	Name:          "update",
	ActionAliases: []string{"u"},
	Flags:         WorkspaceConfigCommonCliFlagsOptional,
	Method:        "PATCH",
	Url:           "/workspace-config",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_CONFIG_UPDATE},
		ResolveStrategy: "workspace",
		AllowOnRoot:     true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntity(c, WorkspaceConfigActions.Update)
		},
	},
	Action:         WorkspaceConfigActions.Update,
	RequestEntity:  &WorkspaceConfigEntity{},
	ResponseEntity: &WorkspaceConfigEntity{},
	Format:         "PATCH_ONE",
	Out: &fireback.Module3ActionBody{
		Entity: "WorkspaceConfigEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "WorkspaceConfigEntity",
	},
}
var WORKSPACE_CONFIG_ACTION_PATCH_BULK = fireback.Module3Action{
	Method: "PATCH",
	Url:    "/workspace-configs",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_CONFIG_UPDATE},
		ResolveStrategy: "workspace",
		AllowOnRoot:     true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntities(c, WorkspaceConfigActionBulkUpdate)
		},
	},
	Action:         WorkspaceConfigActionBulkUpdate,
	Format:         "PATCH_BULK",
	RequestEntity:  &fireback.BulkRecordRequest[WorkspaceConfigEntity]{},
	ResponseEntity: &fireback.BulkRecordRequest[WorkspaceConfigEntity]{},
	Out: &fireback.Module3ActionBody{
		Entity: "WorkspaceConfigEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "WorkspaceConfigEntity",
	},
}
var WORKSPACE_CONFIG_ACTION_DELETE = fireback.Module3Action{
	Method: "DELETE",
	Url:    "/workspace-config",
	Format: "DELETE_DSL",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_CONFIG_DELETE},
		ResolveStrategy: "workspace",
		AllowOnRoot:     true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpRemoveEntity(c, WorkspaceConfigActions.Remove)
		},
	},
	Action:         WorkspaceConfigActions.Remove,
	RequestEntity:  &fireback.DeleteRequest{},
	ResponseEntity: &fireback.DeleteResponse{},
	TargetEntity:   &WorkspaceConfigEntity{},
}
var WORKSPACE_CONFIG_ACTION_DISTINCT_PATCH_ONE = fireback.Module3Action{
	Method: "PATCH",
	Url:    "/workspace-config/distinct",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_CONFIG_UPDATE_DISTINCT_WORKSPACE},
		ResolveStrategy: "workspace",
		AllowOnRoot:     true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntity(c, WorkspaceConfigDistinctActionUpdate)
		},
	},
	Action:         WorkspaceConfigDistinctActionUpdate,
	Format:         "PATCH_ONE",
	RequestEntity:  &WorkspaceConfigEntity{},
	ResponseEntity: &WorkspaceConfigEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "WorkspaceConfigEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "WorkspaceConfigEntity",
	},
}
var WORKSPACE_CONFIG_ACTION_DISTINCT_GET_ONE = fireback.Module3Action{
	Method: "GET",
	Url:    "/workspace-config/distinct",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires:  []fireback.PermissionInfo{PERM_ROOT_WORKSPACE_CONFIG_GET_DISTINCT_WORKSPACE},
		ResolveStrategy: "workspace",
		AllowOnRoot:     true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpGetEntity(c, WorkspaceConfigDistinctActionGetOne)
		},
	},
	Action:         WorkspaceConfigDistinctActionGetOne,
	Format:         "GET_ONE",
	ResponseEntity: &WorkspaceConfigEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "WorkspaceConfigEntity",
	},
}

/**
 *	Override this function on WorkspaceConfigEntityHttp.go,
 *	In order to add your own http
 **/
var AppendWorkspaceConfigRouter = func(r *[]fireback.Module3Action) {}

func GetWorkspaceConfigModule3Actions() []fireback.Module3Action {
	routes := []fireback.Module3Action{
		WORKSPACE_CONFIG_ACTION_QUERY,
		WORKSPACE_CONFIG_ACTION_EXPORT,
		WORKSPACE_CONFIG_ACTION_GET_ONE,
		WORKSPACE_CONFIG_ACTION_POST_ONE,
		WORKSPACE_CONFIG_ACTION_PATCH,
		WORKSPACE_CONFIG_ACTION_PATCH_BULK,
		WORKSPACE_CONFIG_ACTION_DELETE,
		WORKSPACE_CONFIG_ACTION_DISTINCT_PATCH_ONE,
		WORKSPACE_CONFIG_ACTION_DISTINCT_GET_ONE,
	}
	// Append user defined functions
	AppendWorkspaceConfigRouter(&routes)
	return routes
}

var PERM_ROOT_WORKSPACE_CONFIG = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.workspace-config.*",
	Name:        "Entire workspace config actions (*)",
	Description: "",
}
var PERM_ROOT_WORKSPACE_CONFIG_DELETE = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.workspace-config.delete",
	Name:        "Delete workspace config",
	Description: "",
}
var PERM_ROOT_WORKSPACE_CONFIG_CREATE = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.workspace-config.create",
	Name:        "Create workspace config",
	Description: "",
}
var PERM_ROOT_WORKSPACE_CONFIG_UPDATE = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.workspace-config.update",
	Name:        "Update workspace config",
	Description: "",
}
var PERM_ROOT_WORKSPACE_CONFIG_QUERY = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.workspace-config.query",
	Name:        "Query workspace config",
	Description: "",
}
var PERM_ROOT_WORKSPACE_CONFIG_GET_DISTINCT_WORKSPACE = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.workspace-config.get-distinct-workspace",
	Name:        "Get workspace config Distinct",
	Description: "",
}
var PERM_ROOT_WORKSPACE_CONFIG_UPDATE_DISTINCT_WORKSPACE = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.workspace-config.update-distinct-workspace",
	Name:        "Update workspace config Distinct",
	Description: "",
}
var ALL_WORKSPACE_CONFIG_PERMISSIONS = []fireback.PermissionInfo{
	PERM_ROOT_WORKSPACE_CONFIG_DELETE,
	PERM_ROOT_WORKSPACE_CONFIG_CREATE,
	PERM_ROOT_WORKSPACE_CONFIG_UPDATE,
	PERM_ROOT_WORKSPACE_CONFIG_GET_DISTINCT_WORKSPACE,
	PERM_ROOT_WORKSPACE_CONFIG_UPDATE_DISTINCT_WORKSPACE,
	PERM_ROOT_WORKSPACE_CONFIG_QUERY,
	PERM_ROOT_WORKSPACE_CONFIG,
}

func WorkspaceConfigDistinctActionUpdate(
	query fireback.QueryDSL,
	fields *WorkspaceConfigEntity,
) (*WorkspaceConfigEntity, *fireback.IError) {
	query.UniqueId = query.UserId
	entity, err := WorkspaceConfigActions.GetByWorkspace(query)
	// Because we are updating by workspace, the unique id and workspace id
	// are important to be the same.
	fields.UniqueId = query.WorkspaceId
	fields.WorkspaceId = fireback.NewString(query.WorkspaceId)
	if err != nil || entity.UniqueId == "" {
		return WorkspaceConfigActions.Create(fields, query)
	} else {
		return WorkspaceConfigActions.Update(query, fields)
	}
}
func WorkspaceConfigDistinctActionGetOne(
	query fireback.QueryDSL,
) (*WorkspaceConfigEntity, *fireback.IError) {
	// Get's by workspace
	entity, err := WorkspaceConfigActions.GetByWorkspace(query)
	if err != nil && err.HttpCode == 404 {
		return &WorkspaceConfigEntity{}, nil
	}
	return entity, err
}
func NewWorkspaceConfigCreatedEvent(
	payload *WorkspaceConfigEntity,
	query *fireback.QueryDSL,
) (*fireback.Event, error) {
	event := &fireback.Event{
		Name:    "WorkspaceConfigCreated",
		Payload: payload,
		Security: &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{
				PERM_ROOT_WORKSPACE_CONFIG_QUERY,
			},
			ResolveStrategy: "workspace",
			AllowOnRoot:     true,
		},
		CacheKey: "*abac.WorkspaceConfigEntity",
	}
	// Apply the source of the event based on querydsl
	fireback.ApplyQueryDslContextToEvent(event, *query)
	return event, nil
}
func NewWorkspaceConfigUpdatedEvent(
	payload *WorkspaceConfigEntity,
	query *fireback.QueryDSL,
) (*fireback.Event, error) {
	event := &fireback.Event{
		Name:    "WorkspaceConfigUpdated",
		Payload: payload,
		Security: &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{
				PERM_ROOT_WORKSPACE_CONFIG_QUERY,
			},
			ResolveStrategy: "workspace",
			AllowOnRoot:     true,
		},
		CacheKey: "*abac.WorkspaceConfigEntity",
	}
	// Apply the source of the event based on querydsl
	fireback.ApplyQueryDslContextToEvent(event, *query)
	return event, nil
}

var WorkspaceConfigEntityBundle = fireback.EntityBundle{
	Permissions: ALL_WORKSPACE_CONFIG_PERMISSIONS,
	// Cli command has been exluded, since we use module to wrap all the entities
	// to be more easier to wrap up.
	// Create your own bundle if you need with Cli
	//CliCommands: []cli.Command{
	//	WorkspaceConfigCliFn(),
	//},
	Actions:      GetWorkspaceConfigModule3Actions(),
	MockProvider: WorkspaceConfigImportMocks,
	AutoMigrationEntities: []interface{}{
		&WorkspaceConfigEntity{},
	},
}
