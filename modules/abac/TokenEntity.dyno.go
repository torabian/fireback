package abac

/*
*	Generated by fireback 1.2.2
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"embed"
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	jsoniter "github.com/json-iterator/go"
	"github.com/schollz/progressbar/v3"
	metas "github.com/torabian/fireback/modules/abac/metas"
	mocks "github.com/torabian/fireback/modules/abac/mocks/Token"
	seeders "github.com/torabian/fireback/modules/abac/seeders/Token"
	"github.com/torabian/fireback/modules/fireback"
	"github.com/urfave/cli"
	"gopkg.in/yaml.v2"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"log"
	reflect "reflect"
	"strings"
)

var tokenSeedersFs = &seeders.ViewsFs

func ResetTokenSeeders(fs *embed.FS) {
	tokenSeedersFs = fs
}

type TokenEntityQs struct {
	User       fireback.QueriableField `cli:"user" table:"token" column:"user" qs:"user"`
	Token      fireback.QueriableField `cli:"token" table:"token" column:"token" qs:"token"`
	ValidUntil fireback.QueriableField `cli:"valid-until" table:"token" column:"valid_until" qs:"validUntil"`
}

func (x *TokenEntityQs) GetQuery() string {
	return fireback.GenerateQueryStringStyle(reflect.ValueOf(x), "")
}

var TokenQsFlags = []cli.Flag{
	&cli.StringFlag{
		Name:  "user",
		Usage: "",
	},
	&cli.StringFlag{
		Name:  "token",
		Usage: "",
	},
	&cli.StringFlag{
		Name:  "valid-until",
		Usage: "",
	},
}

type TokenEntity struct {
	// Defines the visibility of the record in the table.
	// Visibility is a detailed topic, you can check all of the visibility values in fireback/visibility.go
	// by default, visibility of record are 0, means they are protected by the workspace
	// which are being created, and visible to every member of the workspace
	Visibility fireback.String `json:"visibility,omitempty" yaml:"visibility,omitempty" xml:"visibility,omitempty"`
	// The unique-id of the workspace which content belongs to. Upon creation this will be designated
	// to the selected workspace by user, if they have write access. You can change this value
	// or prevent changes to it manually (on root features for example modifying other workspace)
	WorkspaceId fireback.String `json:"workspaceId,omitempty" xml:"workspaceId,omitempty" yaml:"workspaceId,omitempty"`
	// The unique-id of the parent table, which this record is being linked to.
	// used internally for making relations in fireback, generally does not need manual changes
	// or modification by the developer or user. For example, if you have a object inside an object
	// the unique-id of the parent will be written in the child.
	LinkerId fireback.String `json:"linkerId,omitempty" xml:"linkerId,omitempty" yaml:"linkerId,omitempty"`
	// Used for recursive or parent-child operations. Some tables, are having nested relations,
	// and this field makes the table self refrenceing. ParentId needs to exist in the table before
	// creating of modifying a record.
	ParentId fireback.String `json:"parentId,omitempty" xml:"parentId,omitempty" yaml:"parentId,omitempty"`
	// Makes a field deletable. Some records should not be deletable at all.
	// default it's true.
	IsDeletable *bool `json:"isDeletable,omitempty" xml:"isDeletable,omitempty" yaml:"isDeletable,omitempty" gorm:"default:true"`
	// Makes a field updatable. Some records should not be updatable at all.
	// default it's true.
	IsUpdatable *bool `json:"isUpdatable,omitempty" xml:"isUpdatable,omitempty" yaml:"isUpdatable,omitempty" gorm:"default:true"`
	// The unique-id of the user which is creating the record, or the record belongs to.
	// Administration might want to change this to any user, by default Fireback fills
	// it to the current authenticated user.
	UserId fireback.String `json:"userId,omitempty" xml:"userId,omitempty" yaml:"userId,omitempty"`
	// General mechanism to rank the elements. From code perspective, it's just a number,
	// but you can sort it based on any logic for records to make a ranking, sorting.
	// they should not be unique across a table.
	Rank fireback.Int64 `json:"rank,omitempty" yaml:"rank,omitempty" xml:"rank,omitempty" gorm:"type:int;name:rank"`
	// Primary numeric key in the database. This value is not meant to be exported to public
	// or be used to access data at all. Rather a mechanism of indexing columns internally
	// or cursor pagination in future releases of fireback, or better search performance.
	ID uint `gorm:"primaryKey;autoIncrement" json:"-" yaml:"-" xml:"-"`
	// Unique id of the record across the table. This value will be accessed from public APIs,
	// and many other places intead of numeric ID property.
	// Upon generation, a UUID automatically is being assigned, and if user has specified the
	// Unique id in the post body, it will be used. This mechanism allows to manage unsaved
	// content on front-end much easier than requiring parent to exists first.
	UniqueId string `json:"uniqueId,omitempty" xml:"uniqueId,omitempty" gorm:"unique;not null;size:100;" yaml:"uniqueId,omitempty"`
	// The time that the record has been created in nano-seconds.
	// the field will be automatically populated by gorm orm.
	Created int64 `json:"created,omitempty" xml:"created,omitempty" yaml:"created,omitempty" gorm:"autoUpdateTime:nano"`
	// The time that the record has been updated in nano-seconds.
	// the field will be automatically populated by gorm orm.
	Updated int64 `json:"updated,omitempty" xml:"updated,omitempty" yaml:"updated,omitempty"`
	// The time that the record has been deleted softly (means the data still exists in database, but no longer visible to any feature) in nano seconds
	// you need to make sure check this field if writing custom sql queries.
	// the field will be automatically populated by gorm orm.
	Deleted int64 `json:"deleted,omitempty" xml:"deleted,omitempty" yaml:"deleted,omitempty"`
	// Record creation date time formatting based on locale of the headers, or other
	// possible factors.
	CreatedFormatted string `json:"createdFormatted,omitempty" xml:"createdFormatted,omitempty" yaml:"createdFormatted,omitempty" sql:"-" gorm:"-"`
	// Record update date time formatting based on locale of the headers, or other
	// possible factors.
	UpdatedFormatted string              `json:"updatedFormatted,omitempty" xml:"updatedFormatted,omitempty" yaml:"updatedFormatted,omitempty" sql:"-" gorm:"-"`
	User             *UserEntity         `json:"user" xml:"user" yaml:"user"    gorm:"foreignKey:UserId;references:UniqueId"      `
	Token            string              `json:"token" xml:"token" yaml:"token"        `
	ValidUntil       *fireback.XDateTime `json:"validUntil" xml:"validUntil" yaml:"validUntil"        `
	Children         []*TokenEntity      `csv:"-" gorm:"-" sql:"-" json:"children,omitempty" xml:"children,omitempty"  yaml:"children,omitempty"`
	LinkedTo         *TokenEntity        `csv:"-" yaml:"-" gorm:"-" json:"-" sql:"-" xml:"-"`
}

func TokenEntityStream(q fireback.QueryDSL) (chan []*TokenEntity, *fireback.QueryResultMeta, error) {
	cn := make(chan []*TokenEntity)
	q.ItemsPerPage = 50
	q.StartIndex = 0
	_, qrm, err := TokenActions.Query(q)
	if err != nil {
		return nil, nil, err
	}
	go func() {
		defer close(cn)
		for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
			items, _, _ := TokenActions.Query(q)
			i += q.ItemsPerPage
			q.StartIndex = i
			cn <- items
		}
	}()
	return cn, qrm, nil
}

type TokenEntityList struct {
	Items []*TokenEntity
}

func NewTokenEntityList(items []*TokenEntity) *TokenEntityList {
	return &TokenEntityList{
		Items: items,
	}
}
func (x *TokenEntityList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *TokenEntityList) ToTree() *fireback.TreeOperation[TokenEntity] {
	return fireback.NewTreeOperation(
		x.Items,
		func(t *TokenEntity) string {
			if !t.ParentId.Valid {
				return ""
			}
			return t.ParentId.String
		},
		func(t *TokenEntity) string {
			return t.UniqueId
		},
	)
}

var TokenPreloadRelations []string = []string{}

type tokenActionsSig struct {
	Update         func(query fireback.QueryDSL, dto *TokenEntity) (*TokenEntity, *fireback.IError)
	Create         func(dto *TokenEntity, query fireback.QueryDSL) (*TokenEntity, *fireback.IError)
	Upsert         func(dto *TokenEntity, query fireback.QueryDSL) (*TokenEntity, *fireback.IError)
	SeederInit     func() *TokenEntity
	Remove         func(query fireback.QueryDSL) (int64, *fireback.IError)
	MultiInsert    func(dtos []*TokenEntity, query fireback.QueryDSL) ([]*TokenEntity, *fireback.IError)
	GetOne         func(query fireback.QueryDSL) (*TokenEntity, *fireback.IError)
	GetByWorkspace func(query fireback.QueryDSL) (*TokenEntity, *fireback.IError)
	Query          func(query fireback.QueryDSL) ([]*TokenEntity, *fireback.QueryResultMeta, error)
}

var TokenActions tokenActionsSig = tokenActionsSig{
	Update:         TokenActionUpdateFn,
	Create:         TokenActionCreateFn,
	Upsert:         TokenActionUpsertFn,
	Remove:         TokenActionRemoveFn,
	SeederInit:     TokenActionSeederInitFn,
	MultiInsert:    TokenMultiInsertFn,
	GetOne:         TokenActionGetOneFn,
	GetByWorkspace: TokenActionGetByWorkspaceFn,
	Query:          TokenActionQueryFn,
}

func TokenActionUpsertFn(dto *TokenEntity, query fireback.QueryDSL) (*TokenEntity, *fireback.IError) {
	return nil, nil
}

var TOKEN_EVENT_CREATED = "token.created"
var TOKEN_EVENT_UPDATED = "token.updated"
var TOKEN_EVENT_DELETED = "token.deleted"
var TOKEN_EVENTS = []string{
	TOKEN_EVENT_CREATED,
	TOKEN_EVENT_UPDATED,
	TOKEN_EVENT_DELETED,
}

type TokenFieldMap struct {
	User       fireback.TranslatedString `yaml:"user"`
	Token      fireback.TranslatedString `yaml:"token"`
	ValidUntil fireback.TranslatedString `yaml:"validUntil"`
}

var TokenEntityMetaConfig map[string]int64 = map[string]int64{}
var TokenEntityJsonSchema = fireback.ExtractEntityFields(reflect.ValueOf(&TokenEntity{}))

func entityTokenFormatter(dto *TokenEntity, query fireback.QueryDSL) {
	if dto == nil {
		return
	}
	if dto.Created > 0 {
		dto.CreatedFormatted = fireback.FormatDateBasedOnQuery(dto.Created, query)
	}
	if dto.Updated > 0 {
		dto.CreatedFormatted = fireback.FormatDateBasedOnQuery(dto.Updated, query)
	}
}
func TokenActionSeederMultiple(query fireback.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	batchSize := 100
	bar := progressbar.Default(int64(count))
	// Collect entities in batches
	var entitiesBatch []*TokenEntity
	for i := 1; i <= count; i++ {
		entity := TokenActions.SeederInit()
		entitiesBatch = append(entitiesBatch, entity)
		// When batch size is reached, perform the batch insert
		if len(entitiesBatch) == batchSize || i == count {
			// Insert batch
			_, err := TokenActions.MultiInsert(entitiesBatch, query)
			if err == nil {
				successInsert += len(entitiesBatch)
			} else {
				fmt.Println(err)
				failureInsert += len(entitiesBatch)
			}
			// Clear the batch after insert
			entitiesBatch = nil
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func TokenActionSeeder(query fireback.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	bar := progressbar.Default(int64(count))
	for i := 1; i <= count; i++ {
		entity := TokenActions.SeederInit()
		_, err := TokenActions.Create(entity, query)
		if err == nil {
			successInsert++
		} else {
			fmt.Println(err)
			failureInsert++
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func (x *TokenEntity) Seeder() string {
	obj := TokenActions.SeederInit()
	v, _ := json.MarshalIndent(obj, "", "  ")
	return string(v)
}
func TokenActionSeederInitFn() *TokenEntity {
	entity := &TokenEntity{}
	return entity
}
func TokenAssociationCreate(dto *TokenEntity, query fireback.QueryDSL) error {
	return nil
}

/**
* These kind of content are coming from another entity, which is indepndent module
* If we want to create them, we need to do it before. This is not association.
**/
func TokenRelationContentCreate(dto *TokenEntity, query fireback.QueryDSL) error {
	return nil
}
func TokenRelationContentUpdate(dto *TokenEntity, query fireback.QueryDSL) error {
	return nil
}
func TokenPolyglotUpdateHandler(dto *TokenEntity, query fireback.QueryDSL) {
	if dto == nil {
		return
	}
}

/**
 * This will be validating your entity fully. Important note is that, you add validate:* tag
 * in your entity, it will automatically work here. For slices inside entity, make sure you add
 * extra line of AppendSliceErrors, otherwise they won't be detected
 */
func TokenValidator(dto *TokenEntity, isPatch bool) *fireback.IError {
	err := fireback.CommonStructValidatorPointer(dto, isPatch)
	return err
}

// Creates a set of natural language queries, which can be used with
// AI tools to create content or help with some tasks
var TokenAskCmd cli.Command = cli.Command{
	Name:  "nlp",
	Usage: "Set of natural language queries which helps creating content or data",
	Subcommands: []cli.Command{
		{
			Name:  "sample",
			Usage: "Asks for generating sample by giving an example data",
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:  "format",
					Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
					Value: "yaml",
				},
				&cli.IntFlag{
					Name:  "count",
					Usage: "How many samples to ask",
					Value: 30,
				},
			},
			Action: func(c *cli.Context) error {
				v := &TokenEntity{}
				format := c.String("format")
				request := "\033[1m" + `
I need you to create me an array of exact signature as the example given below,
with at least ` + fmt.Sprint(c.String("count")) + ` items, mock the content with few words, and guess the possible values
based on the common sense. I need the output to be a valid ` + format + ` file.
Make sure you wrap the entire array in 'items' field. Also before that, I provide some explanation of each field:
User: (type: one) Description: 
Token: (type: string) Description: 
ValidUntil: (type: datetime) Description: 
And here is the actual object signature:
` + v.Seeder() + `
`
				fmt.Println(request)
				return nil
			},
		},
	},
}

func TokenEntityPreSanitize(dto *TokenEntity, query fireback.QueryDSL) {
}
func TokenEntityBeforeCreateAppend(dto *TokenEntity, query fireback.QueryDSL) {
	if dto.UniqueId == "" {
		dto.UniqueId = fireback.UUID()
	}
	dto.WorkspaceId = fireback.NewString(query.WorkspaceId)
	dto.UserId = fireback.NewString(query.UserId)
	TokenRecursiveAddUniqueId(dto, query)
}
func TokenRecursiveAddUniqueId(dto *TokenEntity, query fireback.QueryDSL) {
}

/*
*
	Batch inserts, do not have all features that create
	operation does. Use it with unnormalized content,
	or read the source code carefully.
  This is not marked as an action, because it should not be available publicly
  at this moment.
*
*/
func TokenMultiInsertFn(dtos []*TokenEntity, query fireback.QueryDSL) ([]*TokenEntity, *fireback.IError) {
	if len(dtos) > 0 {
		for index := range dtos {
			TokenEntityPreSanitize(dtos[index], query)
			TokenEntityBeforeCreateAppend(dtos[index], query)
		}
		var dbref *gorm.DB = nil
		if query.Tx == nil {
			dbref = fireback.GetDbRef()
		} else {
			dbref = query.Tx
		}
		query.Tx = dbref
		err := dbref.Create(&dtos).Error
		if err != nil {
			return nil, fireback.GormErrorToIError(err)
		}
	}
	return dtos, nil
}
func TokenActionBatchCreateFn(dtos []*TokenEntity, query fireback.QueryDSL) ([]*TokenEntity, *fireback.IError) {
	if dtos != nil && len(dtos) > 0 {
		items := []*TokenEntity{}
		for _, item := range dtos {
			s, err := TokenActions.Create(item, query)
			if err != nil {
				return nil, err
			}
			items = append(items, s)
		}
		return items, nil
	}
	return dtos, nil
}
func TokenDeleteEntireChildren(query fireback.QueryDSL, dto *TokenEntity) *fireback.IError {
	// intentionally removed this. It's hard to implement it, and probably wrong without
	// proper on delete cascade
	return nil
}
func TokenActionCreateFn(dto *TokenEntity, query fireback.QueryDSL) (*TokenEntity, *fireback.IError) {
	// 1. Validate always
	if iError := TokenValidator(dto, false); iError != nil {
		return nil, iError
	}
	// 1.5 Sanitize the content coming of the front-end
	TokenEntityPreSanitize(dto, query)
	// 2. Append the necessary information about user, workspace
	TokenEntityBeforeCreateAppend(dto, query)
	// 3. Create other entities if we want select from them
	TokenRelationContentCreate(dto, query)
	// 4. Create the entity
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = fireback.GetDbRef()
	} else {
		dbref = query.Tx
	}
	query.Tx = dbref
	err := dbref.Create(&dto).Error
	if err != nil {
		err := fireback.GormErrorToIError(err)
		return nil, err
	}
	// 5. Create sub entities, objects or arrays, association to other entities
	TokenAssociationCreate(dto, query)
	// 6. Fire the event into system
	actionEvent, eventErr := NewTokenCreatedEvent(dto, &query)
	if actionEvent != nil && eventErr == nil {
		fireback.GetEventBusInstance().FireEvent(query, *actionEvent)
	} else {
		log.Default().Panicln("Creating event has failed for %v", dto)
	}
	/*
		event.MustFire(TOKEN_EVENT_CREATED, event.M{
			"entity":   dto,
			"entityKey": fireback.GetTypeString(&TokenEntity{}),
			"target":   "workspace",
			"unqiueId": query.WorkspaceId,
		})
	*/
	return dto, nil
}
func TokenActionGetOneFn(query fireback.QueryDSL) (*TokenEntity, *fireback.IError) {
	refl := reflect.ValueOf(&TokenEntity{})
	item, err := fireback.GetOneEntity[TokenEntity](query, refl)
	entityTokenFormatter(item, query)
	return item, err
}
func TokenActionGetByWorkspaceFn(query fireback.QueryDSL) (*TokenEntity, *fireback.IError) {
	refl := reflect.ValueOf(&TokenEntity{})
	item, err := fireback.GetOneByWorkspaceEntity[TokenEntity](query, refl)
	entityTokenFormatter(item, query)
	return item, err
}
func TokenActionQueryFn(query fireback.QueryDSL) ([]*TokenEntity, *fireback.QueryResultMeta, error) {
	refl := reflect.ValueOf(&TokenEntity{})
	items, meta, err := fireback.QueryEntitiesPointer[TokenEntity](query, refl)
	for _, item := range items {
		entityTokenFormatter(item, query)
	}
	return items, meta, err
}

var tokenMemoryItems []*TokenEntity = []*TokenEntity{}

func TokenEntityIntoMemory() {
	q := fireback.QueryDSL{
		ItemsPerPage: 500,
		StartIndex:   0,
	}
	_, qrm, _ := TokenActions.Query(q)
	for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
		items, _, _ := TokenActions.Query(q)
		tokenMemoryItems = append(tokenMemoryItems, items...)
		i += q.ItemsPerPage
		q.StartIndex = i
	}
}
func TokenMemGet(id uint) *TokenEntity {
	for _, item := range tokenMemoryItems {
		if item.ID == id {
			return item
		}
	}
	return nil
}
func TokenMemJoin(items []uint) []*TokenEntity {
	res := []*TokenEntity{}
	for _, item := range items {
		v := TokenMemGet(item)
		if v != nil {
			res = append(res, v)
		}
	}
	return res
}
func TokenUpdateExec(dbref *gorm.DB, query fireback.QueryDSL, fields *TokenEntity) (*TokenEntity, *fireback.IError) {
	uniqueId := fields.UniqueId
	query.TriggerEventName = TOKEN_EVENT_UPDATED
	TokenEntityPreSanitize(fields, query)
	var item TokenEntity
	var itemRefetched TokenEntity
	// If the entity is distinct by workspace, then the Query.WorkspaceId
	// which is selected is being used as the condition for create or update
	// if not, the unique Id is being used
	cond2 := &TokenEntity{UniqueId: uniqueId}
	q := dbref.
		Where(cond2).
		FirstOrCreate(&item)
	err := q.UpdateColumns(fields).Error
	if err != nil {
		return nil, fireback.GormErrorToIError(err)
	}
	query.Tx = dbref
	TokenRelationContentUpdate(fields, query)
	TokenPolyglotUpdateHandler(fields, query)
	if ero := TokenDeleteEntireChildren(query, fields); ero != nil {
		return nil, ero
	}
	// @meta(update has many)
	err = dbref.
		Preload(clause.Associations).
		Where(&TokenEntity{UniqueId: uniqueId}).
		First(&itemRefetched).Error
	if err != nil {
		return nil, fireback.GormErrorToIError(err)
	}
	actionEvent, eventErr := NewTokenUpdatedEvent(fields, &query)
	if actionEvent != nil && eventErr == nil {
		fireback.GetEventBusInstance().FireEvent(query, *actionEvent)
	} else {
		log.Default().Panicln("Updating event has failed for %v", fields)
	}
	/*
	   event.MustFire(query.TriggerEventName, event.M{
	     "entity":   &item,
	     "target":   "workspace",
	     "unqiueId": query.WorkspaceId,
	   })*/
	return &itemRefetched, nil
}
func TokenActionUpdateFn(query fireback.QueryDSL, fields *TokenEntity) (*TokenEntity, *fireback.IError) {
	if fields == nil {
		return nil, fireback.Create401Error(&fireback.FirebackMessages.BodyIsMissing, []string{})
	}
	// 1. Validate always
	if iError := TokenValidator(fields, true); iError != nil {
		return nil, iError
	}
	// Let's not add this. I am not sure of the consequences
	// TokenRecursiveAddUniqueId(fields, query)
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = fireback.GetDbRef()
		var item *TokenEntity
		vf := dbref.Transaction(func(tx *gorm.DB) error {
			dbref = tx
			var err *fireback.IError
			item, err = TokenUpdateExec(dbref, query, fields)
			if err == nil {
				return nil
			} else {
				return err
			}
		})
		return item, fireback.CastToIError(vf)
	} else {
		dbref = query.Tx
		return TokenUpdateExec(dbref, query, fields)
	}
}

var TokenWipeCmd cli.Command = cli.Command{
	Name:  "wipe",
	Usage: "Wipes entire tokens ",
	Action: func(c *cli.Context) error {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_TOKEN_DELETE},
			AllowOnRoot:    true,
		})
		count, _ := TokenActionWipeClean(query)
		fmt.Println("Removed", count, "of entities")
		return nil
	},
}

func TokenActionRemoveFn(query fireback.QueryDSL) (int64, *fireback.IError) {
	refl := reflect.ValueOf(&TokenEntity{})
	query.ActionRequires = []fireback.PermissionInfo{PERM_ROOT_TOKEN_DELETE}
	return fireback.RemoveEntity[TokenEntity](query, refl)
}
func TokenActionWipeClean(query fireback.QueryDSL) (int64, error) {
	var err error
	var count int64 = 0
	{
		subCount, subErr := fireback.WipeCleanEntity[TokenEntity]()
		if subErr != nil {
			fmt.Println("Error while wiping 'TokenEntity'", subErr)
			return count, subErr
		} else {
			count += subCount
		}
	}
	return count, err
}
func TokenActionBulkUpdate(
	query fireback.QueryDSL, dto *fireback.BulkRecordRequest[TokenEntity]) (
	*fireback.BulkRecordRequest[TokenEntity], *fireback.IError,
) {
	result := []*TokenEntity{}
	err := fireback.GetDbRef().Transaction(func(tx *gorm.DB) error {
		query.Tx = tx
		for _, record := range dto.Records {
			item, err := TokenActions.Update(query, record)
			if err != nil {
				return err
			} else {
				result = append(result, item)
			}
		}
		return nil
	})
	if err == nil {
		return dto, nil
	}
	return nil, err.(*fireback.IError)
}
func (x *TokenEntity) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}

var TokenEntityMeta = fireback.TableMetaData{
	EntityName:    "Token",
	ExportKey:     "tokens",
	TableNameInDb: "token_entities",
	EntityObject:  &TokenEntity{},
	ExportStream:  TokenActionExportT,
	ImportQuery:   TokenActionImport,
}

func TokenActionExport(
	query fireback.QueryDSL,
) (chan []byte, *fireback.IError) {
	return fireback.YamlExporterChannel[TokenEntity](query, TokenActions.Query, TokenPreloadRelations)
}
func TokenActionExportT(
	query fireback.QueryDSL,
) (chan []interface{}, *fireback.IError) {
	return fireback.YamlExporterChannelT[TokenEntity](query, TokenActions.Query, TokenPreloadRelations)
}
func TokenActionImport(
	dto interface{}, query fireback.QueryDSL,
) *fireback.IError {
	var json = jsoniter.ConfigCompatibleWithStandardLibrary
	var content TokenEntity
	cx, err2 := json.Marshal(dto)
	if err2 != nil {
		return fireback.Create401Error(&fireback.FirebackMessages.InvalidContent, []string{})
	}
	json.Unmarshal(cx, &content)
	_, err := TokenActions.Create(&content, query)
	return err
}

var TokenCommonCliFlags = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "user-id",
		Required: false,
		Usage:    `user (one)`,
	},
	&cli.StringFlag{
		Name:     "token",
		Required: false,
		Usage:    `token (string)`,
	},
}
var TokenCommonInteractiveCliFlags = []fireback.CliInteractiveFlag{
	{
		Name:        "token",
		StructField: "Token",
		Required:    false,
		Recommended: false,
		Usage:       `token`,
		Type:        "string",
	},
}
var TokenCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "user-id",
		Required: false,
		Usage:    `user (one)`,
	},
	&cli.StringFlag{
		Name:     "token",
		Required: false,
		Usage:    `token (string)`,
	},
}
var TokenCreateCmd cli.Command = TOKEN_ACTION_POST_ONE.ToCli()
var TokenCreateInteractiveCmd cli.Command = cli.Command{
	Name:  "ic",
	Usage: "Creates a new entity, using requied fields in an interactive name",
	Flags: []cli.Flag{
		&cli.BoolFlag{
			Name:  "all",
			Usage: "Interactively asks for all inputs, not only required ones",
		},
	},
	Action: func(c *cli.Context) {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_TOKEN_CREATE},
			AllowOnRoot:    true,
		})
		entity := &TokenEntity{}
		fireback.PopulateInteractively(entity, c, TokenCommonInteractiveCliFlags)
		if entity, err := TokenActions.Create(entity, query); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := yaml.Marshal(entity)
			fmt.Println(fireback.FormatYamlKeys(string(f)))
		}
	},
}
var TokenUpdateCmd cli.Command = cli.Command{
	Name:    "update",
	Aliases: []string{"u"},
	Flags:   TokenCommonCliFlagsOptional,
	Usage:   "Updates entity by passing the parameters",
	Action: func(c *cli.Context) error {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_TOKEN_UPDATE},
			AllowOnRoot:    true,
		})
		entity := CastTokenFromCli(c)
		if entity, err := TokenActions.Update(query, entity); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := json.MarshalIndent(entity, "", "  ")
			fmt.Println(string(f))
		}
		return nil
	},
}

func (x *TokenEntity) FromCli(c *cli.Context) *TokenEntity {
	return CastTokenFromCli(c)
}
func CastTokenFromCli(c *cli.Context) *TokenEntity {
	template := &TokenEntity{}
	if c.IsSet("uid") {
		template.UniqueId = c.String("uid")
	}
	if c.IsSet("pid") {
		template.ParentId = fireback.NewStringAutoNull(c.String("pid"))
	}
	if c.IsSet("user-id") {
		template.UserId = fireback.NewStringAutoNull(c.String("user-id"))
	}
	if c.IsSet("token") {
		template.Token = c.String("token")
	}
	return template
}
func TokenSyncSeederFromFs(fsRef *embed.FS, fileNames []string, q fireback.QueryDSL) {
	fireback.SeederFromFSImport(
		q,
		TokenActions.Create,
		reflect.ValueOf(&TokenEntity{}).Elem(),
		fsRef,
		fileNames,
		true,
	)
}
func TokenSyncSeeders() {
	fireback.SeederFromFSImport(
		fireback.QueryDSL{WorkspaceId: fireback.USER_SYSTEM},
		TokenActions.Create,
		reflect.ValueOf(&TokenEntity{}).Elem(),
		tokenSeedersFs,
		[]string{},
		true,
	)
}
func TokenImportMocks() {
	fireback.SeederFromFSImport(
		fireback.QueryDSL{},
		TokenActions.Create,
		reflect.ValueOf(&TokenEntity{}).Elem(),
		&mocks.ViewsFs,
		[]string{},
		false,
	)
}
func TokenWriteQueryMock(ctx fireback.MockQueryContext) {
	for _, lang := range ctx.Languages {
		itemsPerPage := 9999
		if ctx.ItemsPerPage > 0 {
			itemsPerPage = ctx.ItemsPerPage
		}
		f := fireback.QueryDSL{ItemsPerPage: itemsPerPage, Language: lang, WithPreloads: ctx.WithPreloads, Deep: true}
		items, count, _ := TokenActions.Query(f)
		result := fireback.QueryEntitySuccessResult(f, items, count)
		fireback.WriteMockDataToFile(lang, "", "Token", result)
	}
}
func TokensActionQueryString(keyword string, page int) ([]string, *fireback.QueryResultMeta, error) {
	searchFields := []string{
		`unique_id %"{keyword}"%`,
		`name %"{keyword}"%`,
	}
	m := func(item *TokenEntity) string {
		label := item.UniqueId
		// if item.Name != nil {
		// 	label += " >>> " + *item.Name
		// }
		return label
	}
	query := fireback.QueryStringCastCli(searchFields, keyword, page)
	items, meta, err := TokenActions.Query(query)
	stringItems := []string{}
	for _, item := range items {
		label := m(item)
		stringItems = append(stringItems, label)
	}
	return stringItems, meta, err
}

var TokenDevCommands = []cli.Command{
	TokenWipeCmd,
	{
		Name:  "mock",
		Usage: "Generates mock records based on the entity definition",
		Flags: []cli.Flag{
			&cli.IntFlag{
				Name:  "count",
				Usage: "how many activation key do you need to be generated and stored in database",
				Value: 10,
			},
			&cli.BoolFlag{
				Name:  "batch",
				Usage: "Multiple insert into database mode. Might miss children and relations at the moment",
			},
		},
		Action: func(c *cli.Context) error {
			query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
				ActionRequires: []fireback.PermissionInfo{PERM_ROOT_TOKEN_CREATE},
				AllowOnRoot:    true,
			})
			if c.Bool("batch") {
				TokenActionSeederMultiple(query, c.Int("count"))
			} else {
				TokenActionSeeder(query, c.Int("count"))
			}
			return nil
		},
	},
	{
		Name:    "init",
		Aliases: []string{"i"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Creates a basic seeder file for you, based on the definition module we have. You can populate this file as an example",
		Action: func(c *cli.Context) error {
			seed := TokenActions.SeederInit()
			fireback.CommonInitSeeder(strings.TrimSpace(c.String("format")), seed)
			return nil
		},
	},
	cli.Command{
		Name:  "mlist",
		Usage: "Prints the list of embedded mocks into the app",
		Action: func(c *cli.Context) error {
			if entity, err := fireback.GetSeederFilenames(&mocks.ViewsFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "msync",
		Usage: "Tries to sync mocks into the system",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportEmbedCmd(c,
				TokenActions.Create,
				reflect.ValueOf(&TokenEntity{}).Elem(),
				&mocks.ViewsFs,
			)
			return nil
		},
	},
}
var TokenImportExportCommands = []cli.Command{
	{
		Name:    "validate",
		Aliases: []string{"v"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "file",
				Usage: "Validates an import file, such as yaml, json, csv, and gives some insights how the after import it would look like",
				Value: "token-seeder-token.yml",
				// Uncomment before publish, they need to specify
				// Required: true,
			},
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Reads a yaml file containing an array of tokens, you can run this to validate if your import file is correct, and how it would look like after import",
		Action: func(c *cli.Context) error {
			data := &[]TokenEntity{}
			fireback.ReadYamlFile(c.String("file"), data)
			fmt.Println(data)
			return nil
		},
	},
	cli.Command{
		Name:  "slist",
		Usage: "Prints the list of files attached to this module for syncing or bootstrapping project",
		Action: func(c *cli.Context) error {
			if entity, err := fireback.GetSeederFilenames(tokenSeedersFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "ssync",
		Usage: "Tries to sync the embedded content into the database, the list could be seen by 'slist' command",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportEmbedCmd(c,
				TokenActions.Create,
				reflect.ValueOf(&TokenEntity{}).Elem(),
				tokenSeedersFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:    "export",
		Aliases: []string{"e"},
		Flags: append(fireback.CommonQueryFlags,
			&cli.StringFlag{
				Name:     "file",
				Usage:    "The address of file you want the csv/yaml/json be exported to",
				Required: true,
			}),
		Usage: "Exports a query results into the csv/yaml/json format",
		Action: func(c *cli.Context) error {
			return fireback.CommonCliExportCmd2(c,
				TokenEntityStream,
				reflect.ValueOf(&TokenEntity{}).Elem(),
				c.String("file"),
				&metas.MetaFs,
				"TokenFieldMap.yml",
				TokenPreloadRelations,
			)
		},
	},
	cli.Command{
		Name: "import",
		Flags: append(
			append(
				fireback.CommonQueryFlags,
				&cli.StringFlag{
					Name:     "file",
					Usage:    "The address of file you want the csv be imported from",
					Required: true,
				}),
			TokenCommonCliFlagsOptional...,
		),
		Usage: "imports csv/yaml/json file and place it and its children into database",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportCmdAuthorized(c,
				TokenActions.Create,
				reflect.ValueOf(&TokenEntity{}).Elem(),
				c.String("file"),
				&fireback.SecurityModel{
					ActionRequires: []fireback.PermissionInfo{PERM_ROOT_TOKEN_CREATE},
					AllowOnRoot:    true,
				},
				func() TokenEntity {
					v := CastTokenFromCli(c)
					return *v
				},
			)
			return nil
		},
	},
}
var TokenCliCommands []cli.Command = []cli.Command{
	TOKEN_ACTION_QUERY.ToCli(),
	TOKEN_ACTION_TABLE.ToCli(),
	TokenCreateCmd,
	TokenUpdateCmd,
	TokenAskCmd,
	TokenCreateInteractiveCmd,
	fireback.GetCommonRemoveQuery(
		reflect.ValueOf(&TokenEntity{}).Elem(),
		TokenActions.Remove,
	),
}

func TokenCliFn() cli.Command {
	commands := append(TokenImportExportCommands, TokenCliCommands...)
	if !fireback.GetConfig().Production {
		commands = append(commands, TokenDevCommands...)
	}
	return cli.Command{
		Name:        "token",
		Description: "Tokens module actions",
		Usage:       ``,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "language",
				Value: "en",
			},
		},
		Subcommands: commands,
	}
}

var TOKEN_ACTION_TABLE = fireback.Module3Action{
	Name:          "table",
	ActionAliases: []string{"t"},
	Flags:         fireback.CommonQueryFlags,
	Description:   "Table formatted queries all of the entities in database based on the standard query format",
	Action:        TokenActions.Query,
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		fireback.CommonCliTableCmd2(c,
			TokenActions.Query,
			security,
			reflect.ValueOf(&TokenEntity{}).Elem(),
		)
		return nil
	},
}
var TOKEN_ACTION_QUERY = fireback.Module3Action{
	Method: "GET",
	Url:    "/tokens",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_TOKEN_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			qs := &TokenEntityQs{}
			fireback.HttpQueryEntity(c, TokenActions.Query, qs)
		},
	},
	Format:         "QUERY",
	Action:         TokenActions.Query,
	ResponseEntity: &[]TokenEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "TokenEntity",
	},
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		qs := &TokenEntityQs{}
		fireback.CommonCliQueryCmd3(
			c,
			TokenActions.Query,
			security,
			qs,
		)
		return nil
	},
	CliName:       "query",
	Name:          "query",
	ActionAliases: []string{"q"},
	Flags:         append(fireback.CommonQueryFlags, TokenQsFlags...),
	Description:   "Queries all of the entities in database based on the standard query format (s+)",
}
var TOKEN_ACTION_EXPORT = fireback.Module3Action{
	Method: "GET",
	Url:    "/tokens/export",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_TOKEN_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpStreamFileChannel(c, TokenActionExport)
		},
	},
	Format:         "QUERY",
	Action:         TokenActionExport,
	ResponseEntity: &[]TokenEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "TokenEntity",
	},
}
var TOKEN_ACTION_GET_ONE = fireback.Module3Action{
	Method: "GET",
	Url:    "/token/:uniqueId",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_TOKEN_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpGetEntity(c, TokenActions.GetOne)
		},
	},
	Format:         "GET_ONE",
	Action:         TokenActions.GetOne,
	ResponseEntity: &TokenEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "TokenEntity",
	},
}
var TOKEN_ACTION_POST_ONE = fireback.Module3Action{
	Name:          "create",
	ActionAliases: []string{"c"},
	Description:   "Create new token",
	Flags:         TokenCommonCliFlags,
	Method:        "POST",
	Url:           "/token",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_TOKEN_CREATE},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpPostEntity(c, TokenActions.Create)
		},
	},
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		result, err := fireback.CliPostEntity(c, TokenActions.Create, security)
		fireback.HandleActionInCli(c, result, err, map[string]map[string]string{})
		return err
	},
	Action:         TokenActions.Create,
	Format:         "POST_ONE",
	RequestEntity:  &TokenEntity{},
	ResponseEntity: &TokenEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "TokenEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "TokenEntity",
	},
}
var TOKEN_ACTION_PATCH = fireback.Module3Action{
	Name:          "update",
	ActionAliases: []string{"u"},
	Flags:         TokenCommonCliFlagsOptional,
	Method:        "PATCH",
	Url:           "/token",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_TOKEN_UPDATE},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntity(c, TokenActions.Update)
		},
	},
	Action:         TokenActions.Update,
	RequestEntity:  &TokenEntity{},
	ResponseEntity: &TokenEntity{},
	Format:         "PATCH_ONE",
	Out: &fireback.Module3ActionBody{
		Entity: "TokenEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "TokenEntity",
	},
}
var TOKEN_ACTION_PATCH_BULK = fireback.Module3Action{
	Method: "PATCH",
	Url:    "/tokens",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_TOKEN_UPDATE},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntities(c, TokenActionBulkUpdate)
		},
	},
	Action:         TokenActionBulkUpdate,
	Format:         "PATCH_BULK",
	RequestEntity:  &fireback.BulkRecordRequest[TokenEntity]{},
	ResponseEntity: &fireback.BulkRecordRequest[TokenEntity]{},
	Out: &fireback.Module3ActionBody{
		Entity: "TokenEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "TokenEntity",
	},
}
var TOKEN_ACTION_DELETE = fireback.Module3Action{
	Method: "DELETE",
	Url:    "/token",
	Format: "DELETE_DSL",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_TOKEN_DELETE},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpRemoveEntity(c, TokenActions.Remove)
		},
	},
	Action:         TokenActions.Remove,
	RequestEntity:  &fireback.DeleteRequest{},
	ResponseEntity: &fireback.DeleteResponse{},
	TargetEntity:   &TokenEntity{},
}

/**
 *	Override this function on TokenEntityHttp.go,
 *	In order to add your own http
 **/
var AppendTokenRouter = func(r *[]fireback.Module3Action) {}

func GetTokenModule3Actions() []fireback.Module3Action {
	routes := []fireback.Module3Action{
		TOKEN_ACTION_QUERY,
		TOKEN_ACTION_EXPORT,
		TOKEN_ACTION_GET_ONE,
		TOKEN_ACTION_POST_ONE,
		TOKEN_ACTION_PATCH,
		TOKEN_ACTION_PATCH_BULK,
		TOKEN_ACTION_DELETE,
	}
	// Append user defined functions
	AppendTokenRouter(&routes)
	return routes
}

var PERM_ROOT_TOKEN = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.token.*",
	Name:        "Entire token actions (*)",
	Description: "",
}
var PERM_ROOT_TOKEN_DELETE = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.token.delete",
	Name:        "Delete token",
	Description: "",
}
var PERM_ROOT_TOKEN_CREATE = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.token.create",
	Name:        "Create token",
	Description: "",
}
var PERM_ROOT_TOKEN_UPDATE = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.token.update",
	Name:        "Update token",
	Description: "",
}
var PERM_ROOT_TOKEN_QUERY = fireback.PermissionInfo{
	CompleteKey: "root.manage.abac.token.query",
	Name:        "Query token",
	Description: "",
}
var ALL_TOKEN_PERMISSIONS = []fireback.PermissionInfo{
	PERM_ROOT_TOKEN_DELETE,
	PERM_ROOT_TOKEN_CREATE,
	PERM_ROOT_TOKEN_UPDATE,
	PERM_ROOT_TOKEN_QUERY,
	PERM_ROOT_TOKEN,
}

func NewTokenCreatedEvent(
	payload *TokenEntity,
	query *fireback.QueryDSL,
) (*fireback.Event, error) {
	event := &fireback.Event{
		Name:    "TokenCreated",
		Payload: payload,
		Security: &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{
				PERM_ROOT_TOKEN_QUERY,
			},
		},
		CacheKey: "*abac.TokenEntity",
	}
	// Apply the source of the event based on querydsl
	fireback.ApplyQueryDslContextToEvent(event, *query)
	return event, nil
}
func NewTokenUpdatedEvent(
	payload *TokenEntity,
	query *fireback.QueryDSL,
) (*fireback.Event, error) {
	event := &fireback.Event{
		Name:    "TokenUpdated",
		Payload: payload,
		Security: &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{
				PERM_ROOT_TOKEN_QUERY,
			},
		},
		CacheKey: "*abac.TokenEntity",
	}
	// Apply the source of the event based on querydsl
	fireback.ApplyQueryDslContextToEvent(event, *query)
	return event, nil
}

var TokenEntityBundle = fireback.EntityBundle{
	Permissions: ALL_TOKEN_PERMISSIONS,
	// Cli command has been exluded, since we use module to wrap all the entities
	// to be more easier to wrap up.
	// Create your own bundle if you need with Cli
	//CliCommands: []cli.Command{
	//	TokenCliFn(),
	//},
	Actions:      GetTokenModule3Actions(),
	MockProvider: TokenImportMocks,
	AutoMigrationEntities: []interface{}{
		&TokenEntity{},
	},
}
