package abac

/*
*	Generated by fireback 1.2.2
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"embed"
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	jsoniter "github.com/json-iterator/go"
	"github.com/schollz/progressbar/v3"
	metas "github.com/torabian/fireback/modules/abac/metas"
	mocks "github.com/torabian/fireback/modules/abac/mocks/Preference"
	seeders "github.com/torabian/fireback/modules/abac/seeders/Preference"
	"github.com/torabian/fireback/modules/fireback"
	"github.com/urfave/cli"
	"gopkg.in/yaml.v2"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"log"
	reflect "reflect"
	"strings"
)

var preferenceSeedersFs = &seeders.ViewsFs

func ResetPreferenceSeeders(fs *embed.FS) {
	preferenceSeedersFs = fs
}

type PreferenceEntityQs struct {
	Timezone fireback.QueriableField `cli:"timezone" table:"preference" column:"timezone" qs:"timezone"`
}

func (x *PreferenceEntityQs) GetQuery() string {
	return fireback.GenerateQueryStringStyle(reflect.ValueOf(x), "")
}

var PreferenceQsFlags = []cli.Flag{
	&cli.StringFlag{
		Name:  "timezone",
		Usage: "",
	},
}

type PreferenceEntity struct {
	// Defines the visibility of the record in the table.
	// Visibility is a detailed topic, you can check all of the visibility values in fireback/visibility.go
	// by default, visibility of record are 0, means they are protected by the workspace
	// which are being created, and visible to every member of the workspace
	Visibility fireback.String `json:"visibility,omitempty" yaml:"visibility,omitempty" xml:"visibility,omitempty"`
	// The unique-id of the workspace which content belongs to. Upon creation this will be designated
	// to the selected workspace by user, if they have write access. You can change this value
	// or prevent changes to it manually (on root features for example modifying other workspace)
	WorkspaceId fireback.String `json:"workspaceId,omitempty" xml:"workspaceId,omitempty" yaml:"workspaceId,omitempty"`
	// The unique-id of the parent table, which this record is being linked to.
	// used internally for making relations in fireback, generally does not need manual changes
	// or modification by the developer or user. For example, if you have a object inside an object
	// the unique-id of the parent will be written in the child.
	LinkerId fireback.String `json:"linkerId,omitempty" xml:"linkerId,omitempty" yaml:"linkerId,omitempty"`
	// Used for recursive or parent-child operations. Some tables, are having nested relations,
	// and this field makes the table self refrenceing. ParentId needs to exist in the table before
	// creating of modifying a record.
	ParentId fireback.String `json:"parentId,omitempty" xml:"parentId,omitempty" yaml:"parentId,omitempty"`
	// Makes a field deletable. Some records should not be deletable at all.
	// default it's true.
	IsDeletable *bool `json:"isDeletable,omitempty" xml:"isDeletable,omitempty" yaml:"isDeletable,omitempty" gorm:"default:true"`
	// Makes a field updatable. Some records should not be updatable at all.
	// default it's true.
	IsUpdatable *bool `json:"isUpdatable,omitempty" xml:"isUpdatable,omitempty" yaml:"isUpdatable,omitempty" gorm:"default:true"`
	// The unique-id of the user which is creating the record, or the record belongs to.
	// Administration might want to change this to any user, by default Fireback fills
	// it to the current authenticated user.
	UserId fireback.String `json:"userId,omitempty" xml:"userId,omitempty" yaml:"userId,omitempty"`
	// General mechanism to rank the elements. From code perspective, it's just a number,
	// but you can sort it based on any logic for records to make a ranking, sorting.
	// they should not be unique across a table.
	Rank fireback.Int64 `json:"rank,omitempty" yaml:"rank,omitempty" xml:"rank,omitempty" gorm:"type:int;name:rank"`
	// Primary numeric key in the database. This value is not meant to be exported to public
	// or be used to access data at all. Rather a mechanism of indexing columns internally
	// or cursor pagination in future releases of fireback, or better search performance.
	ID uint `gorm:"primaryKey;autoIncrement" json:"-" yaml:"-" xml:"-"`
	// Unique id of the record across the table. This value will be accessed from public APIs,
	// and many other places intead of numeric ID property.
	// Upon generation, a UUID automatically is being assigned, and if user has specified the
	// Unique id in the post body, it will be used. This mechanism allows to manage unsaved
	// content on front-end much easier than requiring parent to exists first.
	UniqueId string `json:"uniqueId,omitempty" xml:"uniqueId,omitempty" gorm:"unique;not null;size:100;" yaml:"uniqueId,omitempty"`
	// The time that the record has been created in nano-seconds.
	// the field will be automatically populated by gorm orm.
	Created int64 `json:"created,omitempty" xml:"created,omitempty" yaml:"created,omitempty" gorm:"autoUpdateTime:nano"`
	// The time that the record has been updated in nano-seconds.
	// the field will be automatically populated by gorm orm.
	Updated int64 `json:"updated,omitempty" xml:"updated,omitempty" yaml:"updated,omitempty"`
	// The time that the record has been deleted softly (means the data still exists in database, but no longer visible to any feature) in nano seconds
	// you need to make sure check this field if writing custom sql queries.
	// the field will be automatically populated by gorm orm.
	Deleted int64 `json:"deleted,omitempty" xml:"deleted,omitempty" yaml:"deleted,omitempty"`
	// Record creation date time formatting based on locale of the headers, or other
	// possible factors.
	CreatedFormatted string `json:"createdFormatted,omitempty" xml:"createdFormatted,omitempty" yaml:"createdFormatted,omitempty" sql:"-" gorm:"-"`
	// Record update date time formatting based on locale of the headers, or other
	// possible factors.
	UpdatedFormatted string              `json:"updatedFormatted,omitempty" xml:"updatedFormatted,omitempty" yaml:"updatedFormatted,omitempty" sql:"-" gorm:"-"`
	Timezone         string              `json:"timezone" xml:"timezone" yaml:"timezone"        `
	Children         []*PreferenceEntity `csv:"-" gorm:"-" sql:"-" json:"children,omitempty" xml:"children,omitempty"  yaml:"children,omitempty"`
	LinkedTo         *PreferenceEntity   `csv:"-" yaml:"-" gorm:"-" json:"-" sql:"-" xml:"-"`
}

func PreferenceEntityStream(q fireback.QueryDSL) (chan []*PreferenceEntity, *fireback.QueryResultMeta, error) {
	cn := make(chan []*PreferenceEntity)
	q.ItemsPerPage = 50
	q.StartIndex = 0
	_, qrm, err := PreferenceActions.Query(q)
	if err != nil {
		return nil, nil, err
	}
	go func() {
		defer close(cn)
		for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
			items, _, _ := PreferenceActions.Query(q)
			i += q.ItemsPerPage
			q.StartIndex = i
			cn <- items
		}
	}()
	return cn, qrm, nil
}

type PreferenceEntityList struct {
	Items []*PreferenceEntity
}

func NewPreferenceEntityList(items []*PreferenceEntity) *PreferenceEntityList {
	return &PreferenceEntityList{
		Items: items,
	}
}
func (x *PreferenceEntityList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *PreferenceEntityList) ToTree() *fireback.TreeOperation[PreferenceEntity] {
	return fireback.NewTreeOperation(
		x.Items,
		func(t *PreferenceEntity) string {
			if !t.ParentId.Valid {
				return ""
			}
			return t.ParentId.String
		},
		func(t *PreferenceEntity) string {
			return t.UniqueId
		},
	)
}

var PreferencePreloadRelations []string = []string{}

type preferenceActionsSig struct {
	Update         func(query fireback.QueryDSL, dto *PreferenceEntity) (*PreferenceEntity, *fireback.IError)
	Create         func(dto *PreferenceEntity, query fireback.QueryDSL) (*PreferenceEntity, *fireback.IError)
	Upsert         func(dto *PreferenceEntity, query fireback.QueryDSL) (*PreferenceEntity, *fireback.IError)
	SeederInit     func() *PreferenceEntity
	Remove         func(query fireback.QueryDSL) (int64, *fireback.IError)
	MultiInsert    func(dtos []*PreferenceEntity, query fireback.QueryDSL) ([]*PreferenceEntity, *fireback.IError)
	GetOne         func(query fireback.QueryDSL) (*PreferenceEntity, *fireback.IError)
	GetByWorkspace func(query fireback.QueryDSL) (*PreferenceEntity, *fireback.IError)
	Query          func(query fireback.QueryDSL) ([]*PreferenceEntity, *fireback.QueryResultMeta, error)
}

var PreferenceActions preferenceActionsSig = preferenceActionsSig{
	Update:         PreferenceActionUpdateFn,
	Create:         PreferenceActionCreateFn,
	Upsert:         PreferenceActionUpsertFn,
	Remove:         PreferenceActionRemoveFn,
	SeederInit:     PreferenceActionSeederInitFn,
	MultiInsert:    PreferenceMultiInsertFn,
	GetOne:         PreferenceActionGetOneFn,
	GetByWorkspace: PreferenceActionGetByWorkspaceFn,
	Query:          PreferenceActionQueryFn,
}

func PreferenceActionUpsertFn(dto *PreferenceEntity, query fireback.QueryDSL) (*PreferenceEntity, *fireback.IError) {
	return nil, nil
}

var PREFERENCE_EVENT_CREATED = "preference.created"
var PREFERENCE_EVENT_UPDATED = "preference.updated"
var PREFERENCE_EVENT_DELETED = "preference.deleted"
var PREFERENCE_EVENTS = []string{
	PREFERENCE_EVENT_CREATED,
	PREFERENCE_EVENT_UPDATED,
	PREFERENCE_EVENT_DELETED,
}

type PreferenceFieldMap struct {
	Timezone fireback.TranslatedString `yaml:"timezone"`
}

var PreferenceEntityMetaConfig map[string]int64 = map[string]int64{}
var PreferenceEntityJsonSchema = fireback.ExtractEntityFields(reflect.ValueOf(&PreferenceEntity{}))

func entityPreferenceFormatter(dto *PreferenceEntity, query fireback.QueryDSL) {
	if dto == nil {
		return
	}
	if dto.Created > 0 {
		dto.CreatedFormatted = fireback.FormatDateBasedOnQuery(dto.Created, query)
	}
	if dto.Updated > 0 {
		dto.CreatedFormatted = fireback.FormatDateBasedOnQuery(dto.Updated, query)
	}
}
func PreferenceActionSeederMultiple(query fireback.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	batchSize := 100
	bar := progressbar.Default(int64(count))
	// Collect entities in batches
	var entitiesBatch []*PreferenceEntity
	for i := 1; i <= count; i++ {
		entity := PreferenceActions.SeederInit()
		entitiesBatch = append(entitiesBatch, entity)
		// When batch size is reached, perform the batch insert
		if len(entitiesBatch) == batchSize || i == count {
			// Insert batch
			_, err := PreferenceActions.MultiInsert(entitiesBatch, query)
			if err == nil {
				successInsert += len(entitiesBatch)
			} else {
				fmt.Println(err)
				failureInsert += len(entitiesBatch)
			}
			// Clear the batch after insert
			entitiesBatch = nil
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func PreferenceActionSeeder(query fireback.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	bar := progressbar.Default(int64(count))
	for i := 1; i <= count; i++ {
		entity := PreferenceActions.SeederInit()
		_, err := PreferenceActions.Create(entity, query)
		if err == nil {
			successInsert++
		} else {
			fmt.Println(err)
			failureInsert++
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func (x *PreferenceEntity) Seeder() string {
	obj := PreferenceActions.SeederInit()
	v, _ := json.MarshalIndent(obj, "", "  ")
	return string(v)
}
func PreferenceActionSeederInitFn() *PreferenceEntity {
	entity := &PreferenceEntity{}
	return entity
}
func PreferenceAssociationCreate(dto *PreferenceEntity, query fireback.QueryDSL) error {
	return nil
}

/**
* These kind of content are coming from another entity, which is indepndent module
* If we want to create them, we need to do it before. This is not association.
**/
func PreferenceRelationContentCreate(dto *PreferenceEntity, query fireback.QueryDSL) error {
	return nil
}
func PreferenceRelationContentUpdate(dto *PreferenceEntity, query fireback.QueryDSL) error {
	return nil
}
func PreferencePolyglotUpdateHandler(dto *PreferenceEntity, query fireback.QueryDSL) {
	if dto == nil {
		return
	}
}

/**
 * This will be validating your entity fully. Important note is that, you add validate:* tag
 * in your entity, it will automatically work here. For slices inside entity, make sure you add
 * extra line of AppendSliceErrors, otherwise they won't be detected
 */
func PreferenceValidator(dto *PreferenceEntity, isPatch bool) *fireback.IError {
	err := fireback.CommonStructValidatorPointer(dto, isPatch)
	return err
}

// Creates a set of natural language queries, which can be used with
// AI tools to create content or help with some tasks
var PreferenceAskCmd cli.Command = cli.Command{
	Name:  "nlp",
	Usage: "Set of natural language queries which helps creating content or data",
	Subcommands: []cli.Command{
		{
			Name:  "sample",
			Usage: "Asks for generating sample by giving an example data",
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:  "format",
					Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
					Value: "yaml",
				},
				&cli.IntFlag{
					Name:  "count",
					Usage: "How many samples to ask",
					Value: 30,
				},
			},
			Action: func(c *cli.Context) error {
				v := &PreferenceEntity{}
				format := c.String("format")
				request := "\033[1m" + `
I need you to create me an array of exact signature as the example given below,
with at least ` + fmt.Sprint(c.String("count")) + ` items, mock the content with few words, and guess the possible values
based on the common sense. I need the output to be a valid ` + format + ` file.
Make sure you wrap the entire array in 'items' field. Also before that, I provide some explanation of each field:
Timezone: (type: string) Description: 
And here is the actual object signature:
` + v.Seeder() + `
`
				fmt.Println(request)
				return nil
			},
		},
	},
}

func PreferenceEntityPreSanitize(dto *PreferenceEntity, query fireback.QueryDSL) {
}
func PreferenceEntityBeforeCreateAppend(dto *PreferenceEntity, query fireback.QueryDSL) {
	if dto.UniqueId == "" {
		dto.UniqueId = fireback.UUID()
	}
	dto.WorkspaceId = fireback.NewString(query.WorkspaceId)
	dto.UserId = fireback.NewString(query.UserId)
	PreferenceRecursiveAddUniqueId(dto, query)
}
func PreferenceRecursiveAddUniqueId(dto *PreferenceEntity, query fireback.QueryDSL) {
}

/*
*
	Batch inserts, do not have all features that create
	operation does. Use it with unnormalized content,
	or read the source code carefully.
  This is not marked as an action, because it should not be available publicly
  at this moment.
*
*/
func PreferenceMultiInsertFn(dtos []*PreferenceEntity, query fireback.QueryDSL) ([]*PreferenceEntity, *fireback.IError) {
	if len(dtos) > 0 {
		for index := range dtos {
			PreferenceEntityPreSanitize(dtos[index], query)
			PreferenceEntityBeforeCreateAppend(dtos[index], query)
		}
		var dbref *gorm.DB = nil
		if query.Tx == nil {
			dbref = fireback.GetDbRef()
		} else {
			dbref = query.Tx
		}
		query.Tx = dbref
		err := dbref.Create(&dtos).Error
		if err != nil {
			return nil, fireback.GormErrorToIError(err)
		}
	}
	return dtos, nil
}
func PreferenceActionBatchCreateFn(dtos []*PreferenceEntity, query fireback.QueryDSL) ([]*PreferenceEntity, *fireback.IError) {
	if dtos != nil && len(dtos) > 0 {
		items := []*PreferenceEntity{}
		for _, item := range dtos {
			s, err := PreferenceActions.Create(item, query)
			if err != nil {
				return nil, err
			}
			items = append(items, s)
		}
		return items, nil
	}
	return dtos, nil
}
func PreferenceDeleteEntireChildren(query fireback.QueryDSL, dto *PreferenceEntity) *fireback.IError {
	// intentionally removed this. It's hard to implement it, and probably wrong without
	// proper on delete cascade
	return nil
}
func PreferenceActionCreateFn(dto *PreferenceEntity, query fireback.QueryDSL) (*PreferenceEntity, *fireback.IError) {
	// 1. Validate always
	if iError := PreferenceValidator(dto, false); iError != nil {
		return nil, iError
	}
	// 1.5 Sanitize the content coming of the front-end
	PreferenceEntityPreSanitize(dto, query)
	// 2. Append the necessary information about user, workspace
	PreferenceEntityBeforeCreateAppend(dto, query)
	// 3. Create other entities if we want select from them
	PreferenceRelationContentCreate(dto, query)
	// 4. Create the entity
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = fireback.GetDbRef()
	} else {
		dbref = query.Tx
	}
	query.Tx = dbref
	err := dbref.Create(&dto).Error
	if err != nil {
		err := fireback.GormErrorToIError(err)
		return nil, err
	}
	// 5. Create sub entities, objects or arrays, association to other entities
	PreferenceAssociationCreate(dto, query)
	// 6. Fire the event into system
	actionEvent, eventErr := NewPreferenceCreatedEvent(dto, &query)
	if actionEvent != nil && eventErr == nil {
		fireback.GetEventBusInstance().FireEvent(query, *actionEvent)
	} else {
		log.Default().Panicln("Creating event has failed for %v", dto)
	}
	/*
		event.MustFire(PREFERENCE_EVENT_CREATED, event.M{
			"entity":   dto,
			"entityKey": fireback.GetTypeString(&PreferenceEntity{}),
			"target":   "workspace",
			"unqiueId": query.WorkspaceId,
		})
	*/
	return dto, nil
}
func PreferenceActionGetOneFn(query fireback.QueryDSL) (*PreferenceEntity, *fireback.IError) {
	refl := reflect.ValueOf(&PreferenceEntity{})
	item, err := fireback.GetOneEntity[PreferenceEntity](query, refl)
	entityPreferenceFormatter(item, query)
	return item, err
}
func PreferenceActionGetByWorkspaceFn(query fireback.QueryDSL) (*PreferenceEntity, *fireback.IError) {
	refl := reflect.ValueOf(&PreferenceEntity{})
	item, err := fireback.GetOneByWorkspaceEntity[PreferenceEntity](query, refl)
	entityPreferenceFormatter(item, query)
	return item, err
}
func PreferenceActionQueryFn(query fireback.QueryDSL) ([]*PreferenceEntity, *fireback.QueryResultMeta, error) {
	refl := reflect.ValueOf(&PreferenceEntity{})
	items, meta, err := fireback.QueryEntitiesPointer[PreferenceEntity](query, refl)
	for _, item := range items {
		entityPreferenceFormatter(item, query)
	}
	return items, meta, err
}

var preferenceMemoryItems []*PreferenceEntity = []*PreferenceEntity{}

func PreferenceEntityIntoMemory() {
	q := fireback.QueryDSL{
		ItemsPerPage: 500,
		StartIndex:   0,
	}
	_, qrm, _ := PreferenceActions.Query(q)
	for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
		items, _, _ := PreferenceActions.Query(q)
		preferenceMemoryItems = append(preferenceMemoryItems, items...)
		i += q.ItemsPerPage
		q.StartIndex = i
	}
}
func PreferenceMemGet(id uint) *PreferenceEntity {
	for _, item := range preferenceMemoryItems {
		if item.ID == id {
			return item
		}
	}
	return nil
}
func PreferenceMemJoin(items []uint) []*PreferenceEntity {
	res := []*PreferenceEntity{}
	for _, item := range items {
		v := PreferenceMemGet(item)
		if v != nil {
			res = append(res, v)
		}
	}
	return res
}
func PreferenceUpdateExec(dbref *gorm.DB, query fireback.QueryDSL, fields *PreferenceEntity) (*PreferenceEntity, *fireback.IError) {
	uniqueId := fields.UniqueId
	query.TriggerEventName = PREFERENCE_EVENT_UPDATED
	PreferenceEntityPreSanitize(fields, query)
	var item PreferenceEntity
	var itemRefetched PreferenceEntity
	// If the entity is distinct by workspace, then the Query.WorkspaceId
	// which is selected is being used as the condition for create or update
	// if not, the unique Id is being used
	cond2 := &PreferenceEntity{UniqueId: uniqueId}
	q := dbref.
		Where(cond2).
		FirstOrCreate(&item)
	err := q.UpdateColumns(fields).Error
	if err != nil {
		return nil, fireback.GormErrorToIError(err)
	}
	query.Tx = dbref
	PreferenceRelationContentUpdate(fields, query)
	PreferencePolyglotUpdateHandler(fields, query)
	if ero := PreferenceDeleteEntireChildren(query, fields); ero != nil {
		return nil, ero
	}
	// @meta(update has many)
	err = dbref.
		Preload(clause.Associations).
		Where(&PreferenceEntity{UniqueId: uniqueId}).
		First(&itemRefetched).Error
	if err != nil {
		return nil, fireback.GormErrorToIError(err)
	}
	actionEvent, eventErr := NewPreferenceUpdatedEvent(fields, &query)
	if actionEvent != nil && eventErr == nil {
		fireback.GetEventBusInstance().FireEvent(query, *actionEvent)
	} else {
		log.Default().Panicln("Updating event has failed for %v", fields)
	}
	/*
	   event.MustFire(query.TriggerEventName, event.M{
	     "entity":   &item,
	     "target":   "workspace",
	     "unqiueId": query.WorkspaceId,
	   })*/
	return &itemRefetched, nil
}
func PreferenceActionUpdateFn(query fireback.QueryDSL, fields *PreferenceEntity) (*PreferenceEntity, *fireback.IError) {
	if fields == nil {
		return nil, fireback.Create401Error(&fireback.FirebackMessages.BodyIsMissing, []string{})
	}
	// 1. Validate always
	if iError := PreferenceValidator(fields, true); iError != nil {
		return nil, iError
	}
	// Let's not add this. I am not sure of the consequences
	// PreferenceRecursiveAddUniqueId(fields, query)
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = fireback.GetDbRef()
		var item *PreferenceEntity
		vf := dbref.Transaction(func(tx *gorm.DB) error {
			dbref = tx
			var err *fireback.IError
			item, err = PreferenceUpdateExec(dbref, query, fields)
			if err == nil {
				return nil
			} else {
				return err
			}
		})
		return item, fireback.CastToIError(vf)
	} else {
		dbref = query.Tx
		return PreferenceUpdateExec(dbref, query, fields)
	}
}

var PreferenceWipeCmd cli.Command = cli.Command{
	Name:  "wipe",
	Usage: "Wipes entire preferences ",
	Action: func(c *cli.Context) error {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PREFERENCE_DELETE},
		})
		count, _ := PreferenceActionWipeClean(query)
		fmt.Println("Removed", count, "of entities")
		return nil
	},
}

func PreferenceActionRemoveFn(query fireback.QueryDSL) (int64, *fireback.IError) {
	refl := reflect.ValueOf(&PreferenceEntity{})
	query.ActionRequires = []fireback.PermissionInfo{PERM_ROOT_PREFERENCE_DELETE}
	return fireback.RemoveEntity[PreferenceEntity](query, refl)
}
func PreferenceActionWipeClean(query fireback.QueryDSL) (int64, error) {
	var err error
	var count int64 = 0
	{
		subCount, subErr := fireback.WipeCleanEntity[PreferenceEntity]()
		if subErr != nil {
			fmt.Println("Error while wiping 'PreferenceEntity'", subErr)
			return count, subErr
		} else {
			count += subCount
		}
	}
	return count, err
}
func PreferenceActionBulkUpdate(
	query fireback.QueryDSL, dto *fireback.BulkRecordRequest[PreferenceEntity]) (
	*fireback.BulkRecordRequest[PreferenceEntity], *fireback.IError,
) {
	result := []*PreferenceEntity{}
	err := fireback.GetDbRef().Transaction(func(tx *gorm.DB) error {
		query.Tx = tx
		for _, record := range dto.Records {
			item, err := PreferenceActions.Update(query, record)
			if err != nil {
				return err
			} else {
				result = append(result, item)
			}
		}
		return nil
	})
	if err == nil {
		return dto, nil
	}
	return nil, err.(*fireback.IError)
}
func (x *PreferenceEntity) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}

var PreferenceEntityMeta = fireback.TableMetaData{
	EntityName:    "Preference",
	ExportKey:     "preferences",
	TableNameInDb: "preference_entities",
	EntityObject:  &PreferenceEntity{},
	ExportStream:  PreferenceActionExportT,
	ImportQuery:   PreferenceActionImport,
}

func PreferenceActionExport(
	query fireback.QueryDSL,
) (chan []byte, *fireback.IError) {
	return fireback.YamlExporterChannel[PreferenceEntity](query, PreferenceActions.Query, PreferencePreloadRelations)
}
func PreferenceActionExportT(
	query fireback.QueryDSL,
) (chan []interface{}, *fireback.IError) {
	return fireback.YamlExporterChannelT[PreferenceEntity](query, PreferenceActions.Query, PreferencePreloadRelations)
}
func PreferenceActionImport(
	dto interface{}, query fireback.QueryDSL,
) *fireback.IError {
	var json = jsoniter.ConfigCompatibleWithStandardLibrary
	var content PreferenceEntity
	cx, err2 := json.Marshal(dto)
	if err2 != nil {
		return fireback.Create401Error(&fireback.FirebackMessages.InvalidContent, []string{})
	}
	json.Unmarshal(cx, &content)
	_, err := PreferenceActions.Create(&content, query)
	return err
}

var PreferenceCommonCliFlags = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "timezone",
		Required: false,
		Usage:    `timezone (string)`,
	},
}
var PreferenceCommonInteractiveCliFlags = []fireback.CliInteractiveFlag{
	{
		Name:        "timezone",
		StructField: "Timezone",
		Required:    false,
		Recommended: false,
		Usage:       `timezone`,
		Type:        "string",
	},
}
var PreferenceCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "timezone",
		Required: false,
		Usage:    `timezone (string)`,
	},
}
var PreferenceCreateCmd cli.Command = PREFERENCE_ACTION_POST_ONE.ToCli()
var PreferenceCreateInteractiveCmd cli.Command = cli.Command{
	Name:  "ic",
	Usage: "Creates a new entity, using requied fields in an interactive name",
	Flags: []cli.Flag{
		&cli.BoolFlag{
			Name:  "all",
			Usage: "Interactively asks for all inputs, not only required ones",
		},
	},
	Action: func(c *cli.Context) {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PREFERENCE_CREATE},
		})
		entity := &PreferenceEntity{}
		fireback.PopulateInteractively(entity, c, PreferenceCommonInteractiveCliFlags)
		if entity, err := PreferenceActions.Create(entity, query); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := yaml.Marshal(entity)
			fmt.Println(fireback.FormatYamlKeys(string(f)))
		}
	},
}
var PreferenceUpdateCmd cli.Command = cli.Command{
	Name:    "update",
	Aliases: []string{"u"},
	Flags:   PreferenceCommonCliFlagsOptional,
	Usage:   "Updates entity by passing the parameters",
	Action: func(c *cli.Context) error {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PREFERENCE_UPDATE},
		})
		entity := CastPreferenceFromCli(c)
		if entity, err := PreferenceActions.Update(query, entity); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := json.MarshalIndent(entity, "", "  ")
			fmt.Println(string(f))
		}
		return nil
	},
}

func (x *PreferenceEntity) FromCli(c *cli.Context) *PreferenceEntity {
	return CastPreferenceFromCli(c)
}
func CastPreferenceFromCli(c *cli.Context) *PreferenceEntity {
	template := &PreferenceEntity{}
	if c.IsSet("uid") {
		template.UniqueId = c.String("uid")
	}
	if c.IsSet("pid") {
		template.ParentId = fireback.NewStringAutoNull(c.String("pid"))
	}
	if c.IsSet("timezone") {
		template.Timezone = c.String("timezone")
	}
	return template
}
func PreferenceSyncSeederFromFs(fsRef *embed.FS, fileNames []string, q fireback.QueryDSL) {
	fireback.SeederFromFSImport(
		q,
		PreferenceActions.Create,
		reflect.ValueOf(&PreferenceEntity{}).Elem(),
		fsRef,
		fileNames,
		true,
	)
}
func PreferenceSyncSeeders() {
	fireback.SeederFromFSImport(
		fireback.QueryDSL{WorkspaceId: fireback.USER_SYSTEM},
		PreferenceActions.Create,
		reflect.ValueOf(&PreferenceEntity{}).Elem(),
		preferenceSeedersFs,
		[]string{},
		true,
	)
}
func PreferenceImportMocks() {
	fireback.SeederFromFSImport(
		fireback.QueryDSL{},
		PreferenceActions.Create,
		reflect.ValueOf(&PreferenceEntity{}).Elem(),
		&mocks.ViewsFs,
		[]string{},
		false,
	)
}
func PreferenceWriteQueryMock(ctx fireback.MockQueryContext) {
	for _, lang := range ctx.Languages {
		itemsPerPage := 9999
		if ctx.ItemsPerPage > 0 {
			itemsPerPage = ctx.ItemsPerPage
		}
		f := fireback.QueryDSL{ItemsPerPage: itemsPerPage, Language: lang, WithPreloads: ctx.WithPreloads, Deep: true}
		items, count, _ := PreferenceActions.Query(f)
		result := fireback.QueryEntitySuccessResult(f, items, count)
		fireback.WriteMockDataToFile(lang, "", "Preference", result)
	}
}
func PreferencesActionQueryString(keyword string, page int) ([]string, *fireback.QueryResultMeta, error) {
	searchFields := []string{
		`unique_id %"{keyword}"%`,
		`name %"{keyword}"%`,
	}
	m := func(item *PreferenceEntity) string {
		label := item.UniqueId
		// if item.Name != nil {
		// 	label += " >>> " + *item.Name
		// }
		return label
	}
	query := fireback.QueryStringCastCli(searchFields, keyword, page)
	items, meta, err := PreferenceActions.Query(query)
	stringItems := []string{}
	for _, item := range items {
		label := m(item)
		stringItems = append(stringItems, label)
	}
	return stringItems, meta, err
}

var PreferenceDevCommands = []cli.Command{
	PreferenceWipeCmd,
	{
		Name:  "mock",
		Usage: "Generates mock records based on the entity definition",
		Flags: []cli.Flag{
			&cli.IntFlag{
				Name:  "count",
				Usage: "how many activation key do you need to be generated and stored in database",
				Value: 10,
			},
			&cli.BoolFlag{
				Name:  "batch",
				Usage: "Multiple insert into database mode. Might miss children and relations at the moment",
			},
		},
		Action: func(c *cli.Context) error {
			query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
				ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PREFERENCE_CREATE},
			})
			if c.Bool("batch") {
				PreferenceActionSeederMultiple(query, c.Int("count"))
			} else {
				PreferenceActionSeeder(query, c.Int("count"))
			}
			return nil
		},
	},
	{
		Name:    "init",
		Aliases: []string{"i"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Creates a basic seeder file for you, based on the definition module we have. You can populate this file as an example",
		Action: func(c *cli.Context) error {
			seed := PreferenceActions.SeederInit()
			fireback.CommonInitSeeder(strings.TrimSpace(c.String("format")), seed)
			return nil
		},
	},
	cli.Command{
		Name:  "mlist",
		Usage: "Prints the list of embedded mocks into the app",
		Action: func(c *cli.Context) error {
			if entity, err := fireback.GetSeederFilenames(&mocks.ViewsFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "msync",
		Usage: "Tries to sync mocks into the system",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportEmbedCmd(c,
				PreferenceActions.Create,
				reflect.ValueOf(&PreferenceEntity{}).Elem(),
				&mocks.ViewsFs,
			)
			return nil
		},
	},
}
var PreferenceImportExportCommands = []cli.Command{
	{
		Name:    "validate",
		Aliases: []string{"v"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "file",
				Usage: "Validates an import file, such as yaml, json, csv, and gives some insights how the after import it would look like",
				Value: "preference-seeder-preference.yml",
				// Uncomment before publish, they need to specify
				// Required: true,
			},
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Reads a yaml file containing an array of preferences, you can run this to validate if your import file is correct, and how it would look like after import",
		Action: func(c *cli.Context) error {
			data := &[]PreferenceEntity{}
			fireback.ReadYamlFile(c.String("file"), data)
			fmt.Println(data)
			return nil
		},
	},
	cli.Command{
		Name:  "slist",
		Usage: "Prints the list of files attached to this module for syncing or bootstrapping project",
		Action: func(c *cli.Context) error {
			if entity, err := fireback.GetSeederFilenames(preferenceSeedersFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "ssync",
		Usage: "Tries to sync the embedded content into the database, the list could be seen by 'slist' command",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportEmbedCmd(c,
				PreferenceActions.Create,
				reflect.ValueOf(&PreferenceEntity{}).Elem(),
				preferenceSeedersFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:    "export",
		Aliases: []string{"e"},
		Flags: append(fireback.CommonQueryFlags,
			&cli.StringFlag{
				Name:     "file",
				Usage:    "The address of file you want the csv/yaml/json be exported to",
				Required: true,
			}),
		Usage: "Exports a query results into the csv/yaml/json format",
		Action: func(c *cli.Context) error {
			return fireback.CommonCliExportCmd2(c,
				PreferenceEntityStream,
				reflect.ValueOf(&PreferenceEntity{}).Elem(),
				c.String("file"),
				&metas.MetaFs,
				"PreferenceFieldMap.yml",
				PreferencePreloadRelations,
			)
		},
	},
	cli.Command{
		Name: "import",
		Flags: append(
			append(
				fireback.CommonQueryFlags,
				&cli.StringFlag{
					Name:     "file",
					Usage:    "The address of file you want the csv be imported from",
					Required: true,
				}),
			PreferenceCommonCliFlagsOptional...,
		),
		Usage: "imports csv/yaml/json file and place it and its children into database",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportCmdAuthorized(c,
				PreferenceActions.Create,
				reflect.ValueOf(&PreferenceEntity{}).Elem(),
				c.String("file"),
				&fireback.SecurityModel{
					ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PREFERENCE_CREATE},
				},
				func() PreferenceEntity {
					v := CastPreferenceFromCli(c)
					return *v
				},
			)
			return nil
		},
	},
}
var PreferenceCliCommands []cli.Command = []cli.Command{
	PREFERENCE_ACTION_QUERY.ToCli(),
	PREFERENCE_ACTION_TABLE.ToCli(),
	PreferenceCreateCmd,
	PreferenceUpdateCmd,
	PreferenceAskCmd,
	PreferenceCreateInteractiveCmd,
	fireback.GetCommonRemoveQuery(
		reflect.ValueOf(&PreferenceEntity{}).Elem(),
		PreferenceActions.Remove,
	),
}

func PreferenceCliFn() cli.Command {
	commands := append(PreferenceImportExportCommands, PreferenceCliCommands...)
	if !fireback.GetConfig().Production {
		commands = append(commands, PreferenceDevCommands...)
	}
	return cli.Command{
		Name:        "preference",
		Description: "Preferences module actions",
		Usage:       ``,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "language",
				Value: "en",
			},
		},
		Subcommands: commands,
	}
}

var PREFERENCE_ACTION_TABLE = fireback.Module3Action{
	Name:          "table",
	ActionAliases: []string{"t"},
	Flags:         fireback.CommonQueryFlags,
	Description:   "Table formatted queries all of the entities in database based on the standard query format",
	Action:        PreferenceActions.Query,
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		fireback.CommonCliTableCmd2(c,
			PreferenceActions.Query,
			security,
			reflect.ValueOf(&PreferenceEntity{}).Elem(),
		)
		return nil
	},
}
var PREFERENCE_ACTION_QUERY = fireback.Module3Action{
	Method: "GET",
	Url:    "/preferences",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PREFERENCE_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			qs := &PreferenceEntityQs{}
			fireback.HttpQueryEntity(c, PreferenceActions.Query, qs)
		},
	},
	Format:         "QUERY",
	Action:         PreferenceActions.Query,
	ResponseEntity: &[]PreferenceEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "PreferenceEntity",
	},
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		qs := &PreferenceEntityQs{}
		fireback.CommonCliQueryCmd3(
			c,
			PreferenceActions.Query,
			security,
			qs,
		)
		return nil
	},
	CliName:       "query",
	Name:          "query",
	ActionAliases: []string{"q"},
	Flags:         append(fireback.CommonQueryFlags, PreferenceQsFlags...),
	Description:   "Queries all of the entities in database based on the standard query format (s+)",
}
var PREFERENCE_ACTION_EXPORT = fireback.Module3Action{
	Method: "GET",
	Url:    "/preferences/export",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PREFERENCE_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpStreamFileChannel(c, PreferenceActionExport)
		},
	},
	Format:         "QUERY",
	Action:         PreferenceActionExport,
	ResponseEntity: &[]PreferenceEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "PreferenceEntity",
	},
}
var PREFERENCE_ACTION_GET_ONE = fireback.Module3Action{
	Method: "GET",
	Url:    "/preference/:uniqueId",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PREFERENCE_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpGetEntity(c, PreferenceActions.GetOne)
		},
	},
	Format:         "GET_ONE",
	Action:         PreferenceActions.GetOne,
	ResponseEntity: &PreferenceEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "PreferenceEntity",
	},
}
var PREFERENCE_ACTION_POST_ONE = fireback.Module3Action{
	Name:          "create",
	ActionAliases: []string{"c"},
	Description:   "Create new preference",
	Flags:         PreferenceCommonCliFlags,
	Method:        "POST",
	Url:           "/preference",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PREFERENCE_CREATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpPostEntity(c, PreferenceActions.Create)
		},
	},
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		result, err := fireback.CliPostEntity(c, PreferenceActions.Create, security)
		fireback.HandleActionInCli(c, result, err, map[string]map[string]string{})
		return err
	},
	Action:         PreferenceActions.Create,
	Format:         "POST_ONE",
	RequestEntity:  &PreferenceEntity{},
	ResponseEntity: &PreferenceEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "PreferenceEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "PreferenceEntity",
	},
}
var PREFERENCE_ACTION_PATCH = fireback.Module3Action{
	Name:          "update",
	ActionAliases: []string{"u"},
	Flags:         PreferenceCommonCliFlagsOptional,
	Method:        "PATCH",
	Url:           "/preference",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PREFERENCE_UPDATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntity(c, PreferenceActions.Update)
		},
	},
	Action:         PreferenceActions.Update,
	RequestEntity:  &PreferenceEntity{},
	ResponseEntity: &PreferenceEntity{},
	Format:         "PATCH_ONE",
	Out: &fireback.Module3ActionBody{
		Entity: "PreferenceEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "PreferenceEntity",
	},
}
var PREFERENCE_ACTION_PATCH_BULK = fireback.Module3Action{
	Method: "PATCH",
	Url:    "/preferences",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PREFERENCE_UPDATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntities(c, PreferenceActionBulkUpdate)
		},
	},
	Action:         PreferenceActionBulkUpdate,
	Format:         "PATCH_BULK",
	RequestEntity:  &fireback.BulkRecordRequest[PreferenceEntity]{},
	ResponseEntity: &fireback.BulkRecordRequest[PreferenceEntity]{},
	Out: &fireback.Module3ActionBody{
		Entity: "PreferenceEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "PreferenceEntity",
	},
}
var PREFERENCE_ACTION_DELETE = fireback.Module3Action{
	Method: "DELETE",
	Url:    "/preference",
	Format: "DELETE_DSL",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PREFERENCE_DELETE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpRemoveEntity(c, PreferenceActions.Remove)
		},
	},
	Action:         PreferenceActions.Remove,
	RequestEntity:  &fireback.DeleteRequest{},
	ResponseEntity: &fireback.DeleteResponse{},
	TargetEntity:   &PreferenceEntity{},
}

/**
 *	Override this function on PreferenceEntityHttp.go,
 *	In order to add your own http
 **/
var AppendPreferenceRouter = func(r *[]fireback.Module3Action) {}

func GetPreferenceModule3Actions() []fireback.Module3Action {
	routes := []fireback.Module3Action{
		PREFERENCE_ACTION_QUERY,
		PREFERENCE_ACTION_EXPORT,
		PREFERENCE_ACTION_GET_ONE,
		PREFERENCE_ACTION_POST_ONE,
		PREFERENCE_ACTION_PATCH,
		PREFERENCE_ACTION_PATCH_BULK,
		PREFERENCE_ACTION_DELETE,
	}
	// Append user defined functions
	AppendPreferenceRouter(&routes)
	return routes
}

var PERM_ROOT_PREFERENCE = fireback.PermissionInfo{
	CompleteKey: "root.modules.abac.preference.*",
	Name:        "Entire preference actions (*)",
	Description: "",
}
var PERM_ROOT_PREFERENCE_DELETE = fireback.PermissionInfo{
	CompleteKey: "root.modules.abac.preference.delete",
	Name:        "Delete preference",
	Description: "",
}
var PERM_ROOT_PREFERENCE_CREATE = fireback.PermissionInfo{
	CompleteKey: "root.modules.abac.preference.create",
	Name:        "Create preference",
	Description: "",
}
var PERM_ROOT_PREFERENCE_UPDATE = fireback.PermissionInfo{
	CompleteKey: "root.modules.abac.preference.update",
	Name:        "Update preference",
	Description: "",
}
var PERM_ROOT_PREFERENCE_QUERY = fireback.PermissionInfo{
	CompleteKey: "root.modules.abac.preference.query",
	Name:        "Query preference",
	Description: "",
}
var ALL_PREFERENCE_PERMISSIONS = []fireback.PermissionInfo{
	PERM_ROOT_PREFERENCE_DELETE,
	PERM_ROOT_PREFERENCE_CREATE,
	PERM_ROOT_PREFERENCE_UPDATE,
	PERM_ROOT_PREFERENCE_QUERY,
	PERM_ROOT_PREFERENCE,
}

func NewPreferenceCreatedEvent(
	payload *PreferenceEntity,
	query *fireback.QueryDSL,
) (*fireback.Event, error) {
	event := &fireback.Event{
		Name:    "PreferenceCreated",
		Payload: payload,
		Security: &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{
				PERM_ROOT_PREFERENCE_QUERY,
			},
		},
		CacheKey: "*abac.PreferenceEntity",
	}
	// Apply the source of the event based on querydsl
	fireback.ApplyQueryDslContextToEvent(event, *query)
	return event, nil
}
func NewPreferenceUpdatedEvent(
	payload *PreferenceEntity,
	query *fireback.QueryDSL,
) (*fireback.Event, error) {
	event := &fireback.Event{
		Name:    "PreferenceUpdated",
		Payload: payload,
		Security: &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{
				PERM_ROOT_PREFERENCE_QUERY,
			},
		},
		CacheKey: "*abac.PreferenceEntity",
	}
	// Apply the source of the event based on querydsl
	fireback.ApplyQueryDslContextToEvent(event, *query)
	return event, nil
}

var PreferenceEntityBundle = fireback.EntityBundle{
	Permissions: ALL_PREFERENCE_PERMISSIONS,
	// Cli command has been exluded, since we use module to wrap all the entities
	// to be more easier to wrap up.
	// Create your own bundle if you need with Cli
	//CliCommands: []cli.Command{
	//	PreferenceCliFn(),
	//},
	Actions:      GetPreferenceModule3Actions(),
	MockProvider: PreferenceImportMocks,
	AutoMigrationEntities: []interface{}{
		&PreferenceEntity{},
	},
}
