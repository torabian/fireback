package abac

/*
*	Generated by fireback 1.2.3
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"encoding/json"
	"fmt"
	"github.com/torabian/fireback/modules/fireback"
	"github.com/urfave/cli"
	"strings"
)

func CastImportRequestFromCli(c *cli.Context) *ImportRequestDto {
	template := &ImportRequestDto{}
	if c.IsSet("file") {
		template.File = c.String("file")
	}
	return template
}

var ImportRequestDtoCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "file",
		Required: false,
		Usage:    `file (string)`,
	},
}

type ImportRequestDto struct {
	File string `json:"file" xml:"file" yaml:"file"        `
}
type ImportRequestDtoList struct {
	Items []*ImportRequestDto
}

func NewImportRequestDtoList(items []*ImportRequestDto) *ImportRequestDtoList {
	return &ImportRequestDtoList{
		Items: items,
	}
}
func (x *ImportRequestDtoList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *ImportRequestDto) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	// Intentional trim (so strings lib is always imported)
	return strings.TrimSpace("")
}
func (x *ImportRequestDto) JsonPrint() {
	fmt.Println(x.Json())
	// Somehow to make the import always needed, makes no sense.
	_ = fireback.Body
}

// This is an experimental way to create new dtos, with exluding the pointers as helper.
func NewImportRequestDto(
	File string,
) ImportRequestDto {
	return ImportRequestDto{
		File: File,
	}
}
