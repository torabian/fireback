package abac

/*
*	Generated by fireback 1.2.2
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"embed"
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	jsoniter "github.com/json-iterator/go"
	"github.com/schollz/progressbar/v3"
	metas "github.com/torabian/fireback/modules/abac/metas"
	mocks "github.com/torabian/fireback/modules/abac/mocks/PassportMethod"
	seeders "github.com/torabian/fireback/modules/abac/seeders/PassportMethod"
	"github.com/torabian/fireback/modules/workspaces"
	"github.com/urfave/cli"
	"gopkg.in/yaml.v2"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"log"
	reflect "reflect"
	"strings"
)

var passportMethodSeedersFs = &seeders.ViewsFs

func ResetPassportMethodSeeders(fs *embed.FS) {
	passportMethodSeedersFs = fs
}

type PassportMethodEntityQs struct {
	Type      workspaces.QueriableField `cli:"type" table:"passport_method" column:"type" qs:"type"`
	Region    workspaces.QueriableField `cli:"region" table:"passport_method" column:"region" qs:"region"`
	ClientKey workspaces.QueriableField `cli:"client-key" table:"passport_method" column:"client_key" qs:"clientKey"`
}

func (x *PassportMethodEntityQs) GetQuery() string {
	return workspaces.GenerateQueryStringStyle(reflect.ValueOf(x), "")
}

var PassportMethodQsFlags = []cli.Flag{
	&cli.StringFlag{
		Name:  "type",
		Usage: "",
	},
	&cli.StringFlag{
		Name:  "region",
		Usage: "The region which would be using this method of passports for authentication. In Fireback open-source, only 'global' is available.",
	},
	&cli.StringFlag{
		Name:  "client-key",
		Usage: "Client key for those methods such as 'google' which require oauth client key",
	},
}

type PassportMethodEntity struct {
	// Defines the visibility of the record in the table.
	// Visibility is a detailed topic, you can check all of the visibility values in workspaces/visibility.go
	// by default, visibility of record are 0, means they are protected by the workspace
	// which are being created, and visible to every member of the workspace
	Visibility workspaces.String `json:"visibility,omitempty" yaml:"visibility,omitempty" xml:"visibility,omitempty"`
	// The unique-id of the workspace which content belongs to. Upon creation this will be designated
	// to the selected workspace by user, if they have write access. You can change this value
	// or prevent changes to it manually (on root features for example modifying other workspace)
	WorkspaceId workspaces.String `json:"workspaceId,omitempty" xml:"workspaceId,omitempty" yaml:"workspaceId,omitempty"`
	// The unique-id of the parent table, which this record is being linked to.
	// used internally for making relations in fireback, generally does not need manual changes
	// or modification by the developer or user. For example, if you have a object inside an object
	// the unique-id of the parent will be written in the child.
	LinkerId workspaces.String `json:"linkerId,omitempty" xml:"linkerId,omitempty" yaml:"linkerId,omitempty"`
	// Used for recursive or parent-child operations. Some tables, are having nested relations,
	// and this field makes the table self refrenceing. ParentId needs to exist in the table before
	// creating of modifying a record.
	ParentId workspaces.String `json:"parentId,omitempty" xml:"parentId,omitempty" yaml:"parentId,omitempty"`
	// Makes a field deletable. Some records should not be deletable at all.
	// default it's true.
	IsDeletable *bool `json:"isDeletable,omitempty" xml:"isDeletable,omitempty" yaml:"isDeletable,omitempty" gorm:"default:true"`
	// Makes a field updatable. Some records should not be updatable at all.
	// default it's true.
	IsUpdatable *bool `json:"isUpdatable,omitempty" xml:"isUpdatable,omitempty" yaml:"isUpdatable,omitempty" gorm:"default:true"`
	// The unique-id of the user which is creating the record, or the record belongs to.
	// Administration might want to change this to any user, by default Fireback fills
	// it to the current authenticated user.
	UserId workspaces.String `json:"userId,omitempty" xml:"userId,omitempty" yaml:"userId,omitempty"`
	// General mechanism to rank the elements. From code perspective, it's just a number,
	// but you can sort it based on any logic for records to make a ranking, sorting.
	// they should not be unique across a table.
	Rank workspaces.Int64 `json:"rank,omitempty" yaml:"rank,omitempty" xml:"rank,omitempty" gorm:"type:int;name:rank"`
	// Primary numeric key in the database. This value is not meant to be exported to public
	// or be used to access data at all. Rather a mechanism of indexing columns internally
	// or cursor pagination in future releases of fireback, or better search performance.
	ID uint `gorm:"primaryKey;autoIncrement" json:"-" yaml:"-" xml:"-"`
	// Unique id of the record across the table. This value will be accessed from public APIs,
	// and many other places intead of numeric ID property.
	// Upon generation, a UUID automatically is being assigned, and if user has specified the
	// Unique id in the post body, it will be used. This mechanism allows to manage unsaved
	// content on front-end much easier than requiring parent to exists first.
	UniqueId string `json:"uniqueId,omitempty" xml:"uniqueId,omitempty" gorm:"unique;not null;size:100;" yaml:"uniqueId,omitempty"`
	// The time that the record has been created in nano-seconds.
	// the field will be automatically populated by gorm orm.
	Created int64 `json:"created,omitempty" xml:"created,omitempty" yaml:"created,omitempty" gorm:"autoUpdateTime:nano"`
	// The time that the record has been updated in nano-seconds.
	// the field will be automatically populated by gorm orm.
	Updated int64 `json:"updated,omitempty" xml:"updated,omitempty" yaml:"updated,omitempty"`
	// The time that the record has been deleted softly (means the data still exists in database, but no longer visible to any feature) in nano seconds
	// you need to make sure check this field if writing custom sql queries.
	// the field will be automatically populated by gorm orm.
	Deleted int64 `json:"deleted,omitempty" xml:"deleted,omitempty" yaml:"deleted,omitempty"`
	// Record creation date time formatting based on locale of the headers, or other
	// possible factors.
	CreatedFormatted string `json:"createdFormatted,omitempty" xml:"createdFormatted,omitempty" yaml:"createdFormatted,omitempty" sql:"-" gorm:"-"`
	// Record update date time formatting based on locale of the headers, or other
	// possible factors.
	UpdatedFormatted string `json:"updatedFormatted,omitempty" xml:"updatedFormatted,omitempty" yaml:"updatedFormatted,omitempty" sql:"-" gorm:"-"`
	Type             string `json:"type" xml:"type" yaml:"type"  validate:"oneof=email phone google,required"        `
	// The region which would be using this method of passports for authentication. In Fireback open-source, only 'global' is available.
	Region string `json:"region" xml:"region" yaml:"region"  validate:"required,oneof=global"        `
	// Client key for those methods such as 'google' which require oauth client key
	ClientKey string                  `json:"clientKey" xml:"clientKey" yaml:"clientKey"        `
	Children  []*PassportMethodEntity `csv:"-" gorm:"-" sql:"-" json:"children,omitempty" xml:"children,omitempty"  yaml:"children,omitempty"`
	LinkedTo  *PassportMethodEntity   `csv:"-" yaml:"-" gorm:"-" json:"-" sql:"-" xml:"-"`
}

func PassportMethodEntityStream(q workspaces.QueryDSL) (chan []*PassportMethodEntity, *workspaces.QueryResultMeta, error) {
	cn := make(chan []*PassportMethodEntity)
	q.ItemsPerPage = 50
	q.StartIndex = 0
	_, qrm, err := PassportMethodActions.Query(q)
	if err != nil {
		return nil, nil, err
	}
	go func() {
		defer close(cn)
		for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
			items, _, _ := PassportMethodActions.Query(q)
			i += q.ItemsPerPage
			q.StartIndex = i
			cn <- items
		}
	}()
	return cn, qrm, nil
}

type PassportMethodEntityList struct {
	Items []*PassportMethodEntity
}

func NewPassportMethodEntityList(items []*PassportMethodEntity) *PassportMethodEntityList {
	return &PassportMethodEntityList{
		Items: items,
	}
}
func (x *PassportMethodEntityList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *PassportMethodEntityList) ToTree() *workspaces.TreeOperation[PassportMethodEntity] {
	return workspaces.NewTreeOperation(
		x.Items,
		func(t *PassportMethodEntity) string {
			if !t.ParentId.Valid {
				return ""
			}
			return t.ParentId.String
		},
		func(t *PassportMethodEntity) string {
			return t.UniqueId
		},
	)
}

var PassportMethodPreloadRelations []string = []string{}

type passportMethodActionsSig struct {
	Update         func(query workspaces.QueryDSL, dto *PassportMethodEntity) (*PassportMethodEntity, *workspaces.IError)
	Create         func(dto *PassportMethodEntity, query workspaces.QueryDSL) (*PassportMethodEntity, *workspaces.IError)
	Upsert         func(dto *PassportMethodEntity, query workspaces.QueryDSL) (*PassportMethodEntity, *workspaces.IError)
	SeederInit     func() *PassportMethodEntity
	Remove         func(query workspaces.QueryDSL) (int64, *workspaces.IError)
	MultiInsert    func(dtos []*PassportMethodEntity, query workspaces.QueryDSL) ([]*PassportMethodEntity, *workspaces.IError)
	GetOne         func(query workspaces.QueryDSL) (*PassportMethodEntity, *workspaces.IError)
	GetByWorkspace func(query workspaces.QueryDSL) (*PassportMethodEntity, *workspaces.IError)
	Query          func(query workspaces.QueryDSL) ([]*PassportMethodEntity, *workspaces.QueryResultMeta, error)
}

var PassportMethodActions passportMethodActionsSig = passportMethodActionsSig{
	Update:         PassportMethodActionUpdateFn,
	Create:         PassportMethodActionCreateFn,
	Upsert:         PassportMethodActionUpsertFn,
	Remove:         PassportMethodActionRemoveFn,
	SeederInit:     PassportMethodActionSeederInitFn,
	MultiInsert:    PassportMethodMultiInsertFn,
	GetOne:         PassportMethodActionGetOneFn,
	GetByWorkspace: PassportMethodActionGetByWorkspaceFn,
	Query:          PassportMethodActionQueryFn,
}

func PassportMethodActionUpsertFn(dto *PassportMethodEntity, query workspaces.QueryDSL) (*PassportMethodEntity, *workspaces.IError) {
	return nil, nil
}

var PASSPORT_METHOD_EVENT_CREATED = "passportMethod.created"
var PASSPORT_METHOD_EVENT_UPDATED = "passportMethod.updated"
var PASSPORT_METHOD_EVENT_DELETED = "passportMethod.deleted"
var PASSPORT_METHOD_EVENTS = []string{
	PASSPORT_METHOD_EVENT_CREATED,
	PASSPORT_METHOD_EVENT_UPDATED,
	PASSPORT_METHOD_EVENT_DELETED,
}

type PassportMethodFieldMap struct {
	Type      workspaces.TranslatedString `yaml:"type"`
	Region    workspaces.TranslatedString `yaml:"region"`
	ClientKey workspaces.TranslatedString `yaml:"clientKey"`
}

var PassportMethodEntityMetaConfig map[string]int64 = map[string]int64{}
var PassportMethodEntityJsonSchema = workspaces.ExtractEntityFields(reflect.ValueOf(&PassportMethodEntity{}))

func entityPassportMethodFormatter(dto *PassportMethodEntity, query workspaces.QueryDSL) {
	if dto == nil {
		return
	}
	if dto.Created > 0 {
		dto.CreatedFormatted = workspaces.FormatDateBasedOnQuery(dto.Created, query)
	}
	if dto.Updated > 0 {
		dto.CreatedFormatted = workspaces.FormatDateBasedOnQuery(dto.Updated, query)
	}
}
func PassportMethodActionSeederMultiple(query workspaces.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	batchSize := 100
	bar := progressbar.Default(int64(count))
	// Collect entities in batches
	var entitiesBatch []*PassportMethodEntity
	for i := 1; i <= count; i++ {
		entity := PassportMethodActions.SeederInit()
		entitiesBatch = append(entitiesBatch, entity)
		// When batch size is reached, perform the batch insert
		if len(entitiesBatch) == batchSize || i == count {
			// Insert batch
			_, err := PassportMethodActions.MultiInsert(entitiesBatch, query)
			if err == nil {
				successInsert += len(entitiesBatch)
			} else {
				fmt.Println(err)
				failureInsert += len(entitiesBatch)
			}
			// Clear the batch after insert
			entitiesBatch = nil
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func PassportMethodActionSeeder(query workspaces.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	bar := progressbar.Default(int64(count))
	for i := 1; i <= count; i++ {
		entity := PassportMethodActions.SeederInit()
		_, err := PassportMethodActions.Create(entity, query)
		if err == nil {
			successInsert++
		} else {
			fmt.Println(err)
			failureInsert++
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func (x *PassportMethodEntity) Seeder() string {
	obj := PassportMethodActions.SeederInit()
	v, _ := json.MarshalIndent(obj, "", "  ")
	return string(v)
}
func PassportMethodActionSeederInitFn() *PassportMethodEntity {
	entity := &PassportMethodEntity{}
	return entity
}
func PassportMethodAssociationCreate(dto *PassportMethodEntity, query workspaces.QueryDSL) error {
	return nil
}

/**
* These kind of content are coming from another entity, which is indepndent module
* If we want to create them, we need to do it before. This is not association.
**/
func PassportMethodRelationContentCreate(dto *PassportMethodEntity, query workspaces.QueryDSL) error {
	return nil
}
func PassportMethodRelationContentUpdate(dto *PassportMethodEntity, query workspaces.QueryDSL) error {
	return nil
}
func PassportMethodPolyglotUpdateHandler(dto *PassportMethodEntity, query workspaces.QueryDSL) {
	if dto == nil {
		return
	}
}

/**
 * This will be validating your entity fully. Important note is that, you add validate:* tag
 * in your entity, it will automatically work here. For slices inside entity, make sure you add
 * extra line of AppendSliceErrors, otherwise they won't be detected
 */
func PassportMethodValidator(dto *PassportMethodEntity, isPatch bool) *workspaces.IError {
	err := workspaces.CommonStructValidatorPointer(dto, isPatch)
	return err
}

// Creates a set of natural language queries, which can be used with
// AI tools to create content or help with some tasks
var PassportMethodAskCmd cli.Command = cli.Command{
	Name:  "nlp",
	Usage: "Set of natural language queries which helps creating content or data",
	Subcommands: []cli.Command{
		{
			Name:  "sample",
			Usage: "Asks for generating sample by giving an example data",
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:  "format",
					Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
					Value: "yaml",
				},
				&cli.IntFlag{
					Name:  "count",
					Usage: "How many samples to ask",
					Value: 30,
				},
			},
			Action: func(c *cli.Context) error {
				v := &PassportMethodEntity{}
				format := c.String("format")
				request := "\033[1m" + `
I need you to create me an array of exact signature as the example given below,
with at least ` + fmt.Sprint(c.String("count")) + ` items, mock the content with few words, and guess the possible values
based on the common sense. I need the output to be a valid ` + format + ` file.
Make sure you wrap the entire array in 'items' field. Also before that, I provide some explanation of each field:
Type: (type: enum) Description: 
Region: (type: enum) Description: The region which would be using this method of passports for authentication. In Fireback open-source, only 'global' is available.
ClientKey: (type: string) Description: Client key for those methods such as 'google' which require oauth client key
And here is the actual object signature:
` + v.Seeder() + `
`
				fmt.Println(request)
				return nil
			},
		},
	},
}

func PassportMethodEntityPreSanitize(dto *PassportMethodEntity, query workspaces.QueryDSL) {
}
func PassportMethodEntityBeforeCreateAppend(dto *PassportMethodEntity, query workspaces.QueryDSL) {
	if dto.UniqueId == "" {
		dto.UniqueId = workspaces.UUID()
	}
	dto.WorkspaceId = workspaces.NewString(query.WorkspaceId)
	dto.UserId = workspaces.NewString(query.UserId)
	PassportMethodRecursiveAddUniqueId(dto, query)
}
func PassportMethodRecursiveAddUniqueId(dto *PassportMethodEntity, query workspaces.QueryDSL) {
}

/*
*
	Batch inserts, do not have all features that create
	operation does. Use it with unnormalized content,
	or read the source code carefully.
  This is not marked as an action, because it should not be available publicly
  at this moment.
*
*/
func PassportMethodMultiInsertFn(dtos []*PassportMethodEntity, query workspaces.QueryDSL) ([]*PassportMethodEntity, *workspaces.IError) {
	if len(dtos) > 0 {
		for index := range dtos {
			PassportMethodEntityPreSanitize(dtos[index], query)
			PassportMethodEntityBeforeCreateAppend(dtos[index], query)
		}
		var dbref *gorm.DB = nil
		if query.Tx == nil {
			dbref = workspaces.GetDbRef()
		} else {
			dbref = query.Tx
		}
		query.Tx = dbref
		err := dbref.Create(&dtos).Error
		if err != nil {
			return nil, workspaces.GormErrorToIError(err)
		}
	}
	return dtos, nil
}
func PassportMethodActionBatchCreateFn(dtos []*PassportMethodEntity, query workspaces.QueryDSL) ([]*PassportMethodEntity, *workspaces.IError) {
	if dtos != nil && len(dtos) > 0 {
		items := []*PassportMethodEntity{}
		for _, item := range dtos {
			s, err := PassportMethodActions.Create(item, query)
			if err != nil {
				return nil, err
			}
			items = append(items, s)
		}
		return items, nil
	}
	return dtos, nil
}
func PassportMethodDeleteEntireChildren(query workspaces.QueryDSL, dto *PassportMethodEntity) *workspaces.IError {
	// intentionally removed this. It's hard to implement it, and probably wrong without
	// proper on delete cascade
	return nil
}
func PassportMethodActionCreateFn(dto *PassportMethodEntity, query workspaces.QueryDSL) (*PassportMethodEntity, *workspaces.IError) {
	// 1. Validate always
	if iError := PassportMethodValidator(dto, false); iError != nil {
		return nil, iError
	}
	// 1.5 Sanitize the content coming of the front-end
	PassportMethodEntityPreSanitize(dto, query)
	// 2. Append the necessary information about user, workspace
	PassportMethodEntityBeforeCreateAppend(dto, query)
	// 3. Create other entities if we want select from them
	PassportMethodRelationContentCreate(dto, query)
	// 4. Create the entity
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = workspaces.GetDbRef()
	} else {
		dbref = query.Tx
	}
	query.Tx = dbref
	err := dbref.Create(&dto).Error
	if err != nil {
		err := workspaces.GormErrorToIError(err)
		return nil, err
	}
	// 5. Create sub entities, objects or arrays, association to other entities
	PassportMethodAssociationCreate(dto, query)
	// 6. Fire the event into system
	actionEvent, eventErr := NewPassportMethodCreatedEvent(dto, &query)
	if actionEvent != nil && eventErr == nil {
		workspaces.GetEventBusInstance().FireEvent(query, *actionEvent)
	} else {
		log.Default().Panicln("Creating event has failed for %v", dto)
	}
	/*
		event.MustFire(PASSPORT_METHOD_EVENT_CREATED, event.M{
			"entity":   dto,
			"entityKey": workspaces.GetTypeString(&PassportMethodEntity{}),
			"target":   "workspace",
			"unqiueId": query.WorkspaceId,
		})
	*/
	return dto, nil
}
func PassportMethodActionGetOneFn(query workspaces.QueryDSL) (*PassportMethodEntity, *workspaces.IError) {
	refl := reflect.ValueOf(&PassportMethodEntity{})
	item, err := workspaces.GetOneEntity[PassportMethodEntity](query, refl)
	entityPassportMethodFormatter(item, query)
	return item, err
}
func PassportMethodActionGetByWorkspaceFn(query workspaces.QueryDSL) (*PassportMethodEntity, *workspaces.IError) {
	refl := reflect.ValueOf(&PassportMethodEntity{})
	item, err := workspaces.GetOneByWorkspaceEntity[PassportMethodEntity](query, refl)
	entityPassportMethodFormatter(item, query)
	return item, err
}
func PassportMethodActionQueryFn(query workspaces.QueryDSL) ([]*PassportMethodEntity, *workspaces.QueryResultMeta, error) {
	refl := reflect.ValueOf(&PassportMethodEntity{})
	items, meta, err := workspaces.QueryEntitiesPointer[PassportMethodEntity](query, refl)
	for _, item := range items {
		entityPassportMethodFormatter(item, query)
	}
	return items, meta, err
}

var passportMethodMemoryItems []*PassportMethodEntity = []*PassportMethodEntity{}

func PassportMethodEntityIntoMemory() {
	q := workspaces.QueryDSL{
		ItemsPerPage: 500,
		StartIndex:   0,
	}
	_, qrm, _ := PassportMethodActions.Query(q)
	for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
		items, _, _ := PassportMethodActions.Query(q)
		passportMethodMemoryItems = append(passportMethodMemoryItems, items...)
		i += q.ItemsPerPage
		q.StartIndex = i
	}
}
func PassportMethodMemGet(id uint) *PassportMethodEntity {
	for _, item := range passportMethodMemoryItems {
		if item.ID == id {
			return item
		}
	}
	return nil
}
func PassportMethodMemJoin(items []uint) []*PassportMethodEntity {
	res := []*PassportMethodEntity{}
	for _, item := range items {
		v := PassportMethodMemGet(item)
		if v != nil {
			res = append(res, v)
		}
	}
	return res
}
func PassportMethodUpdateExec(dbref *gorm.DB, query workspaces.QueryDSL, fields *PassportMethodEntity) (*PassportMethodEntity, *workspaces.IError) {
	uniqueId := fields.UniqueId
	query.TriggerEventName = PASSPORT_METHOD_EVENT_UPDATED
	PassportMethodEntityPreSanitize(fields, query)
	var item PassportMethodEntity
	var itemRefetched PassportMethodEntity
	// If the entity is distinct by workspace, then the Query.WorkspaceId
	// which is selected is being used as the condition for create or update
	// if not, the unique Id is being used
	cond2 := &PassportMethodEntity{UniqueId: uniqueId}
	q := dbref.
		Where(cond2).
		FirstOrCreate(&item)
	err := q.UpdateColumns(fields).Error
	if err != nil {
		return nil, workspaces.GormErrorToIError(err)
	}
	query.Tx = dbref
	PassportMethodRelationContentUpdate(fields, query)
	PassportMethodPolyglotUpdateHandler(fields, query)
	if ero := PassportMethodDeleteEntireChildren(query, fields); ero != nil {
		return nil, ero
	}
	// @meta(update has many)
	err = dbref.
		Preload(clause.Associations).
		Where(&PassportMethodEntity{UniqueId: uniqueId}).
		First(&itemRefetched).Error
	if err != nil {
		return nil, workspaces.GormErrorToIError(err)
	}
	actionEvent, eventErr := NewPassportMethodUpdatedEvent(fields, &query)
	if actionEvent != nil && eventErr == nil {
		workspaces.GetEventBusInstance().FireEvent(query, *actionEvent)
	} else {
		log.Default().Panicln("Updating event has failed for %v", fields)
	}
	/*
	   event.MustFire(query.TriggerEventName, event.M{
	     "entity":   &item,
	     "target":   "workspace",
	     "unqiueId": query.WorkspaceId,
	   })*/
	return &itemRefetched, nil
}
func PassportMethodActionUpdateFn(query workspaces.QueryDSL, fields *PassportMethodEntity) (*PassportMethodEntity, *workspaces.IError) {
	if fields == nil {
		return nil, workspaces.Create401Error(&workspaces.WorkspacesMessages.BodyIsMissing, []string{})
	}
	// 1. Validate always
	if iError := PassportMethodValidator(fields, true); iError != nil {
		return nil, iError
	}
	// Let's not add this. I am not sure of the consequences
	// PassportMethodRecursiveAddUniqueId(fields, query)
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = workspaces.GetDbRef()
		var item *PassportMethodEntity
		vf := dbref.Transaction(func(tx *gorm.DB) error {
			dbref = tx
			var err *workspaces.IError
			item, err = PassportMethodUpdateExec(dbref, query, fields)
			if err == nil {
				return nil
			} else {
				return err
			}
		})
		return item, workspaces.CastToIError(vf)
	} else {
		dbref = query.Tx
		return PassportMethodUpdateExec(dbref, query, fields)
	}
}

var PassportMethodWipeCmd cli.Command = cli.Command{
	Name:  "wipe",
	Usage: "Wipes entire passportmethods ",
	Action: func(c *cli.Context) error {
		query := workspaces.CommonCliQueryDSLBuilderAuthorize(c, &workspaces.SecurityModel{
			ActionRequires:  []workspaces.PermissionInfo{PERM_ROOT_PASSPORT_METHOD_DELETE},
			ResolveStrategy: "workspace",
			AllowOnRoot:     true,
		})
		count, _ := PassportMethodActionWipeClean(query)
		fmt.Println("Removed", count, "of entities")
		return nil
	},
}

func PassportMethodActionRemoveFn(query workspaces.QueryDSL) (int64, *workspaces.IError) {
	refl := reflect.ValueOf(&PassportMethodEntity{})
	query.ActionRequires = []workspaces.PermissionInfo{PERM_ROOT_PASSPORT_METHOD_DELETE}
	return workspaces.RemoveEntity[PassportMethodEntity](query, refl)
}
func PassportMethodActionWipeClean(query workspaces.QueryDSL) (int64, error) {
	var err error
	var count int64 = 0
	{
		subCount, subErr := workspaces.WipeCleanEntity[PassportMethodEntity]()
		if subErr != nil {
			fmt.Println("Error while wiping 'PassportMethodEntity'", subErr)
			return count, subErr
		} else {
			count += subCount
		}
	}
	return count, err
}
func PassportMethodActionBulkUpdate(
	query workspaces.QueryDSL, dto *workspaces.BulkRecordRequest[PassportMethodEntity]) (
	*workspaces.BulkRecordRequest[PassportMethodEntity], *workspaces.IError,
) {
	result := []*PassportMethodEntity{}
	err := workspaces.GetDbRef().Transaction(func(tx *gorm.DB) error {
		query.Tx = tx
		for _, record := range dto.Records {
			item, err := PassportMethodActions.Update(query, record)
			if err != nil {
				return err
			} else {
				result = append(result, item)
			}
		}
		return nil
	})
	if err == nil {
		return dto, nil
	}
	return nil, err.(*workspaces.IError)
}
func (x *PassportMethodEntity) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}

var PassportMethodEntityMeta = workspaces.TableMetaData{
	EntityName:    "PassportMethod",
	ExportKey:     "passport-methods",
	TableNameInDb: "passport-method_entities",
	EntityObject:  &PassportMethodEntity{},
	ExportStream:  PassportMethodActionExportT,
	ImportQuery:   PassportMethodActionImport,
}

func PassportMethodActionExport(
	query workspaces.QueryDSL,
) (chan []byte, *workspaces.IError) {
	return workspaces.YamlExporterChannel[PassportMethodEntity](query, PassportMethodActions.Query, PassportMethodPreloadRelations)
}
func PassportMethodActionExportT(
	query workspaces.QueryDSL,
) (chan []interface{}, *workspaces.IError) {
	return workspaces.YamlExporterChannelT[PassportMethodEntity](query, PassportMethodActions.Query, PassportMethodPreloadRelations)
}
func PassportMethodActionImport(
	dto interface{}, query workspaces.QueryDSL,
) *workspaces.IError {
	var json = jsoniter.ConfigCompatibleWithStandardLibrary
	var content PassportMethodEntity
	cx, err2 := json.Marshal(dto)
	if err2 != nil {
		return workspaces.Create401Error(&workspaces.WorkspacesMessages.InvalidContent, []string{})
	}
	json.Unmarshal(cx, &content)
	_, err := PassportMethodActions.Create(&content, query)
	return err
}

var PassportMethodCommonCliFlags = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "type",
		Required: true,
		Usage:    `One of: 'email', 'phone', 'google' (enum)`,
	},
	&cli.StringFlag{
		Name:     "region",
		Required: true,
		Usage:    `One of: 'global' (enum)`,
		Value:    `global`,
	},
	&cli.StringFlag{
		Name:     "client-key",
		Required: false,
		Usage:    `Client key for those methods such as 'google' which require oauth client key (string)`,
	},
}
var PassportMethodCommonInteractiveCliFlags = []workspaces.CliInteractiveFlag{
	{
		Name:        "type",
		StructField: "Type",
		Required:    true,
		Recommended: false,
		Usage:       `One of: 'email', 'phone', 'google'`,
		Type:        "string",
	},
	{
		Name:        "region",
		StructField: "Region",
		Required:    true,
		Recommended: false,
		Usage:       `One of: 'global'`,
		Type:        "string",
	},
	{
		Name:        "clientKey",
		StructField: "ClientKey",
		Required:    false,
		Recommended: false,
		Usage:       `Client key for those methods such as 'google' which require oauth client key`,
		Type:        "string",
	},
}
var PassportMethodCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "type",
		Required: true,
		Usage:    `One of: 'email', 'phone', 'google' (enum)`,
	},
	&cli.StringFlag{
		Name:     "region",
		Required: true,
		Usage:    `One of: 'global' (enum)`,
		Value:    `global`,
	},
	&cli.StringFlag{
		Name:     "client-key",
		Required: false,
		Usage:    `Client key for those methods such as 'google' which require oauth client key (string)`,
	},
}
var PassportMethodCreateCmd cli.Command = PASSPORT_METHOD_ACTION_POST_ONE.ToCli()
var PassportMethodCreateInteractiveCmd cli.Command = cli.Command{
	Name:  "ic",
	Usage: "Creates a new entity, using requied fields in an interactive name",
	Flags: []cli.Flag{
		&cli.BoolFlag{
			Name:  "all",
			Usage: "Interactively asks for all inputs, not only required ones",
		},
	},
	Action: func(c *cli.Context) {
		query := workspaces.CommonCliQueryDSLBuilderAuthorize(c, &workspaces.SecurityModel{
			ActionRequires:  []workspaces.PermissionInfo{PERM_ROOT_PASSPORT_METHOD_CREATE},
			ResolveStrategy: "workspace",
			AllowOnRoot:     true,
		})
		entity := &PassportMethodEntity{}
		workspaces.PopulateInteractively(entity, c, PassportMethodCommonInteractiveCliFlags)
		if entity, err := PassportMethodActions.Create(entity, query); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := yaml.Marshal(entity)
			fmt.Println(workspaces.FormatYamlKeys(string(f)))
		}
	},
}
var PassportMethodUpdateCmd cli.Command = cli.Command{
	Name:    "update",
	Aliases: []string{"u"},
	Flags:   PassportMethodCommonCliFlagsOptional,
	Usage:   "Updates entity by passing the parameters",
	Action: func(c *cli.Context) error {
		query := workspaces.CommonCliQueryDSLBuilderAuthorize(c, &workspaces.SecurityModel{
			ActionRequires:  []workspaces.PermissionInfo{PERM_ROOT_PASSPORT_METHOD_UPDATE},
			ResolveStrategy: "workspace",
			AllowOnRoot:     true,
		})
		entity := CastPassportMethodFromCli(c)
		if entity, err := PassportMethodActions.Update(query, entity); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := json.MarshalIndent(entity, "", "  ")
			fmt.Println(string(f))
		}
		return nil
	},
}

func (x *PassportMethodEntity) FromCli(c *cli.Context) *PassportMethodEntity {
	return CastPassportMethodFromCli(c)
}
func CastPassportMethodFromCli(c *cli.Context) *PassportMethodEntity {
	template := &PassportMethodEntity{}
	if c.IsSet("uid") {
		template.UniqueId = c.String("uid")
	}
	if c.IsSet("pid") {
		template.ParentId = workspaces.NewStringAutoNull(c.String("pid"))
	}
	if c.IsSet("type") {
		template.Type = c.String("type")
	}
	if c.IsSet("region") {
		template.Region = c.String("region")
	}
	if c.IsSet("client-key") {
		template.ClientKey = c.String("client-key")
	}
	return template
}
func PassportMethodSyncSeederFromFs(fsRef *embed.FS, fileNames []string, q workspaces.QueryDSL) {
	workspaces.SeederFromFSImport(
		q,
		PassportMethodActions.Create,
		reflect.ValueOf(&PassportMethodEntity{}).Elem(),
		fsRef,
		fileNames,
		true,
	)
}
func PassportMethodSyncSeeders() {
	workspaces.SeederFromFSImport(
		workspaces.QueryDSL{WorkspaceId: workspaces.USER_SYSTEM},
		PassportMethodActions.Create,
		reflect.ValueOf(&PassportMethodEntity{}).Elem(),
		passportMethodSeedersFs,
		[]string{},
		true,
	)
}
func PassportMethodImportMocks() {
	workspaces.SeederFromFSImport(
		workspaces.QueryDSL{},
		PassportMethodActions.Create,
		reflect.ValueOf(&PassportMethodEntity{}).Elem(),
		&mocks.ViewsFs,
		[]string{},
		false,
	)
}
func PassportMethodWriteQueryMock(ctx workspaces.MockQueryContext) {
	for _, lang := range ctx.Languages {
		itemsPerPage := 9999
		if ctx.ItemsPerPage > 0 {
			itemsPerPage = ctx.ItemsPerPage
		}
		f := workspaces.QueryDSL{ItemsPerPage: itemsPerPage, Language: lang, WithPreloads: ctx.WithPreloads, Deep: true}
		items, count, _ := PassportMethodActions.Query(f)
		result := workspaces.QueryEntitySuccessResult(f, items, count)
		workspaces.WriteMockDataToFile(lang, "", "PassportMethod", result)
	}
}
func PassportMethodsActionQueryString(keyword string, page int) ([]string, *workspaces.QueryResultMeta, error) {
	searchFields := []string{
		`unique_id %"{keyword}"%`,
		`name %"{keyword}"%`,
	}
	m := func(item *PassportMethodEntity) string {
		label := item.UniqueId
		// if item.Name != nil {
		// 	label += " >>> " + *item.Name
		// }
		return label
	}
	query := workspaces.QueryStringCastCli(searchFields, keyword, page)
	items, meta, err := PassportMethodActions.Query(query)
	stringItems := []string{}
	for _, item := range items {
		label := m(item)
		stringItems = append(stringItems, label)
	}
	return stringItems, meta, err
}

var PassportMethodDevCommands = []cli.Command{
	PassportMethodWipeCmd,
	{
		Name:    "init",
		Aliases: []string{"i"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Creates a basic seeder file for you, based on the definition module we have. You can populate this file as an example",
		Action: func(c *cli.Context) error {
			seed := PassportMethodActions.SeederInit()
			workspaces.CommonInitSeeder(strings.TrimSpace(c.String("format")), seed)
			return nil
		},
	},
}
var PassportMethodImportExportCommands = []cli.Command{
	{
		Name:    "validate",
		Aliases: []string{"v"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "file",
				Usage: "Validates an import file, such as yaml, json, csv, and gives some insights how the after import it would look like",
				Value: "passport-method-seeder-passport-method.yml",
				// Uncomment before publish, they need to specify
				// Required: true,
			},
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Reads a yaml file containing an array of passport-methods, you can run this to validate if your import file is correct, and how it would look like after import",
		Action: func(c *cli.Context) error {
			data := &[]PassportMethodEntity{}
			workspaces.ReadYamlFile(c.String("file"), data)
			fmt.Println(data)
			return nil
		},
	},
	cli.Command{
		Name:  "slist",
		Usage: "Prints the list of files attached to this module for syncing or bootstrapping project",
		Action: func(c *cli.Context) error {
			if entity, err := workspaces.GetSeederFilenames(passportMethodSeedersFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "ssync",
		Usage: "Tries to sync the embedded content into the database, the list could be seen by 'slist' command",
		Action: func(c *cli.Context) error {
			workspaces.CommonCliImportEmbedCmd(c,
				PassportMethodActions.Create,
				reflect.ValueOf(&PassportMethodEntity{}).Elem(),
				passportMethodSeedersFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:    "export",
		Aliases: []string{"e"},
		Flags: append(workspaces.CommonQueryFlags,
			&cli.StringFlag{
				Name:     "file",
				Usage:    "The address of file you want the csv/yaml/json be exported to",
				Required: true,
			}),
		Usage: "Exports a query results into the csv/yaml/json format",
		Action: func(c *cli.Context) error {
			return workspaces.CommonCliExportCmd2(c,
				PassportMethodEntityStream,
				reflect.ValueOf(&PassportMethodEntity{}).Elem(),
				c.String("file"),
				&metas.MetaFs,
				"PassportMethodFieldMap.yml",
				PassportMethodPreloadRelations,
			)
		},
	},
	cli.Command{
		Name: "import",
		Flags: append(
			append(
				workspaces.CommonQueryFlags,
				&cli.StringFlag{
					Name:     "file",
					Usage:    "The address of file you want the csv be imported from",
					Required: true,
				}),
			PassportMethodCommonCliFlagsOptional...,
		),
		Usage: "imports csv/yaml/json file and place it and its children into database",
		Action: func(c *cli.Context) error {
			workspaces.CommonCliImportCmdAuthorized(c,
				PassportMethodActions.Create,
				reflect.ValueOf(&PassportMethodEntity{}).Elem(),
				c.String("file"),
				&workspaces.SecurityModel{
					ActionRequires:  []workspaces.PermissionInfo{PERM_ROOT_PASSPORT_METHOD_CREATE},
					ResolveStrategy: "workspace",
					AllowOnRoot:     true,
				},
				func() PassportMethodEntity {
					v := CastPassportMethodFromCli(c)
					return *v
				},
			)
			return nil
		},
	},
}
var PassportMethodCliCommands []cli.Command = []cli.Command{
	PASSPORT_METHOD_ACTION_QUERY.ToCli(),
	PASSPORT_METHOD_ACTION_TABLE.ToCli(),
	PassportMethodCreateCmd,
	PassportMethodUpdateCmd,
	PassportMethodAskCmd,
	PassportMethodCreateInteractiveCmd,
	workspaces.GetCommonRemoveQuery(
		reflect.ValueOf(&PassportMethodEntity{}).Elem(),
		PassportMethodActions.Remove,
	),
}

func PassportMethodCliFn() cli.Command {
	commands := append(PassportMethodImportExportCommands, PassportMethodCliCommands...)
	if !workspaces.GetConfig().Production {
		commands = append(commands, PassportMethodDevCommands...)
	}
	return cli.Command{
		Name:        "passportmethod",
		ShortName:   "method",
		Description: "PassportMethods module actions",
		Usage:       `Login/Signup methods which are available in the app for different regions (Email, Phone Number, Google, etc)`,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "language",
				Value: "en",
			},
		},
		Subcommands: commands,
	}
}

var PASSPORT_METHOD_ACTION_TABLE = workspaces.Module3Action{
	Name:          "table",
	ActionAliases: []string{"t"},
	Flags:         workspaces.CommonQueryFlags,
	Description:   "Table formatted queries all of the entities in database based on the standard query format",
	Action:        PassportMethodActions.Query,
	CliAction: func(c *cli.Context, security *workspaces.SecurityModel) error {
		workspaces.CommonCliTableCmd2(c,
			PassportMethodActions.Query,
			security,
			reflect.ValueOf(&PassportMethodEntity{}).Elem(),
		)
		return nil
	},
}
var PASSPORT_METHOD_ACTION_QUERY = workspaces.Module3Action{
	Method: "GET",
	Url:    "/passport-methods",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires:  []workspaces.PermissionInfo{PERM_ROOT_PASSPORT_METHOD_QUERY},
		ResolveStrategy: "workspace",
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			qs := &PassportMethodEntityQs{}
			workspaces.HttpQueryEntity(c, PassportMethodActions.Query, qs)
		},
	},
	Format:         "QUERY",
	Action:         PassportMethodActions.Query,
	ResponseEntity: &[]PassportMethodEntity{},
	Out: &workspaces.Module3ActionBody{
		Entity: "PassportMethodEntity",
	},
	CliAction: func(c *cli.Context, security *workspaces.SecurityModel) error {
		qs := &PassportMethodEntityQs{}
		workspaces.CommonCliQueryCmd3(
			c,
			PassportMethodActions.Query,
			security,
			qs,
		)
		return nil
	},
	CliName:       "query",
	Name:          "query",
	ActionAliases: []string{"q"},
	Flags:         append(workspaces.CommonQueryFlags, PassportMethodQsFlags...),
	Description:   "Queries all of the entities in database based on the standard query format (s+)",
}
var PASSPORT_METHOD_ACTION_EXPORT = workspaces.Module3Action{
	Method: "GET",
	Url:    "/passport-methods/export",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires:  []workspaces.PermissionInfo{PERM_ROOT_PASSPORT_METHOD_QUERY},
		ResolveStrategy: "workspace",
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpStreamFileChannel(c, PassportMethodActionExport)
		},
	},
	Format:         "QUERY",
	Action:         PassportMethodActionExport,
	ResponseEntity: &[]PassportMethodEntity{},
	Out: &workspaces.Module3ActionBody{
		Entity: "PassportMethodEntity",
	},
}
var PASSPORT_METHOD_ACTION_GET_ONE = workspaces.Module3Action{
	Method: "GET",
	Url:    "/passport-method/:uniqueId",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires:  []workspaces.PermissionInfo{PERM_ROOT_PASSPORT_METHOD_QUERY},
		ResolveStrategy: "workspace",
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpGetEntity(c, PassportMethodActions.GetOne)
		},
	},
	Format:         "GET_ONE",
	Action:         PassportMethodActions.GetOne,
	ResponseEntity: &PassportMethodEntity{},
	Out: &workspaces.Module3ActionBody{
		Entity: "PassportMethodEntity",
	},
}
var PASSPORT_METHOD_ACTION_POST_ONE = workspaces.Module3Action{
	Name:          "create",
	ActionAliases: []string{"c"},
	Description:   "Create new passportMethod",
	Flags:         PassportMethodCommonCliFlags,
	Method:        "POST",
	Url:           "/passport-method",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires:  []workspaces.PermissionInfo{PERM_ROOT_PASSPORT_METHOD_CREATE},
		ResolveStrategy: "workspace",
		AllowOnRoot:     true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpPostEntity(c, PassportMethodActions.Create)
		},
	},
	CliAction: func(c *cli.Context, security *workspaces.SecurityModel) error {
		result, err := workspaces.CliPostEntity(c, PassportMethodActions.Create, security)
		workspaces.HandleActionInCli(c, result, err, map[string]map[string]string{})
		return err
	},
	Action:         PassportMethodActions.Create,
	Format:         "POST_ONE",
	RequestEntity:  &PassportMethodEntity{},
	ResponseEntity: &PassportMethodEntity{},
	Out: &workspaces.Module3ActionBody{
		Entity: "PassportMethodEntity",
	},
	In: &workspaces.Module3ActionBody{
		Entity: "PassportMethodEntity",
	},
}
var PASSPORT_METHOD_ACTION_PATCH = workspaces.Module3Action{
	Name:          "update",
	ActionAliases: []string{"u"},
	Flags:         PassportMethodCommonCliFlagsOptional,
	Method:        "PATCH",
	Url:           "/passport-method",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires:  []workspaces.PermissionInfo{PERM_ROOT_PASSPORT_METHOD_UPDATE},
		ResolveStrategy: "workspace",
		AllowOnRoot:     true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpUpdateEntity(c, PassportMethodActions.Update)
		},
	},
	Action:         PassportMethodActions.Update,
	RequestEntity:  &PassportMethodEntity{},
	ResponseEntity: &PassportMethodEntity{},
	Format:         "PATCH_ONE",
	Out: &workspaces.Module3ActionBody{
		Entity: "PassportMethodEntity",
	},
	In: &workspaces.Module3ActionBody{
		Entity: "PassportMethodEntity",
	},
}
var PASSPORT_METHOD_ACTION_PATCH_BULK = workspaces.Module3Action{
	Method: "PATCH",
	Url:    "/passport-methods",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires:  []workspaces.PermissionInfo{PERM_ROOT_PASSPORT_METHOD_UPDATE},
		ResolveStrategy: "workspace",
		AllowOnRoot:     true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpUpdateEntities(c, PassportMethodActionBulkUpdate)
		},
	},
	Action:         PassportMethodActionBulkUpdate,
	Format:         "PATCH_BULK",
	RequestEntity:  &workspaces.BulkRecordRequest[PassportMethodEntity]{},
	ResponseEntity: &workspaces.BulkRecordRequest[PassportMethodEntity]{},
	Out: &workspaces.Module3ActionBody{
		Entity: "PassportMethodEntity",
	},
	In: &workspaces.Module3ActionBody{
		Entity: "PassportMethodEntity",
	},
}
var PASSPORT_METHOD_ACTION_DELETE = workspaces.Module3Action{
	Method: "DELETE",
	Url:    "/passport-method",
	Format: "DELETE_DSL",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires:  []workspaces.PermissionInfo{PERM_ROOT_PASSPORT_METHOD_DELETE},
		ResolveStrategy: "workspace",
		AllowOnRoot:     true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpRemoveEntity(c, PassportMethodActions.Remove)
		},
	},
	Action:         PassportMethodActions.Remove,
	RequestEntity:  &workspaces.DeleteRequest{},
	ResponseEntity: &workspaces.DeleteResponse{},
	TargetEntity:   &PassportMethodEntity{},
}

/**
 *	Override this function on PassportMethodEntityHttp.go,
 *	In order to add your own http
 **/
var AppendPassportMethodRouter = func(r *[]workspaces.Module3Action) {}

func GetPassportMethodModule3Actions() []workspaces.Module3Action {
	routes := []workspaces.Module3Action{
		PASSPORT_METHOD_ACTION_QUERY,
		PASSPORT_METHOD_ACTION_EXPORT,
		PASSPORT_METHOD_ACTION_GET_ONE,
		PASSPORT_METHOD_ACTION_POST_ONE,
		PASSPORT_METHOD_ACTION_PATCH,
		PASSPORT_METHOD_ACTION_PATCH_BULK,
		PASSPORT_METHOD_ACTION_DELETE,
	}
	// Append user defined functions
	AppendPassportMethodRouter(&routes)
	return routes
}

var PERM_ROOT_PASSPORT_METHOD = workspaces.PermissionInfo{
	CompleteKey: "root.manage.abac.passport-method.*",
	Name:        "Entire passport method actions (*)",
	Description: "",
}
var PERM_ROOT_PASSPORT_METHOD_DELETE = workspaces.PermissionInfo{
	CompleteKey: "root.manage.abac.passport-method.delete",
	Name:        "Delete passport method",
	Description: "",
}
var PERM_ROOT_PASSPORT_METHOD_CREATE = workspaces.PermissionInfo{
	CompleteKey: "root.manage.abac.passport-method.create",
	Name:        "Create passport method",
	Description: "",
}
var PERM_ROOT_PASSPORT_METHOD_UPDATE = workspaces.PermissionInfo{
	CompleteKey: "root.manage.abac.passport-method.update",
	Name:        "Update passport method",
	Description: "",
}
var PERM_ROOT_PASSPORT_METHOD_QUERY = workspaces.PermissionInfo{
	CompleteKey: "root.manage.abac.passport-method.query",
	Name:        "Query passport method",
	Description: "",
}
var ALL_PASSPORT_METHOD_PERMISSIONS = []workspaces.PermissionInfo{
	PERM_ROOT_PASSPORT_METHOD_DELETE,
	PERM_ROOT_PASSPORT_METHOD_CREATE,
	PERM_ROOT_PASSPORT_METHOD_UPDATE,
	PERM_ROOT_PASSPORT_METHOD_QUERY,
	PERM_ROOT_PASSPORT_METHOD,
}
var PassportMethodType = newPassportMethodType()

func newPassportMethodType() *xPassportMethodType {
	return &xPassportMethodType{
		Email:  "email",
		Phone:  "phone",
		Google: "google",
	}
}

type xPassportMethodType struct {
	Email  string
	Phone  string
	Google string
}

var PassportMethodRegion = newPassportMethodRegion()

func newPassportMethodRegion() *xPassportMethodRegion {
	return &xPassportMethodRegion{
		Global: "global",
	}
}

type xPassportMethodRegion struct {
	Global string
}

func NewPassportMethodCreatedEvent(
	payload *PassportMethodEntity,
	query *workspaces.QueryDSL,
) (*workspaces.Event, error) {
	event := &workspaces.Event{
		Name:    "PassportMethodCreated",
		Payload: payload,
		Security: &workspaces.SecurityModel{
			ActionRequires: []workspaces.PermissionInfo{
				PERM_ROOT_PASSPORT_METHOD_QUERY,
			},
			ResolveStrategy: "workspace",
		},
		CacheKey: "*abac.PassportMethodEntity",
	}
	// Apply the source of the event based on querydsl
	workspaces.ApplyQueryDslContextToEvent(event, *query)
	return event, nil
}
func NewPassportMethodUpdatedEvent(
	payload *PassportMethodEntity,
	query *workspaces.QueryDSL,
) (*workspaces.Event, error) {
	event := &workspaces.Event{
		Name:    "PassportMethodUpdated",
		Payload: payload,
		Security: &workspaces.SecurityModel{
			ActionRequires: []workspaces.PermissionInfo{
				PERM_ROOT_PASSPORT_METHOD_QUERY,
			},
			ResolveStrategy: "workspace",
		},
		CacheKey: "PassportMethodEntity",
	}
	// Apply the source of the event based on querydsl
	workspaces.ApplyQueryDslContextToEvent(event, *query)
	return event, nil
}

var PassportMethodEntityBundle = workspaces.EntityBundle{
	Permissions: ALL_PASSPORT_METHOD_PERMISSIONS,
	// Cli command has been exluded, since we use module to wrap all the entities
	// to be more easier to wrap up.
	// Create your own bundle if you need with Cli
	//CliCommands: []cli.Command{
	//	PassportMethodCliFn(),
	//},
	Actions:      GetPassportMethodModule3Actions(),
	MockProvider: PassportMethodImportMocks,
	AutoMigrationEntities: []interface{}{
		&PassportMethodEntity{},
	},
}
