package abac

/*
*	Generated by fireback 1.2.2
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"embed"
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/gookit/event"
	jsoniter "github.com/json-iterator/go"
	"github.com/schollz/progressbar/v3"
	metas "github.com/torabian/fireback/modules/abac/metas"
	mocks "github.com/torabian/fireback/modules/abac/mocks/EmailConfirmation"
	seeders "github.com/torabian/fireback/modules/abac/seeders/EmailConfirmation"
	"github.com/torabian/fireback/modules/workspaces"
	"github.com/urfave/cli"
	"gopkg.in/yaml.v2"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	reflect "reflect"
	"strings"
)

var emailConfirmationSeedersFs = &seeders.ViewsFs

func ResetEmailConfirmationSeeders(fs *embed.FS) {
	emailConfirmationSeedersFs = fs
}

type EmailConfirmationEntityQs struct {
	User      workspaces.QueriableField `cli:"user" table:"email_confirmation" column:"user" qs:"user"`
	Status    workspaces.QueriableField `cli:"status" table:"email_confirmation" column:"status" qs:"status"`
	Email     workspaces.QueriableField `cli:"email" table:"email_confirmation" column:"email" qs:"email"`
	Key       workspaces.QueriableField `cli:"key" table:"email_confirmation" column:"key" qs:"key"`
	ExpiresAt workspaces.QueriableField `cli:"expires-at" table:"email_confirmation" column:"expires_at" qs:"expiresAt"`
}

func (x *EmailConfirmationEntityQs) GetQuery() string {
	return workspaces.GenerateQueryStringStyle(reflect.ValueOf(x), "")
}

var EmailConfirmationQsFlags = []cli.Flag{
	&cli.StringFlag{
		Name:  "user",
		Usage: "",
	},
	&cli.StringFlag{
		Name:  "status",
		Usage: "",
	},
	&cli.StringFlag{
		Name:  "email",
		Usage: "",
	},
	&cli.StringFlag{
		Name:  "key",
		Usage: "",
	},
	&cli.StringFlag{
		Name:  "expires-at",
		Usage: "",
	},
}

type EmailConfirmationEntity struct {
	// Defines the visibility of the record in the table.
	// Visibility is a detailed topic, you can check all of the visibility values in workspaces/visibility.go
	// by default, visibility of record are 0, means they are protected by the workspace
	// which are being created, and visible to every member of the workspace
	Visibility workspaces.String `json:"visibility,omitempty" yaml:"visibility,omitempty" xml:"visibility,omitempty"`
	// The unique-id of the workspace which content belongs to. Upon creation this will be designated
	// to the selected workspace by user, if they have write access. You can change this value
	// or prevent changes to it manually (on root features for example modifying other workspace)
	WorkspaceId workspaces.String `json:"workspaceId,omitempty" xml:"workspaceId,omitempty" yaml:"workspaceId,omitempty"`
	// The unique-id of the parent table, which this record is being linked to.
	// used internally for making relations in fireback, generally does not need manual changes
	// or modification by the developer or user. For example, if you have a object inside an object
	// the unique-id of the parent will be written in the child.
	LinkerId workspaces.String `json:"linkerId,omitempty" xml:"linkerId,omitempty" yaml:"linkerId,omitempty"`
	// Used for recursive or parent-child operations. Some tables, are having nested relations,
	// and this field makes the table self refrenceing. ParentId needs to exist in the table before
	// creating of modifying a record.
	ParentId workspaces.String `json:"parentId,omitempty" xml:"parentId,omitempty" yaml:"parentId,omitempty"`
	// Makes a field deletable. Some records should not be deletable at all.
	// default it's true.
	IsDeletable *bool `json:"isDeletable,omitempty" xml:"isDeletable,omitempty" yaml:"isDeletable,omitempty" gorm:"default:true"`
	// Makes a field updatable. Some records should not be updatable at all.
	// default it's true.
	IsUpdatable *bool `json:"isUpdatable,omitempty" xml:"isUpdatable,omitempty" yaml:"isUpdatable,omitempty" gorm:"default:true"`
	// The unique-id of the user which is creating the record, or the record belongs to.
	// Administration might want to change this to any user, by default Fireback fills
	// it to the current authenticated user.
	UserId workspaces.String `json:"userId,omitempty" xml:"userId,omitempty" yaml:"userId,omitempty"`
	// General mechanism to rank the elements. From code perspective, it's just a number,
	// but you can sort it based on any logic for records to make a ranking, sorting.
	// they should not be unique across a table.
	Rank workspaces.Int64 `json:"rank,omitempty" yaml:"rank,omitempty" xml:"rank,omitempty" gorm:"type:int;name:rank"`
	// Primary numeric key in the database. This value is not meant to be exported to public
	// or be used to access data at all. Rather a mechanism of indexing columns internally
	// or cursor pagination in future releases of fireback, or better search performance.
	ID uint `gorm:"primaryKey;autoIncrement" json:"-" yaml:"-" xml:"-"`
	// Unique id of the record across the table. This value will be accessed from public APIs,
	// and many other places intead of numeric ID property.
	// Upon generation, a UUID automatically is being assigned, and if user has specified the
	// Unique id in the post body, it will be used. This mechanism allows to manage unsaved
	// content on front-end much easier than requiring parent to exists first.
	UniqueId string `json:"uniqueId,omitempty" xml:"uniqueId,omitempty" gorm:"unique;not null;size:100;" yaml:"uniqueId,omitempty"`
	// The time that the record has been created in nano-seconds.
	// the field will be automatically populated by gorm orm.
	Created int64 `json:"created,omitempty" xml:"created,omitempty" yaml:"created,omitempty" gorm:"autoUpdateTime:nano"`
	// The time that the record has been updated in nano-seconds.
	// the field will be automatically populated by gorm orm.
	Updated int64 `json:"updated,omitempty" xml:"updated,omitempty" yaml:"updated,omitempty"`
	// The time that the record has been deleted softly (means the data still exists in database, but no longer visible to any feature) in nano seconds
	// you need to make sure check this field if writing custom sql queries.
	// the field will be automatically populated by gorm orm.
	Deleted int64 `json:"deleted,omitempty" xml:"deleted,omitempty" yaml:"deleted,omitempty"`
	// Record creation date time formatting based on locale of the headers, or other
	// possible factors.
	CreatedFormatted string `json:"createdFormatted,omitempty" xml:"createdFormatted,omitempty" yaml:"createdFormatted,omitempty" sql:"-" gorm:"-"`
	// Record update date time formatting based on locale of the headers, or other
	// possible factors.
	UpdatedFormatted string                     `json:"updatedFormatted,omitempty" xml:"updatedFormatted,omitempty" yaml:"updatedFormatted,omitempty" sql:"-" gorm:"-"`
	User             *UserEntity                `json:"user" xml:"user" yaml:"user"    gorm:"foreignKey:UserId;references:UniqueId"      `
	Status           string                     `json:"status" xml:"status" yaml:"status"        `
	Email            string                     `json:"email" xml:"email" yaml:"email"        `
	Key              string                     `json:"key" xml:"key" yaml:"key"        `
	ExpiresAt        string                     `json:"expiresAt" xml:"expiresAt" yaml:"expiresAt"        `
	Children         []*EmailConfirmationEntity `csv:"-" gorm:"-" sql:"-" json:"children,omitempty" xml:"children,omitempty"  yaml:"children,omitempty"`
	LinkedTo         *EmailConfirmationEntity   `csv:"-" yaml:"-" gorm:"-" json:"-" sql:"-" xml:"-"`
}

func EmailConfirmationEntityStream(q workspaces.QueryDSL) (chan []*EmailConfirmationEntity, *workspaces.QueryResultMeta, error) {
	cn := make(chan []*EmailConfirmationEntity)
	q.ItemsPerPage = 50
	q.StartIndex = 0
	_, qrm, err := EmailConfirmationActions.Query(q)
	if err != nil {
		return nil, nil, err
	}
	go func() {
		defer close(cn)
		for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
			items, _, _ := EmailConfirmationActions.Query(q)
			i += q.ItemsPerPage
			q.StartIndex = i
			cn <- items
		}
	}()
	return cn, qrm, nil
}

type EmailConfirmationEntityList struct {
	Items []*EmailConfirmationEntity
}

func NewEmailConfirmationEntityList(items []*EmailConfirmationEntity) *EmailConfirmationEntityList {
	return &EmailConfirmationEntityList{
		Items: items,
	}
}
func (x *EmailConfirmationEntityList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *EmailConfirmationEntityList) ToTree() *workspaces.TreeOperation[EmailConfirmationEntity] {
	return workspaces.NewTreeOperation(
		x.Items,
		func(t *EmailConfirmationEntity) string {
			if !t.ParentId.Valid {
				return ""
			}
			return t.ParentId.String
		},
		func(t *EmailConfirmationEntity) string {
			return t.UniqueId
		},
	)
}

var EmailConfirmationPreloadRelations []string = []string{}

type emailConfirmationActionsSig struct {
	Update         func(query workspaces.QueryDSL, dto *EmailConfirmationEntity) (*EmailConfirmationEntity, *workspaces.IError)
	Create         func(dto *EmailConfirmationEntity, query workspaces.QueryDSL) (*EmailConfirmationEntity, *workspaces.IError)
	Upsert         func(dto *EmailConfirmationEntity, query workspaces.QueryDSL) (*EmailConfirmationEntity, *workspaces.IError)
	SeederInit     func() *EmailConfirmationEntity
	Remove         func(query workspaces.QueryDSL) (int64, *workspaces.IError)
	MultiInsert    func(dtos []*EmailConfirmationEntity, query workspaces.QueryDSL) ([]*EmailConfirmationEntity, *workspaces.IError)
	GetOne         func(query workspaces.QueryDSL) (*EmailConfirmationEntity, *workspaces.IError)
	GetByWorkspace func(query workspaces.QueryDSL) (*EmailConfirmationEntity, *workspaces.IError)
	Query          func(query workspaces.QueryDSL) ([]*EmailConfirmationEntity, *workspaces.QueryResultMeta, error)
}

var EmailConfirmationActions emailConfirmationActionsSig = emailConfirmationActionsSig{
	Update:         EmailConfirmationActionUpdateFn,
	Create:         EmailConfirmationActionCreateFn,
	Upsert:         EmailConfirmationActionUpsertFn,
	Remove:         EmailConfirmationActionRemoveFn,
	SeederInit:     EmailConfirmationActionSeederInitFn,
	MultiInsert:    EmailConfirmationMultiInsertFn,
	GetOne:         EmailConfirmationActionGetOneFn,
	GetByWorkspace: EmailConfirmationActionGetByWorkspaceFn,
	Query:          EmailConfirmationActionQueryFn,
}

func EmailConfirmationActionUpsertFn(dto *EmailConfirmationEntity, query workspaces.QueryDSL) (*EmailConfirmationEntity, *workspaces.IError) {
	return nil, nil
}

var EMAIL_CONFIRMATION_EVENT_CREATED = "emailConfirmation.created"
var EMAIL_CONFIRMATION_EVENT_UPDATED = "emailConfirmation.updated"
var EMAIL_CONFIRMATION_EVENT_DELETED = "emailConfirmation.deleted"
var EMAIL_CONFIRMATION_EVENTS = []string{
	EMAIL_CONFIRMATION_EVENT_CREATED,
	EMAIL_CONFIRMATION_EVENT_UPDATED,
	EMAIL_CONFIRMATION_EVENT_DELETED,
}

type EmailConfirmationFieldMap struct {
	User      workspaces.TranslatedString `yaml:"user"`
	Status    workspaces.TranslatedString `yaml:"status"`
	Email     workspaces.TranslatedString `yaml:"email"`
	Key       workspaces.TranslatedString `yaml:"key"`
	ExpiresAt workspaces.TranslatedString `yaml:"expiresAt"`
}

var EmailConfirmationEntityMetaConfig map[string]int64 = map[string]int64{}
var EmailConfirmationEntityJsonSchema = workspaces.ExtractEntityFields(reflect.ValueOf(&EmailConfirmationEntity{}))

func entityEmailConfirmationFormatter(dto *EmailConfirmationEntity, query workspaces.QueryDSL) {
	if dto == nil {
		return
	}
	if dto.Created > 0 {
		dto.CreatedFormatted = workspaces.FormatDateBasedOnQuery(dto.Created, query)
	}
	if dto.Updated > 0 {
		dto.CreatedFormatted = workspaces.FormatDateBasedOnQuery(dto.Updated, query)
	}
}
func EmailConfirmationActionSeederMultiple(query workspaces.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	batchSize := 100
	bar := progressbar.Default(int64(count))
	// Collect entities in batches
	var entitiesBatch []*EmailConfirmationEntity
	for i := 1; i <= count; i++ {
		entity := EmailConfirmationActions.SeederInit()
		entitiesBatch = append(entitiesBatch, entity)
		// When batch size is reached, perform the batch insert
		if len(entitiesBatch) == batchSize || i == count {
			// Insert batch
			_, err := EmailConfirmationActions.MultiInsert(entitiesBatch, query)
			if err == nil {
				successInsert += len(entitiesBatch)
			} else {
				fmt.Println(err)
				failureInsert += len(entitiesBatch)
			}
			// Clear the batch after insert
			entitiesBatch = nil
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func EmailConfirmationActionSeeder(query workspaces.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	bar := progressbar.Default(int64(count))
	for i := 1; i <= count; i++ {
		entity := EmailConfirmationActions.SeederInit()
		_, err := EmailConfirmationActions.Create(entity, query)
		if err == nil {
			successInsert++
		} else {
			fmt.Println(err)
			failureInsert++
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func (x *EmailConfirmationEntity) Seeder() string {
	obj := EmailConfirmationActions.SeederInit()
	v, _ := json.MarshalIndent(obj, "", "  ")
	return string(v)
}
func EmailConfirmationActionSeederInitFn() *EmailConfirmationEntity {
	entity := &EmailConfirmationEntity{}
	return entity
}
func EmailConfirmationAssociationCreate(dto *EmailConfirmationEntity, query workspaces.QueryDSL) error {
	return nil
}

/**
* These kind of content are coming from another entity, which is indepndent module
* If we want to create them, we need to do it before. This is not association.
**/
func EmailConfirmationRelationContentCreate(dto *EmailConfirmationEntity, query workspaces.QueryDSL) error {
	return nil
}
func EmailConfirmationRelationContentUpdate(dto *EmailConfirmationEntity, query workspaces.QueryDSL) error {
	return nil
}
func EmailConfirmationPolyglotUpdateHandler(dto *EmailConfirmationEntity, query workspaces.QueryDSL) {
	if dto == nil {
		return
	}
}

/**
 * This will be validating your entity fully. Important note is that, you add validate:* tag
 * in your entity, it will automatically work here. For slices inside entity, make sure you add
 * extra line of AppendSliceErrors, otherwise they won't be detected
 */
func EmailConfirmationValidator(dto *EmailConfirmationEntity, isPatch bool) *workspaces.IError {
	err := workspaces.CommonStructValidatorPointer(dto, isPatch)
	return err
}

// Creates a set of natural language queries, which can be used with
// AI tools to create content or help with some tasks
var EmailConfirmationAskCmd cli.Command = cli.Command{
	Name:  "nlp",
	Usage: "Set of natural language queries which helps creating content or data",
	Subcommands: []cli.Command{
		{
			Name:  "sample",
			Usage: "Asks for generating sample by giving an example data",
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:  "format",
					Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
					Value: "yaml",
				},
				&cli.IntFlag{
					Name:  "count",
					Usage: "How many samples to ask",
					Value: 30,
				},
			},
			Action: func(c *cli.Context) error {
				v := &EmailConfirmationEntity{}
				format := c.String("format")
				request := "\033[1m" + `
I need you to create me an array of exact signature as the example given below,
with at least ` + fmt.Sprint(c.String("count")) + ` items, mock the content with few words, and guess the possible values
based on the common sense. I need the output to be a valid ` + format + ` file.
Make sure you wrap the entire array in 'items' field. Also before that, I provide some explanation of each field:
User: (type: one) Description: 
Status: (type: string) Description: 
Email: (type: string) Description: 
Key: (type: string) Description: 
ExpiresAt: (type: string) Description: 
And here is the actual object signature:
` + v.Seeder() + `
`
				fmt.Println(request)
				return nil
			},
		},
	},
}

func EmailConfirmationEntityPreSanitize(dto *EmailConfirmationEntity, query workspaces.QueryDSL) {
}
func EmailConfirmationEntityBeforeCreateAppend(dto *EmailConfirmationEntity, query workspaces.QueryDSL) {
	if dto.UniqueId == "" {
		dto.UniqueId = workspaces.UUID()
	}
	dto.WorkspaceId = workspaces.NewString(query.WorkspaceId)
	dto.UserId = workspaces.NewString(query.UserId)
	EmailConfirmationRecursiveAddUniqueId(dto, query)
}
func EmailConfirmationRecursiveAddUniqueId(dto *EmailConfirmationEntity, query workspaces.QueryDSL) {
}

/*
*
	Batch inserts, do not have all features that create
	operation does. Use it with unnormalized content,
	or read the source code carefully.
  This is not marked as an action, because it should not be available publicly
  at this moment.
*
*/
func EmailConfirmationMultiInsertFn(dtos []*EmailConfirmationEntity, query workspaces.QueryDSL) ([]*EmailConfirmationEntity, *workspaces.IError) {
	if len(dtos) > 0 {
		for index := range dtos {
			EmailConfirmationEntityPreSanitize(dtos[index], query)
			EmailConfirmationEntityBeforeCreateAppend(dtos[index], query)
		}
		var dbref *gorm.DB = nil
		if query.Tx == nil {
			dbref = workspaces.GetDbRef()
		} else {
			dbref = query.Tx
		}
		query.Tx = dbref
		err := dbref.Create(&dtos).Error
		if err != nil {
			return nil, workspaces.GormErrorToIError(err)
		}
	}
	return dtos, nil
}
func EmailConfirmationActionBatchCreateFn(dtos []*EmailConfirmationEntity, query workspaces.QueryDSL) ([]*EmailConfirmationEntity, *workspaces.IError) {
	if dtos != nil && len(dtos) > 0 {
		items := []*EmailConfirmationEntity{}
		for _, item := range dtos {
			s, err := EmailConfirmationActions.Create(item, query)
			if err != nil {
				return nil, err
			}
			items = append(items, s)
		}
		return items, nil
	}
	return dtos, nil
}
func EmailConfirmationDeleteEntireChildren(query workspaces.QueryDSL, dto *EmailConfirmationEntity) *workspaces.IError {
	// intentionally removed this. It's hard to implement it, and probably wrong without
	// proper on delete cascade
	return nil
}
func EmailConfirmationActionCreateFn(dto *EmailConfirmationEntity, query workspaces.QueryDSL) (*EmailConfirmationEntity, *workspaces.IError) {
	// 1. Validate always
	if iError := EmailConfirmationValidator(dto, false); iError != nil {
		return nil, iError
	}
	// 1.5 Sanitize the content coming of the front-end
	EmailConfirmationEntityPreSanitize(dto, query)
	// 2. Append the necessary information about user, workspace
	EmailConfirmationEntityBeforeCreateAppend(dto, query)
	// 3. Create other entities if we want select from them
	EmailConfirmationRelationContentCreate(dto, query)
	// 4. Create the entity
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = workspaces.GetDbRef()
	} else {
		dbref = query.Tx
	}
	query.Tx = dbref
	err := dbref.Create(&dto).Error
	if err != nil {
		err := workspaces.GormErrorToIError(err)
		return nil, err
	}
	// 5. Create sub entities, objects or arrays, association to other entities
	EmailConfirmationAssociationCreate(dto, query)
	// 6. Fire the event into system
	event.MustFire(EMAIL_CONFIRMATION_EVENT_CREATED, event.M{
		"entity":    dto,
		"entityKey": workspaces.GetTypeString(&EmailConfirmationEntity{}),
		"target":    "workspace",
		"unqiueId":  query.WorkspaceId,
	})
	return dto, nil
}
func EmailConfirmationActionGetOneFn(query workspaces.QueryDSL) (*EmailConfirmationEntity, *workspaces.IError) {
	refl := reflect.ValueOf(&EmailConfirmationEntity{})
	item, err := workspaces.GetOneEntity[EmailConfirmationEntity](query, refl)
	entityEmailConfirmationFormatter(item, query)
	return item, err
}
func EmailConfirmationActionGetByWorkspaceFn(query workspaces.QueryDSL) (*EmailConfirmationEntity, *workspaces.IError) {
	refl := reflect.ValueOf(&EmailConfirmationEntity{})
	item, err := workspaces.GetOneByWorkspaceEntity[EmailConfirmationEntity](query, refl)
	entityEmailConfirmationFormatter(item, query)
	return item, err
}
func EmailConfirmationActionQueryFn(query workspaces.QueryDSL) ([]*EmailConfirmationEntity, *workspaces.QueryResultMeta, error) {
	refl := reflect.ValueOf(&EmailConfirmationEntity{})
	items, meta, err := workspaces.QueryEntitiesPointer[EmailConfirmationEntity](query, refl)
	for _, item := range items {
		entityEmailConfirmationFormatter(item, query)
	}
	return items, meta, err
}

var emailConfirmationMemoryItems []*EmailConfirmationEntity = []*EmailConfirmationEntity{}

func EmailConfirmationEntityIntoMemory() {
	q := workspaces.QueryDSL{
		ItemsPerPage: 500,
		StartIndex:   0,
	}
	_, qrm, _ := EmailConfirmationActions.Query(q)
	for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
		items, _, _ := EmailConfirmationActions.Query(q)
		emailConfirmationMemoryItems = append(emailConfirmationMemoryItems, items...)
		i += q.ItemsPerPage
		q.StartIndex = i
	}
}
func EmailConfirmationMemGet(id uint) *EmailConfirmationEntity {
	for _, item := range emailConfirmationMemoryItems {
		if item.ID == id {
			return item
		}
	}
	return nil
}
func EmailConfirmationMemJoin(items []uint) []*EmailConfirmationEntity {
	res := []*EmailConfirmationEntity{}
	for _, item := range items {
		v := EmailConfirmationMemGet(item)
		if v != nil {
			res = append(res, v)
		}
	}
	return res
}
func EmailConfirmationUpdateExec(dbref *gorm.DB, query workspaces.QueryDSL, fields *EmailConfirmationEntity) (*EmailConfirmationEntity, *workspaces.IError) {
	uniqueId := fields.UniqueId
	query.TriggerEventName = EMAIL_CONFIRMATION_EVENT_UPDATED
	EmailConfirmationEntityPreSanitize(fields, query)
	var item EmailConfirmationEntity
	var itemRefetched EmailConfirmationEntity
	// If the entity is distinct by workspace, then the Query.WorkspaceId
	// which is selected is being used as the condition for create or update
	// if not, the unique Id is being used
	cond2 := &EmailConfirmationEntity{UniqueId: uniqueId}
	q := dbref.
		Where(cond2).
		FirstOrCreate(&item)
	err := q.UpdateColumns(fields).Error
	if err != nil {
		return nil, workspaces.GormErrorToIError(err)
	}
	query.Tx = dbref
	EmailConfirmationRelationContentUpdate(fields, query)
	EmailConfirmationPolyglotUpdateHandler(fields, query)
	if ero := EmailConfirmationDeleteEntireChildren(query, fields); ero != nil {
		return nil, ero
	}
	// @meta(update has many)
	err = dbref.
		Preload(clause.Associations).
		Where(&EmailConfirmationEntity{UniqueId: uniqueId}).
		First(&itemRefetched).Error
	if err != nil {
		return nil, workspaces.GormErrorToIError(err)
	}
	event.MustFire(query.TriggerEventName, event.M{
		"entity":   &item,
		"target":   "workspace",
		"unqiueId": query.WorkspaceId,
	})
	return &itemRefetched, nil
}
func EmailConfirmationActionUpdateFn(query workspaces.QueryDSL, fields *EmailConfirmationEntity) (*EmailConfirmationEntity, *workspaces.IError) {
	if fields == nil {
		return nil, workspaces.Create401Error(&workspaces.WorkspacesMessages.BodyIsMissing, []string{})
	}
	// 1. Validate always
	if iError := EmailConfirmationValidator(fields, true); iError != nil {
		return nil, iError
	}
	// Let's not add this. I am not sure of the consequences
	// EmailConfirmationRecursiveAddUniqueId(fields, query)
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = workspaces.GetDbRef()
		var item *EmailConfirmationEntity
		vf := dbref.Transaction(func(tx *gorm.DB) error {
			dbref = tx
			var err *workspaces.IError
			item, err = EmailConfirmationUpdateExec(dbref, query, fields)
			if err == nil {
				return nil
			} else {
				return err
			}
		})
		return item, workspaces.CastToIError(vf)
	} else {
		dbref = query.Tx
		return EmailConfirmationUpdateExec(dbref, query, fields)
	}
}

var EmailConfirmationWipeCmd cli.Command = cli.Command{
	Name:  "wipe",
	Usage: "Wipes entire emailconfirmations ",
	Action: func(c *cli.Context) error {
		query := workspaces.CommonCliQueryDSLBuilderAuthorize(c, &workspaces.SecurityModel{
			ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_EMAIL_CONFIRMATION_DELETE},
		})
		count, _ := EmailConfirmationActionWipeClean(query)
		fmt.Println("Removed", count, "of entities")
		return nil
	},
}

func EmailConfirmationActionRemoveFn(query workspaces.QueryDSL) (int64, *workspaces.IError) {
	refl := reflect.ValueOf(&EmailConfirmationEntity{})
	query.ActionRequires = []workspaces.PermissionInfo{PERM_ROOT_EMAIL_CONFIRMATION_DELETE}
	return workspaces.RemoveEntity[EmailConfirmationEntity](query, refl)
}
func EmailConfirmationActionWipeClean(query workspaces.QueryDSL) (int64, error) {
	var err error
	var count int64 = 0
	{
		subCount, subErr := workspaces.WipeCleanEntity[EmailConfirmationEntity]()
		if subErr != nil {
			fmt.Println("Error while wiping 'EmailConfirmationEntity'", subErr)
			return count, subErr
		} else {
			count += subCount
		}
	}
	return count, err
}
func EmailConfirmationActionBulkUpdate(
	query workspaces.QueryDSL, dto *workspaces.BulkRecordRequest[EmailConfirmationEntity]) (
	*workspaces.BulkRecordRequest[EmailConfirmationEntity], *workspaces.IError,
) {
	result := []*EmailConfirmationEntity{}
	err := workspaces.GetDbRef().Transaction(func(tx *gorm.DB) error {
		query.Tx = tx
		for _, record := range dto.Records {
			item, err := EmailConfirmationActions.Update(query, record)
			if err != nil {
				return err
			} else {
				result = append(result, item)
			}
		}
		return nil
	})
	if err == nil {
		return dto, nil
	}
	return nil, err.(*workspaces.IError)
}
func (x *EmailConfirmationEntity) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}

var EmailConfirmationEntityMeta = workspaces.TableMetaData{
	EntityName:    "EmailConfirmation",
	ExportKey:     "email-confirmations",
	TableNameInDb: "email-confirmation_entities",
	EntityObject:  &EmailConfirmationEntity{},
	ExportStream:  EmailConfirmationActionExportT,
	ImportQuery:   EmailConfirmationActionImport,
}

func EmailConfirmationActionExport(
	query workspaces.QueryDSL,
) (chan []byte, *workspaces.IError) {
	return workspaces.YamlExporterChannel[EmailConfirmationEntity](query, EmailConfirmationActions.Query, EmailConfirmationPreloadRelations)
}
func EmailConfirmationActionExportT(
	query workspaces.QueryDSL,
) (chan []interface{}, *workspaces.IError) {
	return workspaces.YamlExporterChannelT[EmailConfirmationEntity](query, EmailConfirmationActions.Query, EmailConfirmationPreloadRelations)
}
func EmailConfirmationActionImport(
	dto interface{}, query workspaces.QueryDSL,
) *workspaces.IError {
	var json = jsoniter.ConfigCompatibleWithStandardLibrary
	var content EmailConfirmationEntity
	cx, err2 := json.Marshal(dto)
	if err2 != nil {
		return workspaces.Create401Error(&workspaces.WorkspacesMessages.InvalidContent, []string{})
	}
	json.Unmarshal(cx, &content)
	_, err := EmailConfirmationActions.Create(&content, query)
	return err
}

var EmailConfirmationCommonCliFlags = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "user-id",
		Required: false,
		Usage:    `user (one)`,
	},
	&cli.StringFlag{
		Name:     "status",
		Required: false,
		Usage:    `status (string)`,
	},
	&cli.StringFlag{
		Name:     "email",
		Required: false,
		Usage:    `email (string)`,
	},
	&cli.StringFlag{
		Name:     "key",
		Required: false,
		Usage:    `key (string)`,
	},
	&cli.StringFlag{
		Name:     "expires-at",
		Required: false,
		Usage:    `expiresAt (string)`,
	},
}
var EmailConfirmationCommonInteractiveCliFlags = []workspaces.CliInteractiveFlag{
	{
		Name:        "status",
		StructField: "Status",
		Required:    false,
		Recommended: false,
		Usage:       `status`,
		Type:        "string",
	},
	{
		Name:        "email",
		StructField: "Email",
		Required:    false,
		Recommended: false,
		Usage:       `email`,
		Type:        "string",
	},
	{
		Name:        "key",
		StructField: "Key",
		Required:    false,
		Recommended: false,
		Usage:       `key`,
		Type:        "string",
	},
	{
		Name:        "expiresAt",
		StructField: "ExpiresAt",
		Required:    false,
		Recommended: false,
		Usage:       `expiresAt`,
		Type:        "string",
	},
}
var EmailConfirmationCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "user-id",
		Required: false,
		Usage:    `user (one)`,
	},
	&cli.StringFlag{
		Name:     "status",
		Required: false,
		Usage:    `status (string)`,
	},
	&cli.StringFlag{
		Name:     "email",
		Required: false,
		Usage:    `email (string)`,
	},
	&cli.StringFlag{
		Name:     "key",
		Required: false,
		Usage:    `key (string)`,
	},
	&cli.StringFlag{
		Name:     "expires-at",
		Required: false,
		Usage:    `expiresAt (string)`,
	},
}
var EmailConfirmationCreateCmd cli.Command = EMAIL_CONFIRMATION_ACTION_POST_ONE.ToCli()
var EmailConfirmationCreateInteractiveCmd cli.Command = cli.Command{
	Name:  "ic",
	Usage: "Creates a new entity, using requied fields in an interactive name",
	Flags: []cli.Flag{
		&cli.BoolFlag{
			Name:  "all",
			Usage: "Interactively asks for all inputs, not only required ones",
		},
	},
	Action: func(c *cli.Context) {
		query := workspaces.CommonCliQueryDSLBuilderAuthorize(c, &workspaces.SecurityModel{
			ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_EMAIL_CONFIRMATION_CREATE},
		})
		entity := &EmailConfirmationEntity{}
		workspaces.PopulateInteractively(entity, c, EmailConfirmationCommonInteractiveCliFlags)
		if entity, err := EmailConfirmationActions.Create(entity, query); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := yaml.Marshal(entity)
			fmt.Println(workspaces.FormatYamlKeys(string(f)))
		}
	},
}
var EmailConfirmationUpdateCmd cli.Command = cli.Command{
	Name:    "update",
	Aliases: []string{"u"},
	Flags:   EmailConfirmationCommonCliFlagsOptional,
	Usage:   "Updates entity by passing the parameters",
	Action: func(c *cli.Context) error {
		query := workspaces.CommonCliQueryDSLBuilderAuthorize(c, &workspaces.SecurityModel{
			ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_EMAIL_CONFIRMATION_UPDATE},
		})
		entity := CastEmailConfirmationFromCli(c)
		if entity, err := EmailConfirmationActions.Update(query, entity); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := json.MarshalIndent(entity, "", "  ")
			fmt.Println(string(f))
		}
		return nil
	},
}

func (x *EmailConfirmationEntity) FromCli(c *cli.Context) *EmailConfirmationEntity {
	return CastEmailConfirmationFromCli(c)
}
func CastEmailConfirmationFromCli(c *cli.Context) *EmailConfirmationEntity {
	template := &EmailConfirmationEntity{}
	if c.IsSet("uid") {
		template.UniqueId = c.String("uid")
	}
	if c.IsSet("pid") {
		template.ParentId = workspaces.NewStringAutoNull(c.String("pid"))
	}
	if c.IsSet("user-id") {
		template.UserId = workspaces.NewStringAutoNull(c.String("user-id"))
	}
	if c.IsSet("status") {
		template.Status = c.String("status")
	}
	if c.IsSet("email") {
		template.Email = c.String("email")
	}
	if c.IsSet("key") {
		template.Key = c.String("key")
	}
	if c.IsSet("expires-at") {
		template.ExpiresAt = c.String("expires-at")
	}
	return template
}
func EmailConfirmationSyncSeederFromFs(fsRef *embed.FS, fileNames []string, q workspaces.QueryDSL) {
	workspaces.SeederFromFSImport(
		q,
		EmailConfirmationActions.Create,
		reflect.ValueOf(&EmailConfirmationEntity{}).Elem(),
		fsRef,
		fileNames,
		true,
	)
}
func EmailConfirmationSyncSeeders() {
	workspaces.SeederFromFSImport(
		workspaces.QueryDSL{WorkspaceId: workspaces.USER_SYSTEM},
		EmailConfirmationActions.Create,
		reflect.ValueOf(&EmailConfirmationEntity{}).Elem(),
		emailConfirmationSeedersFs,
		[]string{},
		true,
	)
}
func EmailConfirmationImportMocks() {
	workspaces.SeederFromFSImport(
		workspaces.QueryDSL{},
		EmailConfirmationActions.Create,
		reflect.ValueOf(&EmailConfirmationEntity{}).Elem(),
		&mocks.ViewsFs,
		[]string{},
		false,
	)
}
func EmailConfirmationWriteQueryMock(ctx workspaces.MockQueryContext) {
	for _, lang := range ctx.Languages {
		itemsPerPage := 9999
		if ctx.ItemsPerPage > 0 {
			itemsPerPage = ctx.ItemsPerPage
		}
		f := workspaces.QueryDSL{ItemsPerPage: itemsPerPage, Language: lang, WithPreloads: ctx.WithPreloads, Deep: true}
		items, count, _ := EmailConfirmationActions.Query(f)
		result := workspaces.QueryEntitySuccessResult(f, items, count)
		workspaces.WriteMockDataToFile(lang, "", "EmailConfirmation", result)
	}
}
func EmailConfirmationsActionQueryString(keyword string, page int) ([]string, *workspaces.QueryResultMeta, error) {
	searchFields := []string{
		`unique_id %"{keyword}"%`,
		`name %"{keyword}"%`,
	}
	m := func(item *EmailConfirmationEntity) string {
		label := item.UniqueId
		// if item.Name != nil {
		// 	label += " >>> " + *item.Name
		// }
		return label
	}
	query := workspaces.QueryStringCastCli(searchFields, keyword, page)
	items, meta, err := EmailConfirmationActions.Query(query)
	stringItems := []string{}
	for _, item := range items {
		label := m(item)
		stringItems = append(stringItems, label)
	}
	return stringItems, meta, err
}

var EmailConfirmationDevCommands = []cli.Command{
	EmailConfirmationWipeCmd,
	{
		Name:  "mock",
		Usage: "Generates mock records based on the entity definition",
		Flags: []cli.Flag{
			&cli.IntFlag{
				Name:  "count",
				Usage: "how many activation key do you need to be generated and stored in database",
				Value: 10,
			},
			&cli.BoolFlag{
				Name:  "batch",
				Usage: "Multiple insert into database mode. Might miss children and relations at the moment",
			},
		},
		Action: func(c *cli.Context) error {
			query := workspaces.CommonCliQueryDSLBuilderAuthorize(c, &workspaces.SecurityModel{
				ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_EMAIL_CONFIRMATION_CREATE},
			})
			if c.Bool("batch") {
				EmailConfirmationActionSeederMultiple(query, c.Int("count"))
			} else {
				EmailConfirmationActionSeeder(query, c.Int("count"))
			}
			return nil
		},
	},
	{
		Name:    "init",
		Aliases: []string{"i"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Creates a basic seeder file for you, based on the definition module we have. You can populate this file as an example",
		Action: func(c *cli.Context) error {
			seed := EmailConfirmationActions.SeederInit()
			workspaces.CommonInitSeeder(strings.TrimSpace(c.String("format")), seed)
			return nil
		},
	},
	cli.Command{
		Name:  "mlist",
		Usage: "Prints the list of embedded mocks into the app",
		Action: func(c *cli.Context) error {
			if entity, err := workspaces.GetSeederFilenames(&mocks.ViewsFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "msync",
		Usage: "Tries to sync mocks into the system",
		Action: func(c *cli.Context) error {
			workspaces.CommonCliImportEmbedCmd(c,
				EmailConfirmationActions.Create,
				reflect.ValueOf(&EmailConfirmationEntity{}).Elem(),
				&mocks.ViewsFs,
			)
			return nil
		},
	},
}
var EmailConfirmationImportExportCommands = []cli.Command{
	{
		Name:    "validate",
		Aliases: []string{"v"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "file",
				Usage: "Validates an import file, such as yaml, json, csv, and gives some insights how the after import it would look like",
				Value: "email-confirmation-seeder-email-confirmation.yml",
				// Uncomment before publish, they need to specify
				// Required: true,
			},
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Reads a yaml file containing an array of email-confirmations, you can run this to validate if your import file is correct, and how it would look like after import",
		Action: func(c *cli.Context) error {
			data := &[]EmailConfirmationEntity{}
			workspaces.ReadYamlFile(c.String("file"), data)
			fmt.Println(data)
			return nil
		},
	},
	cli.Command{
		Name:  "slist",
		Usage: "Prints the list of files attached to this module for syncing or bootstrapping project",
		Action: func(c *cli.Context) error {
			if entity, err := workspaces.GetSeederFilenames(emailConfirmationSeedersFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "ssync",
		Usage: "Tries to sync the embedded content into the database, the list could be seen by 'slist' command",
		Action: func(c *cli.Context) error {
			workspaces.CommonCliImportEmbedCmd(c,
				EmailConfirmationActions.Create,
				reflect.ValueOf(&EmailConfirmationEntity{}).Elem(),
				emailConfirmationSeedersFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:    "export",
		Aliases: []string{"e"},
		Flags: append(workspaces.CommonQueryFlags,
			&cli.StringFlag{
				Name:     "file",
				Usage:    "The address of file you want the csv/yaml/json be exported to",
				Required: true,
			}),
		Usage: "Exports a query results into the csv/yaml/json format",
		Action: func(c *cli.Context) error {
			return workspaces.CommonCliExportCmd2(c,
				EmailConfirmationEntityStream,
				reflect.ValueOf(&EmailConfirmationEntity{}).Elem(),
				c.String("file"),
				&metas.MetaFs,
				"EmailConfirmationFieldMap.yml",
				EmailConfirmationPreloadRelations,
			)
		},
	},
	cli.Command{
		Name: "import",
		Flags: append(
			append(
				workspaces.CommonQueryFlags,
				&cli.StringFlag{
					Name:     "file",
					Usage:    "The address of file you want the csv be imported from",
					Required: true,
				}),
			EmailConfirmationCommonCliFlagsOptional...,
		),
		Usage: "imports csv/yaml/json file and place it and its children into database",
		Action: func(c *cli.Context) error {
			workspaces.CommonCliImportCmdAuthorized(c,
				EmailConfirmationActions.Create,
				reflect.ValueOf(&EmailConfirmationEntity{}).Elem(),
				c.String("file"),
				&workspaces.SecurityModel{
					ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_EMAIL_CONFIRMATION_CREATE},
				},
				func() EmailConfirmationEntity {
					v := CastEmailConfirmationFromCli(c)
					return *v
				},
			)
			return nil
		},
	},
}
var EmailConfirmationCliCommands []cli.Command = []cli.Command{
	EMAIL_CONFIRMATION_ACTION_QUERY.ToCli(),
	EMAIL_CONFIRMATION_ACTION_TABLE.ToCli(),
	EmailConfirmationCreateCmd,
	EmailConfirmationUpdateCmd,
	EmailConfirmationAskCmd,
	EmailConfirmationCreateInteractiveCmd,
	workspaces.GetCommonRemoveQuery(
		reflect.ValueOf(&EmailConfirmationEntity{}).Elem(),
		EmailConfirmationActions.Remove,
	),
}

func EmailConfirmationCliFn() cli.Command {
	commands := append(EmailConfirmationImportExportCommands, EmailConfirmationCliCommands...)
	if !workspaces.GetConfig().Production {
		commands = append(commands, EmailConfirmationDevCommands...)
	}
	return cli.Command{
		Name:        "emailconfirmation",
		Description: "EmailConfirmations module actions",
		Usage:       ``,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "language",
				Value: "en",
			},
		},
		Subcommands: commands,
	}
}

var EMAIL_CONFIRMATION_ACTION_TABLE = workspaces.Module3Action{
	Name:          "table",
	ActionAliases: []string{"t"},
	Flags:         workspaces.CommonQueryFlags,
	Description:   "Table formatted queries all of the entities in database based on the standard query format",
	Action:        EmailConfirmationActions.Query,
	CliAction: func(c *cli.Context, security *workspaces.SecurityModel) error {
		workspaces.CommonCliTableCmd2(c,
			EmailConfirmationActions.Query,
			security,
			reflect.ValueOf(&EmailConfirmationEntity{}).Elem(),
		)
		return nil
	},
}
var EMAIL_CONFIRMATION_ACTION_QUERY = workspaces.Module3Action{
	Method: "GET",
	Url:    "/email-confirmations",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_EMAIL_CONFIRMATION_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			qs := &EmailConfirmationEntityQs{}
			workspaces.HttpQueryEntity(c, EmailConfirmationActions.Query, qs)
		},
	},
	Format:         "QUERY",
	Action:         EmailConfirmationActions.Query,
	ResponseEntity: &[]EmailConfirmationEntity{},
	Out: &workspaces.Module3ActionBody{
		Entity: "EmailConfirmationEntity",
	},
	CliAction: func(c *cli.Context, security *workspaces.SecurityModel) error {
		qs := &EmailConfirmationEntityQs{}
		workspaces.CommonCliQueryCmd3(
			c,
			EmailConfirmationActions.Query,
			security,
			qs,
		)
		return nil
	},
	CliName:       "query",
	Name:          "query",
	ActionAliases: []string{"q"},
	Flags:         append(workspaces.CommonQueryFlags, EmailConfirmationQsFlags...),
	Description:   "Queries all of the entities in database based on the standard query format (s+)",
}
var EMAIL_CONFIRMATION_ACTION_EXPORT = workspaces.Module3Action{
	Method: "GET",
	Url:    "/email-confirmations/export",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_EMAIL_CONFIRMATION_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpStreamFileChannel(c, EmailConfirmationActionExport)
		},
	},
	Format:         "QUERY",
	Action:         EmailConfirmationActionExport,
	ResponseEntity: &[]EmailConfirmationEntity{},
	Out: &workspaces.Module3ActionBody{
		Entity: "EmailConfirmationEntity",
	},
}
var EMAIL_CONFIRMATION_ACTION_GET_ONE = workspaces.Module3Action{
	Method: "GET",
	Url:    "/email-confirmation/:uniqueId",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_EMAIL_CONFIRMATION_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpGetEntity(c, EmailConfirmationActions.GetOne)
		},
	},
	Format:         "GET_ONE",
	Action:         EmailConfirmationActions.GetOne,
	ResponseEntity: &EmailConfirmationEntity{},
	Out: &workspaces.Module3ActionBody{
		Entity: "EmailConfirmationEntity",
	},
}
var EMAIL_CONFIRMATION_ACTION_POST_ONE = workspaces.Module3Action{
	Name:          "create",
	ActionAliases: []string{"c"},
	Description:   "Create new emailConfirmation",
	Flags:         EmailConfirmationCommonCliFlags,
	Method:        "POST",
	Url:           "/email-confirmation",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_EMAIL_CONFIRMATION_CREATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpPostEntity(c, EmailConfirmationActions.Create)
		},
	},
	CliAction: func(c *cli.Context, security *workspaces.SecurityModel) error {
		result, err := workspaces.CliPostEntity(c, EmailConfirmationActions.Create, security)
		workspaces.HandleActionInCli(c, result, err, map[string]map[string]string{})
		return err
	},
	Action:         EmailConfirmationActions.Create,
	Format:         "POST_ONE",
	RequestEntity:  &EmailConfirmationEntity{},
	ResponseEntity: &EmailConfirmationEntity{},
	Out: &workspaces.Module3ActionBody{
		Entity: "EmailConfirmationEntity",
	},
	In: &workspaces.Module3ActionBody{
		Entity: "EmailConfirmationEntity",
	},
}
var EMAIL_CONFIRMATION_ACTION_PATCH = workspaces.Module3Action{
	Name:          "update",
	ActionAliases: []string{"u"},
	Flags:         EmailConfirmationCommonCliFlagsOptional,
	Method:        "PATCH",
	Url:           "/email-confirmation",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_EMAIL_CONFIRMATION_UPDATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpUpdateEntity(c, EmailConfirmationActions.Update)
		},
	},
	Action:         EmailConfirmationActions.Update,
	RequestEntity:  &EmailConfirmationEntity{},
	ResponseEntity: &EmailConfirmationEntity{},
	Format:         "PATCH_ONE",
	Out: &workspaces.Module3ActionBody{
		Entity: "EmailConfirmationEntity",
	},
	In: &workspaces.Module3ActionBody{
		Entity: "EmailConfirmationEntity",
	},
}
var EMAIL_CONFIRMATION_ACTION_PATCH_BULK = workspaces.Module3Action{
	Method: "PATCH",
	Url:    "/email-confirmations",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_EMAIL_CONFIRMATION_UPDATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpUpdateEntities(c, EmailConfirmationActionBulkUpdate)
		},
	},
	Action:         EmailConfirmationActionBulkUpdate,
	Format:         "PATCH_BULK",
	RequestEntity:  &workspaces.BulkRecordRequest[EmailConfirmationEntity]{},
	ResponseEntity: &workspaces.BulkRecordRequest[EmailConfirmationEntity]{},
	Out: &workspaces.Module3ActionBody{
		Entity: "EmailConfirmationEntity",
	},
	In: &workspaces.Module3ActionBody{
		Entity: "EmailConfirmationEntity",
	},
}
var EMAIL_CONFIRMATION_ACTION_DELETE = workspaces.Module3Action{
	Method: "DELETE",
	Url:    "/email-confirmation",
	Format: "DELETE_DSL",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_EMAIL_CONFIRMATION_DELETE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpRemoveEntity(c, EmailConfirmationActions.Remove)
		},
	},
	Action:         EmailConfirmationActions.Remove,
	RequestEntity:  &workspaces.DeleteRequest{},
	ResponseEntity: &workspaces.DeleteResponse{},
	TargetEntity:   &EmailConfirmationEntity{},
}

/**
 *	Override this function on EmailConfirmationEntityHttp.go,
 *	In order to add your own http
 **/
var AppendEmailConfirmationRouter = func(r *[]workspaces.Module3Action) {}

func GetEmailConfirmationModule3Actions() []workspaces.Module3Action {
	routes := []workspaces.Module3Action{
		EMAIL_CONFIRMATION_ACTION_QUERY,
		EMAIL_CONFIRMATION_ACTION_EXPORT,
		EMAIL_CONFIRMATION_ACTION_GET_ONE,
		EMAIL_CONFIRMATION_ACTION_POST_ONE,
		EMAIL_CONFIRMATION_ACTION_PATCH,
		EMAIL_CONFIRMATION_ACTION_PATCH_BULK,
		EMAIL_CONFIRMATION_ACTION_DELETE,
	}
	// Append user defined functions
	AppendEmailConfirmationRouter(&routes)
	return routes
}

var PERM_ROOT_EMAIL_CONFIRMATION = workspaces.PermissionInfo{
	CompleteKey: "root.modules.abac.email-confirmation.*",
	Name:        "Entire email confirmation actions (*)",
	Description: "",
}
var PERM_ROOT_EMAIL_CONFIRMATION_DELETE = workspaces.PermissionInfo{
	CompleteKey: "root.modules.abac.email-confirmation.delete",
	Name:        "Delete email confirmation",
	Description: "",
}
var PERM_ROOT_EMAIL_CONFIRMATION_CREATE = workspaces.PermissionInfo{
	CompleteKey: "root.modules.abac.email-confirmation.create",
	Name:        "Create email confirmation",
	Description: "",
}
var PERM_ROOT_EMAIL_CONFIRMATION_UPDATE = workspaces.PermissionInfo{
	CompleteKey: "root.modules.abac.email-confirmation.update",
	Name:        "Update email confirmation",
	Description: "",
}
var PERM_ROOT_EMAIL_CONFIRMATION_QUERY = workspaces.PermissionInfo{
	CompleteKey: "root.modules.abac.email-confirmation.query",
	Name:        "Query email confirmation",
	Description: "",
}
var ALL_EMAIL_CONFIRMATION_PERMISSIONS = []workspaces.PermissionInfo{
	PERM_ROOT_EMAIL_CONFIRMATION_DELETE,
	PERM_ROOT_EMAIL_CONFIRMATION_CREATE,
	PERM_ROOT_EMAIL_CONFIRMATION_UPDATE,
	PERM_ROOT_EMAIL_CONFIRMATION_QUERY,
	PERM_ROOT_EMAIL_CONFIRMATION,
}
var EmailConfirmationEntityBundle = workspaces.EntityBundle{
	Permissions: ALL_EMAIL_CONFIRMATION_PERMISSIONS,
	// Cli command has been exluded, since we use module to wrap all the entities
	// to be more easier to wrap up.
	// Create your own bundle if you need with Cli
	//CliCommands: []cli.Command{
	//	EmailConfirmationCliFn(),
	//},
	Actions:      GetEmailConfirmationModule3Actions(),
	MockProvider: EmailConfirmationImportMocks,
	AutoMigrationEntities: []interface{}{
		&EmailConfirmationEntity{},
	},
}
