package geo

/*
*	Generated by fireback 1.1.21
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/urfave/cli"
)

type JangoBagoo struct {
	Zagoo []*JangoBagooZagoo `json:"zagoo" yaml:"zagoo"    gorm:"foreignKey:LinkerId;references:UniqueId;constraint:OnDelete:CASCADE"      `
}

func (x *JangoBagoo) RootObjectName() string {
	return "JangoDto"
}

type JangoBagooZagoo struct {
	Userbase *string `json:"userbase" yaml:"userbase"        `
}

func (x *JangoBagooZagoo) RootObjectName() string {
	return "JangoDto"
}
func CastJangoFromCli(c *cli.Context) *JangoDto {
	template := &JangoDto{}
	return template
}

var JangoDtoCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringSliceFlag{
		Name:     "bagoo",
		Required: false,
		Usage:    "bagoo",
	},
}

type JangoDto struct {
	Bagoo []*JangoBagoo `json:"bagoo" yaml:"bagoo"    gorm:"foreignKey:LinkerId;references:UniqueId;constraint:OnDelete:CASCADE"      `
}
type JangoDtoList struct {
	Items []*JangoDto
}

func NewJangoDtoList(items []*JangoDto) *JangoDtoList {
	return &JangoDtoList{
		Items: items,
	}
}
func (x *JangoDto) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	// Intentional trim (so strings lib is always imported)
	return strings.TrimSpace("")
}
func (x *JangoDto) JsonPrint() {
	fmt.Println(x.Json())
}

// This is an experimental way to create new dtos, with exluding the pointers as helper.
func NewJangoDto() JangoDto {
	return JangoDto{}
}
