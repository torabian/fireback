package geo

/*
*	Generated by fireback 1.1.18
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/urfave/cli"
)

type DummyProductsProducts struct {
	Title *string `json:"title" yaml:"title"        `
	// Datenano also has a text representation
}

func (x *DummyProductsProducts) RootObjectName() string {
	return "DummyProductsDto"
}

type DummyProductsData struct {
	User *string `json:"user" yaml:"user"        `
	// Datenano also has a text representation
}

func (x *DummyProductsData) RootObjectName() string {
	return "DummyProductsDto"
}
func CastDummyProductsFromCli(c *cli.Context) *DummyProductsDto {
	template := &DummyProductsDto{}
	return template
}

var DummyProductsDtoCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringSliceFlag{
		Name:     "products",
		Required: false,
		Usage:    "products",
	},
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "user",
		Required: false,
		Usage:    "user",
	},
}

type DummyProductsDto struct {
	Products []*DummyProductsProducts `json:"products" yaml:"products"    gorm:"foreignKey:LinkerId;references:UniqueId;constraint:OnDelete:CASCADE"      `
	// Datenano also has a text representation
	Data *DummyProductsData `json:"data" yaml:"data"    gorm:"foreignKey:LinkerId;references:UniqueId;constraint:OnDelete:CASCADE"      `
	// Datenano also has a text representation
}
type DummyProductsDtoList struct {
	Items []*DummyProductsDto
}

func NewDummyProductsDtoList(items []*DummyProductsDto) *DummyProductsDtoList {
	return &DummyProductsDtoList{
		Items: items,
	}
}
func (x *DummyProductsDto) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	// Intentional trim (so strings lib is always imported)
	return strings.TrimSpace("")
}
func (x *DummyProductsDto) JsonPrint() {
	fmt.Println(x.Json())
}

// This is an experimental way to create new dtos, with exluding the pointers as helper.
func NewDummyProductsDto() DummyProductsDto {
	return DummyProductsDto{}
}
