package geo

/*
*	Generated by fireback 1.1.27
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"embed"
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/gookit/event"
	jsoniter "github.com/json-iterator/go"
	"github.com/schollz/progressbar/v3"
	metas "github.com/torabian/fireback/modules/geo/metas"
	mocks "github.com/torabian/fireback/modules/geo/mocks/GeoLocation"
	queries "github.com/torabian/fireback/modules/geo/queries"
	seeders "github.com/torabian/fireback/modules/geo/seeders/GeoLocation"
	"github.com/torabian/fireback/modules/workspaces"
	"github.com/urfave/cli"
	"gopkg.in/yaml.v2"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	reflect "reflect"
	"strings"
)

var geoLocationSeedersFs = &seeders.ViewsFs

func ResetGeoLocationSeeders(fs *embed.FS) {
	geoLocationSeedersFs = fs
}

type GeoLocationEntity struct {
	Visibility       *string                      `json:"visibility,omitempty" yaml:"visibility,omitempty"`
	WorkspaceId      *string                      `json:"workspaceId,omitempty" yaml:"workspaceId,omitempty"`
	LinkerId         *string                      `json:"linkerId,omitempty" yaml:"linkerId,omitempty"`
	ParentId         *string                      `json:"parentId,omitempty" yaml:"parentId,omitempty"`
	IsDeletable      *bool                        `json:"isDeletable,omitempty" yaml:"isDeletable,omitempty" gorm:"default:true"`
	IsUpdatable      *bool                        `json:"isUpdatable,omitempty" yaml:"isUpdatable,omitempty" gorm:"default:true"`
	UserId           *string                      `json:"userId,omitempty" yaml:"userId,omitempty"`
	Rank             int64                        `json:"rank,omitempty" gorm:"type:int;name:rank"`
	ID               uint                         `gorm:"primaryKey;autoIncrement" json:"id,omitempty" yaml:"id,omitempty"`
	UniqueId         string                       `json:"uniqueId,omitempty" gorm:"unique;not null;size:100;" yaml:"uniqueId,omitempty"`
	Created          int64                        `json:"created,omitempty" yaml:"created,omitempty" gorm:"autoUpdateTime:nano"`
	Updated          int64                        `json:"updated,omitempty" yaml:"updated,omitempty"`
	Deleted          int64                        `json:"deleted,omitempty" yaml:"deleted,omitempty"`
	CreatedFormatted string                       `json:"createdFormatted,omitempty" yaml:"createdFormatted,omitempty" sql:"-" gorm:"-"`
	UpdatedFormatted string                       `json:"updatedFormatted,omitempty" yaml:"updatedFormatted,omitempty" sql:"-" gorm:"-"`
	Name             *string                      `json:"name" yaml:"name"        translate:"true"  `
	Code             *string                      `json:"code" yaml:"code"        `
	Type             *GeoLocationTypeEntity       `json:"type" yaml:"type"    gorm:"foreignKey:TypeId;references:UniqueId"      `
	TypeId           *string                      `json:"typeId" yaml:"typeId"`
	Status           *string                      `json:"status" yaml:"status"        `
	Flag             *string                      `json:"flag" yaml:"flag"        `
	OfficialName     *string                      `json:"officialName" yaml:"officialName"        translate:"true"  `
	Translations     []*GeoLocationEntityPolyglot `json:"translations,omitempty" yaml:"translations,omitempty" gorm:"foreignKey:LinkerId;references:UniqueId;constraint:OnDelete:CASCADE"`
	Children         []*GeoLocationEntity         `csv:"-" gorm:"-" sql:"-" json:"children,omitempty" yaml:"children,omitempty"`
	LinkedTo         *GeoLocationEntity           `csv:"-" yaml:"-" gorm:"-" json:"-" sql:"-"`
}

func GeoLocationEntityStream(q workspaces.QueryDSL) (chan []*GeoLocationEntity, *workspaces.QueryResultMeta, error) {
	cn := make(chan []*GeoLocationEntity)
	q.ItemsPerPage = 50
	q.StartIndex = 0
	_, qrm, err := GeoLocationActionQuery(q)
	if err != nil {
		return nil, nil, err
	}
	go func() {
		for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
			items, _, _ := GeoLocationActionQuery(q)
			i += q.ItemsPerPage
			q.StartIndex = i
			cn <- items
		}
	}()
	return cn, qrm, nil
}

type GeoLocationEntityList struct {
	Items []*GeoLocationEntity
}

func NewGeoLocationEntityList(items []*GeoLocationEntity) *GeoLocationEntityList {
	return &GeoLocationEntityList{
		Items: items,
	}
}
func (x *GeoLocationEntityList) ToTree() *workspaces.TreeOperation[GeoLocationEntity] {
	return workspaces.NewTreeOperation(
		x.Items,
		func(t *GeoLocationEntity) string {
			if t.ParentId == nil {
				return ""
			}
			return *t.ParentId
		},
		func(t *GeoLocationEntity) string {
			return t.UniqueId
		},
	)
}

var GeoLocationPreloadRelations []string = []string{}
var GEO_LOCATION_EVENT_CREATED = "geoLocation.created"
var GEO_LOCATION_EVENT_UPDATED = "geoLocation.updated"
var GEO_LOCATION_EVENT_DELETED = "geoLocation.deleted"
var GEO_LOCATION_EVENTS = []string{
	GEO_LOCATION_EVENT_CREATED,
	GEO_LOCATION_EVENT_UPDATED,
	GEO_LOCATION_EVENT_DELETED,
}

type GeoLocationFieldMap struct {
	Name         workspaces.TranslatedString `yaml:"name"`
	Code         workspaces.TranslatedString `yaml:"code"`
	Type         workspaces.TranslatedString `yaml:"type"`
	Status       workspaces.TranslatedString `yaml:"status"`
	Flag         workspaces.TranslatedString `yaml:"flag"`
	OfficialName workspaces.TranslatedString `yaml:"officialName"`
}

var GeoLocationEntityMetaConfig map[string]int64 = map[string]int64{}
var GeoLocationEntityJsonSchema = workspaces.ExtractEntityFields(reflect.ValueOf(&GeoLocationEntity{}))

type GeoLocationEntityPolyglot struct {
	LinkerId     string `gorm:"uniqueId;not null;size:100;" json:"linkerId,omitempty" yaml:"linkerId,omitempty"`
	LanguageId   string `gorm:"uniqueId;not null;size:100;" json:"languageId,omitempty" yaml:"languageId,omitempty"`
	Name         string `yaml:"name,omitempty" json:"name,omitempty"`
	OfficialName string `yaml:"officialName,omitempty" json:"officialName,omitempty"`
}

func entityGeoLocationFormatter(dto *GeoLocationEntity, query workspaces.QueryDSL) {
	if dto == nil {
		return
	}
	if dto.Created > 0 {
		dto.CreatedFormatted = workspaces.FormatDateBasedOnQuery(dto.Created, query)
	}
	if dto.Updated > 0 {
		dto.CreatedFormatted = workspaces.FormatDateBasedOnQuery(dto.Updated, query)
	}
}
func GeoLocationMockEntity() *GeoLocationEntity {
	stringHolder := "~"
	int64Holder := int64(10)
	float64Holder := float64(10)
	_ = stringHolder
	_ = int64Holder
	_ = float64Holder
	entity := &GeoLocationEntity{
		Name:         &stringHolder,
		Code:         &stringHolder,
		Status:       &stringHolder,
		Flag:         &stringHolder,
		OfficialName: &stringHolder,
	}
	return entity
}
func GeoLocationActionSeederMultiple(query workspaces.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	batchSize := 100
	bar := progressbar.Default(int64(count))
	// Collect entities in batches
	var entitiesBatch []*GeoLocationEntity
	for i := 1; i <= count; i++ {
		entity := GeoLocationMockEntity()
		entitiesBatch = append(entitiesBatch, entity)
		// When batch size is reached, perform the batch insert
		if len(entitiesBatch) == batchSize || i == count {
			// Insert batch
			_, err := GeoLocationMultiInsert(entitiesBatch, query)
			if err == nil {
				successInsert += len(entitiesBatch)
			} else {
				fmt.Println(err)
				failureInsert += len(entitiesBatch)
			}
			// Clear the batch after insert
			entitiesBatch = nil
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func GeoLocationActionSeeder(query workspaces.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	bar := progressbar.Default(int64(count))
	for i := 1; i <= count; i++ {
		entity := GeoLocationMockEntity()
		_, err := GeoLocationActionCreate(entity, query)
		if err == nil {
			successInsert++
		} else {
			fmt.Println(err)
			failureInsert++
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func (x *GeoLocationEntity) GetNameTranslated(language string) string {
	if x.Translations != nil && len(x.Translations) > 0 {
		for _, item := range x.Translations {
			if item.LanguageId == language {
				return item.Name
			}
		}
	}
	return ""
}
func (x *GeoLocationEntity) GetOfficialNameTranslated(language string) string {
	if x.Translations != nil && len(x.Translations) > 0 {
		for _, item := range x.Translations {
			if item.LanguageId == language {
				return item.OfficialName
			}
		}
	}
	return ""
}
func (x *GeoLocationEntity) Seeder() string {
	obj := GeoLocationActionSeederInit()
	v, _ := json.MarshalIndent(obj, "", "  ")
	return string(v)
}
func GeoLocationActionSeederInit() *GeoLocationEntity {
	tildaRef := "~"
	_ = tildaRef
	entity := &GeoLocationEntity{
		Name:         &tildaRef,
		Code:         &tildaRef,
		Status:       &tildaRef,
		Flag:         &tildaRef,
		OfficialName: &tildaRef,
	}
	return entity
}
func GeoLocationAssociationCreate(dto *GeoLocationEntity, query workspaces.QueryDSL) error {
	return nil
}

/**
* These kind of content are coming from another entity, which is indepndent module
* If we want to create them, we need to do it before. This is not association.
**/
func GeoLocationRelationContentCreate(dto *GeoLocationEntity, query workspaces.QueryDSL) error {
	return nil
}
func GeoLocationRelationContentUpdate(dto *GeoLocationEntity, query workspaces.QueryDSL) error {
	return nil
}
func GeoLocationPolyglotCreateHandler(dto *GeoLocationEntity, query workspaces.QueryDSL) {
	if dto == nil {
		return
	}
	workspaces.PolyglotCreateHandler(dto, &GeoLocationEntityPolyglot{}, query)
}

/**
 * This will be validating your entity fully. Important note is that, you add validate:* tag
 * in your entity, it will automatically work here. For slices inside entity, make sure you add
 * extra line of AppendSliceErrors, otherwise they won't be detected
 */
func GeoLocationValidator(dto *GeoLocationEntity, isPatch bool) *workspaces.IError {
	err := workspaces.CommonStructValidatorPointer(dto, isPatch)
	return err
}

// Creates a set of natural language queries, which can be used with
// AI tools to create content or help with some tasks
var GeoLocationAskCmd cli.Command = cli.Command{
	Name:  "nlp",
	Usage: "Set of natural language queries which helps creating content or data",
	Subcommands: []cli.Command{
		{
			Name:  "sample",
			Usage: "Asks for generating sample by giving an example data",
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:  "format",
					Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
					Value: "yaml",
				},
				&cli.IntFlag{
					Name:  "count",
					Usage: "How many samples to ask",
					Value: 30,
				},
			},
			Action: func(c *cli.Context) error {
				v := &GeoLocationEntity{}
				format := c.String("format")
				request := "\033[1m" + `
I need you to create me an array of exact signature as the example given below,
with at least ` + fmt.Sprint(c.String("count")) + ` items, mock the content with few words, and guess the possible values
based on the common sense. I need the output to be a valid ` + format + ` file.
Make sure you wrap the entire array in 'items' field. Also before that, I provide some explanation of each field:
Name: (type: string) Description: 
Code: (type: string) Description: 
Type: (type: one) Description: 
Status: (type: string) Description: 
Flag: (type: string) Description: 
OfficialName: (type: string) Description: 
And here is the actual object signature:
` + v.Seeder() + `
`
				fmt.Println(request)
				return nil
			},
		},
	},
}

func GeoLocationEntityPreSanitize(dto *GeoLocationEntity, query workspaces.QueryDSL) {
}
func GeoLocationEntityBeforeCreateAppend(dto *GeoLocationEntity, query workspaces.QueryDSL) {
	if dto.UniqueId == "" {
		dto.UniqueId = workspaces.UUID()
	}
	dto.WorkspaceId = &query.WorkspaceId
	dto.UserId = &query.UserId
	GeoLocationRecursiveAddUniqueId(dto, query)
}
func GeoLocationRecursiveAddUniqueId(dto *GeoLocationEntity, query workspaces.QueryDSL) {
}

/*
*
	Batch inserts, do not have all features that create
	operation does. Use it with unnormalized content,
	or read the source code carefully.
  This is not marked as an action, because it should not be available publicly
  at this moment.
*
*/
func GeoLocationMultiInsert(dtos []*GeoLocationEntity, query workspaces.QueryDSL) ([]*GeoLocationEntity, *workspaces.IError) {
	if len(dtos) > 0 {
		for index := range dtos {
			GeoLocationEntityPreSanitize(dtos[index], query)
			GeoLocationEntityBeforeCreateAppend(dtos[index], query)
		}
		var dbref *gorm.DB = nil
		if query.Tx == nil {
			dbref = workspaces.GetDbRef()
		} else {
			dbref = query.Tx
		}
		query.Tx = dbref
		err := dbref.Create(&dtos).Error
		if err != nil {
			return nil, workspaces.GormErrorToIError(err)
		}
	}
	return dtos, nil
}
func GeoLocationActionBatchCreateFn(dtos []*GeoLocationEntity, query workspaces.QueryDSL) ([]*GeoLocationEntity, *workspaces.IError) {
	if dtos != nil && len(dtos) > 0 {
		items := []*GeoLocationEntity{}
		for _, item := range dtos {
			s, err := GeoLocationActionCreateFn(item, query)
			if err != nil {
				return nil, err
			}
			items = append(items, s)
		}
		return items, nil
	}
	return dtos, nil
}
func GeoLocationDeleteEntireChildren(query workspaces.QueryDSL, dto *GeoLocationEntity) *workspaces.IError {
	// intentionally removed this. It's hard to implement it, and probably wrong without
	// proper on delete cascade
	return nil
}
func GeoLocationActionCreateFn(dto *GeoLocationEntity, query workspaces.QueryDSL) (*GeoLocationEntity, *workspaces.IError) {
	// 1. Validate always
	if iError := GeoLocationValidator(dto, false); iError != nil {
		return nil, iError
	}
	// 1.5 Sanitize the content coming of the front-end
	GeoLocationEntityPreSanitize(dto, query)
	// 2. Append the necessary information about user, workspace
	GeoLocationEntityBeforeCreateAppend(dto, query)
	// 3. Append the necessary translations, even if english
	GeoLocationPolyglotCreateHandler(dto, query)
	// 3.5. Create other entities if we want select from them
	GeoLocationRelationContentCreate(dto, query)
	// 4. Create the entity
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = workspaces.GetDbRef()
	} else {
		dbref = query.Tx
	}
	query.Tx = dbref
	err := dbref.Create(&dto).Error
	if err != nil {
		err := workspaces.GormErrorToIError(err)
		return dto, err
	}
	// 5. Create sub entities, objects or arrays, association to other entities
	GeoLocationAssociationCreate(dto, query)
	// 6. Fire the event into system
	event.MustFire(GEO_LOCATION_EVENT_CREATED, event.M{
		"entity":    dto,
		"entityKey": workspaces.GetTypeString(&GeoLocationEntity{}),
		"target":    "workspace",
		"unqiueId":  query.WorkspaceId,
	})
	return dto, nil
}
func GeoLocationActionGetOne(query workspaces.QueryDSL) (*GeoLocationEntity, *workspaces.IError) {
	refl := reflect.ValueOf(&GeoLocationEntity{})
	item, err := workspaces.GetOneEntity[GeoLocationEntity](query, refl)
	entityGeoLocationFormatter(item, query)
	return item, err
}
func GeoLocationActionGetByWorkspace(query workspaces.QueryDSL) (*GeoLocationEntity, *workspaces.IError) {
	refl := reflect.ValueOf(&GeoLocationEntity{})
	item, err := workspaces.GetOneByWorkspaceEntity[GeoLocationEntity](query, refl)
	entityGeoLocationFormatter(item, query)
	return item, err
}
func GeoLocationActionQuery(query workspaces.QueryDSL) ([]*GeoLocationEntity, *workspaces.QueryResultMeta, error) {
	refl := reflect.ValueOf(&GeoLocationEntity{})
	items, meta, err := workspaces.QueryEntitiesPointer[GeoLocationEntity](query, refl)
	for _, item := range items {
		entityGeoLocationFormatter(item, query)
	}
	return items, meta, err
}

var geoLocationMemoryItems []*GeoLocationEntity = []*GeoLocationEntity{}

func GeoLocationEntityIntoMemory() {
	q := workspaces.QueryDSL{
		ItemsPerPage: 500,
		StartIndex:   0,
	}
	_, qrm, _ := GeoLocationActionQuery(q)
	for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
		items, _, _ := GeoLocationActionQuery(q)
		geoLocationMemoryItems = append(geoLocationMemoryItems, items...)
		i += q.ItemsPerPage
		q.StartIndex = i
	}
}
func GeoLocationMemGet(id uint) *GeoLocationEntity {
	for _, item := range geoLocationMemoryItems {
		if item.ID == id {
			return item
		}
	}
	return nil
}
func GeoLocationMemJoin(items []uint) []*GeoLocationEntity {
	res := []*GeoLocationEntity{}
	for _, item := range items {
		v := GeoLocationMemGet(item)
		if v != nil {
			res = append(res, v)
		}
	}
	return res
}
func (dto *GeoLocationEntity) Size() int {
	var size int = len(dto.Children)
	for _, c := range dto.Children {
		size += c.Size()
	}
	return size
}
func (dto *GeoLocationEntity) Add(nodes ...*GeoLocationEntity) bool {
	var size = dto.Size()
	for _, n := range nodes {
		if n.ParentId != nil && *n.ParentId == dto.UniqueId {
			dto.Children = append(dto.Children, n)
		} else {
			for _, c := range dto.Children {
				if c.Add(n) {
					break
				}
			}
		}
	}
	return dto.Size() == size+len(nodes)
}
func GeoLocationActionCommonPivotQuery(query workspaces.QueryDSL) ([]*workspaces.PivotResult, *workspaces.QueryResultMeta, error) {
	items, meta, err := workspaces.UnsafeQuerySqlFromFs[workspaces.PivotResult](
		&queries.QueriesFs, "GeoLocationCommonPivot.sqlite.dyno", query,
	)
	return items, meta, err
}
func GeoLocationActionCteQuery(query workspaces.QueryDSL) ([]*GeoLocationEntity, *workspaces.QueryResultMeta, error) {
	refl := reflect.ValueOf(&GeoLocationEntity{})
	items, meta, err := workspaces.ContextAwareVSqlOperation[GeoLocationEntity](
		refl, &queries.QueriesFs, "GeoLocationCte.vsql", query,
	)
	for _, item := range items {
		entityGeoLocationFormatter(item, query)
	}
	var tree []*GeoLocationEntity
	for _, item := range items {
		if item.ParentId == nil {
			root := item
			root.Add(items...)
			tree = append(tree, root)
		}
	}
	return tree, meta, err
}
func GeoLocationUpdateExec(dbref *gorm.DB, query workspaces.QueryDSL, fields *GeoLocationEntity) (*GeoLocationEntity, *workspaces.IError) {
	uniqueId := fields.UniqueId
	query.TriggerEventName = GEO_LOCATION_EVENT_UPDATED
	GeoLocationEntityPreSanitize(fields, query)
	var item GeoLocationEntity
	// If the entity is distinct by workspace, then the Query.WorkspaceId
	// which is selected is being used as the condition for create or update
	// if not, the unique Id is being used
	cond2 := &GeoLocationEntity{UniqueId: uniqueId}
	q := dbref.
		Where(cond2).
		FirstOrCreate(&item)
	err := q.UpdateColumns(fields).Error
	if err != nil {
		return nil, workspaces.GormErrorToIError(err)
	}
	query.Tx = dbref
	GeoLocationRelationContentUpdate(fields, query)
	GeoLocationPolyglotCreateHandler(fields, query)
	if ero := GeoLocationDeleteEntireChildren(query, fields); ero != nil {
		return nil, ero
	}
	// @meta(update has many)
	err = dbref.
		Preload(clause.Associations).
		Where(&GeoLocationEntity{UniqueId: uniqueId}).
		First(&item).Error
	event.MustFire(query.TriggerEventName, event.M{
		"entity":   &item,
		"target":   "workspace",
		"unqiueId": query.WorkspaceId,
	})
	if err != nil {
		return &item, workspaces.GormErrorToIError(err)
	}
	return &item, nil
}
func GeoLocationActionUpdateFn(query workspaces.QueryDSL, fields *GeoLocationEntity) (*GeoLocationEntity, *workspaces.IError) {
	if fields == nil {
		return nil, workspaces.Create401Error(&workspaces.WorkspacesMessages.BodyIsMissing, []string{})
	}
	// 1. Validate always
	if iError := GeoLocationValidator(fields, true); iError != nil {
		return nil, iError
	}
	// Let's not add this. I am not sure of the consequences
	// GeoLocationRecursiveAddUniqueId(fields, query)
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = workspaces.GetDbRef()
		var item *GeoLocationEntity
		vf := dbref.Transaction(func(tx *gorm.DB) error {
			dbref = tx
			var err *workspaces.IError
			item, err = GeoLocationUpdateExec(dbref, query, fields)
			if err == nil {
				return nil
			} else {
				return err
			}
		})
		return item, workspaces.CastToIError(vf)
	} else {
		dbref = query.Tx
		return GeoLocationUpdateExec(dbref, query, fields)
	}
}

var GeoLocationWipeCmd cli.Command = cli.Command{
	Name:  "wipe",
	Usage: "Wipes entire geolocations ",
	Action: func(c *cli.Context) error {
		query := workspaces.CommonCliQueryDSLBuilderAuthorize(c, &workspaces.SecurityModel{
			ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_GEO_LOCATION_DELETE},
		})
		count, _ := GeoLocationActionWipeClean(query)
		fmt.Println("Removed", count, "of entities")
		return nil
	},
}

func GeoLocationActionRemove(query workspaces.QueryDSL) (int64, *workspaces.IError) {
	refl := reflect.ValueOf(&GeoLocationEntity{})
	query.ActionRequires = []workspaces.PermissionInfo{PERM_ROOT_GEO_LOCATION_DELETE}
	return workspaces.RemoveEntity[GeoLocationEntity](query, refl)
}
func GeoLocationActionWipeClean(query workspaces.QueryDSL) (int64, error) {
	var err error
	var count int64 = 0
	{
		subCount, subErr := workspaces.WipeCleanEntity[GeoLocationEntity]()
		if subErr != nil {
			fmt.Println("Error while wiping 'GeoLocationEntity'", subErr)
			return count, subErr
		} else {
			count += subCount
		}
	}
	return count, err
}
func GeoLocationActionBulkUpdate(
	query workspaces.QueryDSL, dto *workspaces.BulkRecordRequest[GeoLocationEntity]) (
	*workspaces.BulkRecordRequest[GeoLocationEntity], *workspaces.IError,
) {
	result := []*GeoLocationEntity{}
	err := workspaces.GetDbRef().Transaction(func(tx *gorm.DB) error {
		query.Tx = tx
		for _, record := range dto.Records {
			item, err := GeoLocationActionUpdate(query, record)
			if err != nil {
				return err
			} else {
				result = append(result, item)
			}
		}
		return nil
	})
	if err == nil {
		return dto, nil
	}
	return nil, err.(*workspaces.IError)
}
func (x *GeoLocationEntity) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}

var GeoLocationEntityMeta = workspaces.TableMetaData{
	EntityName:    "GeoLocation",
	ExportKey:     "geo-locations",
	TableNameInDb: "fb_geo-location_entities",
	EntityObject:  &GeoLocationEntity{},
	ExportStream:  GeoLocationActionExportT,
	ImportQuery:   GeoLocationActionImport,
}

func GeoLocationActionExport(
	query workspaces.QueryDSL,
) (chan []byte, *workspaces.IError) {
	return workspaces.YamlExporterChannel[GeoLocationEntity](query, GeoLocationActionQuery, GeoLocationPreloadRelations)
}
func GeoLocationActionExportT(
	query workspaces.QueryDSL,
) (chan []interface{}, *workspaces.IError) {
	return workspaces.YamlExporterChannelT[GeoLocationEntity](query, GeoLocationActionQuery, GeoLocationPreloadRelations)
}
func GeoLocationActionImport(
	dto interface{}, query workspaces.QueryDSL,
) *workspaces.IError {
	var json = jsoniter.ConfigCompatibleWithStandardLibrary
	var content GeoLocationEntity
	cx, err2 := json.Marshal(dto)
	if err2 != nil {
		return workspaces.Create401Error(&workspaces.WorkspacesMessages.InvalidContent, []string{})
	}
	json.Unmarshal(cx, &content)
	_, err := GeoLocationActionCreate(&content, query)
	return err
}

var GeoLocationCommonCliFlags = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "name",
		Required: false,
		Usage:    `name`,
	},
	&cli.StringFlag{
		Name:     "code",
		Required: false,
		Usage:    `code`,
	},
	&cli.StringFlag{
		Name:     "type-id",
		Required: false,
		Usage:    `type`,
	},
	&cli.StringFlag{
		Name:     "status",
		Required: false,
		Usage:    `status`,
	},
	&cli.StringFlag{
		Name:     "flag",
		Required: false,
		Usage:    `flag`,
	},
	&cli.StringFlag{
		Name:     "official-name",
		Required: false,
		Usage:    `officialName`,
	},
}
var GeoLocationCommonInteractiveCliFlags = []workspaces.CliInteractiveFlag{
	{
		Name:        "name",
		StructField: "Name",
		Required:    false,
		Recommended: false,
		Usage:       `name`,
		Type:        "string",
	},
	{
		Name:        "code",
		StructField: "Code",
		Required:    false,
		Recommended: false,
		Usage:       `code`,
		Type:        "string",
	},
	{
		Name:        "status",
		StructField: "Status",
		Required:    false,
		Recommended: false,
		Usage:       `status`,
		Type:        "string",
	},
	{
		Name:        "flag",
		StructField: "Flag",
		Required:    false,
		Recommended: false,
		Usage:       `flag`,
		Type:        "string",
	},
	{
		Name:        "officialName",
		StructField: "OfficialName",
		Required:    false,
		Recommended: false,
		Usage:       `officialName`,
		Type:        "string",
	},
}
var GeoLocationCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "name",
		Required: false,
		Usage:    `name`,
	},
	&cli.StringFlag{
		Name:     "code",
		Required: false,
		Usage:    `code`,
	},
	&cli.StringFlag{
		Name:     "type-id",
		Required: false,
		Usage:    `type`,
	},
	&cli.StringFlag{
		Name:     "status",
		Required: false,
		Usage:    `status`,
	},
	&cli.StringFlag{
		Name:     "flag",
		Required: false,
		Usage:    `flag`,
	},
	&cli.StringFlag{
		Name:     "official-name",
		Required: false,
		Usage:    `officialName`,
	},
}
var GeoLocationCreateCmd cli.Command = GEO_LOCATION_ACTION_POST_ONE.ToCli()
var GeoLocationCreateInteractiveCmd cli.Command = cli.Command{
	Name:  "ic",
	Usage: "Creates a new entity, using requied fields in an interactive name",
	Flags: []cli.Flag{
		&cli.BoolFlag{
			Name:  "all",
			Usage: "Interactively asks for all inputs, not only required ones",
		},
	},
	Action: func(c *cli.Context) {
		query := workspaces.CommonCliQueryDSLBuilderAuthorize(c, &workspaces.SecurityModel{
			ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_GEO_LOCATION_CREATE},
		})
		entity := &GeoLocationEntity{}
		workspaces.PopulateInteractively(entity, c, GeoLocationCommonInteractiveCliFlags)
		if entity, err := GeoLocationActionCreate(entity, query); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := yaml.Marshal(entity)
			fmt.Println(workspaces.FormatYamlKeys(string(f)))
		}
	},
}
var GeoLocationUpdateCmd cli.Command = cli.Command{
	Name:    "update",
	Aliases: []string{"u"},
	Flags:   GeoLocationCommonCliFlagsOptional,
	Usage:   "Updates entity by passing the parameters",
	Action: func(c *cli.Context) error {
		query := workspaces.CommonCliQueryDSLBuilderAuthorize(c, &workspaces.SecurityModel{
			ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_GEO_LOCATION_UPDATE},
		})
		entity := CastGeoLocationFromCli(c)
		if entity, err := GeoLocationActionUpdate(query, entity); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := json.MarshalIndent(entity, "", "  ")
			fmt.Println(string(f))
		}
		return nil
	},
}

func (x *GeoLocationEntity) FromCli(c *cli.Context) *GeoLocationEntity {
	return CastGeoLocationFromCli(c)
}
func CastGeoLocationFromCli(c *cli.Context) *GeoLocationEntity {
	template := &GeoLocationEntity{}
	if c.IsSet("uid") {
		template.UniqueId = c.String("uid")
	}
	if c.IsSet("pid") {
		x := c.String("pid")
		template.ParentId = &x
	}
	if c.IsSet("name") {
		value := c.String("name")
		template.Name = &value
	}
	if c.IsSet("code") {
		value := c.String("code")
		template.Code = &value
	}
	if c.IsSet("type-id") {
		value := c.String("type-id")
		template.TypeId = &value
	}
	if c.IsSet("status") {
		value := c.String("status")
		template.Status = &value
	}
	if c.IsSet("flag") {
		value := c.String("flag")
		template.Flag = &value
	}
	if c.IsSet("official-name") {
		value := c.String("official-name")
		template.OfficialName = &value
	}
	return template
}
func GeoLocationSyncSeederFromFs(fsRef *embed.FS, fileNames []string) {
	workspaces.SeederFromFSImport(
		workspaces.QueryDSL{},
		GeoLocationActionCreate,
		reflect.ValueOf(&GeoLocationEntity{}).Elem(),
		fsRef,
		fileNames,
		true,
	)
}
func GeoLocationSyncSeeders() {
	workspaces.SeederFromFSImport(
		workspaces.QueryDSL{WorkspaceId: workspaces.USER_SYSTEM},
		GeoLocationActionCreate,
		reflect.ValueOf(&GeoLocationEntity{}).Elem(),
		geoLocationSeedersFs,
		[]string{},
		true,
	)
}
func GeoLocationImportMocks() {
	workspaces.SeederFromFSImport(
		workspaces.QueryDSL{},
		GeoLocationActionCreate,
		reflect.ValueOf(&GeoLocationEntity{}).Elem(),
		&mocks.ViewsFs,
		[]string{},
		false,
	)
}
func GeoLocationWriteQueryMock(ctx workspaces.MockQueryContext) {
	for _, lang := range ctx.Languages {
		itemsPerPage := 9999
		if ctx.ItemsPerPage > 0 {
			itemsPerPage = ctx.ItemsPerPage
		}
		f := workspaces.QueryDSL{ItemsPerPage: itemsPerPage, Language: lang, WithPreloads: ctx.WithPreloads, Deep: true}
		items, count, _ := GeoLocationActionQuery(f)
		result := workspaces.QueryEntitySuccessResult(f, items, count)
		workspaces.WriteMockDataToFile(lang, "", "GeoLocation", result)
	}
}
func GeoLocationsActionQueryString(keyword string, page int) ([]string, *workspaces.QueryResultMeta, error) {
	searchFields := []string{
		`unique_id %"{keyword}"%`,
		`name %"{keyword}"%`,
	}
	m := func(item *GeoLocationEntity) string {
		label := item.UniqueId
		// if item.Name != nil {
		// 	label += " >>> " + *item.Name
		// }
		return label
	}
	query := workspaces.QueryStringCastCli(searchFields, keyword, page)
	items, meta, err := GeoLocationActionQuery(query)
	stringItems := []string{}
	for _, item := range items {
		label := m(item)
		stringItems = append(stringItems, label)
	}
	return stringItems, meta, err
}

var GeoLocationImportExportCommands = []cli.Command{
	{
		Name:  "mock",
		Usage: "Generates mock records based on the entity definition",
		Flags: []cli.Flag{
			&cli.IntFlag{
				Name:  "count",
				Usage: "how many activation key do you need to be generated and stored in database",
				Value: 10,
			},
			&cli.BoolFlag{
				Name:  "batch",
				Usage: "Multiple insert into database mode. Might miss children and relations at the moment",
			},
		},
		Action: func(c *cli.Context) error {
			query := workspaces.CommonCliQueryDSLBuilderAuthorize(c, &workspaces.SecurityModel{
				ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_GEO_LOCATION_CREATE},
			})
			if c.Bool("batch") {
				GeoLocationActionSeederMultiple(query, c.Int("count"))
			} else {
				GeoLocationActionSeeder(query, c.Int("count"))
			}
			return nil
		},
	},
	{
		Name:    "init",
		Aliases: []string{"i"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Creates a basic seeder file for you, based on the definition module we have. You can populate this file as an example",
		Action: func(c *cli.Context) error {
			seed := GeoLocationActionSeederInit()
			workspaces.CommonInitSeeder(strings.TrimSpace(c.String("format")), seed)
			return nil
		},
	},
	{
		Name:    "validate",
		Aliases: []string{"v"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "file",
				Usage: "Validates an import file, such as yaml, json, csv, and gives some insights how the after import it would look like",
				Value: "geo-location-seeder-geo-location.yml",
				// Uncomment before publish, they need to specify
				// Required: true,
			},
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Reads a yaml file containing an array of geo-locations, you can run this to validate if your import file is correct, and how it would look like after import",
		Action: func(c *cli.Context) error {
			data := &[]GeoLocationEntity{}
			workspaces.ReadYamlFile(c.String("file"), data)
			fmt.Println(data)
			return nil
		},
	},
	cli.Command{
		Name:  "slist",
		Usage: "Prints the list of files attached to this module for syncing or bootstrapping project",
		Action: func(c *cli.Context) error {
			if entity, err := workspaces.GetSeederFilenames(geoLocationSeedersFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "ssync",
		Usage: "Tries to sync the embedded content into the database, the list could be seen by 'slist' command",
		Action: func(c *cli.Context) error {
			workspaces.CommonCliImportEmbedCmd(c,
				GeoLocationActionCreate,
				reflect.ValueOf(&GeoLocationEntity{}).Elem(),
				geoLocationSeedersFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:  "mlist",
		Usage: "Prints the list of embedded mocks into the app",
		Action: func(c *cli.Context) error {
			if entity, err := workspaces.GetSeederFilenames(&mocks.ViewsFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "msync",
		Usage: "Tries to sync mocks into the system",
		Action: func(c *cli.Context) error {
			workspaces.CommonCliImportEmbedCmd(c,
				GeoLocationActionCreate,
				reflect.ValueOf(&GeoLocationEntity{}).Elem(),
				&mocks.ViewsFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:    "export",
		Aliases: []string{"e"},
		Flags: append(workspaces.CommonQueryFlags,
			&cli.StringFlag{
				Name:     "file",
				Usage:    "The address of file you want the csv/yaml/json be exported to",
				Required: true,
			}),
		Usage: "Exports a query results into the csv/yaml/json format",
		Action: func(c *cli.Context) error {
			if strings.Contains(c.String("file"), ".csv") {
				workspaces.CommonCliExportCmd2(c,
					GeoLocationEntityStream,
					reflect.ValueOf(&GeoLocationEntity{}).Elem(),
					c.String("file"),
					&metas.MetaFs,
					"GeoLocationFieldMap.yml",
					GeoLocationPreloadRelations,
				)
			} else {
				workspaces.CommonCliExportCmd(c,
					GeoLocationActionQuery,
					reflect.ValueOf(&GeoLocationEntity{}).Elem(),
					c.String("file"),
					&metas.MetaFs,
					"GeoLocationFieldMap.yml",
					GeoLocationPreloadRelations,
				)
			}
			return nil
		},
	},
	cli.Command{
		Name: "import",
		Flags: append(
			append(
				workspaces.CommonQueryFlags,
				&cli.StringFlag{
					Name:     "file",
					Usage:    "The address of file you want the csv be imported from",
					Required: true,
				}),
			GeoLocationCommonCliFlagsOptional...,
		),
		Usage: "imports csv/yaml/json file and place it and its children into database",
		Action: func(c *cli.Context) error {
			workspaces.CommonCliImportCmdAuthorized(c,
				GeoLocationActionCreate,
				reflect.ValueOf(&GeoLocationEntity{}).Elem(),
				c.String("file"),
				&workspaces.SecurityModel{
					ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_GEO_LOCATION_CREATE},
				},
				func() GeoLocationEntity {
					v := CastGeoLocationFromCli(c)
					return *v
				},
			)
			return nil
		},
	},
}
var GeoLocationCliCommands []cli.Command = []cli.Command{
	GEO_LOCATION_ACTION_QUERY.ToCli(),
	GEO_LOCATION_ACTION_TABLE.ToCli(),
	GeoLocationCreateCmd,
	GeoLocationUpdateCmd,
	GeoLocationAskCmd,
	GeoLocationCreateInteractiveCmd,
	GeoLocationWipeCmd,
	workspaces.GetCommonRemoveQuery(reflect.ValueOf(&GeoLocationEntity{}).Elem(), GeoLocationActionRemove),
	workspaces.GetCommonCteQuery(GeoLocationActionCteQuery),
	workspaces.GetCommonPivotQuery(GeoLocationActionCommonPivotQuery),
}

func GeoLocationCliFn() cli.Command {
	commands := append(GeoLocationImportExportCommands, GeoLocationCliCommands...)
	return cli.Command{
		Name:        "location",
		Description: "GeoLocations module actions",
		Usage:       ``,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "language",
				Value: "en",
			},
		},
		Subcommands: commands,
	}
}

var GEO_LOCATION_ACTION_TABLE = workspaces.Module2Action{
	Name:          "table",
	ActionAliases: []string{"t"},
	Flags:         workspaces.CommonQueryFlags,
	Description:   "Table formatted queries all of the entities in database based on the standard query format",
	Action:        GeoLocationActionQuery,
	CliAction: func(c *cli.Context, security *workspaces.SecurityModel) error {
		workspaces.CommonCliTableCmd2(c,
			GeoLocationActionQuery,
			security,
			reflect.ValueOf(&GeoLocationEntity{}).Elem(),
		)
		return nil
	},
}
var GEO_LOCATION_ACTION_QUERY = workspaces.Module2Action{
	Method: "GET",
	Url:    "/geo-locations",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_GEO_LOCATION_QUERY},
	},
	Group: "geoLocation",
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpQueryEntity(c, GeoLocationActionQuery)
		},
	},
	Format:         "QUERY",
	Action:         GeoLocationActionQuery,
	ResponseEntity: &[]GeoLocationEntity{},
	Out: &workspaces.Module2ActionBody{
		Entity: "GeoLocationEntity",
	},
	CliAction: func(c *cli.Context, security *workspaces.SecurityModel) error {
		workspaces.CommonCliQueryCmd2(
			c,
			GeoLocationActionQuery,
			security,
		)
		return nil
	},
	CliName:       "query",
	Name:          "query",
	ActionAliases: []string{"q"},
	Flags:         workspaces.CommonQueryFlags,
	Description:   "Queries all of the entities in database based on the standard query format (s+)",
}
var GEO_LOCATION_ACTION_QUERY_CTE = workspaces.Module2Action{
	Method: "GET",
	Url:    "/cte-geo-locations",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_GEO_LOCATION_QUERY},
	},
	Group: "geoLocation",
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpQueryEntity(c, GeoLocationActionCteQuery)
		},
	},
	Format:         "QUERY",
	Action:         GeoLocationActionCteQuery,
	ResponseEntity: &[]GeoLocationEntity{},
	Out: &workspaces.Module2ActionBody{
		Entity: "GeoLocationEntity",
	},
}
var GEO_LOCATION_ACTION_EXPORT = workspaces.Module2Action{
	Method: "GET",
	Url:    "/geo-locations/export",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_GEO_LOCATION_QUERY},
	},
	Group: "geoLocation",
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpStreamFileChannel(c, GeoLocationActionExport)
		},
	},
	Format:         "QUERY",
	Action:         GeoLocationActionExport,
	ResponseEntity: &[]GeoLocationEntity{},
	Out: &workspaces.Module2ActionBody{
		Entity: "GeoLocationEntity",
	},
}
var GEO_LOCATION_ACTION_GET_ONE = workspaces.Module2Action{
	Method: "GET",
	Url:    "/geo-location/:uniqueId",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_GEO_LOCATION_QUERY},
	},
	Group: "geoLocation",
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpGetEntity(c, GeoLocationActionGetOne)
		},
	},
	Format:         "GET_ONE",
	Action:         GeoLocationActionGetOne,
	ResponseEntity: &GeoLocationEntity{},
	Out: &workspaces.Module2ActionBody{
		Entity: "GeoLocationEntity",
	},
}
var GEO_LOCATION_ACTION_POST_ONE = workspaces.Module2Action{
	Name:          "create",
	ActionAliases: []string{"c"},
	Description:   "Create new geoLocation",
	Flags:         GeoLocationCommonCliFlags,
	Method:        "POST",
	Url:           "/geo-location",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_GEO_LOCATION_CREATE},
	},
	Group: "geoLocation",
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpPostEntity(c, GeoLocationActionCreate)
		},
	},
	CliAction: func(c *cli.Context, security *workspaces.SecurityModel) error {
		result, err := workspaces.CliPostEntity(c, GeoLocationActionCreate, security)
		workspaces.HandleActionInCli(c, result, err, map[string]map[string]string{})
		return err
	},
	Action:         GeoLocationActionCreate,
	Format:         "POST_ONE",
	RequestEntity:  &GeoLocationEntity{},
	ResponseEntity: &GeoLocationEntity{},
	Out: &workspaces.Module2ActionBody{
		Entity: "GeoLocationEntity",
	},
	In: &workspaces.Module2ActionBody{
		Entity: "GeoLocationEntity",
	},
}
var GEO_LOCATION_ACTION_PATCH = workspaces.Module2Action{
	Name:          "update",
	ActionAliases: []string{"u"},
	Flags:         GeoLocationCommonCliFlagsOptional,
	Method:        "PATCH",
	Url:           "/geo-location",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_GEO_LOCATION_UPDATE},
	},
	Group: "geoLocation",
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpUpdateEntity(c, GeoLocationActionUpdate)
		},
	},
	Action:         GeoLocationActionUpdate,
	RequestEntity:  &GeoLocationEntity{},
	ResponseEntity: &GeoLocationEntity{},
	Format:         "PATCH_ONE",
	Out: &workspaces.Module2ActionBody{
		Entity: "GeoLocationEntity",
	},
	In: &workspaces.Module2ActionBody{
		Entity: "GeoLocationEntity",
	},
}
var GEO_LOCATION_ACTION_PATCH_BULK = workspaces.Module2Action{
	Method: "PATCH",
	Url:    "/geo-locations",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_GEO_LOCATION_UPDATE},
	},
	Group: "geoLocation",
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpUpdateEntities(c, GeoLocationActionBulkUpdate)
		},
	},
	Action:         GeoLocationActionBulkUpdate,
	Format:         "PATCH_BULK",
	RequestEntity:  &workspaces.BulkRecordRequest[GeoLocationEntity]{},
	ResponseEntity: &workspaces.BulkRecordRequest[GeoLocationEntity]{},
	Out: &workspaces.Module2ActionBody{
		Entity: "GeoLocationEntity",
	},
	In: &workspaces.Module2ActionBody{
		Entity: "GeoLocationEntity",
	},
}
var GEO_LOCATION_ACTION_DELETE = workspaces.Module2Action{
	Method: "DELETE",
	Url:    "/geo-location",
	Format: "DELETE_DSL",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_GEO_LOCATION_DELETE},
	},
	Group: "geoLocation",
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpRemoveEntity(c, GeoLocationActionRemove)
		},
	},
	Action:         GeoLocationActionRemove,
	RequestEntity:  &workspaces.DeleteRequest{},
	ResponseEntity: &workspaces.DeleteResponse{},
	TargetEntity:   &GeoLocationEntity{},
}

/**
 *	Override this function on GeoLocationEntityHttp.go,
 *	In order to add your own http
 **/
var AppendGeoLocationRouter = func(r *[]workspaces.Module2Action) {}

func GetGeoLocationModule2Actions() []workspaces.Module2Action {
	routes := []workspaces.Module2Action{
		GEO_LOCATION_ACTION_QUERY_CTE,
		GEO_LOCATION_ACTION_QUERY,
		GEO_LOCATION_ACTION_EXPORT,
		GEO_LOCATION_ACTION_GET_ONE,
		GEO_LOCATION_ACTION_POST_ONE,
		GEO_LOCATION_ACTION_PATCH,
		GEO_LOCATION_ACTION_PATCH_BULK,
		GEO_LOCATION_ACTION_DELETE,
	}
	// Append user defined functions
	AppendGeoLocationRouter(&routes)
	return routes
}

var PERM_ROOT_GEO_LOCATION_DELETE = workspaces.PermissionInfo{
	CompleteKey: "root/modules/geo/geo-location/delete",
	Name:        "Delete geo location",
}
var PERM_ROOT_GEO_LOCATION_CREATE = workspaces.PermissionInfo{
	CompleteKey: "root/modules/geo/geo-location/create",
	Name:        "Create geo location",
}
var PERM_ROOT_GEO_LOCATION_UPDATE = workspaces.PermissionInfo{
	CompleteKey: "root/modules/geo/geo-location/update",
	Name:        "Update geo location",
}
var PERM_ROOT_GEO_LOCATION_QUERY = workspaces.PermissionInfo{
	CompleteKey: "root/modules/geo/geo-location/query",
	Name:        "Query geo location",
}
var PERM_ROOT_GEO_LOCATION = workspaces.PermissionInfo{
	CompleteKey: "root/modules/geo/geo-location/*",
	Name:        "Entire geo location actions (*)",
}
var ALL_GEO_LOCATION_PERMISSIONS = []workspaces.PermissionInfo{
	PERM_ROOT_GEO_LOCATION_DELETE,
	PERM_ROOT_GEO_LOCATION_CREATE,
	PERM_ROOT_GEO_LOCATION_UPDATE,
	PERM_ROOT_GEO_LOCATION_QUERY,
	PERM_ROOT_GEO_LOCATION,
}
var GeoLocationEntityBundle = workspaces.EntityBundle{
	Permissions: ALL_GEO_LOCATION_PERMISSIONS,
	// Cli command has been exluded, since we use module to wrap all the entities
	// to be more easier to wrap up.
	// Create your own bundle if you need with Cli
	//CliCommands: []cli.Command{
	//	GeoLocationCliFn(),
	//},
	Actions:      GetGeoLocationModule2Actions(),
	MockProvider: GeoLocationImportMocks,
	AutoMigrationEntities: []interface{}{
		&GeoLocationEntity{},
		&GeoLocationEntityPolyglot{},
	},
}
