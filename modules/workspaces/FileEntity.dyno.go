package workspaces

/*
*	Generated by fireback 1.1.28
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"embed"
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/gookit/event"
	jsoniter "github.com/json-iterator/go"
	"github.com/schollz/progressbar/v3"
	metas "github.com/torabian/fireback/modules/workspaces/metas"
	mocks "github.com/torabian/fireback/modules/workspaces/mocks/File"
	seeders "github.com/torabian/fireback/modules/workspaces/seeders/File"
	"github.com/urfave/cli"
	"gopkg.in/yaml.v2"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	reflect "reflect"
	"strings"
)

var fileSeedersFs = &seeders.ViewsFs

func ResetFileSeeders(fs *embed.FS) {
	fileSeedersFs = fs
}

type FileVariations struct {
	// Defines the visibility of the record in the table.
	// Visibility is a detailed topic, you can check all of the visibility values in workspaces/visibility.go
	// by default, visibility of record are 0, means they are protected by the workspace
	// which are being created, and visible to every member of the workspace
	Visibility String `json:"visibility,omitempty" yaml:"visibility,omitempty"`
	// The unique-id of the workspace which content belongs to. Upon creation this will be designated
	// to the selected workspace by user, if they have write access. You can change this value
	// or prevent changes to it manually (on root features for example modifying other workspace)
	WorkspaceId String `json:"workspaceId,omitempty" yaml:"workspaceId,omitempty"`
	// The unique-id of the parent table, which this record is being linked to.
	// used internally for making relations in fireback, generally does not need manual changes
	// or modification by the developer or user. For example, if you have a object inside an object
	// the unique-id of the parent will be written in the child.
	LinkerId String `json:"linkerId,omitempty" yaml:"linkerId,omitempty"`
	// Used for recursive or parent-child operations. Some tables, are having nested relations,
	// and this field makes the table self refrenceing. ParentId needs to exist in the table before
	// creating of modifying a record.
	ParentId String `json:"parentId,omitempty" yaml:"parentId,omitempty"`
	// Makes a field deletable. Some records should not be deletable at all.
	// default it's true.
	IsDeletable *bool `json:"isDeletable,omitempty" yaml:"isDeletable,omitempty" gorm:"default:true"`
	// Makes a field updatable. Some records should not be updatable at all.
	// default it's true.
	IsUpdatable *bool `json:"isUpdatable,omitempty" yaml:"isUpdatable,omitempty" gorm:"default:true"`
	// The unique-id of the user which is creating the record, or the record belongs to.
	// Administration might want to change this to any user, by default Fireback fills
	// it to the current authenticated user.
	UserId String `json:"userId,omitempty" yaml:"userId,omitempty"`
	// General mechanism to rank the elements. From code perspective, it's just a number,
	// but you can sort it based on any logic for records to make a ranking, sorting.
	// they should not be unique across a table.
	Rank Int64 `json:"rank,omitempty" gorm:"type:int;name:rank"`
	// Primary numeric key in the database. This value is not meant to be exported to public
	// or be used to access data at all. Rather a mechanism of indexing columns internally
	// or cursor pagination in future releases of fireback, or better search performance.
	ID uint `gorm:"primaryKey;autoIncrement" json:"id,omitempty" yaml:"id,omitempty"`
	// Unique id of the record across the table. This value will be accessed from public APIs,
	// and many other places intead of numeric ID property.
	// Upon generation, a UUID automatically is being assigned, and if user has specified the
	// Unique id in the post body, it will be used. This mechanism allows to manage unsaved
	// content on front-end much easier than requiring parent to exists first.
	UniqueId string `json:"uniqueId,omitempty" gorm:"unique;not null;size:100;" yaml:"uniqueId,omitempty"`
	// The time that the record has been created in nano-seconds.
	// the field will be automatically populated by gorm orm.
	Created int64 `json:"created,omitempty" yaml:"created,omitempty" gorm:"autoUpdateTime:nano"`
	// The time that the record has been updated in nano-seconds.
	// the field will be automatically populated by gorm orm.
	Updated int64 `json:"updated,omitempty" yaml:"updated,omitempty"`
	// The time that the record has been deleted softly (means the data still exists in database, but no longer visible to any feature) in nano seconds
	// you need to make sure check this field if writing custom sql queries.
	// the field will be automatically populated by gorm orm.
	Deleted int64 `json:"deleted,omitempty" yaml:"deleted,omitempty"`
	// Record creation date time formatting based on locale of the headers, or other
	// possible factors.
	CreatedFormatted string `json:"createdFormatted,omitempty" yaml:"createdFormatted,omitempty" sql:"-" gorm:"-"`
	// Record update date time formatting based on locale of the headers, or other
	// possible factors.
	UpdatedFormatted string      `json:"updatedFormatted,omitempty" yaml:"updatedFormatted,omitempty" sql:"-" gorm:"-"`
	Name             string      `json:"name" yaml:"name"        `
	LinkedTo         *FileEntity `yaml:"-" gorm:"-" json:"-" sql:"-"`
}

func (x *FileVariations) RootObjectName() string {
	return "FileEntity"
}

type FileEntity struct {
	// Defines the visibility of the record in the table.
	// Visibility is a detailed topic, you can check all of the visibility values in workspaces/visibility.go
	// by default, visibility of record are 0, means they are protected by the workspace
	// which are being created, and visible to every member of the workspace
	Visibility String `json:"visibility,omitempty" yaml:"visibility,omitempty"`
	// The unique-id of the workspace which content belongs to. Upon creation this will be designated
	// to the selected workspace by user, if they have write access. You can change this value
	// or prevent changes to it manually (on root features for example modifying other workspace)
	WorkspaceId String `json:"workspaceId,omitempty" yaml:"workspaceId,omitempty"`
	// The unique-id of the parent table, which this record is being linked to.
	// used internally for making relations in fireback, generally does not need manual changes
	// or modification by the developer or user. For example, if you have a object inside an object
	// the unique-id of the parent will be written in the child.
	LinkerId String `json:"linkerId,omitempty" yaml:"linkerId,omitempty"`
	// Used for recursive or parent-child operations. Some tables, are having nested relations,
	// and this field makes the table self refrenceing. ParentId needs to exist in the table before
	// creating of modifying a record.
	ParentId String `json:"parentId,omitempty" yaml:"parentId,omitempty"`
	// Makes a field deletable. Some records should not be deletable at all.
	// default it's true.
	IsDeletable *bool `json:"isDeletable,omitempty" yaml:"isDeletable,omitempty" gorm:"default:true"`
	// Makes a field updatable. Some records should not be updatable at all.
	// default it's true.
	IsUpdatable *bool `json:"isUpdatable,omitempty" yaml:"isUpdatable,omitempty" gorm:"default:true"`
	// The unique-id of the user which is creating the record, or the record belongs to.
	// Administration might want to change this to any user, by default Fireback fills
	// it to the current authenticated user.
	UserId String `json:"userId,omitempty" yaml:"userId,omitempty"`
	// General mechanism to rank the elements. From code perspective, it's just a number,
	// but you can sort it based on any logic for records to make a ranking, sorting.
	// they should not be unique across a table.
	Rank Int64 `json:"rank,omitempty" gorm:"type:int;name:rank"`
	// Primary numeric key in the database. This value is not meant to be exported to public
	// or be used to access data at all. Rather a mechanism of indexing columns internally
	// or cursor pagination in future releases of fireback, or better search performance.
	ID uint `gorm:"primaryKey;autoIncrement" json:"id,omitempty" yaml:"id,omitempty"`
	// Unique id of the record across the table. This value will be accessed from public APIs,
	// and many other places intead of numeric ID property.
	// Upon generation, a UUID automatically is being assigned, and if user has specified the
	// Unique id in the post body, it will be used. This mechanism allows to manage unsaved
	// content on front-end much easier than requiring parent to exists first.
	UniqueId string `json:"uniqueId,omitempty" gorm:"unique;not null;size:100;" yaml:"uniqueId,omitempty"`
	// The time that the record has been created in nano-seconds.
	// the field will be automatically populated by gorm orm.
	Created int64 `json:"created,omitempty" yaml:"created,omitempty" gorm:"autoUpdateTime:nano"`
	// The time that the record has been updated in nano-seconds.
	// the field will be automatically populated by gorm orm.
	Updated int64 `json:"updated,omitempty" yaml:"updated,omitempty"`
	// The time that the record has been deleted softly (means the data still exists in database, but no longer visible to any feature) in nano seconds
	// you need to make sure check this field if writing custom sql queries.
	// the field will be automatically populated by gorm orm.
	Deleted int64 `json:"deleted,omitempty" yaml:"deleted,omitempty"`
	// Record creation date time formatting based on locale of the headers, or other
	// possible factors.
	CreatedFormatted string `json:"createdFormatted,omitempty" yaml:"createdFormatted,omitempty" sql:"-" gorm:"-"`
	// Record update date time formatting based on locale of the headers, or other
	// possible factors.
	UpdatedFormatted string            `json:"updatedFormatted,omitempty" yaml:"updatedFormatted,omitempty" sql:"-" gorm:"-"`
	Name             string            `json:"name" yaml:"name"        `
	DiskPath         string            `json:"diskPath" yaml:"diskPath"        `
	Size             int64             `json:"size" yaml:"size"        `
	VirtualPath      string            `json:"virtualPath" yaml:"virtualPath"        `
	Type             string            `json:"type" yaml:"type"        `
	Variations       []*FileVariations `json:"variations" yaml:"variations"    gorm:"foreignKey:LinkerId;references:UniqueId;constraint:OnDelete:CASCADE"      `
	Children         []*FileEntity     `csv:"-" gorm:"-" sql:"-" json:"children,omitempty" yaml:"children,omitempty"`
	LinkedTo         *FileEntity       `csv:"-" yaml:"-" gorm:"-" json:"-" sql:"-"`
}

func FileEntityStream(q QueryDSL) (chan []*FileEntity, *QueryResultMeta, error) {
	cn := make(chan []*FileEntity)
	q.ItemsPerPage = 50
	q.StartIndex = 0
	_, qrm, err := FileActions.Query(q)
	if err != nil {
		return nil, nil, err
	}
	go func() {
		defer close(cn)
		for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
			items, _, _ := FileActions.Query(q)
			i += q.ItemsPerPage
			q.StartIndex = i
			cn <- items
		}
	}()
	return cn, qrm, nil
}

type FileEntityList struct {
	Items []*FileEntity
}

func NewFileEntityList(items []*FileEntity) *FileEntityList {
	return &FileEntityList{
		Items: items,
	}
}
func (x *FileEntityList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *FileEntityList) ToTree() *TreeOperation[FileEntity] {
	return NewTreeOperation(
		x.Items,
		func(t *FileEntity) string {
			if !t.ParentId.Valid {
				return ""
			}
			return t.ParentId.String
		},
		func(t *FileEntity) string {
			return t.UniqueId
		},
	)
}

var FilePreloadRelations []string = []string{}

type fileActionsSig struct {
	Update         func(query QueryDSL, dto *FileEntity) (*FileEntity, *IError)
	Create         func(dto *FileEntity, query QueryDSL) (*FileEntity, *IError)
	Upsert         func(dto *FileEntity, query QueryDSL) (*FileEntity, *IError)
	SeederInit     func() *FileEntity
	Remove         func(query QueryDSL) (int64, *IError)
	MultiInsert    func(dtos []*FileEntity, query QueryDSL) ([]*FileEntity, *IError)
	GetOne         func(query QueryDSL) (*FileEntity, *IError)
	GetByWorkspace func(query QueryDSL) (*FileEntity, *IError)
	Query          func(query QueryDSL) ([]*FileEntity, *QueryResultMeta, error)
}

var FileActions fileActionsSig = fileActionsSig{
	Update:         FileActionUpdateFn,
	Create:         FileActionCreateFn,
	Upsert:         FileActionUpsertFn,
	Remove:         FileActionRemoveFn,
	SeederInit:     FileActionSeederInitFn,
	MultiInsert:    FileMultiInsertFn,
	GetOne:         FileActionGetOneFn,
	GetByWorkspace: FileActionGetByWorkspaceFn,
	Query:          FileActionQueryFn,
}

func FileActionUpsertFn(dto *FileEntity, query QueryDSL) (*FileEntity, *IError) {
	return nil, nil
}

var FILE_EVENT_CREATED = "file.created"
var FILE_EVENT_UPDATED = "file.updated"
var FILE_EVENT_DELETED = "file.deleted"
var FILE_EVENTS = []string{
	FILE_EVENT_CREATED,
	FILE_EVENT_UPDATED,
	FILE_EVENT_DELETED,
}

type FileFieldMap struct {
	Name        TranslatedString `yaml:"name"`
	DiskPath    TranslatedString `yaml:"diskPath"`
	Size        TranslatedString `yaml:"size"`
	VirtualPath TranslatedString `yaml:"virtualPath"`
	Type        TranslatedString `yaml:"type"`
	Variations  TranslatedString `yaml:"variations"`
}

var FileEntityMetaConfig map[string]int64 = map[string]int64{}
var FileEntityJsonSchema = ExtractEntityFields(reflect.ValueOf(&FileEntity{}))

func FileVariationsActionCreate(
	dto *FileVariations,
	query QueryDSL,
) (*FileVariations, *IError) {
	dto.LinkerId = NewString(query.LinkerId)
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = GetDbRef()
	} else {
		dbref = query.Tx
	}
	query.Tx = dbref
	if dto.UniqueId == "" {
		dto.UniqueId = UUID()
	}
	err := dbref.Create(&dto).Error
	if err != nil {
		err := GormErrorToIError(err)
		return dto, err
	}
	return dto, nil
}
func FileVariationsActionUpdate(
	query QueryDSL,
	dto *FileVariations,
) (*FileVariations, *IError) {
	dto.LinkerId = NewString(query.LinkerId)
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = GetDbRef()
	} else {
		dbref = query.Tx
	}
	query.Tx = dbref
	err := dbref.UpdateColumns(&dto).Error
	if err != nil {
		err := GormErrorToIError(err)
		return dto, err
	}
	return dto, nil
}
func FileVariationsActionGetOne(
	query QueryDSL,
) (*FileVariations, *IError) {
	refl := reflect.ValueOf(&FileVariations{})
	item, err := GetOneEntity[FileVariations](query, refl)
	return item, err
}
func entityFileFormatter(dto *FileEntity, query QueryDSL) {
	if dto == nil {
		return
	}
	if dto.Created > 0 {
		dto.CreatedFormatted = FormatDateBasedOnQuery(dto.Created, query)
	}
	if dto.Updated > 0 {
		dto.CreatedFormatted = FormatDateBasedOnQuery(dto.Updated, query)
	}
}
func FileActionSeederMultiple(query QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	batchSize := 100
	bar := progressbar.Default(int64(count))
	// Collect entities in batches
	var entitiesBatch []*FileEntity
	for i := 1; i <= count; i++ {
		entity := FileActions.SeederInit()
		entitiesBatch = append(entitiesBatch, entity)
		// When batch size is reached, perform the batch insert
		if len(entitiesBatch) == batchSize || i == count {
			// Insert batch
			_, err := FileActions.MultiInsert(entitiesBatch, query)
			if err == nil {
				successInsert += len(entitiesBatch)
			} else {
				fmt.Println(err)
				failureInsert += len(entitiesBatch)
			}
			// Clear the batch after insert
			entitiesBatch = nil
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func FileActionSeeder(query QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	bar := progressbar.Default(int64(count))
	for i := 1; i <= count; i++ {
		entity := FileActions.SeederInit()
		_, err := FileActions.Create(entity, query)
		if err == nil {
			successInsert++
		} else {
			fmt.Println(err)
			failureInsert++
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func (x *FileEntity) Seeder() string {
	obj := FileActions.SeederInit()
	v, _ := json.MarshalIndent(obj, "", "  ")
	return string(v)
}
func FileActionSeederInitFn() *FileEntity {
	entity := &FileEntity{
		Variations: []*FileVariations{{}},
	}
	return entity
}
func FileAssociationCreate(dto *FileEntity, query QueryDSL) error {
	return nil
}

/**
* These kind of content are coming from another entity, which is indepndent module
* If we want to create them, we need to do it before. This is not association.
**/
func FileRelationContentCreate(dto *FileEntity, query QueryDSL) error {
	return nil
}
func FileRelationContentUpdate(dto *FileEntity, query QueryDSL) error {
	return nil
}
func FilePolyglotUpdateHandler(dto *FileEntity, query QueryDSL) {
	if dto == nil {
		return
	}
}

/**
 * This will be validating your entity fully. Important note is that, you add validate:* tag
 * in your entity, it will automatically work here. For slices inside entity, make sure you add
 * extra line of AppendSliceErrors, otherwise they won't be detected
 */
func FileValidator(dto *FileEntity, isPatch bool) *IError {
	err := CommonStructValidatorPointer(dto, isPatch)
	if dto != nil && dto.Variations != nil {
		AppendSliceErrors(dto.Variations, isPatch, "variations", err)
	}
	return err
}

// Creates a set of natural language queries, which can be used with
// AI tools to create content or help with some tasks
var FileAskCmd cli.Command = cli.Command{
	Name:  "nlp",
	Usage: "Set of natural language queries which helps creating content or data",
	Subcommands: []cli.Command{
		{
			Name:  "sample",
			Usage: "Asks for generating sample by giving an example data",
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:  "format",
					Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
					Value: "yaml",
				},
				&cli.IntFlag{
					Name:  "count",
					Usage: "How many samples to ask",
					Value: 30,
				},
			},
			Action: func(c *cli.Context) error {
				v := &FileEntity{}
				format := c.String("format")
				request := "\033[1m" + `
I need you to create me an array of exact signature as the example given below,
with at least ` + fmt.Sprint(c.String("count")) + ` items, mock the content with few words, and guess the possible values
based on the common sense. I need the output to be a valid ` + format + ` file.
Make sure you wrap the entire array in 'items' field. Also before that, I provide some explanation of each field:
Name: (type: string) Description: 
DiskPath: (type: string) Description: 
Size: (type: int64) Description: 
VirtualPath: (type: string) Description: 
Type: (type: string) Description: 
Variations: (type: array) Description: 
And here is the actual object signature:
` + v.Seeder() + `
`
				fmt.Println(request)
				return nil
			},
		},
	},
}

func FileEntityPreSanitize(dto *FileEntity, query QueryDSL) {
}
func FileEntityBeforeCreateAppend(dto *FileEntity, query QueryDSL) {
	if dto.UniqueId == "" {
		dto.UniqueId = UUID()
	}
	dto.WorkspaceId = NewString(query.WorkspaceId)
	dto.UserId = NewString(query.UserId)
	FileRecursiveAddUniqueId(dto, query)
}
func FileRecursiveAddUniqueId(dto *FileEntity, query QueryDSL) {
	if dto.Variations != nil && len(dto.Variations) > 0 {
		for index0 := range dto.Variations {
			if dto.Variations[index0].UniqueId == "" {
				dto.Variations[index0].UniqueId = UUID()
			}
		}
	}
}

/*
*
	Batch inserts, do not have all features that create
	operation does. Use it with unnormalized content,
	or read the source code carefully.
  This is not marked as an action, because it should not be available publicly
  at this moment.
*
*/
func FileMultiInsertFn(dtos []*FileEntity, query QueryDSL) ([]*FileEntity, *IError) {
	if len(dtos) > 0 {
		for index := range dtos {
			FileEntityPreSanitize(dtos[index], query)
			FileEntityBeforeCreateAppend(dtos[index], query)
		}
		var dbref *gorm.DB = nil
		if query.Tx == nil {
			dbref = GetDbRef()
		} else {
			dbref = query.Tx
		}
		query.Tx = dbref
		err := dbref.Create(&dtos).Error
		if err != nil {
			return nil, GormErrorToIError(err)
		}
	}
	return dtos, nil
}
func FileActionBatchCreateFn(dtos []*FileEntity, query QueryDSL) ([]*FileEntity, *IError) {
	if dtos != nil && len(dtos) > 0 {
		items := []*FileEntity{}
		for _, item := range dtos {
			s, err := FileActions.Create(item, query)
			if err != nil {
				return nil, err
			}
			items = append(items, s)
		}
		return items, nil
	}
	return dtos, nil
}
func FileDeleteEntireChildren(query QueryDSL, dto *FileEntity) *IError {
	// intentionally removed this. It's hard to implement it, and probably wrong without
	// proper on delete cascade
	return nil
}
func FileActionCreateFn(dto *FileEntity, query QueryDSL) (*FileEntity, *IError) {
	// 1. Validate always
	if iError := FileValidator(dto, false); iError != nil {
		return nil, iError
	}
	// 1.5 Sanitize the content coming of the front-end
	FileEntityPreSanitize(dto, query)
	// 2. Append the necessary information about user, workspace
	FileEntityBeforeCreateAppend(dto, query)
	// 3. Create other entities if we want select from them
	FileRelationContentCreate(dto, query)
	// 4. Create the entity
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = GetDbRef()
	} else {
		dbref = query.Tx
	}
	query.Tx = dbref
	err := dbref.Create(&dto).Error
	if err != nil {
		err := GormErrorToIError(err)
		return dto, err
	}
	// 5. Create sub entities, objects or arrays, association to other entities
	FileAssociationCreate(dto, query)
	// 6. Fire the event into system
	event.MustFire(FILE_EVENT_CREATED, event.M{
		"entity":    dto,
		"entityKey": GetTypeString(&FileEntity{}),
		"target":    "workspace",
		"unqiueId":  query.WorkspaceId,
	})
	return dto, nil
}
func FileActionGetOneFn(query QueryDSL) (*FileEntity, *IError) {
	refl := reflect.ValueOf(&FileEntity{})
	item, err := GetOneEntity[FileEntity](query, refl)
	entityFileFormatter(item, query)
	return item, err
}
func FileActionGetByWorkspaceFn(query QueryDSL) (*FileEntity, *IError) {
	refl := reflect.ValueOf(&FileEntity{})
	item, err := GetOneByWorkspaceEntity[FileEntity](query, refl)
	entityFileFormatter(item, query)
	return item, err
}
func FileActionQueryFn(query QueryDSL) ([]*FileEntity, *QueryResultMeta, error) {
	refl := reflect.ValueOf(&FileEntity{})
	items, meta, err := QueryEntitiesPointer[FileEntity](query, refl)
	for _, item := range items {
		entityFileFormatter(item, query)
	}
	return items, meta, err
}

var fileMemoryItems []*FileEntity = []*FileEntity{}

func FileEntityIntoMemory() {
	q := QueryDSL{
		ItemsPerPage: 500,
		StartIndex:   0,
	}
	_, qrm, _ := FileActions.Query(q)
	for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
		items, _, _ := FileActions.Query(q)
		fileMemoryItems = append(fileMemoryItems, items...)
		i += q.ItemsPerPage
		q.StartIndex = i
	}
}
func FileMemGet(id uint) *FileEntity {
	for _, item := range fileMemoryItems {
		if item.ID == id {
			return item
		}
	}
	return nil
}
func FileMemJoin(items []uint) []*FileEntity {
	res := []*FileEntity{}
	for _, item := range items {
		v := FileMemGet(item)
		if v != nil {
			res = append(res, v)
		}
	}
	return res
}
func FileUpdateExec(dbref *gorm.DB, query QueryDSL, fields *FileEntity) (*FileEntity, *IError) {
	uniqueId := fields.UniqueId
	query.TriggerEventName = FILE_EVENT_UPDATED
	FileEntityPreSanitize(fields, query)
	var item FileEntity
	// If the entity is distinct by workspace, then the Query.WorkspaceId
	// which is selected is being used as the condition for create or update
	// if not, the unique Id is being used
	cond2 := &FileEntity{UniqueId: uniqueId}
	q := dbref.
		Where(cond2).
		FirstOrCreate(&item)
	err := q.UpdateColumns(fields).Error
	if err != nil {
		return nil, GormErrorToIError(err)
	}
	query.Tx = dbref
	FileRelationContentUpdate(fields, query)
	FilePolyglotUpdateHandler(fields, query)
	if ero := FileDeleteEntireChildren(query, fields); ero != nil {
		return nil, ero
	}
	// @meta(update has many)
	if fields.Variations != nil {
		linkerId := uniqueId
		dbref.
			Where(&FileVariations{LinkerId: NewString(linkerId)}).
			Delete(&FileVariations{})
		for _, newItem := range fields.Variations {
			newItem.UniqueId = UUID()
			newItem.LinkerId = NewString(linkerId)
			dbref.Create(&newItem)
		}
	}
	err = dbref.
		Preload(clause.Associations).
		Where(&FileEntity{UniqueId: uniqueId}).
		First(&item).Error
	event.MustFire(query.TriggerEventName, event.M{
		"entity":   &item,
		"target":   "workspace",
		"unqiueId": query.WorkspaceId,
	})
	if err != nil {
		return &item, GormErrorToIError(err)
	}
	return &item, nil
}
func FileActionUpdateFn(query QueryDSL, fields *FileEntity) (*FileEntity, *IError) {
	if fields == nil {
		return nil, Create401Error(&WorkspacesMessages.BodyIsMissing, []string{})
	}
	// 1. Validate always
	if iError := FileValidator(fields, true); iError != nil {
		return nil, iError
	}
	// Let's not add this. I am not sure of the consequences
	// FileRecursiveAddUniqueId(fields, query)
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = GetDbRef()
		var item *FileEntity
		vf := dbref.Transaction(func(tx *gorm.DB) error {
			dbref = tx
			var err *IError
			item, err = FileUpdateExec(dbref, query, fields)
			if err == nil {
				return nil
			} else {
				return err
			}
		})
		return item, CastToIError(vf)
	} else {
		dbref = query.Tx
		return FileUpdateExec(dbref, query, fields)
	}
}

var FileWipeCmd cli.Command = cli.Command{
	Name:  "wipe",
	Usage: "Wipes entire files ",
	Action: func(c *cli.Context) error {
		query := CommonCliQueryDSLBuilderAuthorize(c, &SecurityModel{
			ActionRequires: []PermissionInfo{PERM_ROOT_FILE_DELETE},
		})
		count, _ := FileActionWipeClean(query)
		fmt.Println("Removed", count, "of entities")
		return nil
	},
}

func FileActionRemoveFn(query QueryDSL) (int64, *IError) {
	refl := reflect.ValueOf(&FileEntity{})
	query.ActionRequires = []PermissionInfo{PERM_ROOT_FILE_DELETE}
	return RemoveEntity[FileEntity](query, refl)
}
func FileActionWipeClean(query QueryDSL) (int64, error) {
	var err error
	var count int64 = 0
	{
		subCount, subErr := WipeCleanEntity[FileVariations]()
		if subErr != nil {
			fmt.Println("Error while wiping 'FileVariations'", subErr)
			return count, subErr
		} else {
			count += subCount
		}
	}
	{
		subCount, subErr := WipeCleanEntity[FileEntity]()
		if subErr != nil {
			fmt.Println("Error while wiping 'FileEntity'", subErr)
			return count, subErr
		} else {
			count += subCount
		}
	}
	return count, err
}
func FileActionBulkUpdate(
	query QueryDSL, dto *BulkRecordRequest[FileEntity]) (
	*BulkRecordRequest[FileEntity], *IError,
) {
	result := []*FileEntity{}
	err := GetDbRef().Transaction(func(tx *gorm.DB) error {
		query.Tx = tx
		for _, record := range dto.Records {
			item, err := FileActions.Update(query, record)
			if err != nil {
				return err
			} else {
				result = append(result, item)
			}
		}
		return nil
	})
	if err == nil {
		return dto, nil
	}
	return nil, err.(*IError)
}
func (x *FileEntity) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}

var FileEntityMeta = TableMetaData{
	EntityName:    "File",
	ExportKey:     "files",
	TableNameInDb: "file_entities",
	EntityObject:  &FileEntity{},
	ExportStream:  FileActionExportT,
	ImportQuery:   FileActionImport,
}

func FileActionExport(
	query QueryDSL,
) (chan []byte, *IError) {
	return YamlExporterChannel[FileEntity](query, FileActions.Query, FilePreloadRelations)
}
func FileActionExportT(
	query QueryDSL,
) (chan []interface{}, *IError) {
	return YamlExporterChannelT[FileEntity](query, FileActions.Query, FilePreloadRelations)
}
func FileActionImport(
	dto interface{}, query QueryDSL,
) *IError {
	var json = jsoniter.ConfigCompatibleWithStandardLibrary
	var content FileEntity
	cx, err2 := json.Marshal(dto)
	if err2 != nil {
		return Create401Error(&WorkspacesMessages.InvalidContent, []string{})
	}
	json.Unmarshal(cx, &content)
	_, err := FileActions.Create(&content, query)
	return err
}

var FileCommonCliFlags = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "name",
		Required: false,
		Usage:    `name`,
	},
	&cli.StringFlag{
		Name:     "disk-path",
		Required: false,
		Usage:    `diskPath`,
	},
	&cli.Int64Flag{
		Name:     "size",
		Required: false,
		Usage:    `size`,
	},
	&cli.StringFlag{
		Name:     "virtual-path",
		Required: false,
		Usage:    `virtualPath`,
	},
	&cli.StringFlag{
		Name:     "type",
		Required: false,
		Usage:    `type`,
	},
	&cli.StringSliceFlag{
		Name:     "variations",
		Required: false,
		Usage:    `variations`,
	},
}
var FileCommonInteractiveCliFlags = []CliInteractiveFlag{
	{
		Name:        "name",
		StructField: "Name",
		Required:    false,
		Recommended: false,
		Usage:       `name`,
		Type:        "string",
	},
	{
		Name:        "diskPath",
		StructField: "DiskPath",
		Required:    false,
		Recommended: false,
		Usage:       `diskPath`,
		Type:        "string",
	},
	{
		Name:        "size",
		StructField: "Size",
		Required:    false,
		Recommended: false,
		Usage:       `size`,
		Type:        "int64",
	},
	{
		Name:        "virtualPath",
		StructField: "VirtualPath",
		Required:    false,
		Recommended: false,
		Usage:       `virtualPath`,
		Type:        "string",
	},
	{
		Name:        "type",
		StructField: "Type",
		Required:    false,
		Recommended: false,
		Usage:       `type`,
		Type:        "string",
	},
}
var FileCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "name",
		Required: false,
		Usage:    `name`,
	},
	&cli.StringFlag{
		Name:     "disk-path",
		Required: false,
		Usage:    `diskPath`,
	},
	&cli.Int64Flag{
		Name:     "size",
		Required: false,
		Usage:    `size`,
	},
	&cli.StringFlag{
		Name:     "virtual-path",
		Required: false,
		Usage:    `virtualPath`,
	},
	&cli.StringFlag{
		Name:     "type",
		Required: false,
		Usage:    `type`,
	},
	&cli.StringSliceFlag{
		Name:     "variations",
		Required: false,
		Usage:    `variations`,
	},
}
var FileCreateCmd cli.Command = FILE_ACTION_POST_ONE.ToCli()
var FileCreateInteractiveCmd cli.Command = cli.Command{
	Name:  "ic",
	Usage: "Creates a new entity, using requied fields in an interactive name",
	Flags: []cli.Flag{
		&cli.BoolFlag{
			Name:  "all",
			Usage: "Interactively asks for all inputs, not only required ones",
		},
	},
	Action: func(c *cli.Context) {
		query := CommonCliQueryDSLBuilderAuthorize(c, &SecurityModel{
			ActionRequires: []PermissionInfo{PERM_ROOT_FILE_CREATE},
		})
		entity := &FileEntity{}
		PopulateInteractively(entity, c, FileCommonInteractiveCliFlags)
		if entity, err := FileActions.Create(entity, query); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := yaml.Marshal(entity)
			fmt.Println(FormatYamlKeys(string(f)))
		}
	},
}
var FileUpdateCmd cli.Command = cli.Command{
	Name:    "update",
	Aliases: []string{"u"},
	Flags:   FileCommonCliFlagsOptional,
	Usage:   "Updates entity by passing the parameters",
	Action: func(c *cli.Context) error {
		query := CommonCliQueryDSLBuilderAuthorize(c, &SecurityModel{
			ActionRequires: []PermissionInfo{PERM_ROOT_FILE_UPDATE},
		})
		entity := CastFileFromCli(c)
		if entity, err := FileActions.Update(query, entity); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := json.MarshalIndent(entity, "", "  ")
			fmt.Println(string(f))
		}
		return nil
	},
}

func (x *FileEntity) FromCli(c *cli.Context) *FileEntity {
	return CastFileFromCli(c)
}
func CastFileFromCli(c *cli.Context) *FileEntity {
	template := &FileEntity{}
	if c.IsSet("uid") {
		template.UniqueId = c.String("uid")
	}
	if c.IsSet("pid") {
		template.ParentId = NewStringAutoNull(c.String("pid"))
	}
	if c.IsSet("name") {
		template.Name = c.String("name")
	}
	if c.IsSet("disk-path") {
		template.DiskPath = c.String("disk-path")
	}
	if c.IsSet("size") {
		value := c.Int64("size")
		template.Size = value
	}
	if c.IsSet("virtual-path") {
		template.VirtualPath = c.String("virtual-path")
	}
	if c.IsSet("type") {
		template.Type = c.String("type")
	}
	return template
}
func FileSyncSeederFromFs(fsRef *embed.FS, fileNames []string) {
	SeederFromFSImport(
		QueryDSL{},
		FileActions.Create,
		reflect.ValueOf(&FileEntity{}).Elem(),
		fsRef,
		fileNames,
		true,
	)
}
func FileSyncSeeders() {
	SeederFromFSImport(
		QueryDSL{WorkspaceId: USER_SYSTEM},
		FileActions.Create,
		reflect.ValueOf(&FileEntity{}).Elem(),
		fileSeedersFs,
		[]string{},
		true,
	)
}
func FileImportMocks() {
	SeederFromFSImport(
		QueryDSL{},
		FileActions.Create,
		reflect.ValueOf(&FileEntity{}).Elem(),
		&mocks.ViewsFs,
		[]string{},
		false,
	)
}
func FileWriteQueryMock(ctx MockQueryContext) {
	for _, lang := range ctx.Languages {
		itemsPerPage := 9999
		if ctx.ItemsPerPage > 0 {
			itemsPerPage = ctx.ItemsPerPage
		}
		f := QueryDSL{ItemsPerPage: itemsPerPage, Language: lang, WithPreloads: ctx.WithPreloads, Deep: true}
		items, count, _ := FileActions.Query(f)
		result := QueryEntitySuccessResult(f, items, count)
		WriteMockDataToFile(lang, "", "File", result)
	}
}
func FilesActionQueryString(keyword string, page int) ([]string, *QueryResultMeta, error) {
	searchFields := []string{
		`unique_id %"{keyword}"%`,
		`name %"{keyword}"%`,
	}
	m := func(item *FileEntity) string {
		label := item.UniqueId
		// if item.Name != nil {
		// 	label += " >>> " + *item.Name
		// }
		return label
	}
	query := QueryStringCastCli(searchFields, keyword, page)
	items, meta, err := FileActions.Query(query)
	stringItems := []string{}
	for _, item := range items {
		label := m(item)
		stringItems = append(stringItems, label)
	}
	return stringItems, meta, err
}

var FileImportExportCommands = []cli.Command{
	{
		Name:  "mock",
		Usage: "Generates mock records based on the entity definition",
		Flags: []cli.Flag{
			&cli.IntFlag{
				Name:  "count",
				Usage: "how many activation key do you need to be generated and stored in database",
				Value: 10,
			},
			&cli.BoolFlag{
				Name:  "batch",
				Usage: "Multiple insert into database mode. Might miss children and relations at the moment",
			},
		},
		Action: func(c *cli.Context) error {
			query := CommonCliQueryDSLBuilderAuthorize(c, &SecurityModel{
				ActionRequires: []PermissionInfo{PERM_ROOT_FILE_CREATE},
			})
			if c.Bool("batch") {
				FileActionSeederMultiple(query, c.Int("count"))
			} else {
				FileActionSeeder(query, c.Int("count"))
			}
			return nil
		},
	},
	{
		Name:    "init",
		Aliases: []string{"i"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Creates a basic seeder file for you, based on the definition module we have. You can populate this file as an example",
		Action: func(c *cli.Context) error {
			seed := FileActions.SeederInit()
			CommonInitSeeder(strings.TrimSpace(c.String("format")), seed)
			return nil
		},
	},
	{
		Name:    "validate",
		Aliases: []string{"v"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "file",
				Usage: "Validates an import file, such as yaml, json, csv, and gives some insights how the after import it would look like",
				Value: "file-seeder-file.yml",
				// Uncomment before publish, they need to specify
				// Required: true,
			},
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Reads a yaml file containing an array of files, you can run this to validate if your import file is correct, and how it would look like after import",
		Action: func(c *cli.Context) error {
			data := &[]FileEntity{}
			ReadYamlFile(c.String("file"), data)
			fmt.Println(data)
			return nil
		},
	},
	cli.Command{
		Name:  "slist",
		Usage: "Prints the list of files attached to this module for syncing or bootstrapping project",
		Action: func(c *cli.Context) error {
			if entity, err := GetSeederFilenames(fileSeedersFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "ssync",
		Usage: "Tries to sync the embedded content into the database, the list could be seen by 'slist' command",
		Action: func(c *cli.Context) error {
			CommonCliImportEmbedCmd(c,
				FileActions.Create,
				reflect.ValueOf(&FileEntity{}).Elem(),
				fileSeedersFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:  "mlist",
		Usage: "Prints the list of embedded mocks into the app",
		Action: func(c *cli.Context) error {
			if entity, err := GetSeederFilenames(&mocks.ViewsFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "msync",
		Usage: "Tries to sync mocks into the system",
		Action: func(c *cli.Context) error {
			CommonCliImportEmbedCmd(c,
				FileActions.Create,
				reflect.ValueOf(&FileEntity{}).Elem(),
				&mocks.ViewsFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:    "export",
		Aliases: []string{"e"},
		Flags: append(CommonQueryFlags,
			&cli.StringFlag{
				Name:     "file",
				Usage:    "The address of file you want the csv/yaml/json be exported to",
				Required: true,
			}),
		Usage: "Exports a query results into the csv/yaml/json format",
		Action: func(c *cli.Context) error {
			return CommonCliExportCmd2(c,
				FileEntityStream,
				reflect.ValueOf(&FileEntity{}).Elem(),
				c.String("file"),
				&metas.MetaFs,
				"FileFieldMap.yml",
				FilePreloadRelations,
			)
		},
	},
	cli.Command{
		Name: "import",
		Flags: append(
			append(
				CommonQueryFlags,
				&cli.StringFlag{
					Name:     "file",
					Usage:    "The address of file you want the csv be imported from",
					Required: true,
				}),
			FileCommonCliFlagsOptional...,
		),
		Usage: "imports csv/yaml/json file and place it and its children into database",
		Action: func(c *cli.Context) error {
			CommonCliImportCmdAuthorized(c,
				FileActions.Create,
				reflect.ValueOf(&FileEntity{}).Elem(),
				c.String("file"),
				&SecurityModel{
					ActionRequires: []PermissionInfo{PERM_ROOT_FILE_CREATE},
				},
				func() FileEntity {
					v := CastFileFromCli(c)
					return *v
				},
			)
			return nil
		},
	},
}
var FileCliCommands []cli.Command = []cli.Command{
	FILE_ACTION_QUERY.ToCli(),
	FILE_ACTION_TABLE.ToCli(),
	FileCreateCmd,
	FileUpdateCmd,
	FileAskCmd,
	FileCreateInteractiveCmd,
	FileWipeCmd,
	GetCommonRemoveQuery(
		reflect.ValueOf(&FileEntity{}).Elem(),
		FileActions.Remove,
	),
}

func FileCliFn() cli.Command {
	commands := append(FileImportExportCommands, FileCliCommands...)
	return cli.Command{
		Name:        "file",
		Description: "Files module actions",
		Usage:       `File manager, uploading files and actions related.`,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "language",
				Value: "en",
			},
		},
		Subcommands: commands,
	}
}

var FILE_ACTION_TABLE = Module3Action{
	Name:          "table",
	ActionAliases: []string{"t"},
	Flags:         CommonQueryFlags,
	Description:   "Table formatted queries all of the entities in database based on the standard query format",
	Action:        FileActions.Query,
	CliAction: func(c *cli.Context, security *SecurityModel) error {
		CommonCliTableCmd2(c,
			FileActions.Query,
			security,
			reflect.ValueOf(&FileEntity{}).Elem(),
		)
		return nil
	},
}
var FILE_ACTION_QUERY = Module3Action{
	Method: "GET",
	Url:    "/files",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_FILE_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpQueryEntity(c, FileActions.Query)
		},
	},
	Format:         "QUERY",
	Action:         FileActions.Query,
	ResponseEntity: &[]FileEntity{},
	Out: &Module3ActionBody{
		Entity: "FileEntity",
	},
	CliAction: func(c *cli.Context, security *SecurityModel) error {
		CommonCliQueryCmd2(
			c,
			FileActions.Query,
			security,
		)
		return nil
	},
	CliName:       "query",
	Name:          "query",
	ActionAliases: []string{"q"},
	Flags:         CommonQueryFlags,
	Description:   "Queries all of the entities in database based on the standard query format (s+)",
}
var FILE_ACTION_EXPORT = Module3Action{
	Method: "GET",
	Url:    "/files/export",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_FILE_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpStreamFileChannel(c, FileActionExport)
		},
	},
	Format:         "QUERY",
	Action:         FileActionExport,
	ResponseEntity: &[]FileEntity{},
	Out: &Module3ActionBody{
		Entity: "FileEntity",
	},
}
var FILE_ACTION_GET_ONE = Module3Action{
	Method: "GET",
	Url:    "/file/:uniqueId",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_FILE_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpGetEntity(c, FileActions.GetOne)
		},
	},
	Format:         "GET_ONE",
	Action:         FileActions.GetOne,
	ResponseEntity: &FileEntity{},
	Out: &Module3ActionBody{
		Entity: "FileEntity",
	},
}
var FILE_ACTION_POST_ONE = Module3Action{
	Name:          "create",
	ActionAliases: []string{"c"},
	Description:   "Create new file",
	Flags:         FileCommonCliFlags,
	Method:        "POST",
	Url:           "/file",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_FILE_CREATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpPostEntity(c, FileActions.Create)
		},
	},
	CliAction: func(c *cli.Context, security *SecurityModel) error {
		result, err := CliPostEntity(c, FileActions.Create, security)
		HandleActionInCli(c, result, err, map[string]map[string]string{})
		return err
	},
	Action:         FileActions.Create,
	Format:         "POST_ONE",
	RequestEntity:  &FileEntity{},
	ResponseEntity: &FileEntity{},
	Out: &Module3ActionBody{
		Entity: "FileEntity",
	},
	In: &Module3ActionBody{
		Entity: "FileEntity",
	},
}
var FILE_ACTION_PATCH = Module3Action{
	Name:          "update",
	ActionAliases: []string{"u"},
	Flags:         FileCommonCliFlagsOptional,
	Method:        "PATCH",
	Url:           "/file",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_FILE_UPDATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpUpdateEntity(c, FileActions.Update)
		},
	},
	Action:         FileActions.Update,
	RequestEntity:  &FileEntity{},
	ResponseEntity: &FileEntity{},
	Format:         "PATCH_ONE",
	Out: &Module3ActionBody{
		Entity: "FileEntity",
	},
	In: &Module3ActionBody{
		Entity: "FileEntity",
	},
}
var FILE_ACTION_PATCH_BULK = Module3Action{
	Method: "PATCH",
	Url:    "/files",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_FILE_UPDATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpUpdateEntities(c, FileActionBulkUpdate)
		},
	},
	Action:         FileActionBulkUpdate,
	Format:         "PATCH_BULK",
	RequestEntity:  &BulkRecordRequest[FileEntity]{},
	ResponseEntity: &BulkRecordRequest[FileEntity]{},
	Out: &Module3ActionBody{
		Entity: "FileEntity",
	},
	In: &Module3ActionBody{
		Entity: "FileEntity",
	},
}
var FILE_ACTION_DELETE = Module3Action{
	Method: "DELETE",
	Url:    "/file",
	Format: "DELETE_DSL",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_FILE_DELETE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpRemoveEntity(c, FileActions.Remove)
		},
	},
	Action:         FileActions.Remove,
	RequestEntity:  &DeleteRequest{},
	ResponseEntity: &DeleteResponse{},
	TargetEntity:   &FileEntity{},
}
var FILE_VARIATIONS_ACTION_PATCH = Module3Action{
	Method: "PATCH",
	Url:    "/file/:linkerId/variations/:uniqueId",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_FILE_UPDATE},
	},
	Handlers: []gin.HandlerFunc{
		func(
			c *gin.Context,
		) {
			HttpUpdateEntity(c, FileVariationsActionUpdate)
		},
	},
	Action:         FileVariationsActionUpdate,
	Format:         "PATCH_ONE",
	RequestEntity:  &FileVariations{},
	ResponseEntity: &FileVariations{},
	Out: &Module3ActionBody{
		Entity: "FileVariations",
	},
	In: &Module3ActionBody{
		Entity: "FileVariations",
	},
}
var FILE_VARIATIONS_ACTION_GET = Module3Action{
	Method: "GET",
	Url:    "/file/variations/:linkerId/:uniqueId",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_FILE_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(
			c *gin.Context,
		) {
			HttpGetEntity(c, FileVariationsActionGetOne)
		},
	},
	Action:         FileVariationsActionGetOne,
	Format:         "GET_ONE",
	ResponseEntity: &FileVariations{},
	Out: &Module3ActionBody{
		Entity: "FileVariations",
	},
}
var FILE_VARIATIONS_ACTION_POST = Module3Action{
	Method: "POST",
	Url:    "/file/:linkerId/variations",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_FILE_CREATE},
	},
	Handlers: []gin.HandlerFunc{
		func(
			c *gin.Context,
		) {
			HttpPostEntity(c, FileVariationsActionCreate)
		},
	},
	Action:         FileVariationsActionCreate,
	Format:         "POST_ONE",
	RequestEntity:  &FileVariations{},
	ResponseEntity: &FileVariations{},
	Out: &Module3ActionBody{
		Entity: "FileVariations",
	},
	In: &Module3ActionBody{
		Entity: "FileVariations",
	},
}

/**
 *	Override this function on FileEntityHttp.go,
 *	In order to add your own http
 **/
var AppendFileRouter = func(r *[]Module3Action) {}

func GetFileModule3Actions() []Module3Action {
	routes := []Module3Action{
		FILE_ACTION_QUERY,
		FILE_ACTION_EXPORT,
		FILE_ACTION_GET_ONE,
		FILE_ACTION_POST_ONE,
		FILE_ACTION_PATCH,
		FILE_ACTION_PATCH_BULK,
		FILE_ACTION_DELETE,
		FILE_VARIATIONS_ACTION_PATCH,
		FILE_VARIATIONS_ACTION_GET,
		FILE_VARIATIONS_ACTION_POST,
	}
	// Append user defined functions
	AppendFileRouter(&routes)
	return routes
}

var PERM_ROOT_FILE_DELETE = PermissionInfo{
	CompleteKey: "root.modules.workspaces.file.delete",
	Name:        "Delete file",
}
var PERM_ROOT_FILE_CREATE = PermissionInfo{
	CompleteKey: "root.modules.workspaces.file.create",
	Name:        "Create file",
}
var PERM_ROOT_FILE_UPDATE = PermissionInfo{
	CompleteKey: "root.modules.workspaces.file.update",
	Name:        "Update file",
}
var PERM_ROOT_FILE_QUERY = PermissionInfo{
	CompleteKey: "root.modules.workspaces.file.query",
	Name:        "Query file",
}
var PERM_ROOT_FILE = PermissionInfo{
	CompleteKey: "root.modules.workspaces.file.*",
	Name:        "Entire file actions (*)",
}
var ALL_FILE_PERMISSIONS = []PermissionInfo{
	PERM_ROOT_FILE_DELETE,
	PERM_ROOT_FILE_CREATE,
	PERM_ROOT_FILE_UPDATE,
	PERM_ROOT_FILE_QUERY,
	PERM_ROOT_FILE,
}
var FileEntityBundle = EntityBundle{
	Permissions: ALL_FILE_PERMISSIONS,
	// Cli command has been exluded, since we use module to wrap all the entities
	// to be more easier to wrap up.
	// Create your own bundle if you need with Cli
	//CliCommands: []cli.Command{
	//	FileCliFn(),
	//},
	Actions:      GetFileModule3Actions(),
	MockProvider: FileImportMocks,
	AutoMigrationEntities: []interface{}{
		&FileEntity{},
		&FileVariations{},
	},
}
