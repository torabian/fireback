package workspaces

/*
*	Generated by fireback 1.2.0
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/urfave/cli"
)

func CastUserRoleWorkspacePermissionFromCli(c *cli.Context) *UserRoleWorkspacePermissionDto {
	template := &UserRoleWorkspacePermissionDto{}
	if c.IsSet("workspace-id") {
		template.WorkspaceId = c.String("workspace-id")
	}
	if c.IsSet("user-id") {
		template.UserId = c.String("user-id")
	}
	if c.IsSet("role-id") {
		template.RoleId = c.String("role-id")
	}
	if c.IsSet("capability-id") {
		template.CapabilityId = c.String("capability-id")
	}
	if c.IsSet("type") {
		template.Type = c.String("type")
	}
	return template
}

var UserRoleWorkspacePermissionDtoCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "workspace-id",
		Required: false,
		Usage:    `workspaceId (string)`,
	},
	&cli.StringFlag{
		Name:     "user-id",
		Required: false,
		Usage:    `userId (string)`,
	},
	&cli.StringFlag{
		Name:     "role-id",
		Required: false,
		Usage:    `roleId (string)`,
	},
	&cli.StringFlag{
		Name:     "capability-id",
		Required: false,
		Usage:    `capabilityId (string)`,
	},
	&cli.StringFlag{
		Name:     "type",
		Required: false,
		Usage:    `type (string)`,
	},
}

type UserRoleWorkspacePermissionDto struct {
	WorkspaceId  string `json:"workspaceId" yaml:"workspaceId"        `
	RoleName     string `json:"roleName" yaml:"roleName"        `
	UserId       string `json:"userId" yaml:"userId"        `
	RoleId       string `json:"roleId" yaml:"roleId"        `
	CapabilityId string `json:"capabilityId" yaml:"capabilityId"        `
	Type         string `json:"type" yaml:"type"        `
}
type UserRoleWorkspacePermissionDtoList struct {
	Items []*UserRoleWorkspacePermissionDto
}

func NewUserRoleWorkspacePermissionDtoList(items []*UserRoleWorkspacePermissionDto) *UserRoleWorkspacePermissionDtoList {
	return &UserRoleWorkspacePermissionDtoList{
		Items: items,
	}
}
func (x *UserRoleWorkspacePermissionDtoList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *UserRoleWorkspacePermissionDto) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	// Intentional trim (so strings lib is always imported)
	return strings.TrimSpace("")
}
func (x *UserRoleWorkspacePermissionDto) JsonPrint() {
	fmt.Println(x.Json())
}

// This is an experimental way to create new dtos, with exluding the pointers as helper.
func NewUserRoleWorkspacePermissionDto(
	WorkspaceId string,
	UserId string,
	RoleId string,
	CapabilityId string,
	Type string,
) UserRoleWorkspacePermissionDto {
	return UserRoleWorkspacePermissionDto{
		WorkspaceId:  WorkspaceId,
		UserId:       UserId,
		RoleId:       RoleId,
		CapabilityId: CapabilityId,
		Type:         Type,
	}
}
