package workspaces

/*
*	Generated by fireback 1.2.0
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"encoding/json"
	"fmt"
	"github.com/urfave/cli"
	"strings"
)

func CastEmailOtpResponseFromCli(c *cli.Context) *EmailOtpResponseDto {
	template := &EmailOtpResponseDto{}
	if c.IsSet("request-id") {
		template.RequestId = NewStringAutoNull(c.String("request-id"))
	}
	if c.IsSet("user-session-id") {
		template.UserSessionId = NewStringAutoNull(c.String("user-session-id"))
	}
	return template
}

var EmailOtpResponseDtoCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "request-id",
		Required: false,
		Usage:    `request (one)`,
	},
	&cli.StringFlag{
		Name:     "user-session-id",
		Required: false,
		Usage:    `userSession (one)`,
	},
}

type EmailOtpResponseDto struct {
	Request       *PublicAuthenticationEntity `json:"request" yaml:"request"    gorm:"foreignKey:RequestId;references:UniqueId"      `
	RequestId     String                      `json:"requestId" yaml:"requestId"`
	UserSession   *UserSessionDto             `json:"userSession" yaml:"userSession"    gorm:"foreignKey:UserSessionId;references:UniqueId"      `
	UserSessionId String                      `json:"userSessionId" yaml:"userSessionId"`
}
type EmailOtpResponseDtoList struct {
	Items []*EmailOtpResponseDto
}

func NewEmailOtpResponseDtoList(items []*EmailOtpResponseDto) *EmailOtpResponseDtoList {
	return &EmailOtpResponseDtoList{
		Items: items,
	}
}
func (x *EmailOtpResponseDtoList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *EmailOtpResponseDto) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	// Intentional trim (so strings lib is always imported)
	return strings.TrimSpace("")
}
func (x *EmailOtpResponseDto) JsonPrint() {
	fmt.Println(x.Json())
}

// This is an experimental way to create new dtos, with exluding the pointers as helper.
func NewEmailOtpResponseDto() EmailOtpResponseDto {
	return EmailOtpResponseDto{}
}
