package workspaces

/*
*	Generated by fireback 1.1.28
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import "encoding/json"
import "github.com/urfave/cli"
import "gopkg.in/yaml.v2"
import "fmt"

func WorkspacesJson() string {
	e := cli.BoolFlag{}
	_ = e
	fmt.Println("Module test config")
	str2, _ := yaml.Marshal("")
	_ = str2
	str, _ := json.MarshalIndent("dont remove me", "", "  ")
	return (string(str))
}

// Module dynamic things comes here. Don't touch it :D
var PERM_ROOT_WORKSPACES_EVERYTHING = PermissionInfo{
	CompleteKey: "root/workspaces/*",
}
var ALL_PERM_WORKSPACES_MODULE = []PermissionInfo{
	PERM_ROOT_WORKSPACES_EVERYTHING,
}

type workspacesCode string

const (
	ActionOnlyInRoot                   workspacesCode = "ActionOnlyInRoot"
	AlreadyConfirmed                   workspacesCode = "AlreadyConfirmed"
	BodyIsMissing                      workspacesCode = "BodyIsMissing"
	DataTypeDoesNotExistsInFireback    workspacesCode = "DataTypeDoesNotExistsInFireback"
	EmailConfigurationIsNotAvailable   workspacesCode = "EmailConfigurationIsNotAvailable"
	EmailConfigurationMissing          workspacesCode = "EmailConfigurationMissing"
	EmailIsNotConfigured               workspacesCode = "EmailIsNotConfigured"
	EmailNotFound                      workspacesCode = "EmailNotFound"
	FileNotFound                       workspacesCode = "FileNotFound"
	GsmConfigurationIsNotAvailable     workspacesCode = "GsmConfigurationIsNotAvailable"
	InvalidContent                     workspacesCode = "InvalidContent"
	InvalidExchangeKey                 workspacesCode = "InvalidExchangeKey"
	InvitationExpired                  workspacesCode = "InvitationExpired"
	InviteToWorkspaceMailSenderMissing workspacesCode = "InviteToWorkspaceMailSenderMissing"
	InvokeUrlMissing                   workspacesCode = "InvokeUrlMissing"
	NotEnoughPermission                workspacesCode = "NotEnoughPermission"
	OtaRequestBlockedUntil             workspacesCode = "OtaRequestBlockedUntil"
	OtpCodeInvalid                     workspacesCode = "OtpCodeInvalid"
	PassportNotAvailable               workspacesCode = "PassportNotAvailable"
	PassportNotFound                   workspacesCode = "PassportNotFound"
	PassportUserNotAvailable           workspacesCode = "PassportUserNotAvailable"
	PasswordRequired                   workspacesCode = "PasswordRequired"
	ProvideTokenInAuthorization        workspacesCode = "ProvideTokenInAuthorization"
	ResetNotFound                      workspacesCode = "ResetNotFound"
	SelectWorkspaceId                  workspacesCode = "SelectWorkspaceId"
	SmsNotSent                         workspacesCode = "SmsNotSent"
	UserDoesNotExist                   workspacesCode = "UserDoesNotExist"
	UserNotFoundOrDeleted              workspacesCode = "UserNotFoundOrDeleted"
	UserWhichHasThisTokenDoesNotExist  workspacesCode = "UserWhichHasThisTokenDoesNotExist"
	ValidationFailedOnSomeFields       workspacesCode = "ValidationFailedOnSomeFields"
)

var WorkspacesMessages = newWorkspacesMessageCode()

func newWorkspacesMessageCode() *workspacesMsgs {
	return &workspacesMsgs{
		ActionOnlyInRoot: ErrorItem{
			"$":  "ActionOnlyInRoot",
			"en": "This action is only allowed when user belongs to root workspace, and root is selected",
		},
		AlreadyConfirmed: ErrorItem{
			"$":  "AlreadyConfirmed",
			"en": "Already confirmed",
		},
		BodyIsMissing: ErrorItem{
			"$":  "BodyIsMissing",
			"en": "Body content is not correct. You need a valid json.",
		},
		DataTypeDoesNotExistsInFireback: ErrorItem{
			"$":  "DataTypeDoesNotExistsInFireback",
			"en": "This data type does not exist in fireback. %name %location",
		},
		EmailConfigurationIsNotAvailable: ErrorItem{
			"$":  "EmailConfigurationIsNotAvailable",
			"en": "Email configuration is not available",
		},
		EmailConfigurationMissing: ErrorItem{
			"$":  "EmailConfigurationMissing",
			"en": "Email configuration is not available",
		},
		EmailIsNotConfigured: ErrorItem{
			"$":  "EmailIsNotConfigured",
			"en": "Email server is not configured",
		},
		EmailNotFound: ErrorItem{
			"$":  "EmailNotFound",
			"en": "Email is not found",
		},
		FileNotFound: ErrorItem{
			"$":  "FileNotFound",
			"en": "File not found",
		},
		GsmConfigurationIsNotAvailable: ErrorItem{
			"$":  "GsmConfigurationIsNotAvailable",
			"en": "GSM Services configuration is not available",
		},
		InvalidContent: ErrorItem{
			"$":  "InvalidContent",
			"en": "Body content is not correct. You need a valid json.",
		},
		InvalidExchangeKey: ErrorItem{
			"$":  "InvalidExchangeKey",
			"en": "Invalid exchange key",
		},
		InvitationExpired: ErrorItem{
			"$":  "InvitationExpired",
			"en": "Invitation has been expired.",
		},
		InviteToWorkspaceMailSenderMissing: ErrorItem{
			"$":  "InviteToWorkspaceMailSenderMissing",
			"en": "We cannot send the invitation via email address, because sender email is not available, or not configurated.",
			"fa": "امکان ارسال دعوت نامه از طریق ایمیل وجود ندارد، چون مدیریت تنظیمات لازم برای ایمیل را انجام نداده یا آن را برای شما محدود کرده است.",
		},
		InvokeUrlMissing: ErrorItem{
			"$":  "InvokeUrlMissing",
			"en": "Invoking url is missing",
		},
		NotEnoughPermission: ErrorItem{
			"$":  "NotEnoughPermission",
			"en": "You do not have enough permission for this section",
		},
		OtaRequestBlockedUntil: ErrorItem{
			"$":  "OtaRequestBlockedUntil",
			"en": "Request is blocked until.",
		},
		OtpCodeInvalid: ErrorItem{
			"$":  "OtpCodeInvalid",
			"en": "Otp code is invalid",
		},
		PassportNotAvailable: ErrorItem{
			"$":  "PassportNotAvailable",
			"en": "This passport is not available. Please check credentials and try again",
		},
		PassportNotFound: ErrorItem{
			"$":  "PassportNotFound",
			"en": "This passport is not available. Please check credentials and try again",
		},
		PassportUserNotAvailable: ErrorItem{
			"$":  "PassportUserNotAvailable",
			"en": "User with this passport is not available at this moment",
		},
		PasswordRequired: ErrorItem{
			"$":  "PasswordRequired",
			"en": "Password is required",
		},
		ProvideTokenInAuthorization: ErrorItem{
			"$":  "ProvideTokenInAuthorization",
			"en": "Request requires authroization, please make sure you are logged in, and have enough access level",
			"fa": "شما باید توکن دسترسی را در بخش هدر و قسمت authorization وارد کنید",
		},
		ResetNotFound: ErrorItem{
			"$":  "ResetNotFound",
			"en": "Reset not found",
		},
		SelectWorkspaceId: ErrorItem{
			"$":  "SelectWorkspaceId",
			"en": "You need to select a correct workspace-id in header section",
			"fa": "شما باید تیم یا ورک اسپیس را در بخش هدر با فیلد workspace-id تعیین کنید",
		},
		SmsNotSent: ErrorItem{
			"$":  "SmsNotSent",
			"en": "Sending text message has failed.",
		},
		UserDoesNotExist: ErrorItem{
			"$":  "UserDoesNotExist",
			"en": "User is not available.",
		},
		UserNotFoundOrDeleted: ErrorItem{
			"$":  "UserNotFoundOrDeleted",
			"en": "User not found, your account might be deleted, or access level has been reduced.",
			"fa": "کاربر پیدا نشد ممکن است اکانت حذف شده باشد یا سطح دسترسی آن کاهش پیدا کرده باشد",
		},
		UserWhichHasThisTokenDoesNotExist: ErrorItem{
			"$":  "UserWhichHasThisTokenDoesNotExist",
			"en": "User which has this token does not exists",
			"fa": "کاربری که با این دسترسی وارد شده بود وجود ندارد. لطفا دوباره به سیستم وارد شوید",
		},
		ValidationFailedOnSomeFields: ErrorItem{
			"$":  "ValidationFailedOnSomeFields",
			"en": "Validation has failed on some fields",
		},
	}
}

type workspacesMsgs struct {
	ActionOnlyInRoot                   ErrorItem
	AlreadyConfirmed                   ErrorItem
	BodyIsMissing                      ErrorItem
	DataTypeDoesNotExistsInFireback    ErrorItem
	EmailConfigurationIsNotAvailable   ErrorItem
	EmailConfigurationMissing          ErrorItem
	EmailIsNotConfigured               ErrorItem
	EmailNotFound                      ErrorItem
	FileNotFound                       ErrorItem
	GsmConfigurationIsNotAvailable     ErrorItem
	InvalidContent                     ErrorItem
	InvalidExchangeKey                 ErrorItem
	InvitationExpired                  ErrorItem
	InviteToWorkspaceMailSenderMissing ErrorItem
	InvokeUrlMissing                   ErrorItem
	NotEnoughPermission                ErrorItem
	OtaRequestBlockedUntil             ErrorItem
	OtpCodeInvalid                     ErrorItem
	PassportNotAvailable               ErrorItem
	PassportNotFound                   ErrorItem
	PassportUserNotAvailable           ErrorItem
	PasswordRequired                   ErrorItem
	ProvideTokenInAuthorization        ErrorItem
	ResetNotFound                      ErrorItem
	SelectWorkspaceId                  ErrorItem
	SmsNotSent                         ErrorItem
	UserDoesNotExist                   ErrorItem
	UserNotFoundOrDeleted              ErrorItem
	UserWhichHasThisTokenDoesNotExist  ErrorItem
	ValidationFailedOnSomeFields       ErrorItem
}
type Config struct {
	// Runs the tasks server asyncq library when the http server starts. Useful for all in one applications to run everything in single instance
	WithTaskServer bool `envconfig:"WITH_TASK_SERVER" description:"Runs the tasks server asyncq library when the http server starts. Useful for all in one applications to run everything in single instance"`
	// Environment name, such as dev, prod, test, test-eu, etc...
	Name string `envconfig:"NAME" description:"Environment name, such as dev, prod, test, test-eu, etc..."`
	// Database name for vendors which provide database names, such as mysql. Filename on disk for sqlite.
	DbName string `envconfig:"DB_NAME" description:"Database name for vendors which provide database names, such as mysql. Filename on disk for sqlite."`
	// SSL Certification location to server on http listener
	CertFile string `envconfig:"CERT_FILE" description:"SSL Certification location to server on http listener"`
	// SSL Certification key file
	KeyFile string `envconfig:"KEY_FILE" description:"SSL Certification key file"`
	// Database log level for SQL queries, used by GORM orm. Default it's silent
	DbLogLevel string `envconfig:"DB_LOG_LEVEL" description:"Database log level for SQL queries, used by GORM orm. Default it's silent"`
	// If set to true, all http traffic will be redirected into https. Needs certFile and keyFile to be defined otherwise no effect
	UseSSL bool `envconfig:"USE_SSL" description:"If set to true, all http traffic will be redirected into https. Needs certFile and keyFile to be defined otherwise no effect"`
	// Database port for those which are having a port, 3306 on mysql for example
	DbPort int64 `envconfig:"DB_PORT" description:"Database port for those which are having a port, 3306 on mysql for example"`
	// Drive is a mechanism to have file upload and download, inlining integrated into the fireback
	DriveEnabled bool `envconfig:"DRIVE_ENABLED" description:"Drive is a mechanism to have file upload and download, inlining integrated into the fireback"`
	// Connection dsn to database. Some databases allow connection using a string with all credentials and configs. This has hight priority, if set other details will be ignored.
	DbDsn string `envconfig:"DB_DSN" description:"Connection dsn to database. Some databases allow connection using a string with all credentials and configs. This has hight priority, if set other details will be ignored."`
	// Database host, such as localhost, or 127.0.0.1
	DbHost string `envconfig:"DB_HOST" description:"Database host, such as localhost, or 127.0.0.1"`
	// Database username for connection, such as root.
	DbUsername string `envconfig:"DB_USERNAME" description:"Database username for connection, such as root."`
	// Database password for connection. "Can be" empty if there is no password
	DbPassword string `envconfig:"DB_PASSWORD" description:"Database password for connection. \"Can be\" empty if there is no password"`
	// Gin framework mode, which could be 'test', 'debug', 'release'
	GinMode string `envconfig:"GIN_MODE" description:"Gin framework mode, which could be 'test', 'debug', 'release'"`
	// This is the storage url which files will be uploaded to
	Storage string `envconfig:"STORAGE" description:"This is the storage url which files will be uploaded to"`
	// Database vendor name, such as sqlite, mysql, or any other supported database.
	DbVendor string `envconfig:"DB_VENDOR" description:"Database vendor name, such as sqlite, mysql, or any other supported database."`
	// Writes the logs instead of std out into these log files.
	StdOut string `envconfig:"STD_OUT" description:"Writes the logs instead of std out into these log files."`
	// This is the url (host and port) of a queue service. If not set, we use the internal queue system
	WorkerAddress string `envconfig:"WORKER_ADDRESS" description:"This is the url (host and port) of a queue service. If not set, we use the internal queue system"`
	// How many tasks worker can take concurrently
	WorkerConcurrency int `envconfig:"WORKER_CONCURRENCY" description:"How many tasks worker can take concurrently"`
	// Writes the errors instead of std err into these log files.
	StdErr string `envconfig:"STD_ERR" description:"Writes the errors instead of std err into these log files."`
	// Resumable file upload server port.
	TusPort string `envconfig:"TUS_PORT" description:"Resumable file upload server port."`
	// Authorization token for cli apps, to access resoruces similar on http api
	CliToken string `envconfig:"CLI_TOKEN" description:"Authorization token for cli apps, to access resoruces similar on http api"`
	// Region, for example us or pl
	CliRegion string `envconfig:"CLI_REGION" description:"Region, for example us or pl"`
	// Language of the cli operations, for example en or pl
	CliLanguage string `envconfig:"CLI_LANGUAGE" description:"Language of the cli operations, for example en or pl"`
	// Selected workspace in the cli context.
	CliWorkspace string `envconfig:"CLI_WORKSPACE" description:"Selected workspace in the cli context."`
	// The port which application would be lifted
	Port int64 `envconfig:"PORT" description:"The port which application would be lifted"`
	// Application host which http server will be lifted
	Host string `envconfig:"HOST" description:"Application host which http server will be lifted"`
	// Used name for installing app as system service on macos installers
	MacIdentifier string `envconfig:"MAC_IDENTIFIER" description:"Used name for installing app as system service on macos installers"`
	// Used name for installing app as system service on ubuntu installers
	DebianIdentifier string `envconfig:"DEBIAN_IDENTIFIER" description:"Used name for installing app as system service on ubuntu installers"`
	// Used name for installing app as system service on windows installers
	WindowsIdentifier string `envconfig:"WINDOWS_IDENTIFIER" description:"Used name for installing app as system service on windows installers"`
}

// The config is usually populated by env vars on LoadConfiguration
var config Config = Config{
	WithTaskServer:    false,
	DbName:            ":memory:",
	DbLogLevel:        "silent",
	DriveEnabled:      true,
	DbVendor:          "sqlite",
	WorkerAddress:     "127.0.0.1:6379",
	WorkerConcurrency: 10,
	CliRegion:         "us",
	CliLanguage:       "en",
	Port:              4500,
	Host:              "localhost",
	MacIdentifier:     "fireback",
	DebianIdentifier:  "fireback",
	WindowsIdentifier: "fireback",
}

/*
*
You can call this function on first line of your main function.
This is different from fireback configuration (for now), you can
define config: in module3 file, similar to fields in entities,
and we generate the config struct and this function would read .env.local,
.env.prod, etc - depending on the ENV=xxx env variable.
*
*/
func LoadConfiguration() Config {
	HandleEnvVars(&config)
	return config
}
func (x *Config) Yaml() string {
	if x != nil {
		str, _ := yaml.Marshal(x)
		return (string(str))
	}
	return ""
}
func (x *Config) Save(filepath string) error {
	return SaveEnvFile(x, filepath)
}
