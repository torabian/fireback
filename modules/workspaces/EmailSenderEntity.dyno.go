package workspaces

/*
*	Generated by fireback 1.2.0
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"embed"
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/gookit/event"
	jsoniter "github.com/json-iterator/go"
	"github.com/schollz/progressbar/v3"
	metas "github.com/torabian/fireback/modules/workspaces/metas"
	mocks "github.com/torabian/fireback/modules/workspaces/mocks/EmailSender"
	seeders "github.com/torabian/fireback/modules/workspaces/seeders/EmailSender"
	"github.com/urfave/cli"
	"gopkg.in/yaml.v2"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	reflect "reflect"
	"strings"
)

var emailSenderSeedersFs = &seeders.ViewsFs

func ResetEmailSenderSeeders(fs *embed.FS) {
	emailSenderSeedersFs = fs
}

type EmailSenderEntity struct {
	// Defines the visibility of the record in the table.
	// Visibility is a detailed topic, you can check all of the visibility values in workspaces/visibility.go
	// by default, visibility of record are 0, means they are protected by the workspace
	// which are being created, and visible to every member of the workspace
	Visibility String `json:"visibility,omitempty" yaml:"visibility,omitempty"`
	// The unique-id of the workspace which content belongs to. Upon creation this will be designated
	// to the selected workspace by user, if they have write access. You can change this value
	// or prevent changes to it manually (on root features for example modifying other workspace)
	WorkspaceId String `json:"workspaceId,omitempty" yaml:"workspaceId,omitempty"`
	// The unique-id of the parent table, which this record is being linked to.
	// used internally for making relations in fireback, generally does not need manual changes
	// or modification by the developer or user. For example, if you have a object inside an object
	// the unique-id of the parent will be written in the child.
	LinkerId String `json:"linkerId,omitempty" yaml:"linkerId,omitempty"`
	// Used for recursive or parent-child operations. Some tables, are having nested relations,
	// and this field makes the table self refrenceing. ParentId needs to exist in the table before
	// creating of modifying a record.
	ParentId String `json:"parentId,omitempty" yaml:"parentId,omitempty"`
	// Makes a field deletable. Some records should not be deletable at all.
	// default it's true.
	IsDeletable *bool `json:"isDeletable,omitempty" yaml:"isDeletable,omitempty" gorm:"default:true"`
	// Makes a field updatable. Some records should not be updatable at all.
	// default it's true.
	IsUpdatable *bool `json:"isUpdatable,omitempty" yaml:"isUpdatable,omitempty" gorm:"default:true"`
	// The unique-id of the user which is creating the record, or the record belongs to.
	// Administration might want to change this to any user, by default Fireback fills
	// it to the current authenticated user.
	UserId String `json:"userId,omitempty" yaml:"userId,omitempty"`
	// General mechanism to rank the elements. From code perspective, it's just a number,
	// but you can sort it based on any logic for records to make a ranking, sorting.
	// they should not be unique across a table.
	Rank Int64 `json:"rank,omitempty" gorm:"type:int;name:rank"`
	// Primary numeric key in the database. This value is not meant to be exported to public
	// or be used to access data at all. Rather a mechanism of indexing columns internally
	// or cursor pagination in future releases of fireback, or better search performance.
	ID uint `gorm:"primaryKey;autoIncrement" json:"-" yaml:"-"`
	// Unique id of the record across the table. This value will be accessed from public APIs,
	// and many other places intead of numeric ID property.
	// Upon generation, a UUID automatically is being assigned, and if user has specified the
	// Unique id in the post body, it will be used. This mechanism allows to manage unsaved
	// content on front-end much easier than requiring parent to exists first.
	UniqueId string `json:"uniqueId,omitempty" gorm:"unique;not null;size:100;" yaml:"uniqueId,omitempty"`
	// The time that the record has been created in nano-seconds.
	// the field will be automatically populated by gorm orm.
	Created int64 `json:"created,omitempty" yaml:"created,omitempty" gorm:"autoUpdateTime:nano"`
	// The time that the record has been updated in nano-seconds.
	// the field will be automatically populated by gorm orm.
	Updated int64 `json:"updated,omitempty" yaml:"updated,omitempty"`
	// The time that the record has been deleted softly (means the data still exists in database, but no longer visible to any feature) in nano seconds
	// you need to make sure check this field if writing custom sql queries.
	// the field will be automatically populated by gorm orm.
	Deleted int64 `json:"deleted,omitempty" yaml:"deleted,omitempty"`
	// Record creation date time formatting based on locale of the headers, or other
	// possible factors.
	CreatedFormatted string `json:"createdFormatted,omitempty" yaml:"createdFormatted,omitempty" sql:"-" gorm:"-"`
	// Record update date time formatting based on locale of the headers, or other
	// possible factors.
	UpdatedFormatted string               `json:"updatedFormatted,omitempty" yaml:"updatedFormatted,omitempty" sql:"-" gorm:"-"`
	FromName         string               `json:"fromName" yaml:"fromName"  validate:"required"        `
	FromEmailAddress string               `json:"fromEmailAddress" yaml:"fromEmailAddress"  validate:"required"    gorm:"unique"      `
	ReplyTo          string               `json:"replyTo" yaml:"replyTo"  validate:"required"        `
	NickName         string               `json:"nickName" yaml:"nickName"  validate:"required"        `
	Children         []*EmailSenderEntity `csv:"-" gorm:"-" sql:"-" json:"children,omitempty" yaml:"children,omitempty"`
	LinkedTo         *EmailSenderEntity   `csv:"-" yaml:"-" gorm:"-" json:"-" sql:"-"`
}

func EmailSenderEntityStream(q QueryDSL) (chan []*EmailSenderEntity, *QueryResultMeta, error) {
	cn := make(chan []*EmailSenderEntity)
	q.ItemsPerPage = 50
	q.StartIndex = 0
	_, qrm, err := EmailSenderActions.Query(q)
	if err != nil {
		return nil, nil, err
	}
	go func() {
		defer close(cn)
		for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
			items, _, _ := EmailSenderActions.Query(q)
			i += q.ItemsPerPage
			q.StartIndex = i
			cn <- items
		}
	}()
	return cn, qrm, nil
}

type EmailSenderEntityList struct {
	Items []*EmailSenderEntity
}

func NewEmailSenderEntityList(items []*EmailSenderEntity) *EmailSenderEntityList {
	return &EmailSenderEntityList{
		Items: items,
	}
}
func (x *EmailSenderEntityList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *EmailSenderEntityList) ToTree() *TreeOperation[EmailSenderEntity] {
	return NewTreeOperation(
		x.Items,
		func(t *EmailSenderEntity) string {
			if !t.ParentId.Valid {
				return ""
			}
			return t.ParentId.String
		},
		func(t *EmailSenderEntity) string {
			return t.UniqueId
		},
	)
}

var EmailSenderPreloadRelations []string = []string{}

type emailSenderActionsSig struct {
	Update         func(query QueryDSL, dto *EmailSenderEntity) (*EmailSenderEntity, *IError)
	Create         func(dto *EmailSenderEntity, query QueryDSL) (*EmailSenderEntity, *IError)
	Upsert         func(dto *EmailSenderEntity, query QueryDSL) (*EmailSenderEntity, *IError)
	SeederInit     func() *EmailSenderEntity
	Remove         func(query QueryDSL) (int64, *IError)
	MultiInsert    func(dtos []*EmailSenderEntity, query QueryDSL) ([]*EmailSenderEntity, *IError)
	GetOne         func(query QueryDSL) (*EmailSenderEntity, *IError)
	GetByWorkspace func(query QueryDSL) (*EmailSenderEntity, *IError)
	Query          func(query QueryDSL) ([]*EmailSenderEntity, *QueryResultMeta, error)
}

var EmailSenderActions emailSenderActionsSig = emailSenderActionsSig{
	Update:         EmailSenderActionUpdateFn,
	Create:         EmailSenderActionCreateFn,
	Upsert:         EmailSenderActionUpsertFn,
	Remove:         EmailSenderActionRemoveFn,
	SeederInit:     EmailSenderActionSeederInitFn,
	MultiInsert:    EmailSenderMultiInsertFn,
	GetOne:         EmailSenderActionGetOneFn,
	GetByWorkspace: EmailSenderActionGetByWorkspaceFn,
	Query:          EmailSenderActionQueryFn,
}

func EmailSenderActionUpsertFn(dto *EmailSenderEntity, query QueryDSL) (*EmailSenderEntity, *IError) {
	return nil, nil
}

var EMAIL_SENDER_EVENT_CREATED = "emailSender.created"
var EMAIL_SENDER_EVENT_UPDATED = "emailSender.updated"
var EMAIL_SENDER_EVENT_DELETED = "emailSender.deleted"
var EMAIL_SENDER_EVENTS = []string{
	EMAIL_SENDER_EVENT_CREATED,
	EMAIL_SENDER_EVENT_UPDATED,
	EMAIL_SENDER_EVENT_DELETED,
}

type EmailSenderFieldMap struct {
	FromName         TranslatedString `yaml:"fromName"`
	FromEmailAddress TranslatedString `yaml:"fromEmailAddress"`
	ReplyTo          TranslatedString `yaml:"replyTo"`
	NickName         TranslatedString `yaml:"nickName"`
}

var EmailSenderEntityMetaConfig map[string]int64 = map[string]int64{}
var EmailSenderEntityJsonSchema = ExtractEntityFields(reflect.ValueOf(&EmailSenderEntity{}))

func entityEmailSenderFormatter(dto *EmailSenderEntity, query QueryDSL) {
	if dto == nil {
		return
	}
	if dto.Created > 0 {
		dto.CreatedFormatted = FormatDateBasedOnQuery(dto.Created, query)
	}
	if dto.Updated > 0 {
		dto.CreatedFormatted = FormatDateBasedOnQuery(dto.Updated, query)
	}
}
func EmailSenderActionSeederMultiple(query QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	batchSize := 100
	bar := progressbar.Default(int64(count))
	// Collect entities in batches
	var entitiesBatch []*EmailSenderEntity
	for i := 1; i <= count; i++ {
		entity := EmailSenderActions.SeederInit()
		entitiesBatch = append(entitiesBatch, entity)
		// When batch size is reached, perform the batch insert
		if len(entitiesBatch) == batchSize || i == count {
			// Insert batch
			_, err := EmailSenderActions.MultiInsert(entitiesBatch, query)
			if err == nil {
				successInsert += len(entitiesBatch)
			} else {
				fmt.Println(err)
				failureInsert += len(entitiesBatch)
			}
			// Clear the batch after insert
			entitiesBatch = nil
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func EmailSenderActionSeeder(query QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	bar := progressbar.Default(int64(count))
	for i := 1; i <= count; i++ {
		entity := EmailSenderActions.SeederInit()
		_, err := EmailSenderActions.Create(entity, query)
		if err == nil {
			successInsert++
		} else {
			fmt.Println(err)
			failureInsert++
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func (x *EmailSenderEntity) Seeder() string {
	obj := EmailSenderActions.SeederInit()
	v, _ := json.MarshalIndent(obj, "", "  ")
	return string(v)
}
func EmailSenderActionSeederInitFn() *EmailSenderEntity {
	entity := &EmailSenderEntity{}
	return entity
}
func EmailSenderAssociationCreate(dto *EmailSenderEntity, query QueryDSL) error {
	return nil
}

/**
* These kind of content are coming from another entity, which is indepndent module
* If we want to create them, we need to do it before. This is not association.
**/
func EmailSenderRelationContentCreate(dto *EmailSenderEntity, query QueryDSL) error {
	return nil
}
func EmailSenderRelationContentUpdate(dto *EmailSenderEntity, query QueryDSL) error {
	return nil
}
func EmailSenderPolyglotUpdateHandler(dto *EmailSenderEntity, query QueryDSL) {
	if dto == nil {
		return
	}
}

/**
 * This will be validating your entity fully. Important note is that, you add validate:* tag
 * in your entity, it will automatically work here. For slices inside entity, make sure you add
 * extra line of AppendSliceErrors, otherwise they won't be detected
 */
func EmailSenderValidator(dto *EmailSenderEntity, isPatch bool) *IError {
	err := CommonStructValidatorPointer(dto, isPatch)
	return err
}

// Creates a set of natural language queries, which can be used with
// AI tools to create content or help with some tasks
var EmailSenderAskCmd cli.Command = cli.Command{
	Name:  "nlp",
	Usage: "Set of natural language queries which helps creating content or data",
	Subcommands: []cli.Command{
		{
			Name:  "sample",
			Usage: "Asks for generating sample by giving an example data",
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:  "format",
					Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
					Value: "yaml",
				},
				&cli.IntFlag{
					Name:  "count",
					Usage: "How many samples to ask",
					Value: 30,
				},
			},
			Action: func(c *cli.Context) error {
				v := &EmailSenderEntity{}
				format := c.String("format")
				request := "\033[1m" + `
I need you to create me an array of exact signature as the example given below,
with at least ` + fmt.Sprint(c.String("count")) + ` items, mock the content with few words, and guess the possible values
based on the common sense. I need the output to be a valid ` + format + ` file.
Make sure you wrap the entire array in 'items' field. Also before that, I provide some explanation of each field:
FromName: (type: string) Description: 
FromEmailAddress: (type: string) Description: 
ReplyTo: (type: string) Description: 
NickName: (type: string) Description: 
And here is the actual object signature:
` + v.Seeder() + `
`
				fmt.Println(request)
				return nil
			},
		},
	},
}

func EmailSenderEntityPreSanitize(dto *EmailSenderEntity, query QueryDSL) {
}
func EmailSenderEntityBeforeCreateAppend(dto *EmailSenderEntity, query QueryDSL) {
	if dto.UniqueId == "" {
		dto.UniqueId = UUID()
	}
	dto.WorkspaceId = NewString(query.WorkspaceId)
	dto.UserId = NewString(query.UserId)
	EmailSenderRecursiveAddUniqueId(dto, query)
}
func EmailSenderRecursiveAddUniqueId(dto *EmailSenderEntity, query QueryDSL) {
}

/*
*
	Batch inserts, do not have all features that create
	operation does. Use it with unnormalized content,
	or read the source code carefully.
  This is not marked as an action, because it should not be available publicly
  at this moment.
*
*/
func EmailSenderMultiInsertFn(dtos []*EmailSenderEntity, query QueryDSL) ([]*EmailSenderEntity, *IError) {
	if len(dtos) > 0 {
		for index := range dtos {
			EmailSenderEntityPreSanitize(dtos[index], query)
			EmailSenderEntityBeforeCreateAppend(dtos[index], query)
		}
		var dbref *gorm.DB = nil
		if query.Tx == nil {
			dbref = GetDbRef()
		} else {
			dbref = query.Tx
		}
		query.Tx = dbref
		err := dbref.Create(&dtos).Error
		if err != nil {
			return nil, GormErrorToIError(err)
		}
	}
	return dtos, nil
}
func EmailSenderActionBatchCreateFn(dtos []*EmailSenderEntity, query QueryDSL) ([]*EmailSenderEntity, *IError) {
	if dtos != nil && len(dtos) > 0 {
		items := []*EmailSenderEntity{}
		for _, item := range dtos {
			s, err := EmailSenderActions.Create(item, query)
			if err != nil {
				return nil, err
			}
			items = append(items, s)
		}
		return items, nil
	}
	return dtos, nil
}
func EmailSenderDeleteEntireChildren(query QueryDSL, dto *EmailSenderEntity) *IError {
	// intentionally removed this. It's hard to implement it, and probably wrong without
	// proper on delete cascade
	return nil
}
func EmailSenderActionCreateFn(dto *EmailSenderEntity, query QueryDSL) (*EmailSenderEntity, *IError) {
	// 1. Validate always
	if iError := EmailSenderValidator(dto, false); iError != nil {
		return nil, iError
	}
	// 1.5 Sanitize the content coming of the front-end
	EmailSenderEntityPreSanitize(dto, query)
	// 2. Append the necessary information about user, workspace
	EmailSenderEntityBeforeCreateAppend(dto, query)
	// 3. Create other entities if we want select from them
	EmailSenderRelationContentCreate(dto, query)
	// 4. Create the entity
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = GetDbRef()
	} else {
		dbref = query.Tx
	}
	query.Tx = dbref
	err := dbref.Create(&dto).Error
	if err != nil {
		err := GormErrorToIError(err)
		return nil, err
	}
	// 5. Create sub entities, objects or arrays, association to other entities
	EmailSenderAssociationCreate(dto, query)
	// 6. Fire the event into system
	event.MustFire(EMAIL_SENDER_EVENT_CREATED, event.M{
		"entity":    dto,
		"entityKey": GetTypeString(&EmailSenderEntity{}),
		"target":    "workspace",
		"unqiueId":  query.WorkspaceId,
	})
	return dto, nil
}
func EmailSenderActionGetOneFn(query QueryDSL) (*EmailSenderEntity, *IError) {
	refl := reflect.ValueOf(&EmailSenderEntity{})
	item, err := GetOneEntity[EmailSenderEntity](query, refl)
	entityEmailSenderFormatter(item, query)
	return item, err
}
func EmailSenderActionGetByWorkspaceFn(query QueryDSL) (*EmailSenderEntity, *IError) {
	refl := reflect.ValueOf(&EmailSenderEntity{})
	item, err := GetOneByWorkspaceEntity[EmailSenderEntity](query, refl)
	entityEmailSenderFormatter(item, query)
	return item, err
}
func EmailSenderActionQueryFn(query QueryDSL) ([]*EmailSenderEntity, *QueryResultMeta, error) {
	refl := reflect.ValueOf(&EmailSenderEntity{})
	items, meta, err := QueryEntitiesPointer[EmailSenderEntity](query, refl)
	for _, item := range items {
		entityEmailSenderFormatter(item, query)
	}
	return items, meta, err
}

var emailSenderMemoryItems []*EmailSenderEntity = []*EmailSenderEntity{}

func EmailSenderEntityIntoMemory() {
	q := QueryDSL{
		ItemsPerPage: 500,
		StartIndex:   0,
	}
	_, qrm, _ := EmailSenderActions.Query(q)
	for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
		items, _, _ := EmailSenderActions.Query(q)
		emailSenderMemoryItems = append(emailSenderMemoryItems, items...)
		i += q.ItemsPerPage
		q.StartIndex = i
	}
}
func EmailSenderMemGet(id uint) *EmailSenderEntity {
	for _, item := range emailSenderMemoryItems {
		if item.ID == id {
			return item
		}
	}
	return nil
}
func EmailSenderMemJoin(items []uint) []*EmailSenderEntity {
	res := []*EmailSenderEntity{}
	for _, item := range items {
		v := EmailSenderMemGet(item)
		if v != nil {
			res = append(res, v)
		}
	}
	return res
}
func EmailSenderUpdateExec(dbref *gorm.DB, query QueryDSL, fields *EmailSenderEntity) (*EmailSenderEntity, *IError) {
	uniqueId := fields.UniqueId
	query.TriggerEventName = EMAIL_SENDER_EVENT_UPDATED
	EmailSenderEntityPreSanitize(fields, query)
	var item EmailSenderEntity
	var itemRefetched EmailSenderEntity
	// If the entity is distinct by workspace, then the Query.WorkspaceId
	// which is selected is being used as the condition for create or update
	// if not, the unique Id is being used
	cond2 := &EmailSenderEntity{UniqueId: uniqueId}
	q := dbref.
		Where(cond2).
		FirstOrCreate(&item)
	err := q.UpdateColumns(fields).Error
	if err != nil {
		return nil, GormErrorToIError(err)
	}
	query.Tx = dbref
	EmailSenderRelationContentUpdate(fields, query)
	EmailSenderPolyglotUpdateHandler(fields, query)
	if ero := EmailSenderDeleteEntireChildren(query, fields); ero != nil {
		return nil, ero
	}
	// @meta(update has many)
	err = dbref.
		Preload(clause.Associations).
		Where(&EmailSenderEntity{UniqueId: uniqueId}).
		First(&itemRefetched).Error
	if err != nil {
		return nil, GormErrorToIError(err)
	}
	event.MustFire(query.TriggerEventName, event.M{
		"entity":   &item,
		"target":   "workspace",
		"unqiueId": query.WorkspaceId,
	})
	return &itemRefetched, nil
}
func EmailSenderActionUpdateFn(query QueryDSL, fields *EmailSenderEntity) (*EmailSenderEntity, *IError) {
	if fields == nil {
		return nil, Create401Error(&WorkspacesMessages.BodyIsMissing, []string{})
	}
	// 1. Validate always
	if iError := EmailSenderValidator(fields, true); iError != nil {
		return nil, iError
	}
	// Let's not add this. I am not sure of the consequences
	// EmailSenderRecursiveAddUniqueId(fields, query)
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = GetDbRef()
		var item *EmailSenderEntity
		vf := dbref.Transaction(func(tx *gorm.DB) error {
			dbref = tx
			var err *IError
			item, err = EmailSenderUpdateExec(dbref, query, fields)
			if err == nil {
				return nil
			} else {
				return err
			}
		})
		return item, CastToIError(vf)
	} else {
		dbref = query.Tx
		return EmailSenderUpdateExec(dbref, query, fields)
	}
}

var EmailSenderWipeCmd cli.Command = cli.Command{
	Name:  "wipe",
	Usage: "Wipes entire emailsenders ",
	Action: func(c *cli.Context) error {
		query := CommonCliQueryDSLBuilderAuthorize(c, &SecurityModel{
			ActionRequires: []PermissionInfo{PERM_ROOT_EMAIL_SENDER_DELETE},
			AllowOnRoot:    true,
		})
		count, _ := EmailSenderActionWipeClean(query)
		fmt.Println("Removed", count, "of entities")
		return nil
	},
}

func EmailSenderActionRemoveFn(query QueryDSL) (int64, *IError) {
	refl := reflect.ValueOf(&EmailSenderEntity{})
	query.ActionRequires = []PermissionInfo{PERM_ROOT_EMAIL_SENDER_DELETE}
	return RemoveEntity[EmailSenderEntity](query, refl)
}
func EmailSenderActionWipeClean(query QueryDSL) (int64, error) {
	var err error
	var count int64 = 0
	{
		subCount, subErr := WipeCleanEntity[EmailSenderEntity]()
		if subErr != nil {
			fmt.Println("Error while wiping 'EmailSenderEntity'", subErr)
			return count, subErr
		} else {
			count += subCount
		}
	}
	return count, err
}
func EmailSenderActionBulkUpdate(
	query QueryDSL, dto *BulkRecordRequest[EmailSenderEntity]) (
	*BulkRecordRequest[EmailSenderEntity], *IError,
) {
	result := []*EmailSenderEntity{}
	err := GetDbRef().Transaction(func(tx *gorm.DB) error {
		query.Tx = tx
		for _, record := range dto.Records {
			item, err := EmailSenderActions.Update(query, record)
			if err != nil {
				return err
			} else {
				result = append(result, item)
			}
		}
		return nil
	})
	if err == nil {
		return dto, nil
	}
	return nil, err.(*IError)
}
func (x *EmailSenderEntity) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}

var EmailSenderEntityMeta = TableMetaData{
	EntityName:    "EmailSender",
	ExportKey:     "email-senders",
	TableNameInDb: "email-sender_entities",
	EntityObject:  &EmailSenderEntity{},
	ExportStream:  EmailSenderActionExportT,
	ImportQuery:   EmailSenderActionImport,
}

func EmailSenderActionExport(
	query QueryDSL,
) (chan []byte, *IError) {
	return YamlExporterChannel[EmailSenderEntity](query, EmailSenderActions.Query, EmailSenderPreloadRelations)
}
func EmailSenderActionExportT(
	query QueryDSL,
) (chan []interface{}, *IError) {
	return YamlExporterChannelT[EmailSenderEntity](query, EmailSenderActions.Query, EmailSenderPreloadRelations)
}
func EmailSenderActionImport(
	dto interface{}, query QueryDSL,
) *IError {
	var json = jsoniter.ConfigCompatibleWithStandardLibrary
	var content EmailSenderEntity
	cx, err2 := json.Marshal(dto)
	if err2 != nil {
		return Create401Error(&WorkspacesMessages.InvalidContent, []string{})
	}
	json.Unmarshal(cx, &content)
	_, err := EmailSenderActions.Create(&content, query)
	return err
}

var EmailSenderCommonCliFlags = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "from-name",
		Required: true,
		Usage:    `fromName (string)`,
	},
	&cli.StringFlag{
		Name:     "from-email-address",
		Required: true,
		Usage:    `fromEmailAddress (string)`,
	},
	&cli.StringFlag{
		Name:     "reply-to",
		Required: true,
		Usage:    `replyTo (string)`,
	},
	&cli.StringFlag{
		Name:     "nick-name",
		Required: true,
		Usage:    `nickName (string)`,
	},
}
var EmailSenderCommonInteractiveCliFlags = []CliInteractiveFlag{
	{
		Name:        "fromName",
		StructField: "FromName",
		Required:    true,
		Recommended: false,
		Usage:       `fromName`,
		Type:        "string",
	},
	{
		Name:        "fromEmailAddress",
		StructField: "FromEmailAddress",
		Required:    true,
		Recommended: false,
		Usage:       `fromEmailAddress`,
		Type:        "string",
	},
	{
		Name:        "replyTo",
		StructField: "ReplyTo",
		Required:    true,
		Recommended: false,
		Usage:       `replyTo`,
		Type:        "string",
	},
	{
		Name:        "nickName",
		StructField: "NickName",
		Required:    true,
		Recommended: false,
		Usage:       `nickName`,
		Type:        "string",
	},
}
var EmailSenderCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "from-name",
		Required: true,
		Usage:    `fromName (string)`,
	},
	&cli.StringFlag{
		Name:     "from-email-address",
		Required: true,
		Usage:    `fromEmailAddress (string)`,
	},
	&cli.StringFlag{
		Name:     "reply-to",
		Required: true,
		Usage:    `replyTo (string)`,
	},
	&cli.StringFlag{
		Name:     "nick-name",
		Required: true,
		Usage:    `nickName (string)`,
	},
}
var EmailSenderCreateCmd cli.Command = EMAIL_SENDER_ACTION_POST_ONE.ToCli()
var EmailSenderCreateInteractiveCmd cli.Command = cli.Command{
	Name:  "ic",
	Usage: "Creates a new entity, using requied fields in an interactive name",
	Flags: []cli.Flag{
		&cli.BoolFlag{
			Name:  "all",
			Usage: "Interactively asks for all inputs, not only required ones",
		},
	},
	Action: func(c *cli.Context) {
		query := CommonCliQueryDSLBuilderAuthorize(c, &SecurityModel{
			ActionRequires: []PermissionInfo{PERM_ROOT_EMAIL_SENDER_CREATE},
			AllowOnRoot:    true,
		})
		entity := &EmailSenderEntity{}
		PopulateInteractively(entity, c, EmailSenderCommonInteractiveCliFlags)
		if entity, err := EmailSenderActions.Create(entity, query); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := yaml.Marshal(entity)
			fmt.Println(FormatYamlKeys(string(f)))
		}
	},
}
var EmailSenderUpdateCmd cli.Command = cli.Command{
	Name:    "update",
	Aliases: []string{"u"},
	Flags:   EmailSenderCommonCliFlagsOptional,
	Usage:   "Updates entity by passing the parameters",
	Action: func(c *cli.Context) error {
		query := CommonCliQueryDSLBuilderAuthorize(c, &SecurityModel{
			ActionRequires: []PermissionInfo{PERM_ROOT_EMAIL_SENDER_UPDATE},
			AllowOnRoot:    true,
		})
		entity := CastEmailSenderFromCli(c)
		if entity, err := EmailSenderActions.Update(query, entity); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := json.MarshalIndent(entity, "", "  ")
			fmt.Println(string(f))
		}
		return nil
	},
}

func (x *EmailSenderEntity) FromCli(c *cli.Context) *EmailSenderEntity {
	return CastEmailSenderFromCli(c)
}
func CastEmailSenderFromCli(c *cli.Context) *EmailSenderEntity {
	template := &EmailSenderEntity{}
	if c.IsSet("uid") {
		template.UniqueId = c.String("uid")
	}
	if c.IsSet("pid") {
		template.ParentId = NewStringAutoNull(c.String("pid"))
	}
	if c.IsSet("from-name") {
		template.FromName = c.String("from-name")
	}
	if c.IsSet("from-email-address") {
		template.FromEmailAddress = c.String("from-email-address")
	}
	if c.IsSet("reply-to") {
		template.ReplyTo = c.String("reply-to")
	}
	if c.IsSet("nick-name") {
		template.NickName = c.String("nick-name")
	}
	return template
}
func EmailSenderSyncSeederFromFs(fsRef *embed.FS, fileNames []string, q QueryDSL) {
	SeederFromFSImport(
		q,
		EmailSenderActions.Create,
		reflect.ValueOf(&EmailSenderEntity{}).Elem(),
		fsRef,
		fileNames,
		true,
	)
}
func EmailSenderSyncSeeders() {
	SeederFromFSImport(
		QueryDSL{WorkspaceId: USER_SYSTEM},
		EmailSenderActions.Create,
		reflect.ValueOf(&EmailSenderEntity{}).Elem(),
		emailSenderSeedersFs,
		[]string{},
		true,
	)
}
func EmailSenderImportMocks() {
	SeederFromFSImport(
		QueryDSL{},
		EmailSenderActions.Create,
		reflect.ValueOf(&EmailSenderEntity{}).Elem(),
		&mocks.ViewsFs,
		[]string{},
		false,
	)
}
func EmailSenderWriteQueryMock(ctx MockQueryContext) {
	for _, lang := range ctx.Languages {
		itemsPerPage := 9999
		if ctx.ItemsPerPage > 0 {
			itemsPerPage = ctx.ItemsPerPage
		}
		f := QueryDSL{ItemsPerPage: itemsPerPage, Language: lang, WithPreloads: ctx.WithPreloads, Deep: true}
		items, count, _ := EmailSenderActions.Query(f)
		result := QueryEntitySuccessResult(f, items, count)
		WriteMockDataToFile(lang, "", "EmailSender", result)
	}
}
func EmailSendersActionQueryString(keyword string, page int) ([]string, *QueryResultMeta, error) {
	searchFields := []string{
		`unique_id %"{keyword}"%`,
		`name %"{keyword}"%`,
	}
	m := func(item *EmailSenderEntity) string {
		label := item.UniqueId
		// if item.Name != nil {
		// 	label += " >>> " + *item.Name
		// }
		return label
	}
	query := QueryStringCastCli(searchFields, keyword, page)
	items, meta, err := EmailSenderActions.Query(query)
	stringItems := []string{}
	for _, item := range items {
		label := m(item)
		stringItems = append(stringItems, label)
	}
	return stringItems, meta, err
}

var EmailSenderDevCommands = []cli.Command{
	EmailSenderWipeCmd,
	{
		Name:  "mock",
		Usage: "Generates mock records based on the entity definition",
		Flags: []cli.Flag{
			&cli.IntFlag{
				Name:  "count",
				Usage: "how many activation key do you need to be generated and stored in database",
				Value: 10,
			},
			&cli.BoolFlag{
				Name:  "batch",
				Usage: "Multiple insert into database mode. Might miss children and relations at the moment",
			},
		},
		Action: func(c *cli.Context) error {
			query := CommonCliQueryDSLBuilderAuthorize(c, &SecurityModel{
				ActionRequires: []PermissionInfo{PERM_ROOT_EMAIL_SENDER_CREATE},
				AllowOnRoot:    true,
			})
			if c.Bool("batch") {
				EmailSenderActionSeederMultiple(query, c.Int("count"))
			} else {
				EmailSenderActionSeeder(query, c.Int("count"))
			}
			return nil
		},
	},
	{
		Name:    "init",
		Aliases: []string{"i"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Creates a basic seeder file for you, based on the definition module we have. You can populate this file as an example",
		Action: func(c *cli.Context) error {
			seed := EmailSenderActions.SeederInit()
			CommonInitSeeder(strings.TrimSpace(c.String("format")), seed)
			return nil
		},
	},
	cli.Command{
		Name:  "mlist",
		Usage: "Prints the list of embedded mocks into the app",
		Action: func(c *cli.Context) error {
			if entity, err := GetSeederFilenames(&mocks.ViewsFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "msync",
		Usage: "Tries to sync mocks into the system",
		Action: func(c *cli.Context) error {
			CommonCliImportEmbedCmd(c,
				EmailSenderActions.Create,
				reflect.ValueOf(&EmailSenderEntity{}).Elem(),
				&mocks.ViewsFs,
			)
			return nil
		},
	},
}
var EmailSenderImportExportCommands = []cli.Command{
	{
		Name:    "validate",
		Aliases: []string{"v"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "file",
				Usage: "Validates an import file, such as yaml, json, csv, and gives some insights how the after import it would look like",
				Value: "email-sender-seeder-email-sender.yml",
				// Uncomment before publish, they need to specify
				// Required: true,
			},
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Reads a yaml file containing an array of email-senders, you can run this to validate if your import file is correct, and how it would look like after import",
		Action: func(c *cli.Context) error {
			data := &[]EmailSenderEntity{}
			ReadYamlFile(c.String("file"), data)
			fmt.Println(data)
			return nil
		},
	},
	cli.Command{
		Name:  "slist",
		Usage: "Prints the list of files attached to this module for syncing or bootstrapping project",
		Action: func(c *cli.Context) error {
			if entity, err := GetSeederFilenames(emailSenderSeedersFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "ssync",
		Usage: "Tries to sync the embedded content into the database, the list could be seen by 'slist' command",
		Action: func(c *cli.Context) error {
			CommonCliImportEmbedCmd(c,
				EmailSenderActions.Create,
				reflect.ValueOf(&EmailSenderEntity{}).Elem(),
				emailSenderSeedersFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:    "export",
		Aliases: []string{"e"},
		Flags: append(CommonQueryFlags,
			&cli.StringFlag{
				Name:     "file",
				Usage:    "The address of file you want the csv/yaml/json be exported to",
				Required: true,
			}),
		Usage: "Exports a query results into the csv/yaml/json format",
		Action: func(c *cli.Context) error {
			return CommonCliExportCmd2(c,
				EmailSenderEntityStream,
				reflect.ValueOf(&EmailSenderEntity{}).Elem(),
				c.String("file"),
				&metas.MetaFs,
				"EmailSenderFieldMap.yml",
				EmailSenderPreloadRelations,
			)
		},
	},
	cli.Command{
		Name: "import",
		Flags: append(
			append(
				CommonQueryFlags,
				&cli.StringFlag{
					Name:     "file",
					Usage:    "The address of file you want the csv be imported from",
					Required: true,
				}),
			EmailSenderCommonCliFlagsOptional...,
		),
		Usage: "imports csv/yaml/json file and place it and its children into database",
		Action: func(c *cli.Context) error {
			CommonCliImportCmdAuthorized(c,
				EmailSenderActions.Create,
				reflect.ValueOf(&EmailSenderEntity{}).Elem(),
				c.String("file"),
				&SecurityModel{
					ActionRequires: []PermissionInfo{PERM_ROOT_EMAIL_SENDER_CREATE},
					AllowOnRoot:    true,
				},
				func() EmailSenderEntity {
					v := CastEmailSenderFromCli(c)
					return *v
				},
			)
			return nil
		},
	},
}
var EmailSenderCliCommands []cli.Command = []cli.Command{
	EMAIL_SENDER_ACTION_QUERY.ToCli(),
	EMAIL_SENDER_ACTION_TABLE.ToCli(),
	EmailSenderCreateCmd,
	EmailSenderUpdateCmd,
	EmailSenderAskCmd,
	EmailSenderCreateInteractiveCmd,
	GetCommonRemoveQuery(
		reflect.ValueOf(&EmailSenderEntity{}).Elem(),
		EmailSenderActions.Remove,
	),
}

func EmailSenderCliFn() cli.Command {
	commands := append(EmailSenderImportExportCommands, EmailSenderCliCommands...)
	if !GetConfig().Production {
		commands = append(commands, EmailSenderDevCommands...)
	}
	return cli.Command{
		Name:        "emailsender",
		Description: "EmailSenders module actions",
		Usage:       `All emails going from the system need to have a virtual sender (nick name, email address, etc)`,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "language",
				Value: "en",
			},
		},
		Subcommands: commands,
	}
}

var EMAIL_SENDER_ACTION_TABLE = Module3Action{
	Name:          "table",
	ActionAliases: []string{"t"},
	Flags:         CommonQueryFlags,
	Description:   "Table formatted queries all of the entities in database based on the standard query format",
	Action:        EmailSenderActions.Query,
	CliAction: func(c *cli.Context, security *SecurityModel) error {
		CommonCliTableCmd2(c,
			EmailSenderActions.Query,
			security,
			reflect.ValueOf(&EmailSenderEntity{}).Elem(),
		)
		return nil
	},
}
var EMAIL_SENDER_ACTION_QUERY = Module3Action{
	Method: "GET",
	Url:    "/email-senders",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_EMAIL_SENDER_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpQueryEntity(c, EmailSenderActions.Query)
		},
	},
	Format:         "QUERY",
	Action:         EmailSenderActions.Query,
	ResponseEntity: &[]EmailSenderEntity{},
	Out: &Module3ActionBody{
		Entity: "EmailSenderEntity",
	},
	CliAction: func(c *cli.Context, security *SecurityModel) error {
		CommonCliQueryCmd2(
			c,
			EmailSenderActions.Query,
			security,
		)
		return nil
	},
	CliName:       "query",
	Name:          "query",
	ActionAliases: []string{"q"},
	Flags:         CommonQueryFlags,
	Description:   "Queries all of the entities in database based on the standard query format (s+)",
}
var EMAIL_SENDER_ACTION_EXPORT = Module3Action{
	Method: "GET",
	Url:    "/email-senders/export",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_EMAIL_SENDER_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpStreamFileChannel(c, EmailSenderActionExport)
		},
	},
	Format:         "QUERY",
	Action:         EmailSenderActionExport,
	ResponseEntity: &[]EmailSenderEntity{},
	Out: &Module3ActionBody{
		Entity: "EmailSenderEntity",
	},
}
var EMAIL_SENDER_ACTION_GET_ONE = Module3Action{
	Method: "GET",
	Url:    "/email-sender/:uniqueId",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_EMAIL_SENDER_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpGetEntity(c, EmailSenderActions.GetOne)
		},
	},
	Format:         "GET_ONE",
	Action:         EmailSenderActions.GetOne,
	ResponseEntity: &EmailSenderEntity{},
	Out: &Module3ActionBody{
		Entity: "EmailSenderEntity",
	},
}
var EMAIL_SENDER_ACTION_POST_ONE = Module3Action{
	Name:          "create",
	ActionAliases: []string{"c"},
	Description:   "Create new emailSender",
	Flags:         EmailSenderCommonCliFlags,
	Method:        "POST",
	Url:           "/email-sender",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_EMAIL_SENDER_CREATE},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpPostEntity(c, EmailSenderActions.Create)
		},
	},
	CliAction: func(c *cli.Context, security *SecurityModel) error {
		result, err := CliPostEntity(c, EmailSenderActions.Create, security)
		HandleActionInCli(c, result, err, map[string]map[string]string{})
		return err
	},
	Action:         EmailSenderActions.Create,
	Format:         "POST_ONE",
	RequestEntity:  &EmailSenderEntity{},
	ResponseEntity: &EmailSenderEntity{},
	Out: &Module3ActionBody{
		Entity: "EmailSenderEntity",
	},
	In: &Module3ActionBody{
		Entity: "EmailSenderEntity",
	},
}
var EMAIL_SENDER_ACTION_PATCH = Module3Action{
	Name:          "update",
	ActionAliases: []string{"u"},
	Flags:         EmailSenderCommonCliFlagsOptional,
	Method:        "PATCH",
	Url:           "/email-sender",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_EMAIL_SENDER_UPDATE},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpUpdateEntity(c, EmailSenderActions.Update)
		},
	},
	Action:         EmailSenderActions.Update,
	RequestEntity:  &EmailSenderEntity{},
	ResponseEntity: &EmailSenderEntity{},
	Format:         "PATCH_ONE",
	Out: &Module3ActionBody{
		Entity: "EmailSenderEntity",
	},
	In: &Module3ActionBody{
		Entity: "EmailSenderEntity",
	},
}
var EMAIL_SENDER_ACTION_PATCH_BULK = Module3Action{
	Method: "PATCH",
	Url:    "/email-senders",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_EMAIL_SENDER_UPDATE},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpUpdateEntities(c, EmailSenderActionBulkUpdate)
		},
	},
	Action:         EmailSenderActionBulkUpdate,
	Format:         "PATCH_BULK",
	RequestEntity:  &BulkRecordRequest[EmailSenderEntity]{},
	ResponseEntity: &BulkRecordRequest[EmailSenderEntity]{},
	Out: &Module3ActionBody{
		Entity: "EmailSenderEntity",
	},
	In: &Module3ActionBody{
		Entity: "EmailSenderEntity",
	},
}
var EMAIL_SENDER_ACTION_DELETE = Module3Action{
	Method: "DELETE",
	Url:    "/email-sender",
	Format: "DELETE_DSL",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_EMAIL_SENDER_DELETE},
		AllowOnRoot:    true,
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpRemoveEntity(c, EmailSenderActions.Remove)
		},
	},
	Action:         EmailSenderActions.Remove,
	RequestEntity:  &DeleteRequest{},
	ResponseEntity: &DeleteResponse{},
	TargetEntity:   &EmailSenderEntity{},
}

/**
 *	Override this function on EmailSenderEntityHttp.go,
 *	In order to add your own http
 **/
var AppendEmailSenderRouter = func(r *[]Module3Action) {}

func GetEmailSenderModule3Actions() []Module3Action {
	routes := []Module3Action{
		EMAIL_SENDER_ACTION_QUERY,
		EMAIL_SENDER_ACTION_EXPORT,
		EMAIL_SENDER_ACTION_GET_ONE,
		EMAIL_SENDER_ACTION_POST_ONE,
		EMAIL_SENDER_ACTION_PATCH,
		EMAIL_SENDER_ACTION_PATCH_BULK,
		EMAIL_SENDER_ACTION_DELETE,
	}
	// Append user defined functions
	AppendEmailSenderRouter(&routes)
	return routes
}

var PERM_ROOT_EMAIL_SENDER = PermissionInfo{
	CompleteKey: "root.manage.workspaces.email-sender.*",
	Name:        "Entire email sender actions (*)",
	Description: "",
}
var PERM_ROOT_EMAIL_SENDER_DELETE = PermissionInfo{
	CompleteKey: "root.manage.workspaces.email-sender.delete",
	Name:        "Delete email sender",
	Description: "",
}
var PERM_ROOT_EMAIL_SENDER_CREATE = PermissionInfo{
	CompleteKey: "root.manage.workspaces.email-sender.create",
	Name:        "Create email sender",
	Description: "",
}
var PERM_ROOT_EMAIL_SENDER_UPDATE = PermissionInfo{
	CompleteKey: "root.manage.workspaces.email-sender.update",
	Name:        "Update email sender",
	Description: "",
}
var PERM_ROOT_EMAIL_SENDER_QUERY = PermissionInfo{
	CompleteKey: "root.manage.workspaces.email-sender.query",
	Name:        "Query email sender",
	Description: "",
}
var ALL_EMAIL_SENDER_PERMISSIONS = []PermissionInfo{
	PERM_ROOT_EMAIL_SENDER_DELETE,
	PERM_ROOT_EMAIL_SENDER_CREATE,
	PERM_ROOT_EMAIL_SENDER_UPDATE,
	PERM_ROOT_EMAIL_SENDER_QUERY,
	PERM_ROOT_EMAIL_SENDER,
}
var EmailSenderEntityBundle = EntityBundle{
	Permissions: ALL_EMAIL_SENDER_PERMISSIONS,
	// Cli command has been exluded, since we use module to wrap all the entities
	// to be more easier to wrap up.
	// Create your own bundle if you need with Cli
	//CliCommands: []cli.Command{
	//	EmailSenderCliFn(),
	//},
	Actions:      GetEmailSenderModule3Actions(),
	MockProvider: EmailSenderImportMocks,
	AutoMigrationEntities: []interface{}{
		&EmailSenderEntity{},
	},
}
