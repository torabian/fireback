package workspaces

/*
*	Generated by fireback 1.1.16
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"encoding/json"
	"fmt"
	"github.com/urfave/cli"
	"strings"
)

func CastExchangeKeyInformationFromCli(c *cli.Context) *ExchangeKeyInformationDto {
	template := &ExchangeKeyInformationDto{}
	if c.IsSet("key") {
		value := c.String("key")
		template.Key = &value
	}
	if c.IsSet("visibility") {
		value := c.String("visibility")
		template.Visibility = &value
	}
	return template
}

var ExchangeKeyInformationDtoCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "uniqueId (primary key)",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "key",
		Required: false,
		Usage:    "key",
	},
	&cli.StringFlag{
		Name:     "visibility",
		Required: false,
		Usage:    "visibility",
	},
}

type ExchangeKeyInformationDto struct {
	Key *string `json:"key" yaml:"key"       `
	// Datenano also has a text representation
	Visibility *string `json:"visibility" yaml:"visibility"       `
	// Datenano also has a text representation
}

func (x *ExchangeKeyInformationDto) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	// Intentional trim (so strings lib is always imported)
	return strings.TrimSpace("")
}
func (x *ExchangeKeyInformationDto) JsonPrint() {
	fmt.Println(x.Json())
}

// This is an experimental way to create new dtos, with exluding the pointers as helper.
func NewExchangeKeyInformationDto(
	Key string,
	Visibility string,
) ExchangeKeyInformationDto {
	return ExchangeKeyInformationDto{
		Key:        &Key,
		Visibility: &Visibility,
	}
}
