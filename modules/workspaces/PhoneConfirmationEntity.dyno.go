package workspaces

/*
*	Generated by fireback 1.1.27
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"embed"
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/gookit/event"
	jsoniter "github.com/json-iterator/go"
	"github.com/schollz/progressbar/v3"
	metas "github.com/torabian/fireback/modules/workspaces/metas"
	mocks "github.com/torabian/fireback/modules/workspaces/mocks/PhoneConfirmation"
	seeders "github.com/torabian/fireback/modules/workspaces/seeders/PhoneConfirmation"
	"github.com/urfave/cli"
	"gopkg.in/yaml.v2"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	reflect "reflect"
	"strings"
)

var phoneConfirmationSeedersFs = &seeders.ViewsFs

func ResetPhoneConfirmationSeeders(fs *embed.FS) {
	phoneConfirmationSeedersFs = fs
}

type PhoneConfirmationEntity struct {
	Visibility       *string                    `json:"visibility,omitempty" yaml:"visibility,omitempty"`
	WorkspaceId      *string                    `json:"workspaceId,omitempty" yaml:"workspaceId,omitempty"`
	LinkerId         *string                    `json:"linkerId,omitempty" yaml:"linkerId,omitempty"`
	ParentId         *string                    `json:"parentId,omitempty" yaml:"parentId,omitempty"`
	IsDeletable      *bool                      `json:"isDeletable,omitempty" yaml:"isDeletable,omitempty" gorm:"default:true"`
	IsUpdatable      *bool                      `json:"isUpdatable,omitempty" yaml:"isUpdatable,omitempty" gorm:"default:true"`
	UserId           *string                    `json:"userId,omitempty" yaml:"userId,omitempty"`
	Rank             int64                      `json:"rank,omitempty" gorm:"type:int;name:rank"`
	ID               uint                       `gorm:"primaryKey;autoIncrement" json:"id,omitempty" yaml:"id,omitempty"`
	UniqueId         string                     `json:"uniqueId,omitempty" gorm:"unique;not null;size:100;" yaml:"uniqueId,omitempty"`
	Created          int64                      `json:"created,omitempty" yaml:"created,omitempty" gorm:"autoUpdateTime:nano"`
	Updated          int64                      `json:"updated,omitempty" yaml:"updated,omitempty"`
	Deleted          int64                      `json:"deleted,omitempty" yaml:"deleted,omitempty"`
	CreatedFormatted string                     `json:"createdFormatted,omitempty" yaml:"createdFormatted,omitempty" sql:"-" gorm:"-"`
	UpdatedFormatted string                     `json:"updatedFormatted,omitempty" yaml:"updatedFormatted,omitempty" sql:"-" gorm:"-"`
	User             *UserEntity                `json:"user" yaml:"user"    gorm:"foreignKey:UserId;references:UniqueId"      `
	Status           *string                    `json:"status" yaml:"status"        `
	PhoneNumber      *string                    `json:"phoneNumber" yaml:"phoneNumber"        `
	Key              *string                    `json:"key" yaml:"key"        `
	ExpiresAt        *string                    `json:"expiresAt" yaml:"expiresAt"        `
	Children         []*PhoneConfirmationEntity `csv:"-" gorm:"-" sql:"-" json:"children,omitempty" yaml:"children,omitempty"`
	LinkedTo         *PhoneConfirmationEntity   `csv:"-" yaml:"-" gorm:"-" json:"-" sql:"-"`
}

func PhoneConfirmationEntityStream(q QueryDSL) (chan []*PhoneConfirmationEntity, *QueryResultMeta, error) {
	cn := make(chan []*PhoneConfirmationEntity)
	q.ItemsPerPage = 50
	q.StartIndex = 0
	_, qrm, err := PhoneConfirmationActionQuery(q)
	if err != nil {
		return nil, nil, err
	}
	go func() {
		for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
			items, _, _ := PhoneConfirmationActionQuery(q)
			i += q.ItemsPerPage
			q.StartIndex = i
			cn <- items
		}
	}()
	return cn, qrm, nil
}

type PhoneConfirmationEntityList struct {
	Items []*PhoneConfirmationEntity
}

func NewPhoneConfirmationEntityList(items []*PhoneConfirmationEntity) *PhoneConfirmationEntityList {
	return &PhoneConfirmationEntityList{
		Items: items,
	}
}
func (x *PhoneConfirmationEntityList) ToTree() *TreeOperation[PhoneConfirmationEntity] {
	return NewTreeOperation(
		x.Items,
		func(t *PhoneConfirmationEntity) string {
			if t.ParentId == nil {
				return ""
			}
			return *t.ParentId
		},
		func(t *PhoneConfirmationEntity) string {
			return t.UniqueId
		},
	)
}

var PhoneConfirmationPreloadRelations []string = []string{}
var PHONE_CONFIRMATION_EVENT_CREATED = "phoneConfirmation.created"
var PHONE_CONFIRMATION_EVENT_UPDATED = "phoneConfirmation.updated"
var PHONE_CONFIRMATION_EVENT_DELETED = "phoneConfirmation.deleted"
var PHONE_CONFIRMATION_EVENTS = []string{
	PHONE_CONFIRMATION_EVENT_CREATED,
	PHONE_CONFIRMATION_EVENT_UPDATED,
	PHONE_CONFIRMATION_EVENT_DELETED,
}

type PhoneConfirmationFieldMap struct {
	User        TranslatedString `yaml:"user"`
	Status      TranslatedString `yaml:"status"`
	PhoneNumber TranslatedString `yaml:"phoneNumber"`
	Key         TranslatedString `yaml:"key"`
	ExpiresAt   TranslatedString `yaml:"expiresAt"`
}

var PhoneConfirmationEntityMetaConfig map[string]int64 = map[string]int64{}
var PhoneConfirmationEntityJsonSchema = ExtractEntityFields(reflect.ValueOf(&PhoneConfirmationEntity{}))

func entityPhoneConfirmationFormatter(dto *PhoneConfirmationEntity, query QueryDSL) {
	if dto == nil {
		return
	}
	if dto.Created > 0 {
		dto.CreatedFormatted = FormatDateBasedOnQuery(dto.Created, query)
	}
	if dto.Updated > 0 {
		dto.CreatedFormatted = FormatDateBasedOnQuery(dto.Updated, query)
	}
}
func PhoneConfirmationMockEntity() *PhoneConfirmationEntity {
	stringHolder := "~"
	int64Holder := int64(10)
	float64Holder := float64(10)
	_ = stringHolder
	_ = int64Holder
	_ = float64Holder
	entity := &PhoneConfirmationEntity{
		Status:      &stringHolder,
		PhoneNumber: &stringHolder,
		Key:         &stringHolder,
		ExpiresAt:   &stringHolder,
	}
	return entity
}
func PhoneConfirmationActionSeederMultiple(query QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	batchSize := 100
	bar := progressbar.Default(int64(count))
	// Collect entities in batches
	var entitiesBatch []*PhoneConfirmationEntity
	for i := 1; i <= count; i++ {
		entity := PhoneConfirmationMockEntity()
		entitiesBatch = append(entitiesBatch, entity)
		// When batch size is reached, perform the batch insert
		if len(entitiesBatch) == batchSize || i == count {
			// Insert batch
			_, err := PhoneConfirmationMultiInsert(entitiesBatch, query)
			if err == nil {
				successInsert += len(entitiesBatch)
			} else {
				fmt.Println(err)
				failureInsert += len(entitiesBatch)
			}
			// Clear the batch after insert
			entitiesBatch = nil
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func PhoneConfirmationActionSeeder(query QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	bar := progressbar.Default(int64(count))
	for i := 1; i <= count; i++ {
		entity := PhoneConfirmationMockEntity()
		_, err := PhoneConfirmationActionCreate(entity, query)
		if err == nil {
			successInsert++
		} else {
			fmt.Println(err)
			failureInsert++
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func (x *PhoneConfirmationEntity) Seeder() string {
	obj := PhoneConfirmationActionSeederInit()
	v, _ := json.MarshalIndent(obj, "", "  ")
	return string(v)
}
func PhoneConfirmationActionSeederInit() *PhoneConfirmationEntity {
	tildaRef := "~"
	_ = tildaRef
	entity := &PhoneConfirmationEntity{
		Status:      &tildaRef,
		PhoneNumber: &tildaRef,
		Key:         &tildaRef,
		ExpiresAt:   &tildaRef,
	}
	return entity
}
func PhoneConfirmationAssociationCreate(dto *PhoneConfirmationEntity, query QueryDSL) error {
	return nil
}

/**
* These kind of content are coming from another entity, which is indepndent module
* If we want to create them, we need to do it before. This is not association.
**/
func PhoneConfirmationRelationContentCreate(dto *PhoneConfirmationEntity, query QueryDSL) error {
	return nil
}
func PhoneConfirmationRelationContentUpdate(dto *PhoneConfirmationEntity, query QueryDSL) error {
	return nil
}
func PhoneConfirmationPolyglotCreateHandler(dto *PhoneConfirmationEntity, query QueryDSL) {
	if dto == nil {
		return
	}
}

/**
 * This will be validating your entity fully. Important note is that, you add validate:* tag
 * in your entity, it will automatically work here. For slices inside entity, make sure you add
 * extra line of AppendSliceErrors, otherwise they won't be detected
 */
func PhoneConfirmationValidator(dto *PhoneConfirmationEntity, isPatch bool) *IError {
	err := CommonStructValidatorPointer(dto, isPatch)
	return err
}

// Creates a set of natural language queries, which can be used with
// AI tools to create content or help with some tasks
var PhoneConfirmationAskCmd cli.Command = cli.Command{
	Name:  "nlp",
	Usage: "Set of natural language queries which helps creating content or data",
	Subcommands: []cli.Command{
		{
			Name:  "sample",
			Usage: "Asks for generating sample by giving an example data",
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:  "format",
					Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
					Value: "yaml",
				},
				&cli.IntFlag{
					Name:  "count",
					Usage: "How many samples to ask",
					Value: 30,
				},
			},
			Action: func(c *cli.Context) error {
				v := &PhoneConfirmationEntity{}
				format := c.String("format")
				request := "\033[1m" + `
I need you to create me an array of exact signature as the example given below,
with at least ` + fmt.Sprint(c.String("count")) + ` items, mock the content with few words, and guess the possible values
based on the common sense. I need the output to be a valid ` + format + ` file.
Make sure you wrap the entire array in 'items' field. Also before that, I provide some explanation of each field:
User: (type: one) Description: 
Status: (type: string) Description: 
PhoneNumber: (type: string) Description: 
Key: (type: string) Description: 
ExpiresAt: (type: string) Description: 
And here is the actual object signature:
` + v.Seeder() + `
`
				fmt.Println(request)
				return nil
			},
		},
	},
}

func PhoneConfirmationEntityPreSanitize(dto *PhoneConfirmationEntity, query QueryDSL) {
}
func PhoneConfirmationEntityBeforeCreateAppend(dto *PhoneConfirmationEntity, query QueryDSL) {
	if dto.UniqueId == "" {
		dto.UniqueId = UUID()
	}
	dto.WorkspaceId = &query.WorkspaceId
	dto.UserId = &query.UserId
	PhoneConfirmationRecursiveAddUniqueId(dto, query)
}
func PhoneConfirmationRecursiveAddUniqueId(dto *PhoneConfirmationEntity, query QueryDSL) {
}

/*
*
	Batch inserts, do not have all features that create
	operation does. Use it with unnormalized content,
	or read the source code carefully.
  This is not marked as an action, because it should not be available publicly
  at this moment.
*
*/
func PhoneConfirmationMultiInsert(dtos []*PhoneConfirmationEntity, query QueryDSL) ([]*PhoneConfirmationEntity, *IError) {
	if len(dtos) > 0 {
		for index := range dtos {
			PhoneConfirmationEntityPreSanitize(dtos[index], query)
			PhoneConfirmationEntityBeforeCreateAppend(dtos[index], query)
		}
		var dbref *gorm.DB = nil
		if query.Tx == nil {
			dbref = GetDbRef()
		} else {
			dbref = query.Tx
		}
		query.Tx = dbref
		err := dbref.Create(&dtos).Error
		if err != nil {
			return nil, GormErrorToIError(err)
		}
	}
	return dtos, nil
}
func PhoneConfirmationActionBatchCreateFn(dtos []*PhoneConfirmationEntity, query QueryDSL) ([]*PhoneConfirmationEntity, *IError) {
	if dtos != nil && len(dtos) > 0 {
		items := []*PhoneConfirmationEntity{}
		for _, item := range dtos {
			s, err := PhoneConfirmationActionCreateFn(item, query)
			if err != nil {
				return nil, err
			}
			items = append(items, s)
		}
		return items, nil
	}
	return dtos, nil
}
func PhoneConfirmationDeleteEntireChildren(query QueryDSL, dto *PhoneConfirmationEntity) *IError {
	// intentionally removed this. It's hard to implement it, and probably wrong without
	// proper on delete cascade
	return nil
}
func PhoneConfirmationActionCreateFn(dto *PhoneConfirmationEntity, query QueryDSL) (*PhoneConfirmationEntity, *IError) {
	// 1. Validate always
	if iError := PhoneConfirmationValidator(dto, false); iError != nil {
		return nil, iError
	}
	// 1.5 Sanitize the content coming of the front-end
	PhoneConfirmationEntityPreSanitize(dto, query)
	// 2. Append the necessary information about user, workspace
	PhoneConfirmationEntityBeforeCreateAppend(dto, query)
	// 3. Append the necessary translations, even if english
	PhoneConfirmationPolyglotCreateHandler(dto, query)
	// 3.5. Create other entities if we want select from them
	PhoneConfirmationRelationContentCreate(dto, query)
	// 4. Create the entity
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = GetDbRef()
	} else {
		dbref = query.Tx
	}
	query.Tx = dbref
	err := dbref.Create(&dto).Error
	if err != nil {
		err := GormErrorToIError(err)
		return dto, err
	}
	// 5. Create sub entities, objects or arrays, association to other entities
	PhoneConfirmationAssociationCreate(dto, query)
	// 6. Fire the event into system
	event.MustFire(PHONE_CONFIRMATION_EVENT_CREATED, event.M{
		"entity":    dto,
		"entityKey": GetTypeString(&PhoneConfirmationEntity{}),
		"target":    "workspace",
		"unqiueId":  query.WorkspaceId,
	})
	return dto, nil
}
func PhoneConfirmationActionGetOne(query QueryDSL) (*PhoneConfirmationEntity, *IError) {
	refl := reflect.ValueOf(&PhoneConfirmationEntity{})
	item, err := GetOneEntity[PhoneConfirmationEntity](query, refl)
	entityPhoneConfirmationFormatter(item, query)
	return item, err
}
func PhoneConfirmationActionGetByWorkspace(query QueryDSL) (*PhoneConfirmationEntity, *IError) {
	refl := reflect.ValueOf(&PhoneConfirmationEntity{})
	item, err := GetOneByWorkspaceEntity[PhoneConfirmationEntity](query, refl)
	entityPhoneConfirmationFormatter(item, query)
	return item, err
}
func PhoneConfirmationActionQuery(query QueryDSL) ([]*PhoneConfirmationEntity, *QueryResultMeta, error) {
	refl := reflect.ValueOf(&PhoneConfirmationEntity{})
	items, meta, err := QueryEntitiesPointer[PhoneConfirmationEntity](query, refl)
	for _, item := range items {
		entityPhoneConfirmationFormatter(item, query)
	}
	return items, meta, err
}

var phoneConfirmationMemoryItems []*PhoneConfirmationEntity = []*PhoneConfirmationEntity{}

func PhoneConfirmationEntityIntoMemory() {
	q := QueryDSL{
		ItemsPerPage: 500,
		StartIndex:   0,
	}
	_, qrm, _ := PhoneConfirmationActionQuery(q)
	for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
		items, _, _ := PhoneConfirmationActionQuery(q)
		phoneConfirmationMemoryItems = append(phoneConfirmationMemoryItems, items...)
		i += q.ItemsPerPage
		q.StartIndex = i
	}
}
func PhoneConfirmationMemGet(id uint) *PhoneConfirmationEntity {
	for _, item := range phoneConfirmationMemoryItems {
		if item.ID == id {
			return item
		}
	}
	return nil
}
func PhoneConfirmationMemJoin(items []uint) []*PhoneConfirmationEntity {
	res := []*PhoneConfirmationEntity{}
	for _, item := range items {
		v := PhoneConfirmationMemGet(item)
		if v != nil {
			res = append(res, v)
		}
	}
	return res
}
func PhoneConfirmationUpdateExec(dbref *gorm.DB, query QueryDSL, fields *PhoneConfirmationEntity) (*PhoneConfirmationEntity, *IError) {
	uniqueId := fields.UniqueId
	query.TriggerEventName = PHONE_CONFIRMATION_EVENT_UPDATED
	PhoneConfirmationEntityPreSanitize(fields, query)
	var item PhoneConfirmationEntity
	// If the entity is distinct by workspace, then the Query.WorkspaceId
	// which is selected is being used as the condition for create or update
	// if not, the unique Id is being used
	cond2 := &PhoneConfirmationEntity{UniqueId: uniqueId}
	q := dbref.
		Where(cond2).
		FirstOrCreate(&item)
	err := q.UpdateColumns(fields).Error
	if err != nil {
		return nil, GormErrorToIError(err)
	}
	query.Tx = dbref
	PhoneConfirmationRelationContentUpdate(fields, query)
	PhoneConfirmationPolyglotCreateHandler(fields, query)
	if ero := PhoneConfirmationDeleteEntireChildren(query, fields); ero != nil {
		return nil, ero
	}
	// @meta(update has many)
	err = dbref.
		Preload(clause.Associations).
		Where(&PhoneConfirmationEntity{UniqueId: uniqueId}).
		First(&item).Error
	event.MustFire(query.TriggerEventName, event.M{
		"entity":   &item,
		"target":   "workspace",
		"unqiueId": query.WorkspaceId,
	})
	if err != nil {
		return &item, GormErrorToIError(err)
	}
	return &item, nil
}
func PhoneConfirmationActionUpdateFn(query QueryDSL, fields *PhoneConfirmationEntity) (*PhoneConfirmationEntity, *IError) {
	if fields == nil {
		return nil, Create401Error(&WorkspacesMessages.BodyIsMissing, []string{})
	}
	// 1. Validate always
	if iError := PhoneConfirmationValidator(fields, true); iError != nil {
		return nil, iError
	}
	// Let's not add this. I am not sure of the consequences
	// PhoneConfirmationRecursiveAddUniqueId(fields, query)
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = GetDbRef()
		var item *PhoneConfirmationEntity
		vf := dbref.Transaction(func(tx *gorm.DB) error {
			dbref = tx
			var err *IError
			item, err = PhoneConfirmationUpdateExec(dbref, query, fields)
			if err == nil {
				return nil
			} else {
				return err
			}
		})
		return item, CastToIError(vf)
	} else {
		dbref = query.Tx
		return PhoneConfirmationUpdateExec(dbref, query, fields)
	}
}

var PhoneConfirmationWipeCmd cli.Command = cli.Command{
	Name:  "wipe",
	Usage: "Wipes entire phoneconfirmations ",
	Action: func(c *cli.Context) error {
		query := CommonCliQueryDSLBuilderAuthorize(c, &SecurityModel{
			ActionRequires: []PermissionInfo{PERM_ROOT_PHONE_CONFIRMATION_DELETE},
		})
		count, _ := PhoneConfirmationActionWipeClean(query)
		fmt.Println("Removed", count, "of entities")
		return nil
	},
}

func PhoneConfirmationActionRemove(query QueryDSL) (int64, *IError) {
	refl := reflect.ValueOf(&PhoneConfirmationEntity{})
	query.ActionRequires = []PermissionInfo{PERM_ROOT_PHONE_CONFIRMATION_DELETE}
	return RemoveEntity[PhoneConfirmationEntity](query, refl)
}
func PhoneConfirmationActionWipeClean(query QueryDSL) (int64, error) {
	var err error
	var count int64 = 0
	{
		subCount, subErr := WipeCleanEntity[PhoneConfirmationEntity]()
		if subErr != nil {
			fmt.Println("Error while wiping 'PhoneConfirmationEntity'", subErr)
			return count, subErr
		} else {
			count += subCount
		}
	}
	return count, err
}
func PhoneConfirmationActionBulkUpdate(
	query QueryDSL, dto *BulkRecordRequest[PhoneConfirmationEntity]) (
	*BulkRecordRequest[PhoneConfirmationEntity], *IError,
) {
	result := []*PhoneConfirmationEntity{}
	err := GetDbRef().Transaction(func(tx *gorm.DB) error {
		query.Tx = tx
		for _, record := range dto.Records {
			item, err := PhoneConfirmationActionUpdate(query, record)
			if err != nil {
				return err
			} else {
				result = append(result, item)
			}
		}
		return nil
	})
	if err == nil {
		return dto, nil
	}
	return nil, err.(*IError)
}
func (x *PhoneConfirmationEntity) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}

var PhoneConfirmationEntityMeta = TableMetaData{
	EntityName:    "PhoneConfirmation",
	ExportKey:     "phone-confirmations",
	TableNameInDb: "fb_phone-confirmation_entities",
	EntityObject:  &PhoneConfirmationEntity{},
	ExportStream:  PhoneConfirmationActionExportT,
	ImportQuery:   PhoneConfirmationActionImport,
}

func PhoneConfirmationActionExport(
	query QueryDSL,
) (chan []byte, *IError) {
	return YamlExporterChannel[PhoneConfirmationEntity](query, PhoneConfirmationActionQuery, PhoneConfirmationPreloadRelations)
}
func PhoneConfirmationActionExportT(
	query QueryDSL,
) (chan []interface{}, *IError) {
	return YamlExporterChannelT[PhoneConfirmationEntity](query, PhoneConfirmationActionQuery, PhoneConfirmationPreloadRelations)
}
func PhoneConfirmationActionImport(
	dto interface{}, query QueryDSL,
) *IError {
	var json = jsoniter.ConfigCompatibleWithStandardLibrary
	var content PhoneConfirmationEntity
	cx, err2 := json.Marshal(dto)
	if err2 != nil {
		return Create401Error(&WorkspacesMessages.InvalidContent, []string{})
	}
	json.Unmarshal(cx, &content)
	_, err := PhoneConfirmationActionCreate(&content, query)
	return err
}

var PhoneConfirmationCommonCliFlags = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "user-id",
		Required: false,
		Usage:    `user`,
	},
	&cli.StringFlag{
		Name:     "status",
		Required: false,
		Usage:    `status`,
	},
	&cli.StringFlag{
		Name:     "phone-number",
		Required: false,
		Usage:    `phoneNumber`,
	},
	&cli.StringFlag{
		Name:     "key",
		Required: false,
		Usage:    `key`,
	},
	&cli.StringFlag{
		Name:     "expires-at",
		Required: false,
		Usage:    `expiresAt`,
	},
}
var PhoneConfirmationCommonInteractiveCliFlags = []CliInteractiveFlag{
	{
		Name:        "status",
		StructField: "Status",
		Required:    false,
		Recommended: false,
		Usage:       `status`,
		Type:        "string",
	},
	{
		Name:        "phoneNumber",
		StructField: "PhoneNumber",
		Required:    false,
		Recommended: false,
		Usage:       `phoneNumber`,
		Type:        "string",
	},
	{
		Name:        "key",
		StructField: "Key",
		Required:    false,
		Recommended: false,
		Usage:       `key`,
		Type:        "string",
	},
	{
		Name:        "expiresAt",
		StructField: "ExpiresAt",
		Required:    false,
		Recommended: false,
		Usage:       `expiresAt`,
		Type:        "string",
	},
}
var PhoneConfirmationCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "user-id",
		Required: false,
		Usage:    `user`,
	},
	&cli.StringFlag{
		Name:     "status",
		Required: false,
		Usage:    `status`,
	},
	&cli.StringFlag{
		Name:     "phone-number",
		Required: false,
		Usage:    `phoneNumber`,
	},
	&cli.StringFlag{
		Name:     "key",
		Required: false,
		Usage:    `key`,
	},
	&cli.StringFlag{
		Name:     "expires-at",
		Required: false,
		Usage:    `expiresAt`,
	},
}
var PhoneConfirmationCreateCmd cli.Command = PHONE_CONFIRMATION_ACTION_POST_ONE.ToCli()
var PhoneConfirmationCreateInteractiveCmd cli.Command = cli.Command{
	Name:  "ic",
	Usage: "Creates a new entity, using requied fields in an interactive name",
	Flags: []cli.Flag{
		&cli.BoolFlag{
			Name:  "all",
			Usage: "Interactively asks for all inputs, not only required ones",
		},
	},
	Action: func(c *cli.Context) {
		query := CommonCliQueryDSLBuilderAuthorize(c, &SecurityModel{
			ActionRequires: []PermissionInfo{PERM_ROOT_PHONE_CONFIRMATION_CREATE},
		})
		entity := &PhoneConfirmationEntity{}
		PopulateInteractively(entity, c, PhoneConfirmationCommonInteractiveCliFlags)
		if entity, err := PhoneConfirmationActionCreate(entity, query); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := yaml.Marshal(entity)
			fmt.Println(FormatYamlKeys(string(f)))
		}
	},
}
var PhoneConfirmationUpdateCmd cli.Command = cli.Command{
	Name:    "update",
	Aliases: []string{"u"},
	Flags:   PhoneConfirmationCommonCliFlagsOptional,
	Usage:   "Updates entity by passing the parameters",
	Action: func(c *cli.Context) error {
		query := CommonCliQueryDSLBuilderAuthorize(c, &SecurityModel{
			ActionRequires: []PermissionInfo{PERM_ROOT_PHONE_CONFIRMATION_UPDATE},
		})
		entity := CastPhoneConfirmationFromCli(c)
		if entity, err := PhoneConfirmationActionUpdate(query, entity); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := json.MarshalIndent(entity, "", "  ")
			fmt.Println(string(f))
		}
		return nil
	},
}

func (x *PhoneConfirmationEntity) FromCli(c *cli.Context) *PhoneConfirmationEntity {
	return CastPhoneConfirmationFromCli(c)
}
func CastPhoneConfirmationFromCli(c *cli.Context) *PhoneConfirmationEntity {
	template := &PhoneConfirmationEntity{}
	if c.IsSet("uid") {
		template.UniqueId = c.String("uid")
	}
	if c.IsSet("pid") {
		x := c.String("pid")
		template.ParentId = &x
	}
	if c.IsSet("user-id") {
		value := c.String("user-id")
		template.UserId = &value
	}
	if c.IsSet("status") {
		value := c.String("status")
		template.Status = &value
	}
	if c.IsSet("phone-number") {
		value := c.String("phone-number")
		template.PhoneNumber = &value
	}
	if c.IsSet("key") {
		value := c.String("key")
		template.Key = &value
	}
	if c.IsSet("expires-at") {
		value := c.String("expires-at")
		template.ExpiresAt = &value
	}
	return template
}
func PhoneConfirmationSyncSeederFromFs(fsRef *embed.FS, fileNames []string) {
	SeederFromFSImport(
		QueryDSL{},
		PhoneConfirmationActionCreate,
		reflect.ValueOf(&PhoneConfirmationEntity{}).Elem(),
		fsRef,
		fileNames,
		true,
	)
}
func PhoneConfirmationSyncSeeders() {
	SeederFromFSImport(
		QueryDSL{WorkspaceId: USER_SYSTEM},
		PhoneConfirmationActionCreate,
		reflect.ValueOf(&PhoneConfirmationEntity{}).Elem(),
		phoneConfirmationSeedersFs,
		[]string{},
		true,
	)
}
func PhoneConfirmationImportMocks() {
	SeederFromFSImport(
		QueryDSL{},
		PhoneConfirmationActionCreate,
		reflect.ValueOf(&PhoneConfirmationEntity{}).Elem(),
		&mocks.ViewsFs,
		[]string{},
		false,
	)
}
func PhoneConfirmationWriteQueryMock(ctx MockQueryContext) {
	for _, lang := range ctx.Languages {
		itemsPerPage := 9999
		if ctx.ItemsPerPage > 0 {
			itemsPerPage = ctx.ItemsPerPage
		}
		f := QueryDSL{ItemsPerPage: itemsPerPage, Language: lang, WithPreloads: ctx.WithPreloads, Deep: true}
		items, count, _ := PhoneConfirmationActionQuery(f)
		result := QueryEntitySuccessResult(f, items, count)
		WriteMockDataToFile(lang, "", "PhoneConfirmation", result)
	}
}
func PhoneConfirmationsActionQueryString(keyword string, page int) ([]string, *QueryResultMeta, error) {
	searchFields := []string{
		`unique_id %"{keyword}"%`,
		`name %"{keyword}"%`,
	}
	m := func(item *PhoneConfirmationEntity) string {
		label := item.UniqueId
		// if item.Name != nil {
		// 	label += " >>> " + *item.Name
		// }
		return label
	}
	query := QueryStringCastCli(searchFields, keyword, page)
	items, meta, err := PhoneConfirmationActionQuery(query)
	stringItems := []string{}
	for _, item := range items {
		label := m(item)
		stringItems = append(stringItems, label)
	}
	return stringItems, meta, err
}

var PhoneConfirmationImportExportCommands = []cli.Command{
	{
		Name:  "mock",
		Usage: "Generates mock records based on the entity definition",
		Flags: []cli.Flag{
			&cli.IntFlag{
				Name:  "count",
				Usage: "how many activation key do you need to be generated and stored in database",
				Value: 10,
			},
			&cli.BoolFlag{
				Name:  "batch",
				Usage: "Multiple insert into database mode. Might miss children and relations at the moment",
			},
		},
		Action: func(c *cli.Context) error {
			query := CommonCliQueryDSLBuilderAuthorize(c, &SecurityModel{
				ActionRequires: []PermissionInfo{PERM_ROOT_PHONE_CONFIRMATION_CREATE},
			})
			if c.Bool("batch") {
				PhoneConfirmationActionSeederMultiple(query, c.Int("count"))
			} else {
				PhoneConfirmationActionSeeder(query, c.Int("count"))
			}
			return nil
		},
	},
	{
		Name:    "init",
		Aliases: []string{"i"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Creates a basic seeder file for you, based on the definition module we have. You can populate this file as an example",
		Action: func(c *cli.Context) error {
			seed := PhoneConfirmationActionSeederInit()
			CommonInitSeeder(strings.TrimSpace(c.String("format")), seed)
			return nil
		},
	},
	{
		Name:    "validate",
		Aliases: []string{"v"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "file",
				Usage: "Validates an import file, such as yaml, json, csv, and gives some insights how the after import it would look like",
				Value: "phone-confirmation-seeder-phone-confirmation.yml",
				// Uncomment before publish, they need to specify
				// Required: true,
			},
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Reads a yaml file containing an array of phone-confirmations, you can run this to validate if your import file is correct, and how it would look like after import",
		Action: func(c *cli.Context) error {
			data := &[]PhoneConfirmationEntity{}
			ReadYamlFile(c.String("file"), data)
			fmt.Println(data)
			return nil
		},
	},
	cli.Command{
		Name:  "slist",
		Usage: "Prints the list of files attached to this module for syncing or bootstrapping project",
		Action: func(c *cli.Context) error {
			if entity, err := GetSeederFilenames(phoneConfirmationSeedersFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "ssync",
		Usage: "Tries to sync the embedded content into the database, the list could be seen by 'slist' command",
		Action: func(c *cli.Context) error {
			CommonCliImportEmbedCmd(c,
				PhoneConfirmationActionCreate,
				reflect.ValueOf(&PhoneConfirmationEntity{}).Elem(),
				phoneConfirmationSeedersFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:  "mlist",
		Usage: "Prints the list of embedded mocks into the app",
		Action: func(c *cli.Context) error {
			if entity, err := GetSeederFilenames(&mocks.ViewsFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "msync",
		Usage: "Tries to sync mocks into the system",
		Action: func(c *cli.Context) error {
			CommonCliImportEmbedCmd(c,
				PhoneConfirmationActionCreate,
				reflect.ValueOf(&PhoneConfirmationEntity{}).Elem(),
				&mocks.ViewsFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:    "export",
		Aliases: []string{"e"},
		Flags: append(CommonQueryFlags,
			&cli.StringFlag{
				Name:     "file",
				Usage:    "The address of file you want the csv/yaml/json be exported to",
				Required: true,
			}),
		Usage: "Exports a query results into the csv/yaml/json format",
		Action: func(c *cli.Context) error {
			if strings.Contains(c.String("file"), ".csv") {
				CommonCliExportCmd2(c,
					PhoneConfirmationEntityStream,
					reflect.ValueOf(&PhoneConfirmationEntity{}).Elem(),
					c.String("file"),
					&metas.MetaFs,
					"PhoneConfirmationFieldMap.yml",
					PhoneConfirmationPreloadRelations,
				)
			} else {
				CommonCliExportCmd(c,
					PhoneConfirmationActionQuery,
					reflect.ValueOf(&PhoneConfirmationEntity{}).Elem(),
					c.String("file"),
					&metas.MetaFs,
					"PhoneConfirmationFieldMap.yml",
					PhoneConfirmationPreloadRelations,
				)
			}
			return nil
		},
	},
	cli.Command{
		Name: "import",
		Flags: append(
			append(
				CommonQueryFlags,
				&cli.StringFlag{
					Name:     "file",
					Usage:    "The address of file you want the csv be imported from",
					Required: true,
				}),
			PhoneConfirmationCommonCliFlagsOptional...,
		),
		Usage: "imports csv/yaml/json file and place it and its children into database",
		Action: func(c *cli.Context) error {
			CommonCliImportCmdAuthorized(c,
				PhoneConfirmationActionCreate,
				reflect.ValueOf(&PhoneConfirmationEntity{}).Elem(),
				c.String("file"),
				&SecurityModel{
					ActionRequires: []PermissionInfo{PERM_ROOT_PHONE_CONFIRMATION_CREATE},
				},
				func() PhoneConfirmationEntity {
					v := CastPhoneConfirmationFromCli(c)
					return *v
				},
			)
			return nil
		},
	},
}
var PhoneConfirmationCliCommands []cli.Command = []cli.Command{
	PHONE_CONFIRMATION_ACTION_QUERY.ToCli(),
	PHONE_CONFIRMATION_ACTION_TABLE.ToCli(),
	PhoneConfirmationCreateCmd,
	PhoneConfirmationUpdateCmd,
	PhoneConfirmationAskCmd,
	PhoneConfirmationCreateInteractiveCmd,
	PhoneConfirmationWipeCmd,
	GetCommonRemoveQuery(reflect.ValueOf(&PhoneConfirmationEntity{}).Elem(), PhoneConfirmationActionRemove),
}

func PhoneConfirmationCliFn() cli.Command {
	commands := append(PhoneConfirmationImportExportCommands, PhoneConfirmationCliCommands...)
	return cli.Command{
		Name:        "phoneconfirmation",
		Description: "PhoneConfirmations module actions",
		Usage:       ``,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "language",
				Value: "en",
			},
		},
		Subcommands: commands,
	}
}

var PHONE_CONFIRMATION_ACTION_TABLE = Module3Action{
	Name:          "table",
	ActionAliases: []string{"t"},
	Flags:         CommonQueryFlags,
	Description:   "Table formatted queries all of the entities in database based on the standard query format",
	Action:        PhoneConfirmationActionQuery,
	CliAction: func(c *cli.Context, security *SecurityModel) error {
		CommonCliTableCmd2(c,
			PhoneConfirmationActionQuery,
			security,
			reflect.ValueOf(&PhoneConfirmationEntity{}).Elem(),
		)
		return nil
	},
}
var PHONE_CONFIRMATION_ACTION_QUERY = Module3Action{
	Method: "GET",
	Url:    "/phone-confirmations",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_PHONE_CONFIRMATION_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpQueryEntity(c, PhoneConfirmationActionQuery)
		},
	},
	Format:         "QUERY",
	Action:         PhoneConfirmationActionQuery,
	ResponseEntity: &[]PhoneConfirmationEntity{},
	Out: &Module3ActionBody{
		Entity: "PhoneConfirmationEntity",
	},
	CliAction: func(c *cli.Context, security *SecurityModel) error {
		CommonCliQueryCmd2(
			c,
			PhoneConfirmationActionQuery,
			security,
		)
		return nil
	},
	CliName:       "query",
	Name:          "query",
	ActionAliases: []string{"q"},
	Flags:         CommonQueryFlags,
	Description:   "Queries all of the entities in database based on the standard query format (s+)",
}
var PHONE_CONFIRMATION_ACTION_EXPORT = Module3Action{
	Method: "GET",
	Url:    "/phone-confirmations/export",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_PHONE_CONFIRMATION_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpStreamFileChannel(c, PhoneConfirmationActionExport)
		},
	},
	Format:         "QUERY",
	Action:         PhoneConfirmationActionExport,
	ResponseEntity: &[]PhoneConfirmationEntity{},
	Out: &Module3ActionBody{
		Entity: "PhoneConfirmationEntity",
	},
}
var PHONE_CONFIRMATION_ACTION_GET_ONE = Module3Action{
	Method: "GET",
	Url:    "/phone-confirmation/:uniqueId",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_PHONE_CONFIRMATION_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpGetEntity(c, PhoneConfirmationActionGetOne)
		},
	},
	Format:         "GET_ONE",
	Action:         PhoneConfirmationActionGetOne,
	ResponseEntity: &PhoneConfirmationEntity{},
	Out: &Module3ActionBody{
		Entity: "PhoneConfirmationEntity",
	},
}
var PHONE_CONFIRMATION_ACTION_POST_ONE = Module3Action{
	Name:          "create",
	ActionAliases: []string{"c"},
	Description:   "Create new phoneConfirmation",
	Flags:         PhoneConfirmationCommonCliFlags,
	Method:        "POST",
	Url:           "/phone-confirmation",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_PHONE_CONFIRMATION_CREATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpPostEntity(c, PhoneConfirmationActionCreate)
		},
	},
	CliAction: func(c *cli.Context, security *SecurityModel) error {
		result, err := CliPostEntity(c, PhoneConfirmationActionCreate, security)
		HandleActionInCli(c, result, err, map[string]map[string]string{})
		return err
	},
	Action:         PhoneConfirmationActionCreate,
	Format:         "POST_ONE",
	RequestEntity:  &PhoneConfirmationEntity{},
	ResponseEntity: &PhoneConfirmationEntity{},
	Out: &Module3ActionBody{
		Entity: "PhoneConfirmationEntity",
	},
	In: &Module3ActionBody{
		Entity: "PhoneConfirmationEntity",
	},
}
var PHONE_CONFIRMATION_ACTION_PATCH = Module3Action{
	Name:          "update",
	ActionAliases: []string{"u"},
	Flags:         PhoneConfirmationCommonCliFlagsOptional,
	Method:        "PATCH",
	Url:           "/phone-confirmation",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_PHONE_CONFIRMATION_UPDATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpUpdateEntity(c, PhoneConfirmationActionUpdate)
		},
	},
	Action:         PhoneConfirmationActionUpdate,
	RequestEntity:  &PhoneConfirmationEntity{},
	ResponseEntity: &PhoneConfirmationEntity{},
	Format:         "PATCH_ONE",
	Out: &Module3ActionBody{
		Entity: "PhoneConfirmationEntity",
	},
	In: &Module3ActionBody{
		Entity: "PhoneConfirmationEntity",
	},
}
var PHONE_CONFIRMATION_ACTION_PATCH_BULK = Module3Action{
	Method: "PATCH",
	Url:    "/phone-confirmations",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_PHONE_CONFIRMATION_UPDATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpUpdateEntities(c, PhoneConfirmationActionBulkUpdate)
		},
	},
	Action:         PhoneConfirmationActionBulkUpdate,
	Format:         "PATCH_BULK",
	RequestEntity:  &BulkRecordRequest[PhoneConfirmationEntity]{},
	ResponseEntity: &BulkRecordRequest[PhoneConfirmationEntity]{},
	Out: &Module3ActionBody{
		Entity: "PhoneConfirmationEntity",
	},
	In: &Module3ActionBody{
		Entity: "PhoneConfirmationEntity",
	},
}
var PHONE_CONFIRMATION_ACTION_DELETE = Module3Action{
	Method: "DELETE",
	Url:    "/phone-confirmation",
	Format: "DELETE_DSL",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_PHONE_CONFIRMATION_DELETE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpRemoveEntity(c, PhoneConfirmationActionRemove)
		},
	},
	Action:         PhoneConfirmationActionRemove,
	RequestEntity:  &DeleteRequest{},
	ResponseEntity: &DeleteResponse{},
	TargetEntity:   &PhoneConfirmationEntity{},
}

/**
 *	Override this function on PhoneConfirmationEntityHttp.go,
 *	In order to add your own http
 **/
var AppendPhoneConfirmationRouter = func(r *[]Module3Action) {}

func GetPhoneConfirmationModule3Actions() []Module3Action {
	routes := []Module3Action{
		PHONE_CONFIRMATION_ACTION_QUERY,
		PHONE_CONFIRMATION_ACTION_EXPORT,
		PHONE_CONFIRMATION_ACTION_GET_ONE,
		PHONE_CONFIRMATION_ACTION_POST_ONE,
		PHONE_CONFIRMATION_ACTION_PATCH,
		PHONE_CONFIRMATION_ACTION_PATCH_BULK,
		PHONE_CONFIRMATION_ACTION_DELETE,
	}
	// Append user defined functions
	AppendPhoneConfirmationRouter(&routes)
	return routes
}

var PERM_ROOT_PHONE_CONFIRMATION_DELETE = PermissionInfo{
	CompleteKey: "root/modules/workspaces/phone-confirmation/delete",
	Name:        "Delete phone confirmation",
}
var PERM_ROOT_PHONE_CONFIRMATION_CREATE = PermissionInfo{
	CompleteKey: "root/modules/workspaces/phone-confirmation/create",
	Name:        "Create phone confirmation",
}
var PERM_ROOT_PHONE_CONFIRMATION_UPDATE = PermissionInfo{
	CompleteKey: "root/modules/workspaces/phone-confirmation/update",
	Name:        "Update phone confirmation",
}
var PERM_ROOT_PHONE_CONFIRMATION_QUERY = PermissionInfo{
	CompleteKey: "root/modules/workspaces/phone-confirmation/query",
	Name:        "Query phone confirmation",
}
var PERM_ROOT_PHONE_CONFIRMATION = PermissionInfo{
	CompleteKey: "root/modules/workspaces/phone-confirmation/*",
	Name:        "Entire phone confirmation actions (*)",
}
var ALL_PHONE_CONFIRMATION_PERMISSIONS = []PermissionInfo{
	PERM_ROOT_PHONE_CONFIRMATION_DELETE,
	PERM_ROOT_PHONE_CONFIRMATION_CREATE,
	PERM_ROOT_PHONE_CONFIRMATION_UPDATE,
	PERM_ROOT_PHONE_CONFIRMATION_QUERY,
	PERM_ROOT_PHONE_CONFIRMATION,
}
var PhoneConfirmationEntityBundle = EntityBundle{
	Permissions: ALL_PHONE_CONFIRMATION_PERMISSIONS,
	// Cli command has been exluded, since we use module to wrap all the entities
	// to be more easier to wrap up.
	// Create your own bundle if you need with Cli
	//CliCommands: []cli.Command{
	//	PhoneConfirmationCliFn(),
	//},
	Actions:      GetPhoneConfirmationModule3Actions(),
	MockProvider: PhoneConfirmationImportMocks,
	AutoMigrationEntities: []interface{}{
		&PhoneConfirmationEntity{},
	},
}
