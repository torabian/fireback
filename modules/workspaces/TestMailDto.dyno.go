package workspaces

/*
*	Generated by fireback 1.1.28
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"encoding/json"
	"fmt"
	"github.com/urfave/cli"
	"strings"
)

func CastTestMailFromCli(c *cli.Context) *TestMailDto {
	template := &TestMailDto{}
	if c.IsSet("sender-id") {
		template.SenderId = c.String("sender-id")
	}
	if c.IsSet("to-name") {
		template.ToName = c.String("to-name")
	}
	if c.IsSet("to-email") {
		template.ToEmail = c.String("to-email")
	}
	if c.IsSet("subject") {
		template.Subject = c.String("subject")
	}
	if c.IsSet("content") {
		template.Content = c.String("content")
	}
	return template
}

var TestMailDtoCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "sender-id",
		Required: false,
		Usage:    `senderId (string)`,
	},
	&cli.StringFlag{
		Name:     "to-name",
		Required: false,
		Usage:    `toName (string)`,
	},
	&cli.StringFlag{
		Name:     "to-email",
		Required: false,
		Usage:    `toEmail (string)`,
	},
	&cli.StringFlag{
		Name:     "subject",
		Required: false,
		Usage:    `subject (string)`,
	},
	&cli.StringFlag{
		Name:     "content",
		Required: false,
		Usage:    `content (string)`,
	},
}

type TestMailDto struct {
	SenderId string `json:"senderId" yaml:"senderId"        `
	ToName   string `json:"toName" yaml:"toName"        `
	ToEmail  string `json:"toEmail" yaml:"toEmail"        `
	Subject  string `json:"subject" yaml:"subject"        `
	Content  string `json:"content" yaml:"content"        `
}
type TestMailDtoList struct {
	Items []*TestMailDto
}

func NewTestMailDtoList(items []*TestMailDto) *TestMailDtoList {
	return &TestMailDtoList{
		Items: items,
	}
}
func (x *TestMailDtoList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *TestMailDto) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	// Intentional trim (so strings lib is always imported)
	return strings.TrimSpace("")
}
func (x *TestMailDto) JsonPrint() {
	fmt.Println(x.Json())
}

// This is an experimental way to create new dtos, with exluding the pointers as helper.
func NewTestMailDto(
	SenderId string,
	ToName string,
	ToEmail string,
	Subject string,
	Content string,
) TestMailDto {
	return TestMailDto{
		SenderId: SenderId,
		ToName:   ToName,
		ToEmail:  ToEmail,
		Subject:  Subject,
		Content:  Content,
	}
}
