package workspaces

/*
*	Generated by fireback 1.2.1
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"encoding/json"
	"fmt"
	"github.com/urfave/cli"
	"strings"
)

func CastAuthResultFromCli(c *cli.Context) *AuthResultDto {
	template := &AuthResultDto{}
	if c.IsSet("user-access-per-workspace-id") {
		template.UserAccessPerWorkspaceId = NewStringAutoNull(c.String("user-access-per-workspace-id"))
	}
	if c.IsSet("user-id") {
		template.UserId = NewStringAutoNull(c.String("user-id"))
	}
	if c.IsSet("user-id") {
		template.UserId = NewStringAutoNull(c.String("user-id"))
	}
	if c.IsSet("sql-context") {
		template.SqlContext = c.String("sql-context")
	}
	return template
}

var AuthResultDtoCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "user-access-per-workspace-id",
		Required: false,
		Usage:    `userAccessPerWorkspace (one)`,
	},
	&cli.StringFlag{
		Name:     "user-id",
		Required: false,
		Usage:    `user (one)`,
	},
	&cli.StringFlag{
		Name:     "user-id",
		Required: false,
		Usage:    `userId (string?)`,
	},
	&cli.StringFlag{
		Name:     "sql-context",
		Required: false,
		Usage:    `After authentication, this object contains the workspace permissions and current selected role permissions, to create context sql query based on that (string)`,
	},
}

type AuthResultDto struct {
	UserAccessPerWorkspace   *UserAccessPerWorkspaceDto `json:"userAccessPerWorkspace" yaml:"userAccessPerWorkspace"    gorm:"foreignKey:UserAccessPerWorkspaceId;references:UniqueId"      `
	UserAccessPerWorkspaceId String                     `json:"userAccessPerWorkspaceId" yaml:"userAccessPerWorkspaceId"`
	User                     *UserEntity                `json:"user" yaml:"user"    gorm:"foreignKey:UserId;references:UniqueId"      `
	UserId                   String                     `json:"userId" yaml:"userId"        `
	// After authentication, this object contains the workspace permissions and current selected role permissions, to create context sql query based on that
	SqlContext string `json:"sqlContext" yaml:"sqlContext"        `
}
type AuthResultDtoList struct {
	Items []*AuthResultDto
}

func NewAuthResultDtoList(items []*AuthResultDto) *AuthResultDtoList {
	return &AuthResultDtoList{
		Items: items,
	}
}
func (x *AuthResultDtoList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *AuthResultDto) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	// Intentional trim (so strings lib is always imported)
	return strings.TrimSpace("")
}
func (x *AuthResultDto) JsonPrint() {
	fmt.Println(x.Json())
}

// This is an experimental way to create new dtos, with exluding the pointers as helper.
func NewAuthResultDto(
	SqlContext string,
) AuthResultDto {
	return AuthResultDto{
		SqlContext: SqlContext,
	}
}
