package workspaces

/*
*	Generated by fireback 1.1.27
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"encoding/json"
	"fmt"
	"github.com/urfave/cli"
	"strings"
)

func CastAuthContextFromCli(c *cli.Context) *AuthContextDto {
	template := &AuthContextDto{}
	if c.IsSet("workspace-id") {
		value := c.String("workspace-id")
		template.WorkspaceId = &value
	}
	if c.IsSet("token") {
		value := c.String("token")
		template.Token = &value
	}
	return template
}

var AuthContextDtoCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.BoolFlag{
		Name:     "skip-workspace-id",
		Required: false,
		Usage:    `skipWorkspaceId`,
	},
	&cli.StringFlag{
		Name:     "workspace-id",
		Required: false,
		Usage:    `workspaceId`,
	},
	&cli.StringFlag{
		Name:     "token",
		Required: false,
		Usage:    `token`,
	},
}

type AuthContextDto struct {
	SkipWorkspaceId *bool            `json:"skipWorkspaceId" yaml:"skipWorkspaceId"        `
	WorkspaceId     *string          `json:"workspaceId" yaml:"workspaceId"        `
	Token           *string          `json:"token" yaml:"token"        `
	Capabilities    []PermissionInfo `json:"capabilities" yaml:"capabilities"        `
}
type AuthContextDtoList struct {
	Items []*AuthContextDto
}

func NewAuthContextDtoList(items []*AuthContextDto) *AuthContextDtoList {
	return &AuthContextDtoList{
		Items: items,
	}
}
func (x *AuthContextDto) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	// Intentional trim (so strings lib is always imported)
	return strings.TrimSpace("")
}
func (x *AuthContextDto) JsonPrint() {
	fmt.Println(x.Json())
}

// This is an experimental way to create new dtos, with exluding the pointers as helper.
func NewAuthContextDto(
	WorkspaceId string,
	Token string,
) AuthContextDto {
	return AuthContextDto{
		WorkspaceId: &WorkspaceId,
		Token:       &Token,
	}
}
