package workspaces

/*
*	Generated by fireback 1.2.3
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"github.com/gin-gonic/gin"
	"github.com/urfave/cli"
)

// using shared actions here
var ListCapabilitiesSecurityModel *SecurityModel = nil

type listCapabilitiesActionImpSig func(
	q QueryDSL) ([]string,
	*IError,
)

var ListCapabilitiesActionImp listCapabilitiesActionImpSig

func ListCapabilitiesActionFn(
	q QueryDSL,
) (
	[]string,
	*IError,
) {
	if ListCapabilitiesActionImp == nil {
		return nil, nil
	}
	return ListCapabilitiesActionImp(q)
}

var ListCapabilitiesActionCmd cli.Command = cli.Command{
	Name:  "list",
	Usage: `Lists all of the capabilities in database as a array of string as root access`,
	Action: func(c *cli.Context) {
		query := CommonCliQueryDSLBuilderAuthorize(c, ListCapabilitiesSecurityModel)
		result, err := ListCapabilitiesActionFn(query)
		HandleActionInCli(c, result, err, map[string]map[string]string{})
	},
}
var CapabilitiesTreeSecurityModel = &SecurityModel{
	ActionRequires: []PermissionInfo{
		{
			CompleteKey: "root.manage.workspaces.capability.query",
		},
	},
	ResolveStrategy: "workspace",
}

type CapabilitiesTreeActionResDto struct {
	Capabilities       []*CapabilityEntity `json:"capabilities" yaml:"capabilities"    gorm:"many2many:_capabilities;foreignKey:UniqueId;references:UniqueId"      `
	CapabilitiesListId []string            `json:"capabilitiesListId" yaml:"capabilitiesListId" gorm:"-" sql:"-"`
	Nested             []*CapabilityEntity `json:"nested" yaml:"nested"    gorm:"many2many:_nested;foreignKey:UniqueId;references:UniqueId"      `
	NestedListId       []string            `json:"nestedListId" yaml:"nestedListId" gorm:"-" sql:"-"`
}

func (x *CapabilitiesTreeActionResDto) RootObjectName() string {
	return "Workspaces"
}

type capabilitiesTreeActionImpSig func(
	q QueryDSL) (*CapabilitiesTreeActionResDto,
	*IError,
)

var CapabilitiesTreeActionImp capabilitiesTreeActionImpSig

func CapabilitiesTreeActionFn(
	q QueryDSL,
) (
	*CapabilitiesTreeActionResDto,
	*IError,
) {
	if CapabilitiesTreeActionImp == nil {
		return nil, nil
	}
	return CapabilitiesTreeActionImp(q)
}

var CapabilitiesTreeActionCmd cli.Command = cli.Command{
	Name:  "treex",
	Usage: `dLists all of the capabilities in database as a array of string as root access`,
	Action: func(c *cli.Context) {
		query := CommonCliQueryDSLBuilderAuthorize(c, CapabilitiesTreeSecurityModel)
		result, err := CapabilitiesTreeActionFn(query)
		HandleActionInCli(c, result, err, map[string]map[string]string{})
	},
}

func WorkspacesCustomActions() []Module3Action {
	routes := []Module3Action{
		{
			Method:        "",
			Url:           "/list-capabilities",
			SecurityModel: ListCapabilitiesSecurityModel,
			Name:          "listCapabilities",
			Description:   "Lists all of the capabilities in database as a array of string as root access",
			Handlers: []gin.HandlerFunc{
				func(c *gin.Context) {
					// POST_ONE -
				},
			},
			Format:         "POST_ONE",
			Action:         ListCapabilitiesActionFn,
			ResponseEntity: &OkayResponseDto{},
			Out: &Module3ActionBody{
				Entity: "OkayResponseDto",
			},
		},
		{
			Method:        "GET",
			Url:           "/capabilitiesTree",
			SecurityModel: CapabilitiesTreeSecurityModel,
			Name:          "capabilitiesTree",
			Description:   "dLists all of the capabilities in database as a array of string as root access",
			Handlers: []gin.HandlerFunc{
				func(c *gin.Context) {
					// GET_ONE - get
					HttpGetEntity(c, CapabilitiesTreeActionFn)
				},
			},
			Format:         "GET_ONE",
			Action:         CapabilitiesTreeActionFn,
			ResponseEntity: &CapabilitiesTreeActionResDto{},
			Out: &Module3ActionBody{
				Entity: "CapabilitiesTreeActionResDto",
			},
		},
	}
	return routes
}

var WorkspacesCustomActionsCli = []cli.Command{
	ListCapabilitiesActionCmd,
	CapabilitiesTreeActionCmd,
}

// Use the actions bundle for ease and provide it to the ModuleProvider
// and it would gather all actions in the module level
var WorkspacesCliActionsBundle = &CliActionsBundle{
	Name:  "workspaces",
	Usage: ``,
	// Here we will include entities actions, as well as module level actions
	Subcommands: cli.Commands{
		ListCapabilitiesActionCmd,
		CapabilitiesTreeActionCmd,
		CapabilityCliFn(),
	},
}

func GetWorkspacesActionsBundle() *ModuleActionsBundle {
	return &ModuleActionsBundle{
		Actions:   WorkspacesCustomActions(),
		CliAction: WorkspacesCliActionsBundle,
	}
}
func GetWorkspacesActionsCli() []cli.Command {
	return WorkspacesCustomActionsCli
}
