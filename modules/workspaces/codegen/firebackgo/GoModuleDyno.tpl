package {{ .m.Path }}

{{ define "remoteresponsetype" }} {{ if .Out }}*{{ if .Out.Dto}}  {{ .Out.Dto }} {{ end }} {{ if .Out.Entity}}  {{ .Out.Entity }} {{ end }} {{ if .Out.Fields}} {{ upper .Name }}RemoteResponse {{ end }} {{else }}[]byte{{ end }} {{ end }}

{{ define "remoterequestbody" }}{{ if .In.Dto}} {{ .In.Dto }} {{ end }}{{ if .In.Entity}} {{ .In.Entity }} {{ end }}{{ if .In.Fields}} {{ upper .Name }}RemoteBody {{ end }}{{ end }}

/*
*	Generated by fireback {{ .fv }}
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
*/

{{ if ne .wsprefix "" }}
import "github.com/torabian/fireback/modules/workspaces"
{{ end }}

import "encoding/json"

{{ if .m.Remotes }}
import (

	"github.com/hashicorp/go-retryablehttp"
)
{{ end }}


func {{ upper .m.Path }}Json() string {
  str, _ := json.MarshalIndent("dont remove me", "", "  ")
	return (string(str))
}

// Module dynamic things comes here. Don't touch it :D

var PERM_ROOT_{{ .m.AllUpper }}_EVERYTHING = {{ .wsprefix }}PermissionInfo{
  CompleteKey: "root/{{.m.AllLower}}/*",
}
var ALL_PERM_{{ .m.AllUpper }}_MODULE = []{{ .wsprefix }}PermissionInfo{
  PERM_ROOT_{{ .m.AllUpper }}_EVERYTHING,
}



{{ range .remoteQueryChildren }}

  {{ range .}}

  type {{ .FullName }} struct {
    {{ template "definitionrow" (arr .Fields $.wsprefix) }}
  }

  {{ end }}
{{ end }}

{{ range .remoteResChildrenMap }}

  {{ range .}}

  type {{ .FullName }} struct {
    {{ template "definitionrow" (arr .Fields $.wsprefix) }}
  }

  {{ end }}
{{ end }}

{{ range .remoteReqChildrenMap }}

  {{ range .}}

  type {{ .FullName }} struct {
    {{ template "definitionrow" (arr .Fields $.wsprefix) }}
  }

  {{ end }}
{{ end }}


 
{{ if .m.Messages }}
{{ template "messageCode" (arr .m.Name .m.Messages $.wsprefix)}}
{{ end }}


{{ if .m.Remotes }}


type {{ .m.Name }}RemoteContext struct {
	client *retryablehttp.Client
}

var {{ upper .m.Name }}Remotes {{ .m.Name }}RemoteContext = {{ .m.Name }}RemoteContext{
	client: retryablehttp.NewClient(),
}

{{ end }}
{{ range .m.Remotes }}

{{ if .Out }}
{{ if .Out.Fields }}

type {{ upper .Name }}RemoteResponse struct {
  {{ template "definitionrow" (arr .Out.Fields $.wsprefix) }}
}

{{ end }}
{{ end }}

{{ if .In }}
{{ if .In.Fields }}

type {{ upper .Name }}RemoteBody struct {
  {{ template "definitionrow" (arr .In.Fields $.wsprefix) }}
}

func (x *{{ upper .Name }}RemoteBody) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))

	}
	return ""
}


{{ end }}
{{ end }}


{{ if .Query }}
/// query item
type {{ upper .Name }}Query struct {
  {{ template "definitionrow" (arr .Query $.wsprefix true) }}
}

{{ end }}

func (x *{{ $.m.Name }}RemoteContext) {{ upper .Name }}(
  {{ if .Query }}
  query {{ upper .Name }}Query,
  {{ end }}
  {{ if .In }}
  body *{{ template "remoterequestbody" . }},
  {{ end }}
) ({{ template "remoteresponsetype" . }}, *workspaces.IError) {

  result, err := {{ $.wsprefix }}MakeHTTPRequest(
		x.client,
		"{{ .Url }}",
    {{ if .Query}}
    query,
    {{ else }}
    nil,
    {{ end }}
		{{ $.wsprefix }}HTTPRequestOptions{
			Method: "{{ .Method }}",
      {{ if .In }}
      Body:   body.Json(),
      {{ end }}
      
		},
	)

  if err != nil {
    return nil, err
  }

  {{ if .Out }}
    // Let's cast it to the object
    {{ if .Out.Entity }}
    var content *{{ .Out.Entity }}
    {{ else if .Out.Dto }}
    var content *{{ .Out.Dto }}
    {{ else if .Out.Fields }}
    var content *{{ upper .Name }}RemoteResponse

    {{ end }}
    json.Unmarshal(result, &content)
    return content, nil
  {{ else }}
    return result, nil
  {{ end }}


}

{{ end }}
