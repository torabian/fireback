package {{ .m.Name }}

/*
*	Generated by fireback {{ .fv }}
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
*/

import (
    "github.com/gin-gonic/gin"

    {{ if ne .m.MetaWorkspace true}}
	"github.com/torabian/fireback/modules/workspaces"
	{{ end }}
 
	"fmt"
	"encoding/json"
	"strings"
	"github.com/schollz/progressbar/v3"
	"github.com/gookit/event"
	"github.com/microcosm-cc/bluemonday"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"

	jsoniter "github.com/json-iterator/go"

    {{ if or (.e.Cte) (.e.Queries) }}
    queries "{{ .gofModule }}/{{ .ctx.RelativePath }}/queries"
    {{ end }}

	"embed"
	reflect "reflect"

	"github.com/urfave/cli"
	seeders "{{ .gofModule }}/{{ .ctx.RelativePath }}/seeders/{{ .e.Upper }}"
	mocks "{{ .gofModule }}/{{ .ctx.RelativePath }}/mocks/{{ .e.Upper }}"
	{{ if .hasMetas }}
	metas "{{ .gofModule }}/{{ .ctx.RelativePath }}/metas"
	{{ end }}

	"gopkg.in/yaml.v2"

	{{ if .e.DataFields.DateTimestamp }}
	"time"
	{{ end }}
   
)


{{ if .e.PrependScript }}
	{{ .e.PrependScript }}
{{ end }}

{{ template "goimport" . }}


var {{ .e.Name }}SeedersFs = &seeders.ViewsFs


{{ if .e.Table }}
// Customizes the table name on the database level, instead of gorm convention
func ({{ .e.EntityName }}) TableName() string {
	return "{{ .e.Table }}"
}
{{ end }}


func Reset{{ .e.Upper }}Seeders(fs *embed.FS) {
	{{ .e.Name }}SeedersFs = fs
}

{{ range .children }}
type {{ .FullName }} struct {
	{{ template "defaultgofields" $.e }}
    {{ template "definitionrow" (arr .CompleteFields $.wsprefix) }}

	{{ if .LinkedTo }}
	LinkedTo *{{ .LinkedTo }} `yaml:"-" gorm:"-" json:"-" sql:"-"`
	{{ end }}
}

func ( x * {{ .FullName }}) RootObjectName() string {
	return "{{ $.e.EntityName }}"
}

{{ end }}


type {{ .e.EntityName }} struct {
    {{ template "defaultgofields" .e }}
    {{ template "definitionrow" (arr .e.CompleteFields $.wsprefix) }}

    {{ if .e.HasTranslations }}
    Translations     []*{{ .e.PolyglotName}} `json:"translations,omitempty" gorm:"foreignKey:LinkerId;references:UniqueId;constraint:OnDelete:CASCADE"`
    {{ end }}

    Children []*{{ .e.EntityName }} `gorm:"-" sql:"-" json:"children,omitempty" yaml:"children"`

    LinkedTo *{{ .e.EntityName }} `yaml:"-" gorm:"-" json:"-" sql:"-"`
}


type {{ .e.EntityName }}List struct {
	Items []*{{ .e.EntityName }} 
}

func New{{ .e.EntityName }}List(items []*{{ .e.EntityName }}) *{{ .e.EntityName }}List {

	return &{{ .e.EntityName }}List{
		Items: items,
	}
}
{{ if .e.DataFields.Essentials }}
func (x *{{ .e.EntityName }}List) ToTree() *{{ $.wsprefix }}TreeOperation[{{ .e.EntityName }}] {
	return {{ $.wsprefix }}NewTreeOperation(
		x.Items,
		func(t *{{ .e.EntityName }}) string {
			if t.ParentId == nil {
				return ""
			}
			return *t.ParentId
		},
		func(t *{{ .e.EntityName }}) string {
			return t.UniqueId
		},
	)
}
{{ end }}
 

var {{ .e.Upper }}PreloadRelations []string = []string{}


{{ template "eventsAndMeta" . }}

{{ template "polyglottable" . }}

{{ template "entitychildactions" . }}

{{ template "entityformatting" . }}

{{ template "mockingentity" . }}

{{ template "getEntityTranslateFields" . }}

{{ template "entitySeederInit" . }}

{{ template "entityAssociationCreate" . }}

{{ template "entityRelationContentCreation" . }}

{{ template "relationContentUpdate" . }}

{{ template "polyglot" . }}

{{ template "entityValidator" . }}

{{ template "entitySanitize" . }}

{{ template "entityBeforeCreateActions" . }}

{{ template "batchActionCreate" . }}

{{ template "entityDeleteEntireChildren" . }}

{{ template "entityActionCreate" . }}

{{ template "entityActionGetAndQuery" . }}

{{ template "queriesAndPivot" . }}


{{ template "entityUpdateExec" . }}

{{ template "entityUpdateAction" . }}

{{ template "entityRemoveAndCleanActions" . }}

{{ template "entityBulkUpdate" . }}

{{ template "entityExtensions" . }}

{{ template "entityMeta" . }}

{{ template "entityImportExport" . }}

{{ template "cliFlags" . }}

{{ template "entityCliCommands" . }}

{{ template "entityCastFromCli" . }}

{{ template "entityMockAndSeeders" . }}

{{ template "entityCliImportExportCmd" . }}

{{ template "entityCliActionsCmd" . }}

{{ template "entityHttp" . }}

{{ template "entityPermissions" . }}

{{ template "recursiveGetEnums" (arr .e.CompleteFields .e.Upper)}}

{{ template "entityDistinctOperations" . }}

{{ if .e.Messages }}
{{ template "messageCode" (arr .e.Name .e.Messages $.wsprefix)}}
{{ end }}


{{ if .e.Actions }}
	{{ template "actions-section" (arr .e.Actions $.wsprefix .e.Name )}}
{{ end }}

var {{ .e.EntityName }}Bundle = {{ $.wsprefix }}EntityBundle{
	Permissions: ALL_{{ .e.AllUpper }}_PERMISSIONS,

	// Cli command has been exluded, since we use module to wrap all the entities
	// to be more easier to wrap up.
	// Create your own bundle if you need with Cli
	//CliCommands: []cli.Command{
	//	{{ .e.Upper }}CliFn(),
	//},
	Actions: Get{{ .e.Upper }}Module2Actions(),
	MockProvider: {{ .e.Upper }}ImportMocks,
	AutoMigrationEntities: []interface{}{
		&{{ .e.EntityName }}{},
		{{ range .children }}
		&{{ .FullName }}{},
		{{ end }}

		{{ if .e.HasTranslations }}
  		&{{ .e.PolyglotName}}{},
		{{ end }}
  	},
}