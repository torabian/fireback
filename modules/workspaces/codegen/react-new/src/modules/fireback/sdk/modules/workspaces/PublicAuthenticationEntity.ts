/*
*	Generated by fireback 1.1.28
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
*/
    import {
        BaseDto,
        BaseEntity,
    } from "../../core/definitions"
    import {
        PassportEntity,
    } from "./PassportEntity"
    import {
        UserEntity,
    } from "./UserEntity"
// In this section we have sub entities related to this object
// Class body
export type PublicAuthenticationEntityKeys =
  keyof typeof PublicAuthenticationEntity.Fields;
export class PublicAuthenticationEntity extends BaseEntity {
  public children?: PublicAuthenticationEntity[] | null;
  public user?: UserEntity | null;
  /**
  If the application requires totp dual factor upon account creation, we create a secret here and pass the link
  */
  public totpSecret?: string | null;
  /**
  The url which will be converted into QR code on client side to scan
  */
  public totpLink?: string | null;
  public passport?: PassportEntity | null;
      passportId?: string | null;
  /**
  This is a long hash generated and will be used to authenticate user after he confirmed the otp to finish the signup process and add more information before creating an account
  */
  public sessionSecret?: string | null;
  public passportValue?: string | null;
  public isInCreationProcess?: boolean | null;
  public status?: string | null;
  public blockedUntil?: string | null;
  public otp?: string | null;
  public recoveryAbsoluteUrl?: string | null;
  public static Navigation = {
      edit(uniqueId: string, locale?: string) {
          return `${locale ? '/' + locale : ''}/public-authentication/edit/${uniqueId}`;
      },
      create(locale?: string) {
          return `${locale ? '/' + locale : ''}/public-authentication/new`;
      },
      single(uniqueId: string, locale?: string) {
          return `${locale ? '/' + locale : ''}/public-authentication/${uniqueId}`;
      },
      query(params: any = {}, locale?: string) {
          return `${locale ? '/' + locale : ''}/public-authentications`;
      },
      /**
      * Use R series while building router in CRA or nextjs, or react navigation for react Native
      * Might be useful in Angular as well.
      **/
      Redit: "public-authentication/edit/:uniqueId",
      Rcreate: "public-authentication/new",
      Rsingle: "public-authentication/:uniqueId",
      Rquery: "public-authentications",
  };
  public static definition = {
  "name": "publicAuthentication",
  "features": {},
  "security": {
    "writeOnRoot": true
  },
  "gormMap": {},
  "fields": [
    {
      "name": "user",
      "type": "one",
      "target": "UserEntity",
      "computedType": "UserEntity",
      "gormMap": {}
    },
    {
      "name": "totpSecret",
      "description": "If the application requires totp dual factor upon account creation, we create a secret here and pass the link",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "totpLink",
      "description": "The url which will be converted into QR code on client side to scan",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "passport",
      "type": "one",
      "target": "PassportEntity",
      "computedType": "PassportEntity",
      "gormMap": {}
    },
    {
      "name": "sessionSecret",
      "description": "This is a long hash generated and will be used to authenticate user after he confirmed the otp to finish the signup process and add more information before creating an account",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "passportValue",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "isInCreationProcess",
      "type": "bool",
      "computedType": "boolean",
      "gormMap": {}
    },
    {
      "name": "status",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "blockedUntil",
      "type": "datenano",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "otp",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "recoveryAbsoluteUrl",
      "type": "string",
      "computedType": "string",
      "gormMap": {},
      "sql": "-"
    }
  ],
  "cliShort": "pa",
  "description": "Keeps information about user onboarding, otp state, and other things which are necessary for onboarding new users in multiple endpoints"
}
public static Fields = {
  ...BaseEntity.Fields,
      user$: `user`,
        user: UserEntity.Fields,
      totpSecret: `totpSecret`,
      totpLink: `totpLink`,
          passportId: `passportId`,
      passport$: `passport`,
        passport: PassportEntity.Fields,
      sessionSecret: `sessionSecret`,
      passportValue: `passportValue`,
      isInCreationProcess: `isInCreationProcess`,
      status: `status`,
      blockedUntil: `blockedUntil`,
      otp: `otp`,
      recoveryAbsoluteUrl: `recoveryAbsoluteUrl`,
}
}
