/*
*	Generated by fireback 1.2.2
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
*/
    import {
        BaseDto,
        BaseEntity,
    } from "../../core/definitions"
// In this section we have sub entities related to this object
// Class body
export type WebPushConfigEntityKeys =
  keyof typeof WebPushConfigEntity.Fields;
export class WebPushConfigEntity extends BaseEntity {
  public children?: WebPushConfigEntity[] | null;
  /**
  The json content of the web push after getting it from browser
  */
  public subscription?: any | null;
  public static Navigation = {
      edit(uniqueId: string, locale?: string) {
          return `${locale ? '/' + locale : '..'}/web-push-config/edit/${uniqueId}`;
      },
      create(locale?: string) {
          return `${locale ? '/' + locale : '..'}/web-push-config/new`;
      },
      single(uniqueId: string, locale?: string) {
          return `${locale ? '/' + locale : '..'}/web-push-config/${uniqueId}`;
      },
      query(params: any = {}, locale?: string) {
          return `${locale ? '/' + locale : '..'}/web-push-configs`;
      },
      /**
      * Use R series while building router in CRA or nextjs, or react navigation for react Native
      * Might be useful in Angular as well.
      **/
      Redit: "web-push-config/edit/:uniqueId",
      Rcreate: "web-push-config/new",
      Rsingle: "web-push-config/:uniqueId",
      Rquery: "web-push-configs",
  };
  public static definition = {
  "rpc": {
    "query": {}
  },
  "name": "webPushConfig",
  "distinctBy": "user",
  "features": {},
  "security": {
    "resolveStrategy": "user"
  },
  "gormMap": {},
  "fields": [
    {
      "name": "subscription",
      "description": "The json content of the web push after getting it from browser",
      "type": "json",
      "validate": "required",
      "computedType": "any",
      "gormMap": {}
    }
  ],
  "description": "Keep the web push notification configuration for each user"
}
public static Fields = {
  ...BaseEntity.Fields,
      subscription: `subscription`,
}
}
