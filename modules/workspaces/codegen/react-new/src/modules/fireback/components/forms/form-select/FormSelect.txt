import Select from "react-select";
import {
  BaseFormElement,
  BaseFormElementProps,
} from "../base-form-element/BaseFormElement";
import classNames from "classnames";
import { useT } from "../../../hooks/useT";

export interface FormSelectProps<T, ValueIdentifier = string>
  extends BaseFormElementProps {
  /**
   * @description label is what user will see as the text on top of the input or near
   * it depenging on the design.
   */
  label?: string;

  /**
   * @description placeholder is the same common placeholder element of any input
   */
  placeholder?: string;

  /**
   * @description value is the form element actual values which will be read from the form object,
   * regardless of the options type
   */
  value?: ValueIdentifier | ValueIdentifier[];

  /**
   * @description errorMessage is usually a string message when available it will make the field red
   * and show the message below it to the user. Can be directly read from the formik errors object as well
   */
  errorMessage?: string;

  /**
   * @description Will be triggered regardless of the usage when a value has been changed.
   * @returns
   */
  onChange?: (value: ValueIdentifier) => void;

  /**
   * @description keyExtractor extract the value of the input which will be compared to determine
   * which option is selected, as well as will be used upon a new selection
   */
  keyExtractor?: (t: T) => ValueIdentifier;

  /**
   * @description List of the items which will be used to show as options. This is not async,
   * if you want to have dynamic options maybe better to use FormEntitySelect.
   */
  options?: T[];

  /**
   * @description children object.
   */
  children?: any;

  /**
   * @description fnLabelFormat will be called on each item in the list, to create the string which user
   * will be seeing.
   */
  fnLabelFormat?: (item: T) => string;

  /**
   * @description Triggers each type user types into the auto suggestion list.
   */
  onInputChange?: (t: string) => void;

  /**
   * @description allows the user to have multiple selection
   */
  multiple?: boolean;

  /**
   * @description Skips the autocompletion component and renders the html <select... components
   * instead regardless.
   */
  convertToNative?: boolean;

  /**
   * @description You can have different type of the select.
   * @enum auto means automatically decideds for you
   * @enum verbose means it would show the options as a radio list so user can choose.
   */
  type?: "auto" | "verbose";

  /**
   * @description name property of the input will appear on html[name=xxx]
   */
  name?: string;
}

function VerboseSelect<T, ValueIdentifier>(
  props: FormSelectProps<T, ValueIdentifier>
) {
  return (
    <BaseFormElement {...props}>
      <div className="form-select-verbos">
        {props.options?.map((item) => {
          const value = props.keyExtractor(item);

          return (
            <label key={`${value}`}>
              <input
                name={props.name}
                type="radio"
                onClick={(t) => {
                  props.onChange(value);
                }}
                value={`${value}`}
                checked={value === props.value}
              />
              {props.fnLabelFormat(item)}
            </label>
          );
        })}
      </div>
    </BaseFormElement>
  );
}

export function FormSelect<T>(props: FormSelectProps<T>) {
  const t = useT();
  const value = props.options?.find(
    (item) => props.keyExtractor(item) === props.value
  );

  const keyExtractor = (t: T) => {
    if (props.keyExtractor) {
      return props.keyExtractor;
    }

    return (t) => JSON.stringify(t);
  };

  if (props.type === "verbose") {
    return <VerboseSelect {...props} />;
  }

  return (
    <BaseFormElement {...props}>
      {props.children}
      {props.convertToNative ? (
        <select
          value={props.value}
          multiple={props.multiple}
          onChange={(e) => {
            const item = props.options?.find(
              (t: any) => t.uniqueId === e.target.value
            ) as any;

            props.onChange(item);
          }}
          className={classNames(
            "form-select",
            props.errorMessage && "is-invalid",
            props.validMessage && "is-valid"
          )}
          disabled={props.disabled}
          aria-label="Default select example"
        >
          <option key={undefined} value={""}>
            {t.selectPlaceholder}
          </option>
          {props.options?.filter(Boolean).map((t) => {
            const itemValue = props.keyExtractor(t);
            return (
              <option key={itemValue} value={itemValue}>
                {props.fnLabelFormat(t)}
              </option>
            );
          })}
        </select>
      ) : (
        <Select
          value={value}
          onChange={(newValue) => {
            if (props.multiple) {
              props.onChange?.(
                (newValue as any).map((v) => props.keyExtractor(v as any))
              );
            } else {
              props.onChange?.(props.keyExtractor(newValue as any));
            }
            console.log(10, newValue);
          }}
          isMulti={props.multiple}
          classNames={{
            container(propsx: any) {
              return classNames(
                props.errorMessage &&
                  " form-control form-control-no-padding is-invalid",
                props.validMessage && "is-valid"
              );
            },
            control(props2: any) {
              return classNames("form-control form-control-no-padding");
            },
            menu(props) {
              return "react-select-menu-area";
            },
          }}
          isSearchable
          options={props.options}
          placeholder={t.searchplaceholder}
          noOptionsMessage={() => t.noOptions}
          getOptionValue={props.keyExtractor}
          formatOptionLabel={props.fnLabelFormat}
          onInputChange={props.onInputChange}
        />
      )}
    </BaseFormElement>
  );
}
