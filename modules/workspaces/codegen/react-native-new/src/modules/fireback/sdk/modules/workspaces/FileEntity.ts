/*
*	Generated by fireback 1.1.28
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
*/
    import {
        BaseDto,
        BaseEntity,
    } from "../../core/definitions"
// In this section we have sub entities related to this object
export class FileVariations extends BaseEntity {
  public name?: string | null;
}
// Class body
export type FileEntityKeys =
  keyof typeof FileEntity.Fields;
export class FileEntity extends BaseEntity {
  public children?: FileEntity[] | null;
  public name?: string | null;
  public diskPath?: string | null;
  public size?: number | null;
  public virtualPath?: string | null;
  public type?: string | null;
  public variations?: FileVariations[] | null;
  public static Navigation = {
      edit(uniqueId: string, locale?: string) {
          return `${locale ? '/' + locale : ''}/file/edit/${uniqueId}`;
      },
      create(locale?: string) {
          return `${locale ? '/' + locale : ''}/file/new`;
      },
      single(uniqueId: string, locale?: string) {
          return `${locale ? '/' + locale : ''}/file/${uniqueId}`;
      },
      query(params: any = {}, locale?: string) {
          return `${locale ? '/' + locale : ''}/files`;
      },
      /**
      * Use R series while building router in CRA or nextjs, or react navigation for react Native
      * Might be useful in Angular as well.
      **/
      Redit: "file/edit/:uniqueId",
      Rcreate: "file/new",
      Rsingle: "file/:uniqueId",
      Rquery: "files",
      rVariationsCreate: "file/:linkerId/variations/new",
      rVariationsEdit: "file/:linkerId/variations/edit/:uniqueId",
      editVariations(linkerId: string, uniqueId: string, locale?: string) {
          return `${locale ? '/' + locale : ''}/file/${linkerId}/variations/edit/${uniqueId}`;
      },
      createVariations(linkerId: string, locale?: string) {
          return `${locale ? '/' + locale : ''}/file/${linkerId}/variations/new`;
      },
  };
  public static definition = {
  "name": "file",
  "features": {},
  "gormMap": {},
  "fields": [
    {
      "name": "name",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "diskPath",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "size",
      "type": "int64",
      "computedType": "number",
      "gormMap": {}
    },
    {
      "name": "virtualPath",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "type",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "variations",
      "type": "array",
      "computedType": "FileVariations[]",
      "gormMap": {},
      "-": "FileVariations",
      "fields": [
        {
          "name": "name",
          "type": "string",
          "computedType": "string",
          "gormMap": {}
        }
      ],
      "linkedTo": "FileEntity"
    }
  ],
  "description": "File manager, uploading files and actions related."
}
public static Fields = {
  ...BaseEntity.Fields,
      name: `name`,
      diskPath: `diskPath`,
      size: `size`,
      virtualPath: `virtualPath`,
      type: `type`,
      variations$: `variations`,
      variationsAt: (index: number) => {
        return {
          $: `variations[${index}]`,
  ...BaseEntity.Fields,
      name: `variations[${index}].name`,
        };
      },
}
}
