package workspaces

/*
*	Generated by fireback 1.2.1
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"encoding/json"
	"fmt"
	"github.com/urfave/cli"
	"strings"
)

func CastOtpAuthenticateFromCli(c *cli.Context) *OtpAuthenticateDto {
	template := &OtpAuthenticateDto{}
	if c.IsSet("value") {
		template.Value = c.String("value")
	}
	if c.IsSet("otp") {
		template.Otp = c.String("otp")
	}
	if c.IsSet("type") {
		template.Type = c.String("type")
	}
	if c.IsSet("password") {
		template.Password = c.String("password")
	}
	return template
}

var OtpAuthenticateDtoCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "value",
		Required: true,
		Usage:    `value (string)`,
	},
	&cli.StringFlag{
		Name:     "otp",
		Required: false,
		Usage:    `otp (string)`,
	},
	&cli.StringFlag{
		Name:     "type",
		Required: true,
		Usage:    `type (string)`,
	},
	&cli.StringFlag{
		Name:     "password",
		Required: true,
		Usage:    `password (string)`,
	},
}

type OtpAuthenticateDto struct {
	Value    string `json:"value" yaml:"value"  validate:"required"        `
	Otp      string `json:"otp" yaml:"otp"        `
	Type     string `json:"type" yaml:"type"  validate:"required"        `
	Password string `json:"password" yaml:"password"  validate:"required"        `
}
type OtpAuthenticateDtoList struct {
	Items []*OtpAuthenticateDto
}

func NewOtpAuthenticateDtoList(items []*OtpAuthenticateDto) *OtpAuthenticateDtoList {
	return &OtpAuthenticateDtoList{
		Items: items,
	}
}
func (x *OtpAuthenticateDtoList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *OtpAuthenticateDto) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	// Intentional trim (so strings lib is always imported)
	return strings.TrimSpace("")
}
func (x *OtpAuthenticateDto) JsonPrint() {
	fmt.Println(x.Json())
}

// This is an experimental way to create new dtos, with exluding the pointers as helper.
func NewOtpAuthenticateDto(
	Value string,
	Otp string,
	Type string,
	Password string,
) OtpAuthenticateDto {
	return OtpAuthenticateDto{
		Value:    Value,
		Otp:      Otp,
		Type:     Type,
		Password: Password,
	}
}
