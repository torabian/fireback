package workspaces

/*
*	Generated by fireback 1.2.1
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"embed"
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/gookit/event"
	jsoniter "github.com/json-iterator/go"
	"github.com/schollz/progressbar/v3"
	metas "github.com/torabian/fireback/modules/workspaces/metas"
	mocks "github.com/torabian/fireback/modules/workspaces/mocks/Role"
	seeders "github.com/torabian/fireback/modules/workspaces/seeders/Role"
	"github.com/urfave/cli"
	"gopkg.in/yaml.v2"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	reflect "reflect"
	"strings"
)

var roleSeedersFs = &seeders.ViewsFs

func ResetRoleSeeders(fs *embed.FS) {
	roleSeedersFs = fs
}

type RoleEntityQs struct {
	Name         QueriableField `cli:"name" table:"role" column:"name" qs:"name"`
	Capabilities QueriableField `cli:"capabilities" table:"role" column:"capabilities" qs:"capabilities"`
}

func (x *RoleEntityQs) GetQuery() string {
	return GenerateQueryStringStyle(reflect.ValueOf(x), "")
}

var RoleQsFlags = []cli.Flag{
	&cli.StringFlag{
		Name:  "name",
		Usage: "",
	},
	&cli.StringFlag{
		Name:  "capabilities",
		Usage: "",
	},
}

type RoleEntity struct {
	// Defines the visibility of the record in the table.
	// Visibility is a detailed topic, you can check all of the visibility values in workspaces/visibility.go
	// by default, visibility of record are 0, means they are protected by the workspace
	// which are being created, and visible to every member of the workspace
	Visibility String `json:"visibility,omitempty" yaml:"visibility,omitempty"`
	// The unique-id of the workspace which content belongs to. Upon creation this will be designated
	// to the selected workspace by user, if they have write access. You can change this value
	// or prevent changes to it manually (on root features for example modifying other workspace)
	WorkspaceId String `json:"workspaceId,omitempty" yaml:"workspaceId,omitempty"`
	// The unique-id of the parent table, which this record is being linked to.
	// used internally for making relations in fireback, generally does not need manual changes
	// or modification by the developer or user. For example, if you have a object inside an object
	// the unique-id of the parent will be written in the child.
	LinkerId String `json:"linkerId,omitempty" yaml:"linkerId,omitempty"`
	// Used for recursive or parent-child operations. Some tables, are having nested relations,
	// and this field makes the table self refrenceing. ParentId needs to exist in the table before
	// creating of modifying a record.
	ParentId String `json:"parentId,omitempty" yaml:"parentId,omitempty"`
	// Makes a field deletable. Some records should not be deletable at all.
	// default it's true.
	IsDeletable *bool `json:"isDeletable,omitempty" yaml:"isDeletable,omitempty" gorm:"default:true"`
	// Makes a field updatable. Some records should not be updatable at all.
	// default it's true.
	IsUpdatable *bool `json:"isUpdatable,omitempty" yaml:"isUpdatable,omitempty" gorm:"default:true"`
	// The unique-id of the user which is creating the record, or the record belongs to.
	// Administration might want to change this to any user, by default Fireback fills
	// it to the current authenticated user.
	UserId String `json:"userId,omitempty" yaml:"userId,omitempty"`
	// General mechanism to rank the elements. From code perspective, it's just a number,
	// but you can sort it based on any logic for records to make a ranking, sorting.
	// they should not be unique across a table.
	Rank Int64 `json:"rank,omitempty" gorm:"type:int;name:rank"`
	// Primary numeric key in the database. This value is not meant to be exported to public
	// or be used to access data at all. Rather a mechanism of indexing columns internally
	// or cursor pagination in future releases of fireback, or better search performance.
	ID uint `gorm:"primaryKey;autoIncrement" json:"-" yaml:"-"`
	// Unique id of the record across the table. This value will be accessed from public APIs,
	// and many other places intead of numeric ID property.
	// Upon generation, a UUID automatically is being assigned, and if user has specified the
	// Unique id in the post body, it will be used. This mechanism allows to manage unsaved
	// content on front-end much easier than requiring parent to exists first.
	UniqueId string `json:"uniqueId,omitempty" gorm:"unique;not null;size:100;" yaml:"uniqueId,omitempty"`
	// The time that the record has been created in nano-seconds.
	// the field will be automatically populated by gorm orm.
	Created int64 `json:"created,omitempty" yaml:"created,omitempty" gorm:"autoUpdateTime:nano"`
	// The time that the record has been updated in nano-seconds.
	// the field will be automatically populated by gorm orm.
	Updated int64 `json:"updated,omitempty" yaml:"updated,omitempty"`
	// The time that the record has been deleted softly (means the data still exists in database, but no longer visible to any feature) in nano seconds
	// you need to make sure check this field if writing custom sql queries.
	// the field will be automatically populated by gorm orm.
	Deleted int64 `json:"deleted,omitempty" yaml:"deleted,omitempty"`
	// Record creation date time formatting based on locale of the headers, or other
	// possible factors.
	CreatedFormatted string `json:"createdFormatted,omitempty" yaml:"createdFormatted,omitempty" sql:"-" gorm:"-"`
	// Record update date time formatting based on locale of the headers, or other
	// possible factors.
	UpdatedFormatted   string              `json:"updatedFormatted,omitempty" yaml:"updatedFormatted,omitempty" sql:"-" gorm:"-"`
	Name               string              `json:"name" yaml:"name"  validate:"required,omitempty,min=1,max=200"        `
	Capabilities       []*CapabilityEntity `json:"capabilities" yaml:"capabilities"    gorm:"many2many:role_capabilities;foreignKey:UniqueId;references:UniqueId"      `
	CapabilitiesListId []string            `json:"capabilitiesListId" yaml:"capabilitiesListId" gorm:"-" sql:"-"`
	Children           []*RoleEntity       `csv:"-" gorm:"-" sql:"-" json:"children,omitempty" yaml:"children,omitempty"`
	LinkedTo           *RoleEntity         `csv:"-" yaml:"-" gorm:"-" json:"-" sql:"-"`
}

func RoleEntityStream(q QueryDSL) (chan []*RoleEntity, *QueryResultMeta, error) {
	cn := make(chan []*RoleEntity)
	q.ItemsPerPage = 50
	q.StartIndex = 0
	_, qrm, err := RoleActions.Query(q)
	if err != nil {
		return nil, nil, err
	}
	go func() {
		defer close(cn)
		for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
			items, _, _ := RoleActions.Query(q)
			i += q.ItemsPerPage
			q.StartIndex = i
			cn <- items
		}
	}()
	return cn, qrm, nil
}

type RoleEntityList struct {
	Items []*RoleEntity
}

func NewRoleEntityList(items []*RoleEntity) *RoleEntityList {
	return &RoleEntityList{
		Items: items,
	}
}
func (x *RoleEntityList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *RoleEntityList) ToTree() *TreeOperation[RoleEntity] {
	return NewTreeOperation(
		x.Items,
		func(t *RoleEntity) string {
			if !t.ParentId.Valid {
				return ""
			}
			return t.ParentId.String
		},
		func(t *RoleEntity) string {
			return t.UniqueId
		},
	)
}

var RolePreloadRelations []string = []string{}

type roleActionsSig struct {
	Update         func(query QueryDSL, dto *RoleEntity) (*RoleEntity, *IError)
	Create         func(dto *RoleEntity, query QueryDSL) (*RoleEntity, *IError)
	Upsert         func(dto *RoleEntity, query QueryDSL) (*RoleEntity, *IError)
	SeederInit     func() *RoleEntity
	Remove         func(query QueryDSL) (int64, *IError)
	MultiInsert    func(dtos []*RoleEntity, query QueryDSL) ([]*RoleEntity, *IError)
	GetOne         func(query QueryDSL) (*RoleEntity, *IError)
	GetByWorkspace func(query QueryDSL) (*RoleEntity, *IError)
	Query          func(query QueryDSL) ([]*RoleEntity, *QueryResultMeta, error)
}

var RoleActions roleActionsSig = roleActionsSig{
	Update:         RoleActionUpdateFn,
	Create:         RoleActionCreateFn,
	Upsert:         RoleActionUpsertFn,
	Remove:         RoleActionRemoveFn,
	SeederInit:     RoleActionSeederInitFn,
	MultiInsert:    RoleMultiInsertFn,
	GetOne:         RoleActionGetOneFn,
	GetByWorkspace: RoleActionGetByWorkspaceFn,
	Query:          RoleActionQueryFn,
}

func RoleActionUpsertFn(dto *RoleEntity, query QueryDSL) (*RoleEntity, *IError) {
	return nil, nil
}

var ROLE_EVENT_CREATED = "role.created"
var ROLE_EVENT_UPDATED = "role.updated"
var ROLE_EVENT_DELETED = "role.deleted"
var ROLE_EVENTS = []string{
	ROLE_EVENT_CREATED,
	ROLE_EVENT_UPDATED,
	ROLE_EVENT_DELETED,
}

type RoleFieldMap struct {
	Name         TranslatedString `yaml:"name"`
	Capabilities TranslatedString `yaml:"capabilities"`
}

var RoleEntityMetaConfig map[string]int64 = map[string]int64{}
var RoleEntityJsonSchema = ExtractEntityFields(reflect.ValueOf(&RoleEntity{}))

func entityRoleFormatter(dto *RoleEntity, query QueryDSL) {
	if dto == nil {
		return
	}
	if dto.Created > 0 {
		dto.CreatedFormatted = FormatDateBasedOnQuery(dto.Created, query)
	}
	if dto.Updated > 0 {
		dto.CreatedFormatted = FormatDateBasedOnQuery(dto.Updated, query)
	}
}
func RoleActionSeederMultiple(query QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	batchSize := 100
	bar := progressbar.Default(int64(count))
	// Collect entities in batches
	var entitiesBatch []*RoleEntity
	for i := 1; i <= count; i++ {
		entity := RoleActions.SeederInit()
		entitiesBatch = append(entitiesBatch, entity)
		// When batch size is reached, perform the batch insert
		if len(entitiesBatch) == batchSize || i == count {
			// Insert batch
			_, err := RoleActions.MultiInsert(entitiesBatch, query)
			if err == nil {
				successInsert += len(entitiesBatch)
			} else {
				fmt.Println(err)
				failureInsert += len(entitiesBatch)
			}
			// Clear the batch after insert
			entitiesBatch = nil
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func RoleActionSeeder(query QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	bar := progressbar.Default(int64(count))
	for i := 1; i <= count; i++ {
		entity := RoleActions.SeederInit()
		_, err := RoleActions.Create(entity, query)
		if err == nil {
			successInsert++
		} else {
			fmt.Println(err)
			failureInsert++
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func (x *RoleEntity) Seeder() string {
	obj := RoleActions.SeederInit()
	v, _ := json.MarshalIndent(obj, "", "  ")
	return string(v)
}
func RoleActionSeederInitFn() *RoleEntity {
	entity := &RoleEntity{
		CapabilitiesListId: []string{"~"},
		Capabilities:       []*CapabilityEntity{{}},
	}
	return entity
}
func RoleAssociationCreate(dto *RoleEntity, query QueryDSL) error {
	{
		if dto.CapabilitiesListId != nil && len(dto.CapabilitiesListId) > 0 {
			var items []CapabilityEntity
			// this operation is based on unique_id not primary key
			op := query.Tx.Where(dto.CapabilitiesListId)
			for _, item := range dto.CapabilitiesListId {
				op = op.Or("unique_id = ?", item)
			}
			err := op.Find(&items).Error
			if err != nil {
				return err
			}
			err = query.Tx.Model(dto).Association("Capabilities").Replace(items)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

/**
* These kind of content are coming from another entity, which is indepndent module
* If we want to create them, we need to do it before. This is not association.
**/
func RoleRelationContentCreate(dto *RoleEntity, query QueryDSL) error {
	return nil
}
func RoleRelationContentUpdate(dto *RoleEntity, query QueryDSL) error {
	return nil
}
func RolePolyglotUpdateHandler(dto *RoleEntity, query QueryDSL) {
	if dto == nil {
		return
	}
}

/**
 * This will be validating your entity fully. Important note is that, you add validate:* tag
 * in your entity, it will automatically work here. For slices inside entity, make sure you add
 * extra line of AppendSliceErrors, otherwise they won't be detected
 */
func RoleValidator(dto *RoleEntity, isPatch bool) *IError {
	err := CommonStructValidatorPointer(dto, isPatch)
	return err
}

// Creates a set of natural language queries, which can be used with
// AI tools to create content or help with some tasks
var RoleAskCmd cli.Command = cli.Command{
	Name:  "nlp",
	Usage: "Set of natural language queries which helps creating content or data",
	Subcommands: []cli.Command{
		{
			Name:  "sample",
			Usage: "Asks for generating sample by giving an example data",
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:  "format",
					Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
					Value: "yaml",
				},
				&cli.IntFlag{
					Name:  "count",
					Usage: "How many samples to ask",
					Value: 30,
				},
			},
			Action: func(c *cli.Context) error {
				v := &RoleEntity{}
				format := c.String("format")
				request := "\033[1m" + `
I need you to create me an array of exact signature as the example given below,
with at least ` + fmt.Sprint(c.String("count")) + ` items, mock the content with few words, and guess the possible values
based on the common sense. I need the output to be a valid ` + format + ` file.
Make sure you wrap the entire array in 'items' field. Also before that, I provide some explanation of each field:
Name: (type: string) Description: 
Capabilities: (type: many2many) Description: 
And here is the actual object signature:
` + v.Seeder() + `
`
				fmt.Println(request)
				return nil
			},
		},
	},
}

func RoleEntityPreSanitize(dto *RoleEntity, query QueryDSL) {
}
func RoleEntityBeforeCreateAppend(dto *RoleEntity, query QueryDSL) {
	if dto.UniqueId == "" {
		dto.UniqueId = UUID()
	}
	dto.WorkspaceId = NewString(query.WorkspaceId)
	dto.UserId = NewString(query.UserId)
	RoleRecursiveAddUniqueId(dto, query)
}
func RoleRecursiveAddUniqueId(dto *RoleEntity, query QueryDSL) {
}

/*
*
	Batch inserts, do not have all features that create
	operation does. Use it with unnormalized content,
	or read the source code carefully.
  This is not marked as an action, because it should not be available publicly
  at this moment.
*
*/
func RoleMultiInsertFn(dtos []*RoleEntity, query QueryDSL) ([]*RoleEntity, *IError) {
	if len(dtos) > 0 {
		for index := range dtos {
			RoleEntityPreSanitize(dtos[index], query)
			RoleEntityBeforeCreateAppend(dtos[index], query)
		}
		var dbref *gorm.DB = nil
		if query.Tx == nil {
			dbref = GetDbRef()
		} else {
			dbref = query.Tx
		}
		query.Tx = dbref
		err := dbref.Create(&dtos).Error
		if err != nil {
			return nil, GormErrorToIError(err)
		}
	}
	return dtos, nil
}
func RoleActionBatchCreateFn(dtos []*RoleEntity, query QueryDSL) ([]*RoleEntity, *IError) {
	if dtos != nil && len(dtos) > 0 {
		items := []*RoleEntity{}
		for _, item := range dtos {
			s, err := RoleActions.Create(item, query)
			if err != nil {
				return nil, err
			}
			items = append(items, s)
		}
		return items, nil
	}
	return dtos, nil
}
func RoleDeleteEntireChildren(query QueryDSL, dto *RoleEntity) *IError {
	// intentionally removed this. It's hard to implement it, and probably wrong without
	// proper on delete cascade
	return nil
}
func RoleActionCreateFn(dto *RoleEntity, query QueryDSL) (*RoleEntity, *IError) {
	// 1. Validate always
	if iError := RoleValidator(dto, false); iError != nil {
		return nil, iError
	}
	// 1.5 Sanitize the content coming of the front-end
	RoleEntityPreSanitize(dto, query)
	// 2. Append the necessary information about user, workspace
	RoleEntityBeforeCreateAppend(dto, query)
	// 3. Create other entities if we want select from them
	RoleRelationContentCreate(dto, query)
	// 4. Create the entity
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = GetDbRef()
	} else {
		dbref = query.Tx
	}
	query.Tx = dbref
	err := dbref.Create(&dto).Error
	if err != nil {
		err := GormErrorToIError(err)
		return nil, err
	}
	// 5. Create sub entities, objects or arrays, association to other entities
	RoleAssociationCreate(dto, query)
	// 6. Fire the event into system
	event.MustFire(ROLE_EVENT_CREATED, event.M{
		"entity":    dto,
		"entityKey": GetTypeString(&RoleEntity{}),
		"target":    "workspace",
		"unqiueId":  query.WorkspaceId,
	})
	return dto, nil
}
func RoleActionGetOneFn(query QueryDSL) (*RoleEntity, *IError) {
	refl := reflect.ValueOf(&RoleEntity{})
	item, err := GetOneEntity[RoleEntity](query, refl)
	entityRoleFormatter(item, query)
	return item, err
}
func RoleActionGetByWorkspaceFn(query QueryDSL) (*RoleEntity, *IError) {
	refl := reflect.ValueOf(&RoleEntity{})
	item, err := GetOneByWorkspaceEntity[RoleEntity](query, refl)
	entityRoleFormatter(item, query)
	return item, err
}
func RoleActionQueryFn(query QueryDSL) ([]*RoleEntity, *QueryResultMeta, error) {
	refl := reflect.ValueOf(&RoleEntity{})
	items, meta, err := QueryEntitiesPointer[RoleEntity](query, refl)
	for _, item := range items {
		entityRoleFormatter(item, query)
	}
	return items, meta, err
}

var roleMemoryItems []*RoleEntity = []*RoleEntity{}

func RoleEntityIntoMemory() {
	q := QueryDSL{
		ItemsPerPage: 500,
		StartIndex:   0,
	}
	_, qrm, _ := RoleActions.Query(q)
	for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
		items, _, _ := RoleActions.Query(q)
		roleMemoryItems = append(roleMemoryItems, items...)
		i += q.ItemsPerPage
		q.StartIndex = i
	}
}
func RoleMemGet(id uint) *RoleEntity {
	for _, item := range roleMemoryItems {
		if item.ID == id {
			return item
		}
	}
	return nil
}
func RoleMemJoin(items []uint) []*RoleEntity {
	res := []*RoleEntity{}
	for _, item := range items {
		v := RoleMemGet(item)
		if v != nil {
			res = append(res, v)
		}
	}
	return res
}
func RoleUpdateExec(dbref *gorm.DB, query QueryDSL, fields *RoleEntity) (*RoleEntity, *IError) {
	uniqueId := fields.UniqueId
	query.TriggerEventName = ROLE_EVENT_UPDATED
	RoleEntityPreSanitize(fields, query)
	var item RoleEntity
	var itemRefetched RoleEntity
	// If the entity is distinct by workspace, then the Query.WorkspaceId
	// which is selected is being used as the condition for create or update
	// if not, the unique Id is being used
	cond2 := &RoleEntity{UniqueId: uniqueId}
	q := dbref.
		Where(cond2).
		FirstOrCreate(&item)
	err := q.UpdateColumns(fields).Error
	if err != nil {
		return nil, GormErrorToIError(err)
	}
	query.Tx = dbref
	RoleRelationContentUpdate(fields, query)
	RolePolyglotUpdateHandler(fields, query)
	if ero := RoleDeleteEntireChildren(query, fields); ero != nil {
		return nil, ero
	}
	// @meta(update has many)
	if fields.CapabilitiesListId != nil {
		var items []CapabilityEntity
		if len(fields.CapabilitiesListId) > 0 {
			dbref.
				Where("unique_id IN ?", fields.CapabilitiesListId).
				Find(&items)
		}
		dbref.
			Model(&RoleEntity{UniqueId: uniqueId}).
			Association("Capabilities").
			Clear()
		dbref.
			Model(&RoleEntity{UniqueId: uniqueId}).
			Where(&RoleEntity{UniqueId: uniqueId}).
			Association("Capabilities").
			Replace(items)
	}
	err = dbref.
		Preload(clause.Associations).
		Where(&RoleEntity{UniqueId: uniqueId}).
		First(&itemRefetched).Error
	if err != nil {
		return nil, GormErrorToIError(err)
	}
	event.MustFire(query.TriggerEventName, event.M{
		"entity":   &item,
		"target":   "workspace",
		"unqiueId": query.WorkspaceId,
	})
	return &itemRefetched, nil
}
func RoleActionUpdateFn(query QueryDSL, fields *RoleEntity) (*RoleEntity, *IError) {
	if fields == nil {
		return nil, Create401Error(&WorkspacesMessages.BodyIsMissing, []string{})
	}
	// 1. Validate always
	if iError := RoleValidator(fields, true); iError != nil {
		return nil, iError
	}
	// Let's not add this. I am not sure of the consequences
	// RoleRecursiveAddUniqueId(fields, query)
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = GetDbRef()
		var item *RoleEntity
		vf := dbref.Transaction(func(tx *gorm.DB) error {
			dbref = tx
			var err *IError
			item, err = RoleUpdateExec(dbref, query, fields)
			if err == nil {
				return nil
			} else {
				return err
			}
		})
		return item, CastToIError(vf)
	} else {
		dbref = query.Tx
		return RoleUpdateExec(dbref, query, fields)
	}
}

var RoleWipeCmd cli.Command = cli.Command{
	Name:  "wipe",
	Usage: "Wipes entire roles ",
	Action: func(c *cli.Context) error {
		query := CommonCliQueryDSLBuilderAuthorize(c, &SecurityModel{
			ActionRequires: []PermissionInfo{PERM_ROOT_ROLE_DELETE},
		})
		count, _ := RoleActionWipeClean(query)
		fmt.Println("Removed", count, "of entities")
		return nil
	},
}

func RoleActionRemoveFn(query QueryDSL) (int64, *IError) {
	refl := reflect.ValueOf(&RoleEntity{})
	query.ActionRequires = []PermissionInfo{PERM_ROOT_ROLE_DELETE}
	return RemoveEntity[RoleEntity](query, refl)
}
func RoleActionWipeClean(query QueryDSL) (int64, error) {
	var err error
	var count int64 = 0
	{
		subCount, subErr := WipeCleanEntity[RoleEntity]()
		if subErr != nil {
			fmt.Println("Error while wiping 'RoleEntity'", subErr)
			return count, subErr
		} else {
			count += subCount
		}
	}
	return count, err
}
func RoleActionBulkUpdate(
	query QueryDSL, dto *BulkRecordRequest[RoleEntity]) (
	*BulkRecordRequest[RoleEntity], *IError,
) {
	result := []*RoleEntity{}
	err := GetDbRef().Transaction(func(tx *gorm.DB) error {
		query.Tx = tx
		for _, record := range dto.Records {
			item, err := RoleActions.Update(query, record)
			if err != nil {
				return err
			} else {
				result = append(result, item)
			}
		}
		return nil
	})
	if err == nil {
		return dto, nil
	}
	return nil, err.(*IError)
}
func (x *RoleEntity) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}

var RoleEntityMeta = TableMetaData{
	EntityName:    "Role",
	ExportKey:     "roles",
	TableNameInDb: "role_entities",
	EntityObject:  &RoleEntity{},
	ExportStream:  RoleActionExportT,
	ImportQuery:   RoleActionImport,
}

func RoleActionExport(
	query QueryDSL,
) (chan []byte, *IError) {
	return YamlExporterChannel[RoleEntity](query, RoleActions.Query, RolePreloadRelations)
}
func RoleActionExportT(
	query QueryDSL,
) (chan []interface{}, *IError) {
	return YamlExporterChannelT[RoleEntity](query, RoleActions.Query, RolePreloadRelations)
}
func RoleActionImport(
	dto interface{}, query QueryDSL,
) *IError {
	var json = jsoniter.ConfigCompatibleWithStandardLibrary
	var content RoleEntity
	cx, err2 := json.Marshal(dto)
	if err2 != nil {
		return Create401Error(&WorkspacesMessages.InvalidContent, []string{})
	}
	json.Unmarshal(cx, &content)
	_, err := RoleActions.Create(&content, query)
	return err
}

var RoleCommonCliFlags = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "name",
		Required: true,
		Usage:    `name (string)`,
	},
	&cli.StringSliceFlag{
		Name:     "capabilities",
		Required: false,
		Usage:    `capabilities (many2many)`,
	},
}
var RoleCommonInteractiveCliFlags = []CliInteractiveFlag{
	{
		Name:        "name",
		StructField: "Name",
		Required:    true,
		Recommended: false,
		Usage:       `name`,
		Type:        "string",
	},
}
var RoleCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "name",
		Required: true,
		Usage:    `name (string)`,
	},
	&cli.StringSliceFlag{
		Name:     "capabilities",
		Required: false,
		Usage:    `capabilities (many2many)`,
	},
}
var RoleCreateCmd cli.Command = ROLE_ACTION_POST_ONE.ToCli()
var RoleCreateInteractiveCmd cli.Command = cli.Command{
	Name:  "ic",
	Usage: "Creates a new entity, using requied fields in an interactive name",
	Flags: []cli.Flag{
		&cli.BoolFlag{
			Name:  "all",
			Usage: "Interactively asks for all inputs, not only required ones",
		},
	},
	Action: func(c *cli.Context) {
		query := CommonCliQueryDSLBuilderAuthorize(c, &SecurityModel{
			ActionRequires: []PermissionInfo{PERM_ROOT_ROLE_CREATE},
		})
		entity := &RoleEntity{}
		PopulateInteractively(entity, c, RoleCommonInteractiveCliFlags)
		if entity, err := RoleActions.Create(entity, query); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := yaml.Marshal(entity)
			fmt.Println(FormatYamlKeys(string(f)))
		}
	},
}
var RoleUpdateCmd cli.Command = cli.Command{
	Name:    "update",
	Aliases: []string{"u"},
	Flags:   RoleCommonCliFlagsOptional,
	Usage:   "Updates entity by passing the parameters",
	Action: func(c *cli.Context) error {
		query := CommonCliQueryDSLBuilderAuthorize(c, &SecurityModel{
			ActionRequires: []PermissionInfo{PERM_ROOT_ROLE_UPDATE},
		})
		entity := CastRoleFromCli(c)
		if entity, err := RoleActions.Update(query, entity); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := json.MarshalIndent(entity, "", "  ")
			fmt.Println(string(f))
		}
		return nil
	},
}

func (x *RoleEntity) FromCli(c *cli.Context) *RoleEntity {
	return CastRoleFromCli(c)
}
func CastRoleFromCli(c *cli.Context) *RoleEntity {
	template := &RoleEntity{}
	if c.IsSet("uid") {
		template.UniqueId = c.String("uid")
	}
	if c.IsSet("pid") {
		template.ParentId = NewStringAutoNull(c.String("pid"))
	}
	if c.IsSet("name") {
		template.Name = c.String("name")
	}
	if c.IsSet("capabilities") {
		value := c.String("capabilities")
		template.CapabilitiesListId = strings.Split(value, ",")
	} else {
		template.CapabilitiesListId = CliInteractiveSearchAndSelect(
			"Select Capabilities",
			CapabilitiesActionQueryString,
		)
	}
	return template
}
func RoleSyncSeederFromFs(fsRef *embed.FS, fileNames []string, q QueryDSL) {
	SeederFromFSImport(
		q,
		RoleActions.Create,
		reflect.ValueOf(&RoleEntity{}).Elem(),
		fsRef,
		fileNames,
		true,
	)
}
func RoleSyncSeeders() {
	SeederFromFSImport(
		QueryDSL{WorkspaceId: USER_SYSTEM},
		RoleActions.Create,
		reflect.ValueOf(&RoleEntity{}).Elem(),
		roleSeedersFs,
		[]string{},
		true,
	)
}
func RoleImportMocks() {
	SeederFromFSImport(
		QueryDSL{},
		RoleActions.Create,
		reflect.ValueOf(&RoleEntity{}).Elem(),
		&mocks.ViewsFs,
		[]string{},
		false,
	)
}
func RoleWriteQueryMock(ctx MockQueryContext) {
	for _, lang := range ctx.Languages {
		itemsPerPage := 9999
		if ctx.ItemsPerPage > 0 {
			itemsPerPage = ctx.ItemsPerPage
		}
		f := QueryDSL{ItemsPerPage: itemsPerPage, Language: lang, WithPreloads: ctx.WithPreloads, Deep: true}
		items, count, _ := RoleActions.Query(f)
		result := QueryEntitySuccessResult(f, items, count)
		WriteMockDataToFile(lang, "", "Role", result)
	}
}
func RolesActionQueryString(keyword string, page int) ([]string, *QueryResultMeta, error) {
	searchFields := []string{
		`unique_id %"{keyword}"%`,
		`name %"{keyword}"%`,
	}
	m := func(item *RoleEntity) string {
		label := item.UniqueId
		// if item.Name != nil {
		// 	label += " >>> " + *item.Name
		// }
		return label
	}
	query := QueryStringCastCli(searchFields, keyword, page)
	items, meta, err := RoleActions.Query(query)
	stringItems := []string{}
	for _, item := range items {
		label := m(item)
		stringItems = append(stringItems, label)
	}
	return stringItems, meta, err
}

var RoleDevCommands = []cli.Command{
	RoleWipeCmd,
	{
		Name:  "mock",
		Usage: "Generates mock records based on the entity definition",
		Flags: []cli.Flag{
			&cli.IntFlag{
				Name:  "count",
				Usage: "how many activation key do you need to be generated and stored in database",
				Value: 10,
			},
			&cli.BoolFlag{
				Name:  "batch",
				Usage: "Multiple insert into database mode. Might miss children and relations at the moment",
			},
		},
		Action: func(c *cli.Context) error {
			query := CommonCliQueryDSLBuilderAuthorize(c, &SecurityModel{
				ActionRequires: []PermissionInfo{PERM_ROOT_ROLE_CREATE},
			})
			if c.Bool("batch") {
				RoleActionSeederMultiple(query, c.Int("count"))
			} else {
				RoleActionSeeder(query, c.Int("count"))
			}
			return nil
		},
	},
	{
		Name:    "init",
		Aliases: []string{"i"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Creates a basic seeder file for you, based on the definition module we have. You can populate this file as an example",
		Action: func(c *cli.Context) error {
			seed := RoleActions.SeederInit()
			CommonInitSeeder(strings.TrimSpace(c.String("format")), seed)
			return nil
		},
	},
	cli.Command{
		Name:  "mlist",
		Usage: "Prints the list of embedded mocks into the app",
		Action: func(c *cli.Context) error {
			if entity, err := GetSeederFilenames(&mocks.ViewsFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "msync",
		Usage: "Tries to sync mocks into the system",
		Action: func(c *cli.Context) error {
			CommonCliImportEmbedCmd(c,
				RoleActions.Create,
				reflect.ValueOf(&RoleEntity{}).Elem(),
				&mocks.ViewsFs,
			)
			return nil
		},
	},
}
var RoleImportExportCommands = []cli.Command{
	{
		Name:    "validate",
		Aliases: []string{"v"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "file",
				Usage: "Validates an import file, such as yaml, json, csv, and gives some insights how the after import it would look like",
				Value: "role-seeder-role.yml",
				// Uncomment before publish, they need to specify
				// Required: true,
			},
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Reads a yaml file containing an array of roles, you can run this to validate if your import file is correct, and how it would look like after import",
		Action: func(c *cli.Context) error {
			data := &[]RoleEntity{}
			ReadYamlFile(c.String("file"), data)
			fmt.Println(data)
			return nil
		},
	},
	cli.Command{
		Name:  "slist",
		Usage: "Prints the list of files attached to this module for syncing or bootstrapping project",
		Action: func(c *cli.Context) error {
			if entity, err := GetSeederFilenames(roleSeedersFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "ssync",
		Usage: "Tries to sync the embedded content into the database, the list could be seen by 'slist' command",
		Action: func(c *cli.Context) error {
			CommonCliImportEmbedCmd(c,
				RoleActions.Create,
				reflect.ValueOf(&RoleEntity{}).Elem(),
				roleSeedersFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:    "export",
		Aliases: []string{"e"},
		Flags: append(CommonQueryFlags,
			&cli.StringFlag{
				Name:     "file",
				Usage:    "The address of file you want the csv/yaml/json be exported to",
				Required: true,
			}),
		Usage: "Exports a query results into the csv/yaml/json format",
		Action: func(c *cli.Context) error {
			return CommonCliExportCmd2(c,
				RoleEntityStream,
				reflect.ValueOf(&RoleEntity{}).Elem(),
				c.String("file"),
				&metas.MetaFs,
				"RoleFieldMap.yml",
				RolePreloadRelations,
			)
		},
	},
	cli.Command{
		Name: "import",
		Flags: append(
			append(
				CommonQueryFlags,
				&cli.StringFlag{
					Name:     "file",
					Usage:    "The address of file you want the csv be imported from",
					Required: true,
				}),
			RoleCommonCliFlagsOptional...,
		),
		Usage: "imports csv/yaml/json file and place it and its children into database",
		Action: func(c *cli.Context) error {
			CommonCliImportCmdAuthorized(c,
				RoleActions.Create,
				reflect.ValueOf(&RoleEntity{}).Elem(),
				c.String("file"),
				&SecurityModel{
					ActionRequires: []PermissionInfo{PERM_ROOT_ROLE_CREATE},
				},
				func() RoleEntity {
					v := CastRoleFromCli(c)
					return *v
				},
			)
			return nil
		},
	},
}
var RoleCliCommands []cli.Command = []cli.Command{
	ROLE_ACTION_QUERY.ToCli(),
	ROLE_ACTION_TABLE.ToCli(),
	RoleCreateCmd,
	RoleUpdateCmd,
	RoleAskCmd,
	RoleCreateInteractiveCmd,
	GetCommonRemoveQuery(
		reflect.ValueOf(&RoleEntity{}).Elem(),
		RoleActions.Remove,
	),
}

func RoleCliFn() cli.Command {
	commands := append(RoleImportExportCommands, RoleCliCommands...)
	if !GetConfig().Production {
		commands = append(commands, RoleDevCommands...)
	}
	return cli.Command{
		Name:        "role",
		Description: "Roles module actions",
		Usage:       `Manage roles within the workspaces, or root configuration`,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "language",
				Value: "en",
			},
		},
		Subcommands: commands,
	}
}

var ROLE_ACTION_TABLE = Module3Action{
	Name:          "table",
	ActionAliases: []string{"t"},
	Flags:         CommonQueryFlags,
	Description:   "Table formatted queries all of the entities in database based on the standard query format",
	Action:        RoleActions.Query,
	CliAction: func(c *cli.Context, security *SecurityModel) error {
		CommonCliTableCmd2(c,
			RoleActions.Query,
			security,
			reflect.ValueOf(&RoleEntity{}).Elem(),
		)
		return nil
	},
}
var ROLE_ACTION_QUERY = Module3Action{
	Method: "GET",
	Url:    "/roles",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_ROLE_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			qs := &RoleEntityQs{}
			HttpQueryEntity(c, RoleActions.Query, qs)
		},
	},
	Format:         "QUERY",
	Action:         RoleActions.Query,
	ResponseEntity: &[]RoleEntity{},
	Out: &Module3ActionBody{
		Entity: "RoleEntity",
	},
	CliAction: func(c *cli.Context, security *SecurityModel) error {
		qs := &RoleEntityQs{}
		CommonCliQueryCmd3(
			c,
			RoleActions.Query,
			security,
			qs,
		)
		return nil
	},
	CliName:       "query",
	Name:          "query",
	ActionAliases: []string{"q"},
	Flags:         append(CommonQueryFlags, RoleQsFlags...),
	Description:   "Queries all of the entities in database based on the standard query format (s+)",
}
var ROLE_ACTION_EXPORT = Module3Action{
	Method: "GET",
	Url:    "/roles/export",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_ROLE_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpStreamFileChannel(c, RoleActionExport)
		},
	},
	Format:         "QUERY",
	Action:         RoleActionExport,
	ResponseEntity: &[]RoleEntity{},
	Out: &Module3ActionBody{
		Entity: "RoleEntity",
	},
}
var ROLE_ACTION_GET_ONE = Module3Action{
	Method: "GET",
	Url:    "/role/:uniqueId",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_ROLE_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpGetEntity(c, RoleActions.GetOne)
		},
	},
	Format:         "GET_ONE",
	Action:         RoleActions.GetOne,
	ResponseEntity: &RoleEntity{},
	Out: &Module3ActionBody{
		Entity: "RoleEntity",
	},
}
var ROLE_ACTION_POST_ONE = Module3Action{
	Name:          "create",
	ActionAliases: []string{"c"},
	Description:   "Create new role",
	Flags:         RoleCommonCliFlags,
	Method:        "POST",
	Url:           "/role",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_ROLE_CREATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpPostEntity(c, RoleActions.Create)
		},
	},
	CliAction: func(c *cli.Context, security *SecurityModel) error {
		result, err := CliPostEntity(c, RoleActions.Create, security)
		HandleActionInCli(c, result, err, map[string]map[string]string{})
		return err
	},
	Action:         RoleActions.Create,
	Format:         "POST_ONE",
	RequestEntity:  &RoleEntity{},
	ResponseEntity: &RoleEntity{},
	Out: &Module3ActionBody{
		Entity: "RoleEntity",
	},
	In: &Module3ActionBody{
		Entity: "RoleEntity",
	},
}
var ROLE_ACTION_PATCH = Module3Action{
	Name:          "update",
	ActionAliases: []string{"u"},
	Flags:         RoleCommonCliFlagsOptional,
	Method:        "PATCH",
	Url:           "/role",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_ROLE_UPDATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpUpdateEntity(c, RoleActions.Update)
		},
	},
	Action:         RoleActions.Update,
	RequestEntity:  &RoleEntity{},
	ResponseEntity: &RoleEntity{},
	Format:         "PATCH_ONE",
	Out: &Module3ActionBody{
		Entity: "RoleEntity",
	},
	In: &Module3ActionBody{
		Entity: "RoleEntity",
	},
}
var ROLE_ACTION_PATCH_BULK = Module3Action{
	Method: "PATCH",
	Url:    "/roles",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_ROLE_UPDATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpUpdateEntities(c, RoleActionBulkUpdate)
		},
	},
	Action:         RoleActionBulkUpdate,
	Format:         "PATCH_BULK",
	RequestEntity:  &BulkRecordRequest[RoleEntity]{},
	ResponseEntity: &BulkRecordRequest[RoleEntity]{},
	Out: &Module3ActionBody{
		Entity: "RoleEntity",
	},
	In: &Module3ActionBody{
		Entity: "RoleEntity",
	},
}
var ROLE_ACTION_DELETE = Module3Action{
	Method: "DELETE",
	Url:    "/role",
	Format: "DELETE_DSL",
	SecurityModel: &SecurityModel{
		ActionRequires: []PermissionInfo{PERM_ROOT_ROLE_DELETE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			HttpRemoveEntity(c, RoleActions.Remove)
		},
	},
	Action:         RoleActions.Remove,
	RequestEntity:  &DeleteRequest{},
	ResponseEntity: &DeleteResponse{},
	TargetEntity:   &RoleEntity{},
}

/**
 *	Override this function on RoleEntityHttp.go,
 *	In order to add your own http
 **/
var AppendRoleRouter = func(r *[]Module3Action) {}

func GetRoleModule3Actions() []Module3Action {
	routes := []Module3Action{
		ROLE_ACTION_QUERY,
		ROLE_ACTION_EXPORT,
		ROLE_ACTION_GET_ONE,
		ROLE_ACTION_POST_ONE,
		ROLE_ACTION_PATCH,
		ROLE_ACTION_PATCH_BULK,
		ROLE_ACTION_DELETE,
	}
	// Append user defined functions
	AppendRoleRouter(&routes)
	return routes
}

var PERM_ROOT_ROLE = PermissionInfo{
	CompleteKey: "root.modules.workspaces.role.*",
	Name:        "Entire role actions (*)",
	Description: "",
}
var PERM_ROOT_ROLE_DELETE = PermissionInfo{
	CompleteKey: "root.modules.workspaces.role.delete",
	Name:        "Delete role",
	Description: "",
}
var PERM_ROOT_ROLE_CREATE = PermissionInfo{
	CompleteKey: "root.modules.workspaces.role.create",
	Name:        "Create role",
	Description: "",
}
var PERM_ROOT_ROLE_UPDATE = PermissionInfo{
	CompleteKey: "root.modules.workspaces.role.update",
	Name:        "Update role",
	Description: "",
}
var PERM_ROOT_ROLE_QUERY = PermissionInfo{
	CompleteKey: "root.modules.workspaces.role.query",
	Name:        "Query role",
	Description: "",
}
var ALL_ROLE_PERMISSIONS = []PermissionInfo{
	PERM_ROOT_ROLE_DELETE,
	PERM_ROOT_ROLE_CREATE,
	PERM_ROOT_ROLE_UPDATE,
	PERM_ROOT_ROLE_QUERY,
	PERM_ROOT_ROLE,
}

type roleCode string

const (
	RoleNeedsOneCapability roleCode = "RoleNeedsOneCapability"
)

var RoleMessages = newRoleMessageCode()

func newRoleMessageCode() *roleMsgs {
	return &roleMsgs{
		RoleNeedsOneCapability: ErrorItem{
			"$":  "RoleNeedsOneCapability",
			"en": "Role atleast needs one capability to be selected.",
		},
	}
}

type roleMsgs struct {
	RoleNeedsOneCapability ErrorItem
}

var RoleEntityBundle = EntityBundle{
	Permissions: ALL_ROLE_PERMISSIONS,
	// Cli command has been exluded, since we use module to wrap all the entities
	// to be more easier to wrap up.
	// Create your own bundle if you need with Cli
	//CliCommands: []cli.Command{
	//	RoleCliFn(),
	//},
	Actions:      GetRoleModule3Actions(),
	MockProvider: RoleImportMocks,
	AutoMigrationEntities: []interface{}{
		&RoleEntity{},
	},
}
