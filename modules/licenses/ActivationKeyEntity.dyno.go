package licenses

/*
*	Generated by fireback 1.1.27
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"embed"
	"encoding/json"
	"fmt"
	reflect "reflect"
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/gookit/event"
	jsoniter "github.com/json-iterator/go"
	"github.com/schollz/progressbar/v3"
	metas "github.com/torabian/fireback/modules/licenses/metas"
	mocks "github.com/torabian/fireback/modules/licenses/mocks/ActivationKey"
	seeders "github.com/torabian/fireback/modules/licenses/seeders/ActivationKey"
	"github.com/torabian/fireback/modules/workspaces"
	"github.com/urfave/cli"
	"gopkg.in/yaml.v2"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

var activationKeySeedersFs = &seeders.ViewsFs

func ResetActivationKeySeeders(fs *embed.FS) {
	activationKeySeedersFs = fs
}

type ActivationKeyEntity struct {
	Visibility       *string                `json:"visibility,omitempty" yaml:"visibility,omitempty"`
	WorkspaceId      *string                `json:"workspaceId,omitempty" yaml:"workspaceId,omitempty"`
	LinkerId         *string                `json:"linkerId,omitempty" yaml:"linkerId,omitempty"`
	ParentId         *string                `json:"parentId,omitempty" yaml:"parentId,omitempty"`
	IsDeletable      *bool                  `json:"isDeletable,omitempty" yaml:"isDeletable,omitempty" gorm:"default:true"`
	IsUpdatable      *bool                  `json:"isUpdatable,omitempty" yaml:"isUpdatable,omitempty" gorm:"default:true"`
	UserId           *string                `json:"userId,omitempty" yaml:"userId,omitempty"`
	Rank             int64                  `json:"rank,omitempty" gorm:"type:int;name:rank"`
	ID               uint                   `gorm:"primaryKey;autoIncrement" json:"id,omitempty" yaml:"id,omitempty"`
	UniqueId         string                 `json:"uniqueId,omitempty" gorm:"unique;not null;size:100;" yaml:"uniqueId,omitempty"`
	Created          int64                  `json:"created,omitempty" yaml:"created,omitempty" gorm:"autoUpdateTime:nano"`
	Updated          int64                  `json:"updated,omitempty" yaml:"updated,omitempty"`
	Deleted          int64                  `json:"deleted,omitempty" yaml:"deleted,omitempty"`
	CreatedFormatted string                 `json:"createdFormatted,omitempty" yaml:"createdFormatted,omitempty" sql:"-" gorm:"-"`
	UpdatedFormatted string                 `json:"updatedFormatted,omitempty" yaml:"updatedFormatted,omitempty" sql:"-" gorm:"-"`
	Series           *string                `json:"series" yaml:"series"        `
	Used             *int64                 `json:"used" yaml:"used"        `
	Plan             *ProductPlanEntity     `json:"plan" yaml:"plan"    gorm:"foreignKey:PlanId;references:UniqueId"      `
	PlanId           *string                `json:"planId" yaml:"planId"`
	Children         []*ActivationKeyEntity `csv:"-" gorm:"-" sql:"-" json:"children,omitempty" yaml:"children,omitempty"`
	LinkedTo         *ActivationKeyEntity   `csv:"-" yaml:"-" gorm:"-" json:"-" sql:"-"`
}

func ActivationKeyEntityStream(q workspaces.QueryDSL) (chan []*ActivationKeyEntity, *workspaces.QueryResultMeta, error) {
	cn := make(chan []*ActivationKeyEntity)
	q.ItemsPerPage = 50
	q.StartIndex = 0
	_, qrm, err := ActivationKeyActionQuery(q)
	if err != nil {
		return nil, nil, err
	}
	go func() {
		for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
			items, _, _ := ActivationKeyActionQuery(q)
			i += q.ItemsPerPage
			q.StartIndex = i
			cn <- items
		}
	}()
	return cn, qrm, nil
}

type ActivationKeyEntityList struct {
	Items []*ActivationKeyEntity
}

func NewActivationKeyEntityList(items []*ActivationKeyEntity) *ActivationKeyEntityList {
	return &ActivationKeyEntityList{
		Items: items,
	}
}
func (x *ActivationKeyEntityList) ToTree() *workspaces.TreeOperation[ActivationKeyEntity] {
	return workspaces.NewTreeOperation(
		x.Items,
		func(t *ActivationKeyEntity) string {
			if t.ParentId == nil {
				return ""
			}
			return *t.ParentId
		},
		func(t *ActivationKeyEntity) string {
			return t.UniqueId
		},
	)
}

var ActivationKeyPreloadRelations []string = []string{}
var ACTIVATION_KEY_EVENT_CREATED = "activationKey.created"
var ACTIVATION_KEY_EVENT_UPDATED = "activationKey.updated"
var ACTIVATION_KEY_EVENT_DELETED = "activationKey.deleted"
var ACTIVATION_KEY_EVENTS = []string{
	ACTIVATION_KEY_EVENT_CREATED,
	ACTIVATION_KEY_EVENT_UPDATED,
	ACTIVATION_KEY_EVENT_DELETED,
}

type ActivationKeyFieldMap struct {
	Series workspaces.TranslatedString `yaml:"series"`
	Used   workspaces.TranslatedString `yaml:"used"`
	Plan   workspaces.TranslatedString `yaml:"plan"`
}

var ActivationKeyEntityMetaConfig map[string]int64 = map[string]int64{}
var ActivationKeyEntityJsonSchema = workspaces.ExtractEntityFields(reflect.ValueOf(&ActivationKeyEntity{}))

func entityActivationKeyFormatter(dto *ActivationKeyEntity, query workspaces.QueryDSL) {
	if dto == nil {
		return
	}
	if dto.Created > 0 {
		dto.CreatedFormatted = workspaces.FormatDateBasedOnQuery(dto.Created, query)
	}
	if dto.Updated > 0 {
		dto.CreatedFormatted = workspaces.FormatDateBasedOnQuery(dto.Updated, query)
	}
}
func ActivationKeyMockEntity() *ActivationKeyEntity {
	stringHolder := "~"
	int64Holder := int64(10)
	float64Holder := float64(10)
	_ = stringHolder
	_ = int64Holder
	_ = float64Holder
	entity := &ActivationKeyEntity{
		Series: &stringHolder,
		Used:   &int64Holder,
	}
	return entity
}
func ActivationKeyActionSeederMultiple(query workspaces.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	batchSize := 100
	bar := progressbar.Default(int64(count))
	// Collect entities in batches
	var entitiesBatch []*ActivationKeyEntity
	for i := 1; i <= count; i++ {
		entity := ActivationKeyMockEntity()
		entitiesBatch = append(entitiesBatch, entity)
		// When batch size is reached, perform the batch insert
		if len(entitiesBatch) == batchSize || i == count {
			// Insert batch
			_, err := ActivationKeyMultiInsert(entitiesBatch, query)
			if err == nil {
				successInsert += len(entitiesBatch)
			} else {
				fmt.Println(err)
				failureInsert += len(entitiesBatch)
			}
			// Clear the batch after insert
			entitiesBatch = nil
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func ActivationKeyActionSeeder(query workspaces.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	bar := progressbar.Default(int64(count))
	for i := 1; i <= count; i++ {
		entity := ActivationKeyMockEntity()
		_, err := ActivationKeyActionCreate(entity, query)
		if err == nil {
			successInsert++
		} else {
			fmt.Println(err)
			failureInsert++
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func (x *ActivationKeyEntity) Seeder() string {
	obj := ActivationKeyActionSeederInit()
	v, _ := json.MarshalIndent(obj, "", "  ")
	return string(v)
}
func ActivationKeyActionSeederInit() *ActivationKeyEntity {
	tildaRef := "~"
	_ = tildaRef
	entity := &ActivationKeyEntity{
		Series: &tildaRef,
	}
	return entity
}
func ActivationKeyAssociationCreate(dto *ActivationKeyEntity, query workspaces.QueryDSL) error {
	return nil
}

/**
* These kind of content are coming from another entity, which is indepndent module
* If we want to create them, we need to do it before. This is not association.
**/
func ActivationKeyRelationContentCreate(dto *ActivationKeyEntity, query workspaces.QueryDSL) error {
	return nil
}
func ActivationKeyRelationContentUpdate(dto *ActivationKeyEntity, query workspaces.QueryDSL) error {
	return nil
}
func ActivationKeyPolyglotCreateHandler(dto *ActivationKeyEntity, query workspaces.QueryDSL) {
	if dto == nil {
		return
	}
}

/**
 * This will be validating your entity fully. Important note is that, you add validate:* tag
 * in your entity, it will automatically work here. For slices inside entity, make sure you add
 * extra line of AppendSliceErrors, otherwise they won't be detected
 */
func ActivationKeyValidator(dto *ActivationKeyEntity, isPatch bool) *workspaces.IError {
	err := workspaces.CommonStructValidatorPointer(dto, isPatch)
	return err
}

// Creates a set of natural language queries, which can be used with
// AI tools to create content or help with some tasks
var ActivationKeyAskCmd cli.Command = cli.Command{
	Name:  "nlp",
	Usage: "Set of natural language queries which helps creating content or data",
	Subcommands: []cli.Command{
		{
			Name:  "sample",
			Usage: "Asks for generating sample by giving an example data",
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:  "format",
					Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
					Value: "yaml",
				},
				&cli.IntFlag{
					Name:  "count",
					Usage: "How many samples to ask",
					Value: 30,
				},
			},
			Action: func(c *cli.Context) error {
				v := &ActivationKeyEntity{}
				format := c.String("format")
				request := "\033[1m" + `
I need you to create me an array of exact signature as the example given below,
with at least ` + fmt.Sprint(c.String("count")) + ` items, mock the content with few words, and guess the possible values
based on the common sense. I need the output to be a valid ` + format + ` file.
Make sure you wrap the entire array in 'items' field. Also before that, I provide some explanation of each field:
Series: (type: string) Description: 
Used: (type: int64) Description: 
Plan: (type: one) Description: 
And here is the actual object signature:
` + v.Seeder() + `
`
				fmt.Println(request)
				return nil
			},
		},
	},
}

func ActivationKeyEntityPreSanitize(dto *ActivationKeyEntity, query workspaces.QueryDSL) {
}
func ActivationKeyEntityBeforeCreateAppend(dto *ActivationKeyEntity, query workspaces.QueryDSL) {
	if dto.UniqueId == "" {
		dto.UniqueId = workspaces.UUID()
	}
	dto.WorkspaceId = &query.WorkspaceId
	dto.UserId = &query.UserId
	ActivationKeyRecursiveAddUniqueId(dto, query)
}
func ActivationKeyRecursiveAddUniqueId(dto *ActivationKeyEntity, query workspaces.QueryDSL) {
}

/*
*

		Batch inserts, do not have all features that create
		operation does. Use it with unnormalized content,
		or read the source code carefully.
	  This is not marked as an action, because it should not be available publicly
	  at this moment.

*
*/
func ActivationKeyMultiInsert(dtos []*ActivationKeyEntity, query workspaces.QueryDSL) ([]*ActivationKeyEntity, *workspaces.IError) {
	if len(dtos) > 0 {
		for index := range dtos {
			ActivationKeyEntityPreSanitize(dtos[index], query)
			ActivationKeyEntityBeforeCreateAppend(dtos[index], query)
		}
		var dbref *gorm.DB = nil
		if query.Tx == nil {
			dbref = workspaces.GetDbRef()
		} else {
			dbref = query.Tx
		}
		query.Tx = dbref
		err := dbref.Create(&dtos).Error
		if err != nil {
			return nil, workspaces.GormErrorToIError(err)
		}
	}
	return dtos, nil
}
func ActivationKeyActionBatchCreateFn(dtos []*ActivationKeyEntity, query workspaces.QueryDSL) ([]*ActivationKeyEntity, *workspaces.IError) {
	if dtos != nil && len(dtos) > 0 {
		items := []*ActivationKeyEntity{}
		for _, item := range dtos {
			s, err := ActivationKeyActionCreateFn(item, query)
			if err != nil {
				return nil, err
			}
			items = append(items, s)
		}
		return items, nil
	}
	return dtos, nil
}
func ActivationKeyDeleteEntireChildren(query workspaces.QueryDSL, dto *ActivationKeyEntity) *workspaces.IError {
	// intentionally removed this. It's hard to implement it, and probably wrong without
	// proper on delete cascade
	return nil
}
func ActivationKeyActionCreateFn(dto *ActivationKeyEntity, query workspaces.QueryDSL) (*ActivationKeyEntity, *workspaces.IError) {
	// 1. Validate always
	if iError := ActivationKeyValidator(dto, false); iError != nil {
		return nil, iError
	}
	// 1.5 Sanitize the content coming of the front-end
	ActivationKeyEntityPreSanitize(dto, query)
	// 2. Append the necessary information about user, workspace
	ActivationKeyEntityBeforeCreateAppend(dto, query)
	// 3. Append the necessary translations, even if english
	ActivationKeyPolyglotCreateHandler(dto, query)
	// 3.5. Create other entities if we want select from them
	ActivationKeyRelationContentCreate(dto, query)
	// 4. Create the entity
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = workspaces.GetDbRef()
	} else {
		dbref = query.Tx
	}
	query.Tx = dbref
	err := dbref.Create(&dto).Error
	if err != nil {
		err := workspaces.GormErrorToIError(err)
		return dto, err
	}
	// 5. Create sub entities, objects or arrays, association to other entities
	ActivationKeyAssociationCreate(dto, query)
	// 6. Fire the event into system
	event.MustFire(ACTIVATION_KEY_EVENT_CREATED, event.M{
		"entity":    dto,
		"entityKey": workspaces.GetTypeString(&ActivationKeyEntity{}),
		"target":    "workspace",
		"unqiueId":  query.WorkspaceId,
	})
	return dto, nil
}
func ActivationKeyActionGetOne(query workspaces.QueryDSL) (*ActivationKeyEntity, *workspaces.IError) {
	refl := reflect.ValueOf(&ActivationKeyEntity{})
	item, err := workspaces.GetOneEntity[ActivationKeyEntity](query, refl)
	entityActivationKeyFormatter(item, query)
	return item, err
}
func ActivationKeyActionGetByWorkspace(query workspaces.QueryDSL) (*ActivationKeyEntity, *workspaces.IError) {
	refl := reflect.ValueOf(&ActivationKeyEntity{})
	item, err := workspaces.GetOneByWorkspaceEntity[ActivationKeyEntity](query, refl)
	entityActivationKeyFormatter(item, query)
	return item, err
}
func ActivationKeyActionQuery(query workspaces.QueryDSL) ([]*ActivationKeyEntity, *workspaces.QueryResultMeta, error) {
	refl := reflect.ValueOf(&ActivationKeyEntity{})
	items, meta, err := workspaces.QueryEntitiesPointer[ActivationKeyEntity](query, refl)
	for _, item := range items {
		entityActivationKeyFormatter(item, query)
	}
	return items, meta, err
}

var activationKeyMemoryItems []*ActivationKeyEntity = []*ActivationKeyEntity{}

func ActivationKeyEntityIntoMemory() {
	q := workspaces.QueryDSL{
		ItemsPerPage: 500,
		StartIndex:   0,
	}
	_, qrm, _ := ActivationKeyActionQuery(q)
	for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
		items, _, _ := ActivationKeyActionQuery(q)
		activationKeyMemoryItems = append(activationKeyMemoryItems, items...)
		i += q.ItemsPerPage
		q.StartIndex = i
	}
}
func ActivationKeyMemGet(id uint) *ActivationKeyEntity {
	for _, item := range activationKeyMemoryItems {
		if item.ID == id {
			return item
		}
	}
	return nil
}
func ActivationKeyMemJoin(items []uint) []*ActivationKeyEntity {
	res := []*ActivationKeyEntity{}
	for _, item := range items {
		v := ActivationKeyMemGet(item)
		if v != nil {
			res = append(res, v)
		}
	}
	return res
}
func ActivationKeyUpdateExec(dbref *gorm.DB, query workspaces.QueryDSL, fields *ActivationKeyEntity) (*ActivationKeyEntity, *workspaces.IError) {
	uniqueId := fields.UniqueId
	query.TriggerEventName = ACTIVATION_KEY_EVENT_UPDATED
	ActivationKeyEntityPreSanitize(fields, query)
	var item ActivationKeyEntity
	q := dbref.
		Where(&ActivationKeyEntity{UniqueId: uniqueId}).
		FirstOrCreate(&item)
	err := q.UpdateColumns(fields).Error
	if err != nil {
		return nil, workspaces.GormErrorToIError(err)
	}
	query.Tx = dbref
	ActivationKeyRelationContentUpdate(fields, query)
	ActivationKeyPolyglotCreateHandler(fields, query)
	if ero := ActivationKeyDeleteEntireChildren(query, fields); ero != nil {
		return nil, ero
	}
	// @meta(update has many)
	err = dbref.
		Preload(clause.Associations).
		Where(&ActivationKeyEntity{UniqueId: uniqueId}).
		First(&item).Error
	event.MustFire(query.TriggerEventName, event.M{
		"entity":   &item,
		"target":   "workspace",
		"unqiueId": query.WorkspaceId,
	})
	if err != nil {
		return &item, workspaces.GormErrorToIError(err)
	}
	return &item, nil
}
func ActivationKeyActionUpdateFn(query workspaces.QueryDSL, fields *ActivationKeyEntity) (*ActivationKeyEntity, *workspaces.IError) {
	if fields == nil {
		return nil, workspaces.Create401Error(&workspaces.WorkspacesMessages.BodyIsMissing, []string{})
	}
	// 1. Validate always
	if iError := ActivationKeyValidator(fields, true); iError != nil {
		return nil, iError
	}
	// Let's not add this. I am not sure of the consequences
	// ActivationKeyRecursiveAddUniqueId(fields, query)
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = workspaces.GetDbRef()
		var item *ActivationKeyEntity
		vf := dbref.Transaction(func(tx *gorm.DB) error {
			dbref = tx
			var err *workspaces.IError
			item, err = ActivationKeyUpdateExec(dbref, query, fields)
			if err == nil {
				return nil
			} else {
				return err
			}
		})
		return item, workspaces.CastToIError(vf)
	} else {
		dbref = query.Tx
		return ActivationKeyUpdateExec(dbref, query, fields)
	}
}

var ActivationKeyWipeCmd cli.Command = cli.Command{
	Name:  "wipe",
	Usage: "Wipes entire activationkeys ",
	Action: func(c *cli.Context) error {
		query := workspaces.CommonCliQueryDSLBuilderAuthorize(c, &workspaces.SecurityModel{
			ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_ACTIVATION_KEY_DELETE},
		})
		count, _ := ActivationKeyActionWipeClean(query)
		fmt.Println("Removed", count, "of entities")
		return nil
	},
}

func ActivationKeyActionRemove(query workspaces.QueryDSL) (int64, *workspaces.IError) {
	refl := reflect.ValueOf(&ActivationKeyEntity{})
	query.ActionRequires = []workspaces.PermissionInfo{PERM_ROOT_ACTIVATION_KEY_DELETE}
	return workspaces.RemoveEntity[ActivationKeyEntity](query, refl)
}
func ActivationKeyActionWipeClean(query workspaces.QueryDSL) (int64, error) {
	var err error
	var count int64 = 0
	{
		subCount, subErr := workspaces.WipeCleanEntity[ActivationKeyEntity]()
		if subErr != nil {
			fmt.Println("Error while wiping 'ActivationKeyEntity'", subErr)
			return count, subErr
		} else {
			count += subCount
		}
	}
	return count, err
}
func ActivationKeyActionBulkUpdate(
	query workspaces.QueryDSL, dto *workspaces.BulkRecordRequest[ActivationKeyEntity]) (
	*workspaces.BulkRecordRequest[ActivationKeyEntity], *workspaces.IError,
) {
	result := []*ActivationKeyEntity{}
	err := workspaces.GetDbRef().Transaction(func(tx *gorm.DB) error {
		query.Tx = tx
		for _, record := range dto.Records {
			item, err := ActivationKeyActionUpdate(query, record)
			if err != nil {
				return err
			} else {
				result = append(result, item)
			}
		}
		return nil
	})
	if err == nil {
		return dto, nil
	}
	return nil, err.(*workspaces.IError)
}
func (x *ActivationKeyEntity) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}

var ActivationKeyEntityMeta = workspaces.TableMetaData{
	EntityName:    "ActivationKey",
	ExportKey:     "activation-keys",
	TableNameInDb: "fb_activation-key_entities",
	EntityObject:  &ActivationKeyEntity{},
	ExportStream:  ActivationKeyActionExportT,
	ImportQuery:   ActivationKeyActionImport,
}

func ActivationKeyActionExport(
	query workspaces.QueryDSL,
) (chan []byte, *workspaces.IError) {
	return workspaces.YamlExporterChannel[ActivationKeyEntity](query, ActivationKeyActionQuery, ActivationKeyPreloadRelations)
}
func ActivationKeyActionExportT(
	query workspaces.QueryDSL,
) (chan []interface{}, *workspaces.IError) {
	return workspaces.YamlExporterChannelT[ActivationKeyEntity](query, ActivationKeyActionQuery, ActivationKeyPreloadRelations)
}
func ActivationKeyActionImport(
	dto interface{}, query workspaces.QueryDSL,
) *workspaces.IError {
	var json = jsoniter.ConfigCompatibleWithStandardLibrary
	var content ActivationKeyEntity
	cx, err2 := json.Marshal(dto)
	if err2 != nil {
		return workspaces.Create401Error(&workspaces.WorkspacesMessages.InvalidContent, []string{})
	}
	json.Unmarshal(cx, &content)
	_, err := ActivationKeyActionCreate(&content, query)
	return err
}

var ActivationKeyCommonCliFlags = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "uniqueId (primary key)",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "series",
		Required: false,
		Usage:    `series`,
	},
	&cli.Int64Flag{
		Name:     "used",
		Required: false,
		Usage:    `used`,
	},
	&cli.StringFlag{
		Name:     "plan-id",
		Required: false,
		Usage:    `plan`,
	},
}
var ActivationKeyCommonInteractiveCliFlags = []workspaces.CliInteractiveFlag{
	{
		Name:        "series",
		StructField: "Series",
		Required:    false,
		Recommended: false,
		Usage:       `series`,
		Type:        "string",
	},
	{
		Name:        "used",
		StructField: "Used",
		Required:    false,
		Recommended: false,
		Usage:       `used`,
		Type:        "int64",
	},
}
var ActivationKeyCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "uniqueId (primary key)",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "series",
		Required: false,
		Usage:    `series`,
	},
	&cli.Int64Flag{
		Name:     "used",
		Required: false,
		Usage:    `used`,
	},
	&cli.StringFlag{
		Name:     "plan-id",
		Required: false,
		Usage:    `plan`,
	},
}
var ActivationKeyCreateCmd cli.Command = ACTIVATION_KEY_ACTION_POST_ONE.ToCli()
var ActivationKeyCreateInteractiveCmd cli.Command = cli.Command{
	Name:  "ic",
	Usage: "Creates a new template, using requied fields in an interactive name",
	Flags: []cli.Flag{
		&cli.BoolFlag{
			Name:  "all",
			Usage: "Interactively asks for all inputs, not only required ones",
		},
	},
	Action: func(c *cli.Context) {
		query := workspaces.CommonCliQueryDSLBuilderAuthorize(c, &workspaces.SecurityModel{
			ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_ACTIVATION_KEY_CREATE},
		})
		entity := &ActivationKeyEntity{}
		workspaces.PopulateInteractively(entity, c, ActivationKeyCommonInteractiveCliFlags)
		if entity, err := ActivationKeyActionCreate(entity, query); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := yaml.Marshal(entity)
			fmt.Println(workspaces.FormatYamlKeys(string(f)))
		}
	},
}
var ActivationKeyUpdateCmd cli.Command = cli.Command{
	Name:    "update",
	Aliases: []string{"u"},
	Flags:   ActivationKeyCommonCliFlagsOptional,
	Usage:   "Updates entity by passing the parameters",
	Action: func(c *cli.Context) error {
		query := workspaces.CommonCliQueryDSLBuilderAuthorize(c, &workspaces.SecurityModel{
			ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_ACTIVATION_KEY_UPDATE},
		})
		entity := CastActivationKeyFromCli(c)
		if entity, err := ActivationKeyActionUpdate(query, entity); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := json.MarshalIndent(entity, "", "  ")
			fmt.Println(string(f))
		}
		return nil
	},
}

func (x *ActivationKeyEntity) FromCli(c *cli.Context) *ActivationKeyEntity {
	return CastActivationKeyFromCli(c)
}
func CastActivationKeyFromCli(c *cli.Context) *ActivationKeyEntity {
	template := &ActivationKeyEntity{}
	if c.IsSet("uid") {
		template.UniqueId = c.String("uid")
	}
	if c.IsSet("pid") {
		x := c.String("pid")
		template.ParentId = &x
	}
	if c.IsSet("series") {
		value := c.String("series")
		template.Series = &value
	}
	if c.IsSet("used") {
		value := c.Int64("used")
		template.Used = &value
	}
	if c.IsSet("plan-id") {
		value := c.String("plan-id")
		template.PlanId = &value
	}
	return template
}
func ActivationKeySyncSeederFromFs(fsRef *embed.FS, fileNames []string) {
	workspaces.SeederFromFSImport(
		workspaces.QueryDSL{},
		ActivationKeyActionCreate,
		reflect.ValueOf(&ActivationKeyEntity{}).Elem(),
		fsRef,
		fileNames,
		true,
	)
}
func ActivationKeySyncSeeders() {
	workspaces.SeederFromFSImport(
		workspaces.QueryDSL{WorkspaceId: workspaces.USER_SYSTEM},
		ActivationKeyActionCreate,
		reflect.ValueOf(&ActivationKeyEntity{}).Elem(),
		activationKeySeedersFs,
		[]string{},
		true,
	)
}
func ActivationKeyImportMocks() {
	workspaces.SeederFromFSImport(
		workspaces.QueryDSL{},
		ActivationKeyActionCreate,
		reflect.ValueOf(&ActivationKeyEntity{}).Elem(),
		&mocks.ViewsFs,
		[]string{},
		false,
	)
}
func ActivationKeyWriteQueryMock(ctx workspaces.MockQueryContext) {
	for _, lang := range ctx.Languages {
		itemsPerPage := 9999
		if ctx.ItemsPerPage > 0 {
			itemsPerPage = ctx.ItemsPerPage
		}
		f := workspaces.QueryDSL{ItemsPerPage: itemsPerPage, Language: lang, WithPreloads: ctx.WithPreloads, Deep: true}
		items, count, _ := ActivationKeyActionQuery(f)
		result := workspaces.QueryEntitySuccessResult(f, items, count)
		workspaces.WriteMockDataToFile(lang, "", "ActivationKey", result)
	}
}

var ActivationKeyImportExportCommands = []cli.Command{
	{
		Name:  "mock",
		Usage: "Generates mock records based on the entity definition",
		Flags: []cli.Flag{
			&cli.IntFlag{
				Name:  "count",
				Usage: "how many activation key do you need to be generated and stored in database",
				Value: 10,
			},
			&cli.BoolFlag{
				Name:  "batch",
				Usage: "Multiple insert into database mode. Might miss children and relations at the moment",
			},
		},
		Action: func(c *cli.Context) error {
			query := workspaces.CommonCliQueryDSLBuilderAuthorize(c, &workspaces.SecurityModel{
				ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_ACTIVATION_KEY_CREATE},
			})
			if c.Bool("batch") {
				ActivationKeyActionSeederMultiple(query, c.Int("count"))
			} else {
				ActivationKeyActionSeeder(query, c.Int("count"))
			}
			return nil
		},
	},
	{
		Name:    "init",
		Aliases: []string{"i"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Creates a basic seeder file for you, based on the definition module we have. You can populate this file as an example",
		Action: func(c *cli.Context) error {
			seed := ActivationKeyActionSeederInit()
			workspaces.CommonInitSeeder(strings.TrimSpace(c.String("format")), seed)
			return nil
		},
	},
	{
		Name:    "validate",
		Aliases: []string{"v"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "file",
				Usage: "Validates an import file, such as yaml, json, csv, and gives some insights how the after import it would look like",
				Value: "activation-key-seeder-activation-key.yml",
				// Uncomment before publish, they need to specify
				// Required: true,
			},
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Reads a yaml file containing an array of activation-keys, you can run this to validate if your import file is correct, and how it would look like after import",
		Action: func(c *cli.Context) error {
			data := &[]ActivationKeyEntity{}
			workspaces.ReadYamlFile(c.String("file"), data)
			fmt.Println(data)
			return nil
		},
	},
	cli.Command{
		Name:  "list",
		Usage: "Prints the list of files attached to this module for syncing or bootstrapping project",
		Action: func(c *cli.Context) error {
			if entity, err := workspaces.GetSeederFilenames(activationKeySeedersFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "sync",
		Usage: "Tries to sync the embedded content into the database, the list could be seen by 'list' command",
		Action: func(c *cli.Context) error {
			workspaces.CommonCliImportEmbedCmd(c,
				ActivationKeyActionCreate,
				reflect.ValueOf(&ActivationKeyEntity{}).Elem(),
				activationKeySeedersFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:  "mocks",
		Usage: "Prints the list of internal mock yaml files if they exist",
		Action: func(c *cli.Context) error {
			if entity, err := workspaces.GetSeederFilenames(&mocks.ViewsFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "msync",
		Usage: "Tries to sync mocks into the system",
		Action: func(c *cli.Context) error {
			workspaces.CommonCliImportEmbedCmd(c,
				ActivationKeyActionCreate,
				reflect.ValueOf(&ActivationKeyEntity{}).Elem(),
				&mocks.ViewsFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:    "export",
		Aliases: []string{"e"},
		Flags: append(workspaces.CommonQueryFlags,
			&cli.StringFlag{
				Name:     "file",
				Usage:    "The address of file you want the csv/yaml/json be exported to",
				Required: true,
			}),
		Usage: "Exports a query results into the csv/yaml/json format",
		Action: func(c *cli.Context) error {
			if strings.Contains(c.String("file"), ".csv") {
				workspaces.CommonCliExportCmd2(c,
					ActivationKeyEntityStream,
					reflect.ValueOf(&ActivationKeyEntity{}).Elem(),
					c.String("file"),
					&metas.MetaFs,
					"ActivationKeyFieldMap.yml",
					ActivationKeyPreloadRelations,
				)
			} else {
				workspaces.CommonCliExportCmd(c,
					ActivationKeyActionQuery,
					reflect.ValueOf(&ActivationKeyEntity{}).Elem(),
					c.String("file"),
					&metas.MetaFs,
					"ActivationKeyFieldMap.yml",
					ActivationKeyPreloadRelations,
				)
			}
			return nil
		},
	},
	cli.Command{
		Name: "import",
		Flags: append(
			append(
				workspaces.CommonQueryFlags,
				&cli.StringFlag{
					Name:     "file",
					Usage:    "The address of file you want the csv be imported from",
					Required: true,
				}),
			ActivationKeyCommonCliFlagsOptional...,
		),
		Usage: "imports csv/yaml/json file and place it and its children into database",
		Action: func(c *cli.Context) error {
			workspaces.CommonCliImportCmdAuthorized(c,
				ActivationKeyActionCreate,
				reflect.ValueOf(&ActivationKeyEntity{}).Elem(),
				c.String("file"),
				&workspaces.SecurityModel{
					ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_ACTIVATION_KEY_CREATE},
				},
				func() ActivationKeyEntity {
					v := CastActivationKeyFromCli(c)
					return *v
				},
			)
			return nil
		},
	},
}
var ActivationKeyCliCommands []cli.Command = []cli.Command{
	ACTIVATION_KEY_ACTION_QUERY.ToCli(),
	ACTIVATION_KEY_ACTION_TABLE.ToCli(),
	ActivationKeyCreateCmd,
	ActivationKeyUpdateCmd,
	ActivationKeyAskCmd,
	ActivationKeyCreateInteractiveCmd,
	ActivationKeyWipeCmd,
	workspaces.GetCommonRemoveQuery(reflect.ValueOf(&ActivationKeyEntity{}).Elem(), ActivationKeyActionRemove),
}

func ActivationKeyCliFn() cli.Command {
	ActivationKeyCliCommands = append(ActivationKeyCliCommands, ActivationKeyImportExportCommands...)
	return cli.Command{
		Name:        "key",
		Description: "ActivationKeys module actions",
		Usage:       ``,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "language",
				Value: "en",
			},
		},
		Subcommands: ActivationKeyCliCommands,
	}
}

var ACTIVATION_KEY_ACTION_TABLE = workspaces.Module2Action{
	Name:          "table",
	ActionName:    "table",
	ActionAliases: []string{"t"},
	Flags:         workspaces.CommonQueryFlags,
	Description:   "Table formatted queries all of the entities in database based on the standard query format",
	Action:        ActivationKeyActionQuery,
	CliAction: func(c *cli.Context, security *workspaces.SecurityModel) error {
		workspaces.CommonCliTableCmd2(c,
			ActivationKeyActionQuery,
			security,
			reflect.ValueOf(&ActivationKeyEntity{}).Elem(),
		)
		return nil
	},
}
var ACTIVATION_KEY_ACTION_QUERY = workspaces.Module2Action{
	Method: "GET",
	Url:    "/activation-keys",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_ACTIVATION_KEY_QUERY},
	},
	Group: "activationKey",
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpQueryEntity(c, ActivationKeyActionQuery)
		},
	},
	Format:         "QUERY",
	Action:         ActivationKeyActionQuery,
	ResponseEntity: &[]ActivationKeyEntity{},
	Out: &workspaces.Module2ActionBody{
		Entity: "ActivationKeyEntity",
	},
	CliAction: func(c *cli.Context, security *workspaces.SecurityModel) error {
		workspaces.CommonCliQueryCmd2(
			c,
			ActivationKeyActionQuery,
			security,
		)
		return nil
	},
	CliName:       "query",
	ActionName:    "query",
	ActionAliases: []string{"q"},
	Flags:         workspaces.CommonQueryFlags,
	Description:   "Queries all of the entities in database based on the standard query format (s+)",
}
var ACTIVATION_KEY_ACTION_EXPORT = workspaces.Module2Action{
	Method: "GET",
	Url:    "/activation-keys/export",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_ACTIVATION_KEY_QUERY},
	},
	Group: "activationKey",
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpStreamFileChannel(c, ActivationKeyActionExport)
		},
	},
	Format:         "QUERY",
	Action:         ActivationKeyActionExport,
	ResponseEntity: &[]ActivationKeyEntity{},
	Out: &workspaces.Module2ActionBody{
		Entity: "ActivationKeyEntity",
	},
}
var ACTIVATION_KEY_ACTION_GET_ONE = workspaces.Module2Action{
	Method: "GET",
	Url:    "/activation-key/:uniqueId",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_ACTIVATION_KEY_QUERY},
	},
	Group: "activationKey",
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpGetEntity(c, ActivationKeyActionGetOne)
		},
	},
	Format:         "GET_ONE",
	Action:         ActivationKeyActionGetOne,
	ResponseEntity: &ActivationKeyEntity{},
	Out: &workspaces.Module2ActionBody{
		Entity: "ActivationKeyEntity",
	},
}
var ACTIVATION_KEY_ACTION_POST_ONE = workspaces.Module2Action{
	ActionName:    "create",
	ActionAliases: []string{"c"},
	Description:   "Create new activationKey",
	Flags:         ActivationKeyCommonCliFlags,
	Method:        "POST",
	Url:           "/activation-key",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_ACTIVATION_KEY_CREATE},
	},
	Group: "activationKey",
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpPostEntity(c, ActivationKeyActionCreate)
		},
	},
	CliAction: func(c *cli.Context, security *workspaces.SecurityModel) error {
		result, err := workspaces.CliPostEntity(c, ActivationKeyActionCreate, security)
		workspaces.HandleActionInCli(c, result, err, map[string]map[string]string{})
		return err
	},
	Action:         ActivationKeyActionCreate,
	Format:         "POST_ONE",
	RequestEntity:  &ActivationKeyEntity{},
	ResponseEntity: &ActivationKeyEntity{},
	Out: &workspaces.Module2ActionBody{
		Entity: "ActivationKeyEntity",
	},
	In: &workspaces.Module2ActionBody{
		Entity: "ActivationKeyEntity",
	},
}
var ACTIVATION_KEY_ACTION_PATCH = workspaces.Module2Action{
	ActionName:    "update",
	ActionAliases: []string{"u"},
	Flags:         ActivationKeyCommonCliFlagsOptional,
	Method:        "PATCH",
	Url:           "/activation-key",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_ACTIVATION_KEY_UPDATE},
	},
	Group: "activationKey",
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpUpdateEntity(c, ActivationKeyActionUpdate)
		},
	},
	Action:         ActivationKeyActionUpdate,
	RequestEntity:  &ActivationKeyEntity{},
	ResponseEntity: &ActivationKeyEntity{},
	Format:         "PATCH_ONE",
	Out: &workspaces.Module2ActionBody{
		Entity: "ActivationKeyEntity",
	},
	In: &workspaces.Module2ActionBody{
		Entity: "ActivationKeyEntity",
	},
}
var ACTIVATION_KEY_ACTION_PATCH_BULK = workspaces.Module2Action{
	Method: "PATCH",
	Url:    "/activation-keys",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_ACTIVATION_KEY_UPDATE},
	},
	Group: "activationKey",
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpUpdateEntities(c, ActivationKeyActionBulkUpdate)
		},
	},
	Action:         ActivationKeyActionBulkUpdate,
	Format:         "PATCH_BULK",
	RequestEntity:  &workspaces.BulkRecordRequest[ActivationKeyEntity]{},
	ResponseEntity: &workspaces.BulkRecordRequest[ActivationKeyEntity]{},
	Out: &workspaces.Module2ActionBody{
		Entity: "ActivationKeyEntity",
	},
	In: &workspaces.Module2ActionBody{
		Entity: "ActivationKeyEntity",
	},
}
var ACTIVATION_KEY_ACTION_DELETE = workspaces.Module2Action{
	Method: "DELETE",
	Url:    "/activation-key",
	Format: "DELETE_DSL",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_ACTIVATION_KEY_DELETE},
	},
	Group: "activationKey",
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpRemoveEntity(c, ActivationKeyActionRemove)
		},
	},
	Action:         ActivationKeyActionRemove,
	RequestEntity:  &workspaces.DeleteRequest{},
	ResponseEntity: &workspaces.DeleteResponse{},
	TargetEntity:   &ActivationKeyEntity{},
}

/**
 *	Override this function on ActivationKeyEntityHttp.go,
 *	In order to add your own http
 **/
var AppendActivationKeyRouter = func(r *[]workspaces.Module2Action) {}

func GetActivationKeyModule2Actions() []workspaces.Module2Action {
	routes := []workspaces.Module2Action{
		ACTIVATION_KEY_ACTION_QUERY,
		ACTIVATION_KEY_ACTION_EXPORT,
		ACTIVATION_KEY_ACTION_GET_ONE,
		ACTIVATION_KEY_ACTION_POST_ONE,
		ACTIVATION_KEY_ACTION_PATCH,
		ACTIVATION_KEY_ACTION_PATCH_BULK,
		ACTIVATION_KEY_ACTION_DELETE,
	}
	// Append user defined functions
	AppendActivationKeyRouter(&routes)
	return routes
}

var PERM_ROOT_ACTIVATION_KEY_DELETE = workspaces.PermissionInfo{
	CompleteKey: "root/modules/licenses/activation-key/delete",
	Name:        "Delete activation key",
}
var PERM_ROOT_ACTIVATION_KEY_CREATE = workspaces.PermissionInfo{
	CompleteKey: "root/modules/licenses/activation-key/create",
	Name:        "Create activation key",
}
var PERM_ROOT_ACTIVATION_KEY_UPDATE = workspaces.PermissionInfo{
	CompleteKey: "root/modules/licenses/activation-key/update",
	Name:        "Update activation key",
}
var PERM_ROOT_ACTIVATION_KEY_QUERY = workspaces.PermissionInfo{
	CompleteKey: "root/modules/licenses/activation-key/query",
	Name:        "Query activation key",
}
var PERM_ROOT_ACTIVATION_KEY = workspaces.PermissionInfo{
	CompleteKey: "root/modules/licenses/activation-key/*",
	Name:        "Entire activation key actions (*)",
}
var ALL_ACTIVATION_KEY_PERMISSIONS = []workspaces.PermissionInfo{
	PERM_ROOT_ACTIVATION_KEY_DELETE,
	PERM_ROOT_ACTIVATION_KEY_CREATE,
	PERM_ROOT_ACTIVATION_KEY_UPDATE,
	PERM_ROOT_ACTIVATION_KEY_QUERY,
	PERM_ROOT_ACTIVATION_KEY,
}
var ActivationKeyEntityBundle = workspaces.EntityBundle{
	Permissions: ALL_ACTIVATION_KEY_PERMISSIONS,
	// Cli command has been exluded, since we use module to wrap all the entities
	// to be more easier to wrap up.
	// Create your own bundle if you need with Cli
	//CliCommands: []cli.Command{
	//	ActivationKeyCliFn(),
	//},
	Actions:      GetActivationKeyModule2Actions(),
	MockProvider: ActivationKeyImportMocks,
	AutoMigrationEntities: []interface{}{
		&ActivationKeyEntity{},
	},
}
