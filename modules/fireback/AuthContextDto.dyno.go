package fireback

/*
*	Generated by fireback 1.2.1
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/urfave/cli"
)

func CastAuthContextFromCli(c *cli.Context) *AuthContextDto {
	template := &AuthContextDto{}
	if c.IsSet("skip-workspace-id") {
		value := c.Bool("skip-workspace-id")
		template.SkipWorkspaceId = value
	}
	if c.IsSet("allow-cascade") {
		value := c.Bool("allow-cascade")
		template.AllowCascade = value
	}
	if c.IsSet("workspace-id") {
		template.WorkspaceId = c.String("workspace-id")
	}
	if c.IsSet("token") {
		template.Token = c.String("token")
	}
	if c.IsSet("security-id") {
		template.SecurityId = NewStringAutoNull(c.String("security-id"))
	}
	return template
}

var AuthContextDtoCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.BoolFlag{
		Name:     "skip-workspace-id",
		Required: false,
		Usage:    `skipWorkspaceId (bool)`,
	},
	&cli.BoolFlag{
		Name:     "allow-cascade",
		Required: false,
		Usage:    `For recrusive content access scenarios, such as root workspace, if true they can see the child workspaces content (bool)`,
	},
	&cli.StringFlag{
		Name:     "workspace-id",
		Required: false,
		Usage:    `workspaceId (string)`,
	},
	&cli.StringFlag{
		Name:     "token",
		Required: false,
		Usage:    `token (string)`,
	},
	&cli.StringFlag{
		Name:     "security-id",
		Required: false,
		Usage:    `security (one)`,
	},
}

type AuthContextDto struct {
	SkipWorkspaceId bool `json:"skipWorkspaceId" yaml:"skipWorkspaceId"        `
	// For recrusive content access scenarios, such as root workspace, if true they can see the child workspaces content
	AllowCascade bool             `json:"allowCascade" yaml:"allowCascade"        `
	WorkspaceId  string           `json:"workspaceId" yaml:"workspaceId"        `
	Token        string           `json:"token" yaml:"token"        `
	Security     *SecurityModel   `json:"security" yaml:"security"    gorm:"foreignKey:SecurityId;references:UniqueId"      `
	SecurityId   String           `json:"securityId" yaml:"securityId"`
	Capabilities []PermissionInfo `json:"capabilities" yaml:"capabilities"        `
}
type AuthContextDtoList struct {
	Items []*AuthContextDto
}

func NewAuthContextDtoList(items []*AuthContextDto) *AuthContextDtoList {
	return &AuthContextDtoList{
		Items: items,
	}
}
func (x *AuthContextDtoList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *AuthContextDto) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	// Intentional trim (so strings lib is always imported)
	return strings.TrimSpace("")
}
func (x *AuthContextDto) JsonPrint() {
	fmt.Println(x.Json())
}

// This is an experimental way to create new dtos, with exluding the pointers as helper.
func NewAuthContextDto(
	WorkspaceId string,
	Token string,
) AuthContextDto {
	return AuthContextDto{
		WorkspaceId: WorkspaceId,
		Token:       Token,
	}
}
