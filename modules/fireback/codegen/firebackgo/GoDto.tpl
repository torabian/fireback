package {{ .m.Name }}

/*
*	Generated by fireback {{ .fv }}
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
*/

import (
	"encoding/json"
	"fmt"

	{{ if ne .m.MetaWorkspace true }}
	"github.com/torabian/fireback/modules/fireback"
	{{ end }}
	"strings"
	"github.com/urfave/cli"
)

{{ template "goimport" . }}

{{ range .children }}

type {{ .FullName }} struct {
    {{ template "definitionrow" (arr .CompleteFields $.wsprefix) }}
}
func ( x * {{ .FullName }}) RootObjectName() string {
	return "{{ $.e.DtoName }}"
}
{{ end }}

{{ template "dtoCastFromCli" . }}


var {{ .e.DtoName }}CommonCliFlagsOptional = []cli.Flag{
  {{ template "entityCommonCliFlag" (arr .e.CompleteFields "") }}
}

type {{ .e.DtoName }} struct {
    {{ template "definitionrow" (arr .e.CompleteFields $.wsprefix) }}
}

type {{ .e.DtoName }}List struct {
	Items []*{{ .e.DtoName }} 
}

func New{{ .e.DtoName }}List(items []*{{ .e.DtoName }}) *{{ .e.DtoName }}List {

	return &{{ .e.DtoName }}List{
		Items: items,
	}
}


func (x *{{ .e.DtoName }}List) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}

func (x* {{ .e.DtoName }}) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	// Intentional trim (so strings lib is always imported)
	return strings.TrimSpace("")
}

func (x* {{ .e.DtoName }}) JsonPrint()  {
    fmt.Println(x.Json())

	{{ if ne .m.MetaWorkspace true }}
	// Somehow to make the import always needed, makes no sense.
	_ = fireback.Body 
	{{ end }}
}

// This is an experimental way to create new dtos, with exluding the pointers as helper.
func New{{ .e.DtoName }}(
{{ range .e.CompleteFields }}
	{{ if eq .Type "string" }}
	{{ .PublicName }} string,
	{{ end }}
{{ end }}	
) {{ .e.DtoName }} {
    return {{ .e.DtoName }}{
	{{ range .e.CompleteFields }}

	{{ if eq .Type "string" }}
	{{ .PublicName }}: {{ .PublicName }},
	{{ end }}

	{{ end }}
    }
}