import { useLocale } from "./useLocale";

export function useS<T>(v: T): T {
  /*
   * This could be your own definition of the locale language
   * This variable usually should include the current language in the app
   * such as 'en', or 'fa', etc.
   * you might also extend it to separate the language-locale such as en-us
   * i haven't done yet due to no need
   */
  const { locale } = useLocale();

  /*
   * Here we check if there locale is anything other than en, and in translation
   * files we have such thing with a $ prefix - which auto generated by fireback
   * we will access them instead. useS function will return always T,
   * so all the translations will be typesafe anyway from typescript compiler
   * perspective
   */
  if (!locale || locale === "en") {
    return v;
  } else if (!v["$" + locale]) {
    return v;
  } else {
    return v["$" + locale];
  }
}
