/*
*	Generated by fireback 1.2.4
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
*/
    import {
        BaseDto,
        BaseEntity,
    } from "../../core/definitions"
// In this section we have sub entities related to this object
// Class body
export type PaymentParameterEntityKeys =
  keyof typeof PaymentParameterEntity.Fields;
export class PaymentParameterEntity extends BaseEntity {
  public children?: PaymentParameterEntity[] | null;
  /**
  User it's the same value as posId
  */
  public posId?: string | null;
  /**
  Merchant Id is said to be same as posId, but we collect it anyway
  */
  public merchantId?: string | null;
  /**
  CRC is got from the payment provider
  */
  public crc?: string | null;
  /**
  secretId it's the samevalue as key for reports (API key).
  */
  public secretId?: string | null;
  /**
  Used when transaction is done on payment provider side
  */
  public urlReturn?: string | null;
  /**
  Used to send notification from payment provider.
  */
  public urlStatus?: string | null;
  /**
  The currency that transactions will be.
  */
  public currency?: string | null;
  /**
  Country codes compatible with ISO, e.g. PL, DE, etc.
  */
  public country?: string | null;
  /**
  The location that transaction would go when it's already registered. You can use {Token} placeholder and it would be replaced.
  */
  public paymentPageUrl?: string | null;
  /**
  Url that would be used to register a transaction
  */
  public registerApiUrl?: string | null;
  /**
  The url which will be used to verify the transaction notification
  */
  public verifyApiUrl?: string | null;
  public static Navigation = {
      edit(uniqueId: string, locale?: string) {
          return `${locale ? '/' + locale : '..'}/payment-parameter/edit/${uniqueId}`;
      },
      create(locale?: string) {
          return `${locale ? '/' + locale : '..'}/payment-parameter/new`;
      },
      single(uniqueId: string, locale?: string) {
          return `${locale ? '/' + locale : '..'}/payment-parameter/${uniqueId}`;
      },
      query(params: any = {}, locale?: string) {
          return `${locale ? '/' + locale : '..'}/payment-parameters`;
      },
      /**
      * Use R series while building router in CRA or nextjs, or react navigation for react Native
      * Might be useful in Angular as well.
      **/
      Redit: "payment-parameter/edit/:uniqueId",
      Rcreate: "payment-parameter/new",
      Rsingle: "payment-parameter/:uniqueId",
      Rquery: "payment-parameters",
  };
  public static definition = {
  "rpc": {
    "query": {}
  },
  "permRewrite": {
    "replace": "root.modules",
    "with": "root.manage"
  },
  "name": "paymentParameter",
  "distinctBy": "workspace",
  "features": {},
  "security": {
    "writeOnRoot": true
  },
  "gormMap": {},
  "fields": [
    {
      "name": "posId",
      "description": "User it's the same value as posId",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "merchantId",
      "description": "Merchant Id is said to be same as posId, but we collect it anyway",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "crc",
      "description": "CRC is got from the payment provider",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "secretId",
      "description": "secretId it's the samevalue as key for reports (API key).",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "urlReturn",
      "description": "Used when transaction is done on payment provider side",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "urlStatus",
      "description": "Used to send notification from payment provider.",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "currency",
      "description": "The currency that transactions will be.",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "country",
      "description": "Country codes compatible with ISO, e.g. PL, DE, etc.",
      "type": "string",
      "default": "PL",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "paymentPageUrl",
      "description": "The location that transaction would go when it's already registered. You can use {Token} placeholder and it would be replaced.",
      "type": "string",
      "default": "https://secure.przelewy24.pl/trnRequest/{TOKEN}",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "registerApiUrl",
      "description": "Url that would be used to register a transaction",
      "type": "string",
      "default": "https://sandbox.przelewy24.pl/api/v1/transaction/register",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "verifyApiUrl",
      "description": "The url which will be used to verify the transaction notification",
      "type": "string",
      "default": "https://sandbox.przelewy24.pl/api/v1/transaction/verify",
      "computedType": "string",
      "gormMap": {}
    }
  ],
  "cliName": "param",
  "description": "Keeps the information about payment Przelewy24 payment provider"
}
public static Fields = {
  ...BaseEntity.Fields,
      posId: `posId`,
      merchantId: `merchantId`,
      crc: `crc`,
      secretId: `secretId`,
      urlReturn: `urlReturn`,
      urlStatus: `urlStatus`,
      currency: `currency`,
      country: `country`,
      paymentPageUrl: `paymentPageUrl`,
      registerApiUrl: `registerApiUrl`,
      verifyApiUrl: `verifyApiUrl`,
}
}
