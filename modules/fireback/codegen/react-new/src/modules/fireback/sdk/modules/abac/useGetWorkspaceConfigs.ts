/*
*	Generated by fireback 1.2.3
*	Written by Ali Torabi.
* The code is generated for react-query@v3.39.3
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
*/
import { useContext } from "react";
import { useQuery } from "react-query";
import { 
  RemoteQueryContext,
  UseRemoteQuery,
  queryBeforeSend,
} from "../../core/react-tools";
import { stringify } from "qs";
import { execApiFn, IResponseList } from "../../core/http-tools";
    import {
        WorkspaceConfigEntity,
    } from "../abac/WorkspaceConfigEntity"
// Fireback gives the option to have typesafe query string
export type GetWorkspaceConfigsQs = {
}
export type GetWorkspaceConfigsUrlParams = {
}
export type GetWorkspaceConfigsHeaders = {
}
export function useGetWorkspaceConfigs({
  queryOptions,
  query,
  queryClient,
  execFnOverride,
  unauthorized,
  optionFn
}: UseRemoteQuery & {query?: GetWorkspaceConfigsQs}) {
  const { options, execFn } = useContext(RemoteQueryContext);
  const computedOptions = optionFn ? optionFn(options) : options;
  // Calculare the function which will do the remote calls.
  // We consider to use global override, this specific override, or default which
  // comes with the sdk.
  const rpcFn = execFnOverride
    ? execFnOverride(computedOptions)
    : execFn
    ? execFn(computedOptions)
    : execApiFn(computedOptions);
  // Url of the remote affix.
  const url = "/workspace-configs".substr(1);
  let computedUrl = `${url}?${stringify(query)}`;
  let completeRouteUrls = true;
  // Attach the details of the request to the fn
  const fn = () => rpcFn("GET", computedUrl);
  const auth = computedOptions?.headers?.authorization
  const hasKey = auth != "undefined" && auth != undefined && auth !=null && auth != "null" && !!auth
  let enabled = true;
  if (!completeRouteUrls) {
    enabled = false;
  } else if (!hasKey && !unauthorized) {
    enabled = false;
  }
  const query$ = useQuery<any, any, IResponseList<WorkspaceConfigEntity>, any>(["*abac.WorkspaceConfigEntity", computedOptions, query], fn, {
    cacheTime: 1000,
    retry: false,
    keepPreviousData: true,
    enabled,
    ...((queryOptions as any) || {})
  } as any);
  const items: Array<WorkspaceConfigEntity> = query$.data?.data?.items || [];
  return { 
    query: query$,
    items,
    keyExtractor: (item: WorkspaceConfigEntity) => item.uniqueId,
  };
}
useGetWorkspaceConfigs.UKEY = "*abac.WorkspaceConfigEntity"