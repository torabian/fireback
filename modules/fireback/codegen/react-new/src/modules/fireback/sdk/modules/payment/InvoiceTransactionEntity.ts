/*
*	Generated by fireback 1.2.3
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
*/
    import {
        BaseDto,
        BaseEntity,
    } from "../../core/definitions"
    import {
        InvoiceEntity,
    } from "./InvoiceEntity"
// In this section we have sub entities related to this object
// Class body
export type InvoiceTransactionEntityKeys =
  keyof typeof InvoiceTransactionEntity.Fields;
export class InvoiceTransactionEntity extends BaseEntity {
  public children?: InvoiceTransactionEntity[] | null;
  /**
  The original invoice which this transaction would settle
  */
  public invoice?: InvoiceEntity | null;
      invoiceId?: string | null;
  /**
  the original amount that this transaction is resolving based on the invoice
  */
  public amount?: number | null;
  /**
  The payment provider, such as 'stripe', or 'przelewy24'
  */
  public provider?: string | null;
  /**
  External session id generated by the payment provider
  */
  public externalSessionId?: string | null;
  /**
  External payment id generated by the payment provider
  */
  public externalPaymentId?: string | null;
  /**
  The reason why the transaction is failed
  */
  public failureReason?: string | null;
  /**
  The time that payment successfully gone through.
  */
  public paidAt?: string | null;
  public static Navigation = {
      edit(uniqueId: string, locale?: string) {
          return `${locale ? '/' + locale : '..'}/invoice-transaction/edit/${uniqueId}`;
      },
      create(locale?: string) {
          return `${locale ? '/' + locale : '..'}/invoice-transaction/new`;
      },
      single(uniqueId: string, locale?: string) {
          return `${locale ? '/' + locale : '..'}/invoice-transaction/${uniqueId}`;
      },
      query(params: any = {}, locale?: string) {
          return `${locale ? '/' + locale : '..'}/invoice-transactions`;
      },
      /**
      * Use R series while building router in CRA or nextjs, or react navigation for react Native
      * Might be useful in Angular as well.
      **/
      Redit: "invoice-transaction/edit/:uniqueId",
      Rcreate: "invoice-transaction/new",
      Rsingle: "invoice-transaction/:uniqueId",
      Rquery: "invoice-transactions",
  };
  public static definition = {
  "rpc": {
    "query": {}
  },
  "permRewrite": {
    "replace": "root.modules",
    "with": "root.manage"
  },
  "name": "invoiceTransaction",
  "features": {},
  "gormMap": {},
  "fields": [
    {
      "name": "invoice",
      "description": "The original invoice which this transaction would settle",
      "type": "one",
      "target": "InvoiceEntity",
      "validate": "required",
      "computedType": "InvoiceEntity",
      "gormMap": {}
    },
    {
      "name": "amount",
      "description": "the original amount that this transaction is resolving based on the invoice",
      "type": "int64",
      "computedType": "number",
      "gormMap": {}
    },
    {
      "name": "provider",
      "description": "The payment provider, such as 'stripe', or 'przelewy24'",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "externalSessionId",
      "description": "External session id generated by the payment provider",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "externalPaymentId",
      "description": "External payment id generated by the payment provider",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "failureReason",
      "description": "The reason why the transaction is failed",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "paidAt",
      "description": "The time that payment successfully gone through.",
      "type": "datetime",
      "computedType": "string",
      "gormMap": {}
    }
  ],
  "description": "Transactions history occured for an specific invoice"
}
public static Fields = {
  ...BaseEntity.Fields,
          invoiceId: `invoiceId`,
      invoice$: `invoice`,
        invoice: InvoiceEntity.Fields,
      amount: `amount`,
      provider: `provider`,
      externalSessionId: `externalSessionId`,
      externalPaymentId: `externalPaymentId`,
      failureReason: `failureReason`,
      paidAt: `paidAt`,
}
}
