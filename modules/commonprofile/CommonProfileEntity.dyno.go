package commonprofile

/*
*	Generated by fireback 1.1.27
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"embed"
	"encoding/json"
	"fmt"
	reflect "reflect"
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/gookit/event"
	jsoniter "github.com/json-iterator/go"
	"github.com/schollz/progressbar/v3"
	metas "github.com/torabian/fireback/modules/commonprofile/metas"
	mocks "github.com/torabian/fireback/modules/commonprofile/mocks/CommonProfile"
	seeders "github.com/torabian/fireback/modules/commonprofile/seeders/CommonProfile"
	"github.com/torabian/fireback/modules/workspaces"
	"github.com/urfave/cli"
	"gopkg.in/yaml.v2"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

var commonProfileSeedersFs = &seeders.ViewsFs

func ResetCommonProfileSeeders(fs *embed.FS) {
	commonProfileSeedersFs = fs
}

type CommonProfileEntity struct {
	Visibility       *string                `json:"visibility,omitempty" yaml:"visibility,omitempty"`
	WorkspaceId      *string                `json:"workspaceId,omitempty" yaml:"workspaceId,omitempty"`
	LinkerId         *string                `json:"linkerId,omitempty" yaml:"linkerId,omitempty"`
	ParentId         *string                `json:"parentId,omitempty" yaml:"parentId,omitempty"`
	IsDeletable      *bool                  `json:"isDeletable,omitempty" yaml:"isDeletable,omitempty" gorm:"default:true"`
	IsUpdatable      *bool                  `json:"isUpdatable,omitempty" yaml:"isUpdatable,omitempty" gorm:"default:true"`
	UserId           *string                `json:"userId,omitempty" yaml:"userId,omitempty"`
	Rank             int64                  `json:"rank,omitempty" gorm:"type:int;name:rank"`
	ID               uint                   `gorm:"primaryKey;autoIncrement" json:"id,omitempty" yaml:"id,omitempty"`
	UniqueId         string                 `json:"uniqueId,omitempty" gorm:"unique;not null;size:100;" yaml:"uniqueId,omitempty"`
	Created          int64                  `json:"created,omitempty" yaml:"created,omitempty" gorm:"autoUpdateTime:nano"`
	Updated          int64                  `json:"updated,omitempty" yaml:"updated,omitempty"`
	Deleted          int64                  `json:"deleted,omitempty" yaml:"deleted,omitempty"`
	CreatedFormatted string                 `json:"createdFormatted,omitempty" yaml:"createdFormatted,omitempty" sql:"-" gorm:"-"`
	UpdatedFormatted string                 `json:"updatedFormatted,omitempty" yaml:"updatedFormatted,omitempty" sql:"-" gorm:"-"`
	FirstName        *string                `json:"firstName" yaml:"firstName"        `
	LastName         *string                `json:"lastName" yaml:"lastName"        `
	PhoneNumber      *string                `json:"phoneNumber" yaml:"phoneNumber"        `
	Email            *string                `json:"email" yaml:"email"        `
	Company          *string                `json:"company" yaml:"company"        `
	Street           *string                `json:"street" yaml:"street"        `
	HouseNumber      *string                `json:"houseNumber" yaml:"houseNumber"        `
	ZipCode          *string                `json:"zipCode" yaml:"zipCode"        `
	City             *string                `json:"city" yaml:"city"        `
	Gender           *string                `json:"gender" yaml:"gender"        `
	Children         []*CommonProfileEntity `csv:"-" gorm:"-" sql:"-" json:"children,omitempty" yaml:"children,omitempty"`
	LinkedTo         *CommonProfileEntity   `csv:"-" yaml:"-" gorm:"-" json:"-" sql:"-"`
}

func CommonProfileEntityStream(q workspaces.QueryDSL) (chan []*CommonProfileEntity, *workspaces.QueryResultMeta, error) {
	cn := make(chan []*CommonProfileEntity)
	q.ItemsPerPage = 50
	q.StartIndex = 0
	_, qrm, err := CommonProfileActionQuery(q)
	if err != nil {
		return nil, nil, err
	}
	go func() {
		for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
			items, _, _ := CommonProfileActionQuery(q)
			i += q.ItemsPerPage
			q.StartIndex = i
			cn <- items
		}
	}()
	return cn, qrm, nil
}

type CommonProfileEntityList struct {
	Items []*CommonProfileEntity
}

func NewCommonProfileEntityList(items []*CommonProfileEntity) *CommonProfileEntityList {
	return &CommonProfileEntityList{
		Items: items,
	}
}
func (x *CommonProfileEntityList) ToTree() *workspaces.TreeOperation[CommonProfileEntity] {
	return workspaces.NewTreeOperation(
		x.Items,
		func(t *CommonProfileEntity) string {
			if t.ParentId == nil {
				return ""
			}
			return *t.ParentId
		},
		func(t *CommonProfileEntity) string {
			return t.UniqueId
		},
	)
}

var CommonProfilePreloadRelations []string = []string{}
var COMMON_PROFILE_EVENT_CREATED = "commonProfile.created"
var COMMON_PROFILE_EVENT_UPDATED = "commonProfile.updated"
var COMMON_PROFILE_EVENT_DELETED = "commonProfile.deleted"
var COMMON_PROFILE_EVENTS = []string{
	COMMON_PROFILE_EVENT_CREATED,
	COMMON_PROFILE_EVENT_UPDATED,
	COMMON_PROFILE_EVENT_DELETED,
}

type CommonProfileFieldMap struct {
	FirstName   workspaces.TranslatedString `yaml:"firstName"`
	LastName    workspaces.TranslatedString `yaml:"lastName"`
	PhoneNumber workspaces.TranslatedString `yaml:"phoneNumber"`
	Email       workspaces.TranslatedString `yaml:"email"`
	Company     workspaces.TranslatedString `yaml:"company"`
	Street      workspaces.TranslatedString `yaml:"street"`
	HouseNumber workspaces.TranslatedString `yaml:"houseNumber"`
	ZipCode     workspaces.TranslatedString `yaml:"zipCode"`
	City        workspaces.TranslatedString `yaml:"city"`
	Gender      workspaces.TranslatedString `yaml:"gender"`
}

var CommonProfileEntityMetaConfig map[string]int64 = map[string]int64{}
var CommonProfileEntityJsonSchema = workspaces.ExtractEntityFields(reflect.ValueOf(&CommonProfileEntity{}))

func entityCommonProfileFormatter(dto *CommonProfileEntity, query workspaces.QueryDSL) {
	if dto == nil {
		return
	}
	if dto.Created > 0 {
		dto.CreatedFormatted = workspaces.FormatDateBasedOnQuery(dto.Created, query)
	}
	if dto.Updated > 0 {
		dto.CreatedFormatted = workspaces.FormatDateBasedOnQuery(dto.Updated, query)
	}
}
func CommonProfileMockEntity() *CommonProfileEntity {
	stringHolder := "~"
	int64Holder := int64(10)
	float64Holder := float64(10)
	_ = stringHolder
	_ = int64Holder
	_ = float64Holder
	entity := &CommonProfileEntity{
		FirstName:   &stringHolder,
		LastName:    &stringHolder,
		PhoneNumber: &stringHolder,
		Email:       &stringHolder,
		Company:     &stringHolder,
		Street:      &stringHolder,
		HouseNumber: &stringHolder,
		ZipCode:     &stringHolder,
		City:        &stringHolder,
		Gender:      &stringHolder,
	}
	return entity
}
func CommonProfileActionSeederMultiple(query workspaces.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	batchSize := 100
	bar := progressbar.Default(int64(count))
	// Collect entities in batches
	var entitiesBatch []*CommonProfileEntity
	for i := 1; i <= count; i++ {
		entity := CommonProfileMockEntity()
		entitiesBatch = append(entitiesBatch, entity)
		// When batch size is reached, perform the batch insert
		if len(entitiesBatch) == batchSize || i == count {
			// Insert batch
			_, err := CommonProfileMultiInsert(entitiesBatch, query)
			if err == nil {
				successInsert += len(entitiesBatch)
			} else {
				fmt.Println(err)
				failureInsert += len(entitiesBatch)
			}
			// Clear the batch after insert
			entitiesBatch = nil
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func CommonProfileActionSeeder(query workspaces.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	bar := progressbar.Default(int64(count))
	for i := 1; i <= count; i++ {
		entity := CommonProfileMockEntity()
		_, err := CommonProfileActionCreate(entity, query)
		if err == nil {
			successInsert++
		} else {
			fmt.Println(err)
			failureInsert++
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func (x *CommonProfileEntity) Seeder() string {
	obj := CommonProfileActionSeederInit()
	v, _ := json.MarshalIndent(obj, "", "  ")
	return string(v)
}
func CommonProfileActionSeederInit() *CommonProfileEntity {
	tildaRef := "~"
	_ = tildaRef
	entity := &CommonProfileEntity{
		FirstName:   &tildaRef,
		LastName:    &tildaRef,
		PhoneNumber: &tildaRef,
		Email:       &tildaRef,
		Company:     &tildaRef,
		Street:      &tildaRef,
		HouseNumber: &tildaRef,
		ZipCode:     &tildaRef,
		City:        &tildaRef,
		Gender:      &tildaRef,
	}
	return entity
}
func CommonProfileAssociationCreate(dto *CommonProfileEntity, query workspaces.QueryDSL) error {
	return nil
}

/**
* These kind of content are coming from another entity, which is indepndent module
* If we want to create them, we need to do it before. This is not association.
**/
func CommonProfileRelationContentCreate(dto *CommonProfileEntity, query workspaces.QueryDSL) error {
	return nil
}
func CommonProfileRelationContentUpdate(dto *CommonProfileEntity, query workspaces.QueryDSL) error {
	return nil
}
func CommonProfilePolyglotCreateHandler(dto *CommonProfileEntity, query workspaces.QueryDSL) {
	if dto == nil {
		return
	}
}

/**
 * This will be validating your entity fully. Important note is that, you add validate:* tag
 * in your entity, it will automatically work here. For slices inside entity, make sure you add
 * extra line of AppendSliceErrors, otherwise they won't be detected
 */
func CommonProfileValidator(dto *CommonProfileEntity, isPatch bool) *workspaces.IError {
	err := workspaces.CommonStructValidatorPointer(dto, isPatch)
	return err
}

// Creates a set of natural language queries, which can be used with
// AI tools to create content or help with some tasks
var CommonProfileAskCmd cli.Command = cli.Command{
	Name:  "nlp",
	Usage: "Set of natural language queries which helps creating content or data",
	Subcommands: []cli.Command{
		{
			Name:  "sample",
			Usage: "Asks for generating sample by giving an example data",
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:  "format",
					Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
					Value: "yaml",
				},
				&cli.IntFlag{
					Name:  "count",
					Usage: "How many samples to ask",
					Value: 30,
				},
			},
			Action: func(c *cli.Context) error {
				v := &CommonProfileEntity{}
				format := c.String("format")
				request := "\033[1m" + `
I need you to create me an array of exact signature as the example given below,
with at least ` + fmt.Sprint(c.String("count")) + ` items, mock the content with few words, and guess the possible values
based on the common sense. I need the output to be a valid ` + format + ` file.
Make sure you wrap the entire array in 'items' field. Also before that, I provide some explanation of each field:
FirstName: (type: string) Description: 
LastName: (type: string) Description: 
PhoneNumber: (type: string) Description: 
Email: (type: string) Description: 
Company: (type: string) Description: 
Street: (type: string) Description: 
HouseNumber: (type: string) Description: 
ZipCode: (type: string) Description: 
City: (type: string) Description: 
Gender: (type: string) Description: 
And here is the actual object signature:
` + v.Seeder() + `
`
				fmt.Println(request)
				return nil
			},
		},
	},
}

func CommonProfileEntityPreSanitize(dto *CommonProfileEntity, query workspaces.QueryDSL) {
}
func CommonProfileEntityBeforeCreateAppend(dto *CommonProfileEntity, query workspaces.QueryDSL) {
	if dto.UniqueId == "" {
		dto.UniqueId = workspaces.UUID()
	}
	dto.WorkspaceId = &query.WorkspaceId
	dto.UserId = &query.UserId
	CommonProfileRecursiveAddUniqueId(dto, query)
}
func CommonProfileRecursiveAddUniqueId(dto *CommonProfileEntity, query workspaces.QueryDSL) {
}

/*
*

		Batch inserts, do not have all features that create
		operation does. Use it with unnormalized content,
		or read the source code carefully.
	  This is not marked as an action, because it should not be available publicly
	  at this moment.

*
*/
func CommonProfileMultiInsert(dtos []*CommonProfileEntity, query workspaces.QueryDSL) ([]*CommonProfileEntity, *workspaces.IError) {
	if len(dtos) > 0 {
		for index := range dtos {
			CommonProfileEntityPreSanitize(dtos[index], query)
			CommonProfileEntityBeforeCreateAppend(dtos[index], query)
		}
		var dbref *gorm.DB = nil
		if query.Tx == nil {
			dbref = workspaces.GetDbRef()
		} else {
			dbref = query.Tx
		}
		query.Tx = dbref
		err := dbref.Create(&dtos).Error
		if err != nil {
			return nil, workspaces.GormErrorToIError(err)
		}
	}
	return dtos, nil
}
func CommonProfileActionBatchCreateFn(dtos []*CommonProfileEntity, query workspaces.QueryDSL) ([]*CommonProfileEntity, *workspaces.IError) {
	if dtos != nil && len(dtos) > 0 {
		items := []*CommonProfileEntity{}
		for _, item := range dtos {
			s, err := CommonProfileActionCreateFn(item, query)
			if err != nil {
				return nil, err
			}
			items = append(items, s)
		}
		return items, nil
	}
	return dtos, nil
}
func CommonProfileDeleteEntireChildren(query workspaces.QueryDSL, dto *CommonProfileEntity) *workspaces.IError {
	// intentionally removed this. It's hard to implement it, and probably wrong without
	// proper on delete cascade
	return nil
}
func CommonProfileActionCreateFn(dto *CommonProfileEntity, query workspaces.QueryDSL) (*CommonProfileEntity, *workspaces.IError) {
	// 1. Validate always
	if iError := CommonProfileValidator(dto, false); iError != nil {
		return nil, iError
	}
	// 1.5 Sanitize the content coming of the front-end
	CommonProfileEntityPreSanitize(dto, query)
	// 2. Append the necessary information about user, workspace
	CommonProfileEntityBeforeCreateAppend(dto, query)
	// 3. Append the necessary translations, even if english
	CommonProfilePolyglotCreateHandler(dto, query)
	// 3.5. Create other entities if we want select from them
	CommonProfileRelationContentCreate(dto, query)
	// 4. Create the entity
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = workspaces.GetDbRef()
	} else {
		dbref = query.Tx
	}
	query.Tx = dbref
	err := dbref.Create(&dto).Error
	if err != nil {
		err := workspaces.GormErrorToIError(err)
		return dto, err
	}
	// 5. Create sub entities, objects or arrays, association to other entities
	CommonProfileAssociationCreate(dto, query)
	// 6. Fire the event into system
	event.MustFire(COMMON_PROFILE_EVENT_CREATED, event.M{
		"entity":    dto,
		"entityKey": workspaces.GetTypeString(&CommonProfileEntity{}),
		"target":    "workspace",
		"unqiueId":  query.WorkspaceId,
	})
	return dto, nil
}
func CommonProfileActionGetOne(query workspaces.QueryDSL) (*CommonProfileEntity, *workspaces.IError) {
	refl := reflect.ValueOf(&CommonProfileEntity{})
	item, err := workspaces.GetOneEntity[CommonProfileEntity](query, refl)
	entityCommonProfileFormatter(item, query)
	return item, err
}
func CommonProfileActionGetByWorkspace(query workspaces.QueryDSL) (*CommonProfileEntity, *workspaces.IError) {
	refl := reflect.ValueOf(&CommonProfileEntity{})
	item, err := workspaces.GetOneByWorkspaceEntity[CommonProfileEntity](query, refl)
	entityCommonProfileFormatter(item, query)
	return item, err
}
func CommonProfileActionQuery(query workspaces.QueryDSL) ([]*CommonProfileEntity, *workspaces.QueryResultMeta, error) {
	refl := reflect.ValueOf(&CommonProfileEntity{})
	items, meta, err := workspaces.QueryEntitiesPointer[CommonProfileEntity](query, refl)
	for _, item := range items {
		entityCommonProfileFormatter(item, query)
	}
	return items, meta, err
}

var commonProfileMemoryItems []*CommonProfileEntity = []*CommonProfileEntity{}

func CommonProfileEntityIntoMemory() {
	q := workspaces.QueryDSL{
		ItemsPerPage: 500,
		StartIndex:   0,
	}
	_, qrm, _ := CommonProfileActionQuery(q)
	for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
		items, _, _ := CommonProfileActionQuery(q)
		commonProfileMemoryItems = append(commonProfileMemoryItems, items...)
		i += q.ItemsPerPage
		q.StartIndex = i
	}
}
func CommonProfileMemGet(id uint) *CommonProfileEntity {
	for _, item := range commonProfileMemoryItems {
		if item.ID == id {
			return item
		}
	}
	return nil
}
func CommonProfileMemJoin(items []uint) []*CommonProfileEntity {
	res := []*CommonProfileEntity{}
	for _, item := range items {
		v := CommonProfileMemGet(item)
		if v != nil {
			res = append(res, v)
		}
	}
	return res
}
func CommonProfileUpdateExec(dbref *gorm.DB, query workspaces.QueryDSL, fields *CommonProfileEntity) (*CommonProfileEntity, *workspaces.IError) {
	uniqueId := fields.UniqueId
	query.TriggerEventName = COMMON_PROFILE_EVENT_UPDATED
	CommonProfileEntityPreSanitize(fields, query)
	var item CommonProfileEntity
	q := dbref.
		Where(&CommonProfileEntity{UniqueId: uniqueId}).
		FirstOrCreate(&item)
	err := q.UpdateColumns(fields).Error
	if err != nil {
		return nil, workspaces.GormErrorToIError(err)
	}
	query.Tx = dbref
	CommonProfileRelationContentUpdate(fields, query)
	CommonProfilePolyglotCreateHandler(fields, query)
	if ero := CommonProfileDeleteEntireChildren(query, fields); ero != nil {
		return nil, ero
	}
	// @meta(update has many)
	err = dbref.
		Preload(clause.Associations).
		Where(&CommonProfileEntity{UniqueId: uniqueId}).
		First(&item).Error
	event.MustFire(query.TriggerEventName, event.M{
		"entity":   &item,
		"target":   "workspace",
		"unqiueId": query.WorkspaceId,
	})
	if err != nil {
		return &item, workspaces.GormErrorToIError(err)
	}
	return &item, nil
}
func CommonProfileActionUpdateFn(query workspaces.QueryDSL, fields *CommonProfileEntity) (*CommonProfileEntity, *workspaces.IError) {
	if fields == nil {
		return nil, workspaces.Create401Error(&workspaces.WorkspacesMessages.BodyIsMissing, []string{})
	}
	// 1. Validate always
	if iError := CommonProfileValidator(fields, true); iError != nil {
		return nil, iError
	}
	// Let's not add this. I am not sure of the consequences
	// CommonProfileRecursiveAddUniqueId(fields, query)
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = workspaces.GetDbRef()
		var item *CommonProfileEntity
		vf := dbref.Transaction(func(tx *gorm.DB) error {
			dbref = tx
			var err *workspaces.IError
			item, err = CommonProfileUpdateExec(dbref, query, fields)
			if err == nil {
				return nil
			} else {
				return err
			}
		})
		return item, workspaces.CastToIError(vf)
	} else {
		dbref = query.Tx
		return CommonProfileUpdateExec(dbref, query, fields)
	}
}

var CommonProfileWipeCmd cli.Command = cli.Command{
	Name:  "wipe",
	Usage: "Wipes entire commonprofiles ",
	Action: func(c *cli.Context) error {
		query := workspaces.CommonCliQueryDSLBuilderAuthorize(c, &workspaces.SecurityModel{
			ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_COMMON_PROFILE_DELETE},
		})
		count, _ := CommonProfileActionWipeClean(query)
		fmt.Println("Removed", count, "of entities")
		return nil
	},
}

func CommonProfileActionRemove(query workspaces.QueryDSL) (int64, *workspaces.IError) {
	refl := reflect.ValueOf(&CommonProfileEntity{})
	query.ActionRequires = []workspaces.PermissionInfo{PERM_ROOT_COMMON_PROFILE_DELETE}
	return workspaces.RemoveEntity[CommonProfileEntity](query, refl)
}
func CommonProfileActionWipeClean(query workspaces.QueryDSL) (int64, error) {
	var err error
	var count int64 = 0
	{
		subCount, subErr := workspaces.WipeCleanEntity[CommonProfileEntity]()
		if subErr != nil {
			fmt.Println("Error while wiping 'CommonProfileEntity'", subErr)
			return count, subErr
		} else {
			count += subCount
		}
	}
	return count, err
}
func CommonProfileActionBulkUpdate(
	query workspaces.QueryDSL, dto *workspaces.BulkRecordRequest[CommonProfileEntity]) (
	*workspaces.BulkRecordRequest[CommonProfileEntity], *workspaces.IError,
) {
	result := []*CommonProfileEntity{}
	err := workspaces.GetDbRef().Transaction(func(tx *gorm.DB) error {
		query.Tx = tx
		for _, record := range dto.Records {
			item, err := CommonProfileActionUpdate(query, record)
			if err != nil {
				return err
			} else {
				result = append(result, item)
			}
		}
		return nil
	})
	if err == nil {
		return dto, nil
	}
	return nil, err.(*workspaces.IError)
}
func (x *CommonProfileEntity) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}

var CommonProfileEntityMeta = workspaces.TableMetaData{
	EntityName:    "CommonProfile",
	ExportKey:     "common-profiles",
	TableNameInDb: "fb_common-profile_entities",
	EntityObject:  &CommonProfileEntity{},
	ExportStream:  CommonProfileActionExportT,
	ImportQuery:   CommonProfileActionImport,
}

func CommonProfileActionExport(
	query workspaces.QueryDSL,
) (chan []byte, *workspaces.IError) {
	return workspaces.YamlExporterChannel[CommonProfileEntity](query, CommonProfileActionQuery, CommonProfilePreloadRelations)
}
func CommonProfileActionExportT(
	query workspaces.QueryDSL,
) (chan []interface{}, *workspaces.IError) {
	return workspaces.YamlExporterChannelT[CommonProfileEntity](query, CommonProfileActionQuery, CommonProfilePreloadRelations)
}
func CommonProfileActionImport(
	dto interface{}, query workspaces.QueryDSL,
) *workspaces.IError {
	var json = jsoniter.ConfigCompatibleWithStandardLibrary
	var content CommonProfileEntity
	cx, err2 := json.Marshal(dto)
	if err2 != nil {
		return workspaces.Create401Error(&workspaces.WorkspacesMessages.InvalidContent, []string{})
	}
	json.Unmarshal(cx, &content)
	_, err := CommonProfileActionCreate(&content, query)
	return err
}

var CommonProfileCommonCliFlags = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "uniqueId (primary key)",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "first-name",
		Required: false,
		Usage:    `firstName`,
	},
	&cli.StringFlag{
		Name:     "last-name",
		Required: false,
		Usage:    `lastName`,
	},
	&cli.StringFlag{
		Name:     "phone-number",
		Required: false,
		Usage:    `phoneNumber`,
	},
	&cli.StringFlag{
		Name:     "email",
		Required: false,
		Usage:    `email`,
	},
	&cli.StringFlag{
		Name:     "company",
		Required: false,
		Usage:    `company`,
	},
	&cli.StringFlag{
		Name:     "street",
		Required: false,
		Usage:    `street`,
	},
	&cli.StringFlag{
		Name:     "house-number",
		Required: false,
		Usage:    `houseNumber`,
	},
	&cli.StringFlag{
		Name:     "zip-code",
		Required: false,
		Usage:    `zipCode`,
	},
	&cli.StringFlag{
		Name:     "city",
		Required: false,
		Usage:    `city`,
	},
	&cli.StringFlag{
		Name:     "gender",
		Required: false,
		Usage:    `gender`,
	},
}
var CommonProfileCommonInteractiveCliFlags = []workspaces.CliInteractiveFlag{
	{
		Name:        "firstName",
		StructField: "FirstName",
		Required:    false,
		Recommended: false,
		Usage:       `firstName`,
		Type:        "string",
	},
	{
		Name:        "lastName",
		StructField: "LastName",
		Required:    false,
		Recommended: false,
		Usage:       `lastName`,
		Type:        "string",
	},
	{
		Name:        "phoneNumber",
		StructField: "PhoneNumber",
		Required:    false,
		Recommended: false,
		Usage:       `phoneNumber`,
		Type:        "string",
	},
	{
		Name:        "email",
		StructField: "Email",
		Required:    false,
		Recommended: false,
		Usage:       `email`,
		Type:        "string",
	},
	{
		Name:        "company",
		StructField: "Company",
		Required:    false,
		Recommended: false,
		Usage:       `company`,
		Type:        "string",
	},
	{
		Name:        "street",
		StructField: "Street",
		Required:    false,
		Recommended: false,
		Usage:       `street`,
		Type:        "string",
	},
	{
		Name:        "houseNumber",
		StructField: "HouseNumber",
		Required:    false,
		Recommended: false,
		Usage:       `houseNumber`,
		Type:        "string",
	},
	{
		Name:        "zipCode",
		StructField: "ZipCode",
		Required:    false,
		Recommended: false,
		Usage:       `zipCode`,
		Type:        "string",
	},
	{
		Name:        "city",
		StructField: "City",
		Required:    false,
		Recommended: false,
		Usage:       `city`,
		Type:        "string",
	},
	{
		Name:        "gender",
		StructField: "Gender",
		Required:    false,
		Recommended: false,
		Usage:       `gender`,
		Type:        "string",
	},
}
var CommonProfileCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "uniqueId (primary key)",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "first-name",
		Required: false,
		Usage:    `firstName`,
	},
	&cli.StringFlag{
		Name:     "last-name",
		Required: false,
		Usage:    `lastName`,
	},
	&cli.StringFlag{
		Name:     "phone-number",
		Required: false,
		Usage:    `phoneNumber`,
	},
	&cli.StringFlag{
		Name:     "email",
		Required: false,
		Usage:    `email`,
	},
	&cli.StringFlag{
		Name:     "company",
		Required: false,
		Usage:    `company`,
	},
	&cli.StringFlag{
		Name:     "street",
		Required: false,
		Usage:    `street`,
	},
	&cli.StringFlag{
		Name:     "house-number",
		Required: false,
		Usage:    `houseNumber`,
	},
	&cli.StringFlag{
		Name:     "zip-code",
		Required: false,
		Usage:    `zipCode`,
	},
	&cli.StringFlag{
		Name:     "city",
		Required: false,
		Usage:    `city`,
	},
	&cli.StringFlag{
		Name:     "gender",
		Required: false,
		Usage:    `gender`,
	},
}
var CommonProfileCreateCmd cli.Command = COMMON_PROFILE_ACTION_POST_ONE.ToCli()
var CommonProfileCreateInteractiveCmd cli.Command = cli.Command{
	Name:  "ic",
	Usage: "Creates a new entity, using requied fields in an interactive name",
	Flags: []cli.Flag{
		&cli.BoolFlag{
			Name:  "all",
			Usage: "Interactively asks for all inputs, not only required ones",
		},
	},
	Action: func(c *cli.Context) {
		query := workspaces.CommonCliQueryDSLBuilderAuthorize(c, &workspaces.SecurityModel{
			ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_COMMON_PROFILE_CREATE},
		})
		entity := &CommonProfileEntity{}
		workspaces.PopulateInteractively(entity, c, CommonProfileCommonInteractiveCliFlags)
		if entity, err := CommonProfileActionCreate(entity, query); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := yaml.Marshal(entity)
			fmt.Println(workspaces.FormatYamlKeys(string(f)))
		}
	},
}
var CommonProfileUpdateCmd cli.Command = cli.Command{
	Name:    "update",
	Aliases: []string{"u"},
	Flags:   CommonProfileCommonCliFlagsOptional,
	Usage:   "Updates entity by passing the parameters",
	Action: func(c *cli.Context) error {
		query := workspaces.CommonCliQueryDSLBuilderAuthorize(c, &workspaces.SecurityModel{
			ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_COMMON_PROFILE_UPDATE},
		})
		entity := CastCommonProfileFromCli(c)
		if entity, err := CommonProfileActionUpdate(query, entity); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := json.MarshalIndent(entity, "", "  ")
			fmt.Println(string(f))
		}
		return nil
	},
}

func (x *CommonProfileEntity) FromCli(c *cli.Context) *CommonProfileEntity {
	return CastCommonProfileFromCli(c)
}
func CastCommonProfileFromCli(c *cli.Context) *CommonProfileEntity {
	template := &CommonProfileEntity{}
	if c.IsSet("uid") {
		template.UniqueId = c.String("uid")
	}
	if c.IsSet("pid") {
		x := c.String("pid")
		template.ParentId = &x
	}
	if c.IsSet("first-name") {
		value := c.String("first-name")
		template.FirstName = &value
	}
	if c.IsSet("last-name") {
		value := c.String("last-name")
		template.LastName = &value
	}
	if c.IsSet("phone-number") {
		value := c.String("phone-number")
		template.PhoneNumber = &value
	}
	if c.IsSet("email") {
		value := c.String("email")
		template.Email = &value
	}
	if c.IsSet("company") {
		value := c.String("company")
		template.Company = &value
	}
	if c.IsSet("street") {
		value := c.String("street")
		template.Street = &value
	}
	if c.IsSet("house-number") {
		value := c.String("house-number")
		template.HouseNumber = &value
	}
	if c.IsSet("zip-code") {
		value := c.String("zip-code")
		template.ZipCode = &value
	}
	if c.IsSet("city") {
		value := c.String("city")
		template.City = &value
	}
	if c.IsSet("gender") {
		value := c.String("gender")
		template.Gender = &value
	}
	return template
}
func CommonProfileSyncSeederFromFs(fsRef *embed.FS, fileNames []string) {
	workspaces.SeederFromFSImport(
		workspaces.QueryDSL{},
		CommonProfileActionCreate,
		reflect.ValueOf(&CommonProfileEntity{}).Elem(),
		fsRef,
		fileNames,
		true,
	)
}
func CommonProfileSyncSeeders() {
	workspaces.SeederFromFSImport(
		workspaces.QueryDSL{WorkspaceId: workspaces.USER_SYSTEM},
		CommonProfileActionCreate,
		reflect.ValueOf(&CommonProfileEntity{}).Elem(),
		commonProfileSeedersFs,
		[]string{},
		true,
	)
}
func CommonProfileImportMocks() {
	workspaces.SeederFromFSImport(
		workspaces.QueryDSL{},
		CommonProfileActionCreate,
		reflect.ValueOf(&CommonProfileEntity{}).Elem(),
		&mocks.ViewsFs,
		[]string{},
		false,
	)
}
func CommonProfileWriteQueryMock(ctx workspaces.MockQueryContext) {
	for _, lang := range ctx.Languages {
		itemsPerPage := 9999
		if ctx.ItemsPerPage > 0 {
			itemsPerPage = ctx.ItemsPerPage
		}
		f := workspaces.QueryDSL{ItemsPerPage: itemsPerPage, Language: lang, WithPreloads: ctx.WithPreloads, Deep: true}
		items, count, _ := CommonProfileActionQuery(f)
		result := workspaces.QueryEntitySuccessResult(f, items, count)
		workspaces.WriteMockDataToFile(lang, "", "CommonProfile", result)
	}
}

var CommonProfileImportExportCommands = []cli.Command{
	{
		Name:  "mock",
		Usage: "Generates mock records based on the entity definition",
		Flags: []cli.Flag{
			&cli.IntFlag{
				Name:  "count",
				Usage: "how many activation key do you need to be generated and stored in database",
				Value: 10,
			},
			&cli.BoolFlag{
				Name:  "batch",
				Usage: "Multiple insert into database mode. Might miss children and relations at the moment",
			},
		},
		Action: func(c *cli.Context) error {
			query := workspaces.CommonCliQueryDSLBuilderAuthorize(c, &workspaces.SecurityModel{
				ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_COMMON_PROFILE_CREATE},
			})
			if c.Bool("batch") {
				CommonProfileActionSeederMultiple(query, c.Int("count"))
			} else {
				CommonProfileActionSeeder(query, c.Int("count"))
			}
			return nil
		},
	},
	{
		Name:    "init",
		Aliases: []string{"i"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Creates a basic seeder file for you, based on the definition module we have. You can populate this file as an example",
		Action: func(c *cli.Context) error {
			seed := CommonProfileActionSeederInit()
			workspaces.CommonInitSeeder(strings.TrimSpace(c.String("format")), seed)
			return nil
		},
	},
	{
		Name:    "validate",
		Aliases: []string{"v"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "file",
				Usage: "Validates an import file, such as yaml, json, csv, and gives some insights how the after import it would look like",
				Value: "common-profile-seeder-common-profile.yml",
				// Uncomment before publish, they need to specify
				// Required: true,
			},
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Reads a yaml file containing an array of common-profiles, you can run this to validate if your import file is correct, and how it would look like after import",
		Action: func(c *cli.Context) error {
			data := &[]CommonProfileEntity{}
			workspaces.ReadYamlFile(c.String("file"), data)
			fmt.Println(data)
			return nil
		},
	},
	cli.Command{
		Name:  "list",
		Usage: "Prints the list of files attached to this module for syncing or bootstrapping project",
		Action: func(c *cli.Context) error {
			if entity, err := workspaces.GetSeederFilenames(commonProfileSeedersFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "sync",
		Usage: "Tries to sync the embedded content into the database, the list could be seen by 'list' command",
		Action: func(c *cli.Context) error {
			workspaces.CommonCliImportEmbedCmd(c,
				CommonProfileActionCreate,
				reflect.ValueOf(&CommonProfileEntity{}).Elem(),
				commonProfileSeedersFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:  "mocks",
		Usage: "Prints the list of internal mock yaml files if they exist",
		Action: func(c *cli.Context) error {
			if entity, err := workspaces.GetSeederFilenames(&mocks.ViewsFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "msync",
		Usage: "Tries to sync mocks into the system",
		Action: func(c *cli.Context) error {
			workspaces.CommonCliImportEmbedCmd(c,
				CommonProfileActionCreate,
				reflect.ValueOf(&CommonProfileEntity{}).Elem(),
				&mocks.ViewsFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:    "export",
		Aliases: []string{"e"},
		Flags: append(workspaces.CommonQueryFlags,
			&cli.StringFlag{
				Name:     "file",
				Usage:    "The address of file you want the csv/yaml/json be exported to",
				Required: true,
			}),
		Usage: "Exports a query results into the csv/yaml/json format",
		Action: func(c *cli.Context) error {
			if strings.Contains(c.String("file"), ".csv") {
				workspaces.CommonCliExportCmd2(c,
					CommonProfileEntityStream,
					reflect.ValueOf(&CommonProfileEntity{}).Elem(),
					c.String("file"),
					&metas.MetaFs,
					"CommonProfileFieldMap.yml",
					CommonProfilePreloadRelations,
				)
			} else {
				workspaces.CommonCliExportCmd(c,
					CommonProfileActionQuery,
					reflect.ValueOf(&CommonProfileEntity{}).Elem(),
					c.String("file"),
					&metas.MetaFs,
					"CommonProfileFieldMap.yml",
					CommonProfilePreloadRelations,
				)
			}
			return nil
		},
	},
	cli.Command{
		Name: "import",
		Flags: append(
			append(
				workspaces.CommonQueryFlags,
				&cli.StringFlag{
					Name:     "file",
					Usage:    "The address of file you want the csv be imported from",
					Required: true,
				}),
			CommonProfileCommonCliFlagsOptional...,
		),
		Usage: "imports csv/yaml/json file and place it and its children into database",
		Action: func(c *cli.Context) error {
			workspaces.CommonCliImportCmdAuthorized(c,
				CommonProfileActionCreate,
				reflect.ValueOf(&CommonProfileEntity{}).Elem(),
				c.String("file"),
				&workspaces.SecurityModel{
					ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_COMMON_PROFILE_CREATE},
				},
				func() CommonProfileEntity {
					v := CastCommonProfileFromCli(c)
					return *v
				},
			)
			return nil
		},
	},
}
var CommonProfileCliCommands []cli.Command = []cli.Command{
	COMMON_PROFILE_ACTION_QUERY.ToCli(),
	COMMON_PROFILE_ACTION_TABLE.ToCli(),
	CommonProfileCreateCmd,
	CommonProfileUpdateCmd,
	CommonProfileAskCmd,
	CommonProfileCreateInteractiveCmd,
	CommonProfileWipeCmd,
	workspaces.GetCommonRemoveQuery(reflect.ValueOf(&CommonProfileEntity{}).Elem(), CommonProfileActionRemove),
}

func CommonProfileCliFn() cli.Command {
	CommonProfileCliCommands = append(CommonProfileCliCommands, CommonProfileImportExportCommands...)
	return cli.Command{
		Name:        "commonprofile",
		Description: "CommonProfiles module actions",
		Usage:       `A common profile issues for every user (Set the living address, etc)`,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "language",
				Value: "en",
			},
		},
		Subcommands: CommonProfileCliCommands,
	}
}

var COMMON_PROFILE_ACTION_TABLE = workspaces.Module2Action{
	Name:          "table",
	ActionName:    "table",
	ActionAliases: []string{"t"},
	Flags:         workspaces.CommonQueryFlags,
	Description:   "Table formatted queries all of the entities in database based on the standard query format",
	Action:        CommonProfileActionQuery,
	CliAction: func(c *cli.Context, security *workspaces.SecurityModel) error {
		workspaces.CommonCliTableCmd2(c,
			CommonProfileActionQuery,
			security,
			reflect.ValueOf(&CommonProfileEntity{}).Elem(),
		)
		return nil
	},
}
var COMMON_PROFILE_ACTION_QUERY = workspaces.Module2Action{
	Method: "GET",
	Url:    "/common-profiles",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_COMMON_PROFILE_QUERY},
	},
	Group: "commonProfile",
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpQueryEntity(c, CommonProfileActionQuery)
		},
	},
	Format:         "QUERY",
	Action:         CommonProfileActionQuery,
	ResponseEntity: &[]CommonProfileEntity{},
	Out: &workspaces.Module2ActionBody{
		Entity: "CommonProfileEntity",
	},
	CliAction: func(c *cli.Context, security *workspaces.SecurityModel) error {
		workspaces.CommonCliQueryCmd2(
			c,
			CommonProfileActionQuery,
			security,
		)
		return nil
	},
	CliName:       "query",
	ActionName:    "query",
	ActionAliases: []string{"q"},
	Flags:         workspaces.CommonQueryFlags,
	Description:   "Queries all of the entities in database based on the standard query format (s+)",
}
var COMMON_PROFILE_ACTION_EXPORT = workspaces.Module2Action{
	Method: "GET",
	Url:    "/common-profiles/export",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_COMMON_PROFILE_QUERY},
	},
	Group: "commonProfile",
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpStreamFileChannel(c, CommonProfileActionExport)
		},
	},
	Format:         "QUERY",
	Action:         CommonProfileActionExport,
	ResponseEntity: &[]CommonProfileEntity{},
	Out: &workspaces.Module2ActionBody{
		Entity: "CommonProfileEntity",
	},
}
var COMMON_PROFILE_ACTION_GET_ONE = workspaces.Module2Action{
	Method: "GET",
	Url:    "/common-profile/:uniqueId",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_COMMON_PROFILE_QUERY},
	},
	Group: "commonProfile",
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpGetEntity(c, CommonProfileActionGetOne)
		},
	},
	Format:         "GET_ONE",
	Action:         CommonProfileActionGetOne,
	ResponseEntity: &CommonProfileEntity{},
	Out: &workspaces.Module2ActionBody{
		Entity: "CommonProfileEntity",
	},
}
var COMMON_PROFILE_ACTION_POST_ONE = workspaces.Module2Action{
	ActionName:    "create",
	ActionAliases: []string{"c"},
	Description:   "Create new commonProfile",
	Flags:         CommonProfileCommonCliFlags,
	Method:        "POST",
	Url:           "/common-profile",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_COMMON_PROFILE_CREATE},
	},
	Group: "commonProfile",
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpPostEntity(c, CommonProfileActionCreate)
		},
	},
	CliAction: func(c *cli.Context, security *workspaces.SecurityModel) error {
		result, err := workspaces.CliPostEntity(c, CommonProfileActionCreate, security)
		workspaces.HandleActionInCli(c, result, err, map[string]map[string]string{})
		return err
	},
	Action:         CommonProfileActionCreate,
	Format:         "POST_ONE",
	RequestEntity:  &CommonProfileEntity{},
	ResponseEntity: &CommonProfileEntity{},
	Out: &workspaces.Module2ActionBody{
		Entity: "CommonProfileEntity",
	},
	In: &workspaces.Module2ActionBody{
		Entity: "CommonProfileEntity",
	},
}
var COMMON_PROFILE_ACTION_PATCH = workspaces.Module2Action{
	ActionName:    "update",
	ActionAliases: []string{"u"},
	Flags:         CommonProfileCommonCliFlagsOptional,
	Method:        "PATCH",
	Url:           "/common-profile",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_COMMON_PROFILE_UPDATE},
	},
	Group: "commonProfile",
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpUpdateEntity(c, CommonProfileActionUpdate)
		},
	},
	Action:         CommonProfileActionUpdate,
	RequestEntity:  &CommonProfileEntity{},
	ResponseEntity: &CommonProfileEntity{},
	Format:         "PATCH_ONE",
	Out: &workspaces.Module2ActionBody{
		Entity: "CommonProfileEntity",
	},
	In: &workspaces.Module2ActionBody{
		Entity: "CommonProfileEntity",
	},
}
var COMMON_PROFILE_ACTION_PATCH_BULK = workspaces.Module2Action{
	Method: "PATCH",
	Url:    "/common-profiles",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_COMMON_PROFILE_UPDATE},
	},
	Group: "commonProfile",
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpUpdateEntities(c, CommonProfileActionBulkUpdate)
		},
	},
	Action:         CommonProfileActionBulkUpdate,
	Format:         "PATCH_BULK",
	RequestEntity:  &workspaces.BulkRecordRequest[CommonProfileEntity]{},
	ResponseEntity: &workspaces.BulkRecordRequest[CommonProfileEntity]{},
	Out: &workspaces.Module2ActionBody{
		Entity: "CommonProfileEntity",
	},
	In: &workspaces.Module2ActionBody{
		Entity: "CommonProfileEntity",
	},
}
var COMMON_PROFILE_ACTION_DELETE = workspaces.Module2Action{
	Method: "DELETE",
	Url:    "/common-profile",
	Format: "DELETE_DSL",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_COMMON_PROFILE_DELETE},
	},
	Group: "commonProfile",
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpRemoveEntity(c, CommonProfileActionRemove)
		},
	},
	Action:         CommonProfileActionRemove,
	RequestEntity:  &workspaces.DeleteRequest{},
	ResponseEntity: &workspaces.DeleteResponse{},
	TargetEntity:   &CommonProfileEntity{},
}
var COMMON_PROFILE_ACTION_DISTINCT_PATCH_ONE = workspaces.Module2Action{
	Method: "PATCH",
	Url:    "/common-profile/distinct",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_COMMON_PROFILE_UPDATE_DISTINCT_USER},
	},
	Group: "commonProfile",
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpUpdateEntity(c, CommonProfileDistinctActionUpdate)
		},
	},
	Action:         CommonProfileDistinctActionUpdate,
	Format:         "PATCH_ONE",
	RequestEntity:  &CommonProfileEntity{},
	ResponseEntity: &CommonProfileEntity{},
	Out: &workspaces.Module2ActionBody{
		Entity: "CommonProfileEntity",
	},
	In: &workspaces.Module2ActionBody{
		Entity: "CommonProfileEntity",
	},
}
var COMMON_PROFILE_ACTION_DISTINCT_GET_ONE = workspaces.Module2Action{
	Method: "GET",
	Url:    "/common-profile/distinct",
	SecurityModel: &workspaces.SecurityModel{
		ActionRequires: []workspaces.PermissionInfo{PERM_ROOT_COMMON_PROFILE_GET_DISTINCT_USER},
	},
	Group: "commonProfile",
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			workspaces.HttpGetEntity(c, CommonProfileDistinctActionGetOne)
		},
	},
	Action:         CommonProfileDistinctActionGetOne,
	Format:         "GET_ONE",
	ResponseEntity: &CommonProfileEntity{},
	Out: &workspaces.Module2ActionBody{
		Entity: "CommonProfileEntity",
	},
}

/**
 *	Override this function on CommonProfileEntityHttp.go,
 *	In order to add your own http
 **/
var AppendCommonProfileRouter = func(r *[]workspaces.Module2Action) {}

func GetCommonProfileModule2Actions() []workspaces.Module2Action {
	routes := []workspaces.Module2Action{
		COMMON_PROFILE_ACTION_QUERY,
		COMMON_PROFILE_ACTION_EXPORT,
		COMMON_PROFILE_ACTION_GET_ONE,
		COMMON_PROFILE_ACTION_POST_ONE,
		COMMON_PROFILE_ACTION_PATCH,
		COMMON_PROFILE_ACTION_PATCH_BULK,
		COMMON_PROFILE_ACTION_DELETE,
		COMMON_PROFILE_ACTION_DISTINCT_PATCH_ONE,
		COMMON_PROFILE_ACTION_DISTINCT_GET_ONE,
	}
	// Append user defined functions
	AppendCommonProfileRouter(&routes)
	return routes
}

var PERM_ROOT_COMMON_PROFILE_DELETE = workspaces.PermissionInfo{
	CompleteKey: "root/modules/commonprofile/common-profile/delete",
	Name:        "Delete common profile",
}
var PERM_ROOT_COMMON_PROFILE_CREATE = workspaces.PermissionInfo{
	CompleteKey: "root/modules/commonprofile/common-profile/create",
	Name:        "Create common profile",
}
var PERM_ROOT_COMMON_PROFILE_UPDATE = workspaces.PermissionInfo{
	CompleteKey: "root/modules/commonprofile/common-profile/update",
	Name:        "Update common profile",
}
var PERM_ROOT_COMMON_PROFILE_QUERY = workspaces.PermissionInfo{
	CompleteKey: "root/modules/commonprofile/common-profile/query",
	Name:        "Query common profile",
}
var PERM_ROOT_COMMON_PROFILE_GET_DISTINCT_USER = workspaces.PermissionInfo{
	CompleteKey: "root/modules/commonprofile/common-profile/get-distinct-user",
	Name:        "Get common profile Distinct",
}
var PERM_ROOT_COMMON_PROFILE_UPDATE_DISTINCT_USER = workspaces.PermissionInfo{
	CompleteKey: "root/modules/commonprofile/common-profile/update-distinct-user",
	Name:        "Update common profile Distinct",
}
var PERM_ROOT_COMMON_PROFILE = workspaces.PermissionInfo{
	CompleteKey: "root/modules/commonprofile/common-profile/*",
	Name:        "Entire common profile actions (*)",
}
var ALL_COMMON_PROFILE_PERMISSIONS = []workspaces.PermissionInfo{
	PERM_ROOT_COMMON_PROFILE_DELETE,
	PERM_ROOT_COMMON_PROFILE_CREATE,
	PERM_ROOT_COMMON_PROFILE_UPDATE,
	PERM_ROOT_COMMON_PROFILE_GET_DISTINCT_USER,
	PERM_ROOT_COMMON_PROFILE_UPDATE_DISTINCT_USER,
	PERM_ROOT_COMMON_PROFILE_QUERY,
	PERM_ROOT_COMMON_PROFILE,
}

func CommonProfileDistinctActionUpdate(
	query workspaces.QueryDSL,
	fields *CommonProfileEntity,
) (*CommonProfileEntity, *workspaces.IError) {
	query.UniqueId = query.UserId
	entity, err := CommonProfileActionGetOne(query)
	if err != nil || entity.UniqueId == "" {
		fields.UniqueId = query.UserId
		return CommonProfileActionCreateFn(fields, query)
	} else {
		fields.UniqueId = query.UniqueId
		return CommonProfileActionUpdateFn(query, fields)
	}
}
func CommonProfileDistinctActionGetOne(
	query workspaces.QueryDSL,
) (*CommonProfileEntity, *workspaces.IError) {
	query.UniqueId = query.UserId
	entity, err := CommonProfileActionGetOne(query)
	if err != nil && err.HttpCode == 404 {
		return &CommonProfileEntity{}, nil
	}
	return entity, err
}

var CommonProfileEntityBundle = workspaces.EntityBundle{
	Permissions: ALL_COMMON_PROFILE_PERMISSIONS,
	// Cli command has been exluded, since we use module to wrap all the entities
	// to be more easier to wrap up.
	// Create your own bundle if you need with Cli
	//CliCommands: []cli.Command{
	//	CommonProfileCliFn(),
	//},
	Actions:      GetCommonProfileModule2Actions(),
	MockProvider: CommonProfileImportMocks,
	AutoMigrationEntities: []interface{}{
		&CommonProfileEntity{},
	},
}
