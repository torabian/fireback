import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';
import { ExecutionContext, createParamDecorator } from '@nestjs/common';
import { TypedRequestInit, URLSearchParamsX, fetchx } from './sdk';
/**
* Action to communicate with the action changePassword
*/


	/**
 * FetchChangePasswordAction
 */

export class FetchChangePasswordAction {
  static URL = '/passport/change-password';
  static Method = 'post';

  
  	static Axios = (clientInstance: AxiosInstance, config: AxiosRequestConfig<unknown>) =>
		clientInstance
		.request<unknown, AxiosResponse<unknown>, unknown>(config)

		
	
  
  
	static Fetch = (
		init?: TypedRequestInit<unknown, unknown> | undefined,
		qs?: ChangePasswordQueryParams,
		overrideUrl?: string
	) =>
		fetchx<unknown, unknown, unknown>(
			new URL((overrideUrl ?? FetchChangePasswordAction.URL ) + '?' + qs?.toString()),
			init
		)

		
			.then((res) => res.text())
		

	
		

	
}









	
/**
  * @decription The base class definition for changePasswordReq
  **/

export class ChangePasswordReq {
	 
		/**
  * @type {string}
  * @description New password meeting the security requirements.
  **/
 password;
		/**
  * @returns {string}
  * @description New password meeting the security requirements.
  **/
getPassword () { return this[`password`] }
		/**
  * @param {string}
  * @description New password meeting the security requirements.
  **/
setPassword (value) { this[`password`] = value; return this; } 
	 
		/**
  * @type {string}
  * @description The passport uniqueId (not the email or phone number) which password would be applied to. Don't confuse with value.
  **/
 uniqueId;
		/**
  * @returns {string}
  * @description The passport uniqueId (not the email or phone number) which password would be applied to. Don't confuse with value.
  **/
getUniqueId () { return this[`uniqueId`] }
		/**
  * @param {string}
  * @description The passport uniqueId (not the email or phone number) which password would be applied to. Don't confuse with value.
  **/
setUniqueId (value) { this[`uniqueId`] = value; return this; } 
	

	

	/** a placeholder for WebRequestX auto patching the json content to the object **/
	static __jsonParsable;

	
		/**
   * Nest.js decorator for controller headers. Instead of using @Headers() value: any, now you can use for example:
   * @example
   * @Get()
   * getHello(@ChangePasswordReq.Nest() headers: ChangePasswordReq): string {
   *  return JSON.stringify(headers.getContentType());
   * }
   */
  static Nest = createParamDecorator(
	(_data, ctx) => {
		// @ts-ignore
		const request = ctx.switchToHttp().getRequest();
		// @ts-ignore
		return new ChangePasswordReq( request.body );
	},
  );


	
}










/**
 * ChangePasswordHeaders class
 * Auto-generated from Module3Action
 */
export class ChangePasswordHeaders extends Headers {

  // the getters generated by us would be casting types before returning.
  // you still can use .get function to get the string value.
  #getTyped(key, type) {
    const val = this.get(key);
    if (val == null) return null;

    const t = type.toLowerCase();

    if (t.includes('number')) return Number(val);
    if (t.includes('bool')) return val === 'true';
    return val; // string or any other fallback
  }


  /**
   * @returns {Record<string, string>}
   * Converts Headers to plain object
   */
  toObject() {
    return Object.fromEntries(this.entries());
  }

  
  /**
   * Nest.js decorator for controller headers. Instead of using @Headers() value: any, now you can use for example:
   * @example
   * @Get()
   * getHello(@ChangePasswordHeaders.Nest() headers: ChangePasswordHeaders): string {
   *  return JSON.stringify(headers.getContentType());
   * }
   */
  static Nest = createParamDecorator(
	(_data, ctx) => {
		// @ts-ignore
		const request = ctx.switchToHttp().getRequest();
		// @ts-ignore
		return new ChangePasswordHeaders(Object.entries(request.headers));
	},
  );

  
}




/**
 * ChangePasswordQueryParams class
 * Auto-generated from Module3Action
 */
export class ChangePasswordQueryParams extends URLSearchParamsX {


  // the getters generated by us would be casting types before returning.
  // you still can use .get function to get the string value.
  #getTyped(key, type) {
    const val = this.get(key);
    if (val == null) return null;

    const t = type.toLowerCase();

    if (t.includes('number')) return Number(val);
    if (t.includes('bool')) return val === 'true';
    return val; // string or any other fallback
  }


  
  /**
   * Nest.js decorator for controller query. Instead of using @Query() value: any, now you can use for example:
   * @example
   * @Get()
   * getHello(@ChangePasswordQueryParams.Nest() query: ChangePasswordQueryParams): string {
   *  return JSON.stringify(query.getMyfield());
   * }
   */
  static Nest = createParamDecorator(
	(_data, ctx) => {
		// @ts-ignore
		const request = ctx.switchToHttp().getRequest();
		// @ts-ignore
		return new ChangePasswordQueryParams(request.query);
	},
  );

  
}


 
