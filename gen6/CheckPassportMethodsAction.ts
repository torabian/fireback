import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';
import { ExecutionContext, createParamDecorator } from '@nestjs/common';
import { TypedRequestInit, URLSearchParamsX, fetchx } from './sdk';
/**
* Action to communicate with the action checkPassportMethods
*/


	/**
 * FetchCheckPassportMethodsAction
 */

export class FetchCheckPassportMethodsAction {
  static URL = '/passports/available-methods';
  static Method = 'get';

  
  	static Axios = (clientInstance: AxiosInstance, config: AxiosRequestConfig<unknown>) =>
		clientInstance
		.request<unknown, AxiosResponse<unknown>, unknown>(config)

		
		.then((res) => {
			return {
			...res,

			
			// if there is a output class, create instance out of it.
			data: new CheckPassportMethodsRes(res.data),
			};
		});
		
	
  
  
	static Fetch = (
		init?: TypedRequestInit<unknown, unknown> | undefined,
		qs?: CheckPassportMethodsQueryParams,
		overrideUrl?: string
	) =>
		fetchx<unknown, unknown, unknown>(
			new URL((overrideUrl ?? FetchCheckPassportMethodsAction.URL ) + '?' + qs?.toString()),
			init
		)

		
			.then((res) => res.json())
		

	
		
			.then((data) => new CheckPassportMethodsRes (data));
		

	
}











	
/**
  * @decription The base class definition for checkPassportMethodsRes
  **/

export class CheckPassportMethodsRes {
	 
		/**
  * @type {boolean}
  * @description 
  **/
 email;
		/**
  * @returns {boolean}
  * @description 
  **/
getEmail () { return this[`email`] }
		/**
  * @param {boolean}
  * @description 
  **/
setEmail (value) { this[`email`] = value; return this; } 
	 
		/**
  * @type {boolean}
  * @description 
  **/
 phone;
		/**
  * @returns {boolean}
  * @description 
  **/
getPhone () { return this[`phone`] }
		/**
  * @param {boolean}
  * @description 
  **/
setPhone (value) { this[`phone`] = value; return this; } 
	 
		/**
  * @type {boolean}
  * @description 
  **/
 google;
		/**
  * @returns {boolean}
  * @description 
  **/
getGoogle () { return this[`google`] }
		/**
  * @param {boolean}
  * @description 
  **/
setGoogle (value) { this[`google`] = value; return this; } 
	 
		/**
  * @type {boolean}
  * @description 
  **/
 facebook;
		/**
  * @returns {boolean}
  * @description 
  **/
getFacebook () { return this[`facebook`] }
		/**
  * @param {boolean}
  * @description 
  **/
setFacebook (value) { this[`facebook`] = value; return this; } 
	 
		/**
  * @type {string}
  * @description 
  **/
 googleOAuthClientKey;
		/**
  * @returns {string}
  * @description 
  **/
getGoogleOAuthClientKey () { return this[`googleOAuthClientKey`] }
		/**
  * @param {string}
  * @description 
  **/
setGoogleOAuthClientKey (value) { this[`googleOAuthClientKey`] = value; return this; } 
	 
		/**
  * @type {string}
  * @description 
  **/
 facebookAppId;
		/**
  * @returns {string}
  * @description 
  **/
getFacebookAppId () { return this[`facebookAppId`] }
		/**
  * @param {string}
  * @description 
  **/
setFacebookAppId (value) { this[`facebookAppId`] = value; return this; } 
	 
		/**
  * @type {boolean}
  * @description 
  **/
 enabledRecaptcha2;
		/**
  * @returns {boolean}
  * @description 
  **/
getEnabledRecaptcha2 () { return this[`enabledRecaptcha2`] }
		/**
  * @param {boolean}
  * @description 
  **/
setEnabledRecaptcha2 (value) { this[`enabledRecaptcha2`] = value; return this; } 
	 
		/**
  * @type {string}
  * @description 
  **/
 recaptcha2ClientKey;
		/**
  * @returns {string}
  * @description 
  **/
getRecaptcha2ClientKey () { return this[`recaptcha2ClientKey`] }
		/**
  * @param {string}
  * @description 
  **/
setRecaptcha2ClientKey (value) { this[`recaptcha2ClientKey`] = value; return this; } 
	

	

	/** a placeholder for WebRequestX auto patching the json content to the object **/
	static __jsonParsable;

	
		/**
   * Nest.js decorator for controller headers. Instead of using @Headers() value: any, now you can use for example:
   * @example
   * @Get()
   * getHello(@CheckPassportMethodsRes.Nest() headers: CheckPassportMethodsRes): string {
   *  return JSON.stringify(headers.getContentType());
   * }
   */
  static Nest = createParamDecorator(
	(_data, ctx) => {
		// @ts-ignore
		const request = ctx.switchToHttp().getRequest();
		// @ts-ignore
		return new CheckPassportMethodsRes( request.body );
	},
  );


	
}








/**
 * CheckPassportMethodsHeaders class
 * Auto-generated from Module3Action
 */
export class CheckPassportMethodsHeaders extends Headers {

  // the getters generated by us would be casting types before returning.
  // you still can use .get function to get the string value.
  #getTyped(key, type) {
    const val = this.get(key);
    if (val == null) return null;

    const t = type.toLowerCase();

    if (t.includes('number')) return Number(val);
    if (t.includes('bool')) return val === 'true';
    return val; // string or any other fallback
  }


  /**
   * @returns {Record<string, string>}
   * Converts Headers to plain object
   */
  toObject() {
    return Object.fromEntries(this.entries());
  }

  
  /**
   * Nest.js decorator for controller headers. Instead of using @Headers() value: any, now you can use for example:
   * @example
   * @Get()
   * getHello(@CheckPassportMethodsHeaders.Nest() headers: CheckPassportMethodsHeaders): string {
   *  return JSON.stringify(headers.getContentType());
   * }
   */
  static Nest = createParamDecorator(
	(_data, ctx) => {
		// @ts-ignore
		const request = ctx.switchToHttp().getRequest();
		// @ts-ignore
		return new CheckPassportMethodsHeaders(Object.entries(request.headers));
	},
  );

  
}




/**
 * CheckPassportMethodsQueryParams class
 * Auto-generated from Module3Action
 */
export class CheckPassportMethodsQueryParams extends URLSearchParamsX {


  // the getters generated by us would be casting types before returning.
  // you still can use .get function to get the string value.
  #getTyped(key, type) {
    const val = this.get(key);
    if (val == null) return null;

    const t = type.toLowerCase();

    if (t.includes('number')) return Number(val);
    if (t.includes('bool')) return val === 'true';
    return val; // string or any other fallback
  }


  
  /**
   * Nest.js decorator for controller query. Instead of using @Query() value: any, now you can use for example:
   * @example
   * @Get()
   * getHello(@CheckPassportMethodsQueryParams.Nest() query: CheckPassportMethodsQueryParams): string {
   *  return JSON.stringify(query.getMyfield());
   * }
   */
  static Nest = createParamDecorator(
	(_data, ctx) => {
		// @ts-ignore
		const request = ctx.switchToHttp().getRequest();
		// @ts-ignore
		return new CheckPassportMethodsQueryParams(request.query);
	},
  );

  
}


 
