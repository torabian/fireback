/**
* Action to communicate with the action queryUserRoleWorkspaces
*/
 








	
/**
  * @decription The base class definition for queryUserRoleWorkspacesRes
  **/

export class QueryUserRoleWorkspacesRes {
	 
		/**
  * @type {string}
  * @description 
  **/
 name;
		/**
  * @returns {string}
  * @description 
  **/
getName () { return this[`name`] }
		/**
  * @param {string}
  * @description 
  **/
setName (value) { this[`name`] = value; return this; } 
	 
		/**
  * @type {string[]}
  * @description Workspace level capabilities which are available
  **/
 capabilities;
		/**
  * @returns {string[]}
  * @description Workspace level capabilities which are available
  **/
getCapabilities () { return this[`capabilities`] }
		/**
  * @param {string[]}
  * @description Workspace level capabilities which are available
  **/
setCapabilities (value) { this[`capabilities`] = value; return this; } 
	 
		/**
  * @type {string}
  * @description 
  **/
 uniqueId;
		/**
  * @returns {string}
  * @description 
  **/
getUniqueId () { return this[`uniqueId`] }
		/**
  * @param {string}
  * @description 
  **/
setUniqueId (value) { this[`uniqueId`] = value; return this; } 
	 
		/**
  * @type {QueryUserRoleWorkspacesRes.Roles}
  * @description 
  **/
 roles;
		/**
  * @returns {QueryUserRoleWorkspacesRes.Roles}
  * @description 
  **/
getRoles () { return this[`roles`] }
		/**
  * @param {QueryUserRoleWorkspacesRes.Roles}
  * @description 
  **/
setRoles (value) { this[`roles`] = value; return this; } 
	

	
		
/**
  * @decription The base class definition for roles
  **/

static Roles = class Roles {
	 
		/**
  * @type {string}
  * @description 
  **/
 name;
		/**
  * @returns {string}
  * @description 
  **/
getName () { return this[`name`] }
		/**
  * @param {string}
  * @description 
  **/
setName (value) { this[`name`] = value; return this; } 
	 
		/**
  * @type {string}
  * @description 
  **/
 uniqueId;
		/**
  * @returns {string}
  * @description 
  **/
getUniqueId () { return this[`uniqueId`] }
		/**
  * @param {string}
  * @description 
  **/
setUniqueId (value) { this[`uniqueId`] = value; return this; } 
	 
		/**
  * @type {string[]}
  * @description Capabilities related to this role which are available
  **/
 capabilities;
		/**
  * @returns {string[]}
  * @description Capabilities related to this role which are available
  **/
getCapabilities () { return this[`capabilities`] }
		/**
  * @param {string[]}
  * @description Capabilities related to this role which are available
  **/
setCapabilities (value) { this[`capabilities`] = value; return this; } 
	

	

	/** a placeholder for WebRequesX auto patching the json content to the object **/
	static __jsonParsable;
}

	

	/** a placeholder for WebRequesX auto patching the json content to the object **/
	static __jsonParsable;
}








/**
 * QueryUserRoleWorkspacesHeaders class
 * Auto-generated from Module3Action
 */
export class QueryUserRoleWorkspacesHeaders extends Headers {

  // the getters generated by us would be casting types before returning.
  // you still can use .get function to get the string value.
  #getTyped(key, type) {
    const val = this.get(key);
    if (val == null) return null;

    const t = type.toLowerCase();

    if (t.includes('number')) return Number(val);
    if (t.includes('bool')) return val === 'true';
    return val; // string or any other fallback
  }


  /**
   * @returns {Record<string, string>}
   * Converts Headers to plain object
   */
  toObject() {
    return Object.fromEntries(this.entries());
  }

  
  /**
   * Nest.js decorator for controller headers. Instead of using @Headers() value: any, now you can use for example:
   * @example
   * @Get()
   * getHello(@FetchUserHeader.Nest() headers: FetchUserHeader): string {
   *  return JSON.stringify(headers.getContentType());
   * }
   */
  static Nest = createParamDecorator(
	(_data: unknown, ctx: ExecutionContext) => {
		// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
		const request = ctx.switchToHttp().getRequest();
		// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-member-access
		return new QueryUserRoleWorkspacesHeaders(Object.entries(request.headers));
	},
  );

  
}




/**
 * QueryUserRoleWorkspacesQueryParams class
 * Auto-generated from Module3Action
 */
export class QueryUserRoleWorkspacesQueryParams extends URLSearchParamsX {


  // the getters generated by us would be casting types before returning.
  // you still can use .get function to get the string value.
  #getTyped(key, type) {
    const val = this.get(key);
    if (val == null) return null;

    const t = type.toLowerCase();

    if (t.includes('number')) return Number(val);
    if (t.includes('bool')) return val === 'true';
    return val; // string or any other fallback
  }


  
  /**
   * Nest.js decorator for controller query. Instead of using @Query() value: any, now you can use for example:
   * @example
   * @Get()
   * getHello(@FetchUserQuery.Nest() query: FetchUserQuery): string {
   *  return JSON.stringify(query.getMyfield());
   * }
   */
  static Nest = createParamDecorator(
	(_data: unknown, ctx: ExecutionContext) => {
		// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
		const request = ctx.switchToHttp().getRequest();
		// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-member-access
		return new QueryUserRoleWorkspacesQueryParams(request.query);
	},
  );

  
}


 
