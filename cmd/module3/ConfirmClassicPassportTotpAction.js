/**
* Action to communicate with the action confirmClassicPassportTotp
*/
 






	
/**
  * @decription The base class definition for confirmClassicPassportTotpReq
  **/

export class ConfirmClassicPassportTotpReq {
	 
		/**
  * @type {string}
  * @description Passport value, email or phone number which is already successfully registered.
  **/
 value;
		/**
  * @returns {string}
  * @description Passport value, email or phone number which is already successfully registered.
  **/
getValue () { return this[`value`] }
		/**
  * @param {string}
  * @description Passport value, email or phone number which is already successfully registered.
  **/
setValue (value) { this[`value`] = value; return this; } 
	 
		/**
  * @type {string}
  * @description Password related to the passport. Totp is only available for passports with a password. Basically totp is protecting passport, not otp over email or sms.
  **/
 password;
		/**
  * @returns {string}
  * @description Password related to the passport. Totp is only available for passports with a password. Basically totp is protecting passport, not otp over email or sms.
  **/
getPassword () { return this[`password`] }
		/**
  * @param {string}
  * @description Password related to the passport. Totp is only available for passports with a password. Basically totp is protecting passport, not otp over email or sms.
  **/
setPassword (value) { this[`password`] = value; return this; } 
	 
		/**
  * @type {string}
  * @description The totp code generated by authenticator such as google or microsft apps.
  **/
 totpCode;
		/**
  * @returns {string}
  * @description The totp code generated by authenticator such as google or microsft apps.
  **/
getTotpCode () { return this[`totpCode`] }
		/**
  * @param {string}
  * @description The totp code generated by authenticator such as google or microsft apps.
  **/
setTotpCode (value) { this[`totpCode`] = value; return this; } 
	

	

	/** a placeholder for WebRequesX auto patching the json content to the object **/
	static __jsonParsable;
}













	
/**
  * @decription The base class definition for confirmClassicPassportTotpRes
  **/

export class ConfirmClassicPassportTotpRes {
	 
		/**
  * @type {UserSessionDto}
  * @description 
  **/
 session;
		/**
  * @returns {UserSessionDto}
  * @description 
  **/
getSession () { return this[`session`] }
		/**
  * @param {UserSessionDto}
  * @description 
  **/
setSession (value) { this[`session`] = value; return this; } 
	

	

	/** a placeholder for WebRequesX auto patching the json content to the object **/
	static __jsonParsable;
}








/**
 * ConfirmClassicPassportTotpHeaders class
 * Auto-generated from Module3Action
 */
export class ConfirmClassicPassportTotpHeaders extends Headers {

  // the getters generated by us would be casting types before returning.
  // you still can use .get function to get the string value.
  #getTyped(key, type) {
    const val = this.get(key);
    if (val == null) return null;

    const t = type.toLowerCase();

    if (t.includes('number')) return Number(val);
    if (t.includes('bool')) return val === 'true';
    return val; // string or any other fallback
  }


  /**
   * @returns {Record<string, string>}
   * Converts Headers to plain object
   */
  toObject() {
    return Object.fromEntries(this.entries());
  }

  
  /**
   * Nest.js decorator for controller headers. Instead of using @Headers() value: any, now you can use for example:
   * @example
   * @Get()
   * getHello(@FetchUserHeader.Nest() headers: FetchUserHeader): string {
   *  return JSON.stringify(headers.getContentType());
   * }
   */
  static Nest = createParamDecorator(
	(_data: unknown, ctx: ExecutionContext) => {
		// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
		const request = ctx.switchToHttp().getRequest();
		// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-member-access
		return new ConfirmClassicPassportTotpHeaders(Object.entries(request.headers));
	},
  );

  
}




/**
 * ConfirmClassicPassportTotpQueryParams class
 * Auto-generated from Module3Action
 */
export class ConfirmClassicPassportTotpQueryParams extends URLSearchParamsX {


  // the getters generated by us would be casting types before returning.
  // you still can use .get function to get the string value.
  #getTyped(key, type) {
    const val = this.get(key);
    if (val == null) return null;

    const t = type.toLowerCase();

    if (t.includes('number')) return Number(val);
    if (t.includes('bool')) return val === 'true';
    return val; // string or any other fallback
  }


  
  /**
   * Nest.js decorator for controller query. Instead of using @Query() value: any, now you can use for example:
   * @example
   * @Get()
   * getHello(@FetchUserQuery.Nest() query: FetchUserQuery): string {
   *  return JSON.stringify(query.getMyfield());
   * }
   */
  static Nest = createParamDecorator(
	(_data: unknown, ctx: ExecutionContext) => {
		// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
		const request = ctx.switchToHttp().getRequest();
		// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-member-access
		return new ConfirmClassicPassportTotpQueryParams(request.query);
	},
  );

  
}


 
