package commonprofile

/*
*	Generated by fireback 1.1.28
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"embed"
	"encoding/json"
	"fmt"
	reflect "reflect"
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/gookit/event"
	jsoniter "github.com/json-iterator/go"
	"github.com/schollz/progressbar/v3"
	metas "github.com/torabian/fireback/modules/commonprofile/metas"
	mocks "github.com/torabian/fireback/modules/commonprofile/mocks/CommonProfile"
	seeders "github.com/torabian/fireback/modules/commonprofile/seeders/CommonProfile"
	"github.com/torabian/fireback/modules/fireback"
	"github.com/urfave/cli"
	"gopkg.in/yaml.v2"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

var commonProfileSeedersFs = &seeders.ViewsFs

func ResetCommonProfileSeeders(fs *embed.FS) {
	commonProfileSeedersFs = fs
}

type CommonProfileEntity struct {
	// Defines the visibility of the record in the table.
	// Visibility is a detailed topic, you can check all of the visibility values in workspaces/visibility.go
	// by default, visibility of record are 0, means they are protected by the workspace
	// which are being created, and visible to every member of the workspace
	Visibility *string `json:"visibility,omitempty" yaml:"visibility,omitempty"`
	// The unique-id of the workspace which content belongs to. Upon creation this will be designated
	// to the selected workspace by user, if they have write access. You can change this value
	// or prevent changes to it manually (on root features for example modifying other workspace)
	WorkspaceId *string `json:"workspaceId,omitempty" yaml:"workspaceId,omitempty"`
	// The unique-id of the parent table, which this record is being linked to.
	// used internally for making relations in fireback, generally does not need manual changes
	// or modification by the developer or user. For example, if you have a object inside an object
	// the unique-id of the parent will be written in the child.
	LinkerId *string `json:"linkerId,omitempty" yaml:"linkerId,omitempty"`
	// Used for recursive or parent-child operations. Some tables, are having nested relations,
	// and this field makes the table self refrenceing. ParentId needs to exist in the table before
	// creating of modifying a record.
	ParentId *string `json:"parentId,omitempty" yaml:"parentId,omitempty"`
	// Makes a field deletable. Some records should not be deletable at all.
	// default it's true.
	IsDeletable *bool `json:"isDeletable,omitempty" yaml:"isDeletable,omitempty" gorm:"default:true"`
	// Makes a field updatable. Some records should not be updatable at all.
	// default it's true.
	IsUpdatable *bool `json:"isUpdatable,omitempty" yaml:"isUpdatable,omitempty" gorm:"default:true"`
	// The unique-id of the user which is creating the record, or the record belongs to.
	// Administration might want to change this to any user, by default Fireback fills
	// it to the current authenticated user.
	UserId *string `json:"userId,omitempty" yaml:"userId,omitempty"`
	// General mechanism to rank the elements. From code perspective, it's just a number,
	// but you can sort it based on any logic for records to make a ranking, sorting.
	// they should not be unique across a table.
	Rank int64 `json:"rank,omitempty" gorm:"type:int;name:rank"`
	// Primary numeric key in the database. This value is not meant to be exported to public
	// or be used to access data at all. Rather a mechanism of indexing columns internally
	// or cursor pagination in future releases of fireback, or better search performance.
	ID uint `gorm:"primaryKey;autoIncrement" json:"id,omitempty" yaml:"id,omitempty"`
	// Unique id of the record across the table. This value will be accessed from public APIs,
	// and many other places intead of numeric ID property.
	// Upon generation, a UUID automatically is being assigned, and if user has specified the
	// Unique id in the post body, it will be used. This mechanism allows to manage unsaved
	// content on front-end much easier than requiring parent to exists first.
	UniqueId string `json:"uniqueId,omitempty" gorm:"unique;not null;size:100;" yaml:"uniqueId,omitempty"`
	// The time that the record has been created in nano-seconds.
	// the field will be automatically populated by gorm orm.
	Created int64 `json:"created,omitempty" yaml:"created,omitempty" gorm:"autoUpdateTime:nano"`
	// The time that the record has been updated in nano-seconds.
	// the field will be automatically populated by gorm orm.
	Updated int64 `json:"updated,omitempty" yaml:"updated,omitempty"`
	// The time that the record has been deleted softly (means the data still exists in database, but no longer visible to any feature) in nano seconds
	// you need to make sure check this field if writing custom sql queries.
	// the field will be automatically populated by gorm orm.
	Deleted int64 `json:"deleted,omitempty" yaml:"deleted,omitempty"`
	// Record creation date time formatting based on locale of the headers, or other
	// possible factors.
	CreatedFormatted string `json:"createdFormatted,omitempty" yaml:"createdFormatted,omitempty" sql:"-" gorm:"-"`
	// Record update date time formatting based on locale of the headers, or other
	// possible factors.
	UpdatedFormatted string                 `json:"updatedFormatted,omitempty" yaml:"updatedFormatted,omitempty" sql:"-" gorm:"-"`
	FirstName        *string                `json:"firstName" yaml:"firstName"        `
	LastName         *string                `json:"lastName" yaml:"lastName"        `
	PhoneNumber      *string                `json:"phoneNumber" yaml:"phoneNumber"        `
	Email            *string                `json:"email" yaml:"email"        `
	Company          *string                `json:"company" yaml:"company"        `
	Street           *string                `json:"street" yaml:"street"        `
	HouseNumber      *string                `json:"houseNumber" yaml:"houseNumber"        `
	ZipCode          *string                `json:"zipCode" yaml:"zipCode"        `
	City             *string                `json:"city" yaml:"city"        `
	Gender           *string                `json:"gender" yaml:"gender"        `
	Children         []*CommonProfileEntity `csv:"-" gorm:"-" sql:"-" json:"children,omitempty" yaml:"children,omitempty"`
	LinkedTo         *CommonProfileEntity   `csv:"-" yaml:"-" gorm:"-" json:"-" sql:"-"`
}

func CommonProfileEntityStream(q fireback.QueryDSL) (chan []*CommonProfileEntity, *fireback.QueryResultMeta, error) {
	cn := make(chan []*CommonProfileEntity)
	q.ItemsPerPage = 50
	q.StartIndex = 0
	_, qrm, err := CommonProfileActionQuery(q)
	if err != nil {
		return nil, nil, err
	}
	go func() {
		defer close(cn)
		for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
			items, _, _ := CommonProfileActionQuery(q)
			i += q.ItemsPerPage
			q.StartIndex = i
			cn <- items
		}
	}()
	return cn, qrm, nil
}

type CommonProfileEntityList struct {
	Items []*CommonProfileEntity
}

func NewCommonProfileEntityList(items []*CommonProfileEntity) *CommonProfileEntityList {
	return &CommonProfileEntityList{
		Items: items,
	}
}
func (x *CommonProfileEntityList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *CommonProfileEntityList) ToTree() *fireback.TreeOperation[CommonProfileEntity] {
	return fireback.NewTreeOperation(
		x.Items,
		func(t *CommonProfileEntity) string {
			if t.ParentId == nil {
				return ""
			}
			return *t.ParentId
		},
		func(t *CommonProfileEntity) string {
			return t.UniqueId
		},
	)
}

var CommonProfilePreloadRelations []string = []string{}
var COMMON_PROFILE_EVENT_CREATED = "commonProfile.created"
var COMMON_PROFILE_EVENT_UPDATED = "commonProfile.updated"
var COMMON_PROFILE_EVENT_DELETED = "commonProfile.deleted"
var COMMON_PROFILE_EVENTS = []string{
	COMMON_PROFILE_EVENT_CREATED,
	COMMON_PROFILE_EVENT_UPDATED,
	COMMON_PROFILE_EVENT_DELETED,
}

type CommonProfileFieldMap struct {
	FirstName   fireback.TranslatedString `yaml:"firstName"`
	LastName    fireback.TranslatedString `yaml:"lastName"`
	PhoneNumber fireback.TranslatedString `yaml:"phoneNumber"`
	Email       fireback.TranslatedString `yaml:"email"`
	Company     fireback.TranslatedString `yaml:"company"`
	Street      fireback.TranslatedString `yaml:"street"`
	HouseNumber fireback.TranslatedString `yaml:"houseNumber"`
	ZipCode     fireback.TranslatedString `yaml:"zipCode"`
	City        fireback.TranslatedString `yaml:"city"`
	Gender      fireback.TranslatedString `yaml:"gender"`
}

var CommonProfileEntityMetaConfig map[string]int64 = map[string]int64{}
var CommonProfileEntityJsonSchema = fireback.ExtractEntityFields(reflect.ValueOf(&CommonProfileEntity{}))

func entityCommonProfileFormatter(dto *CommonProfileEntity, query fireback.QueryDSL) {
	if dto == nil {
		return
	}
	if dto.Created > 0 {
		dto.CreatedFormatted = fireback.FormatDateBasedOnQuery(dto.Created, query)
	}
	if dto.Updated > 0 {
		dto.CreatedFormatted = fireback.FormatDateBasedOnQuery(dto.Updated, query)
	}
}
func CommonProfileMockEntity() *CommonProfileEntity {
	stringHolder := "~"
	int64Holder := int64(10)
	float64Holder := float64(10)
	_ = stringHolder
	_ = int64Holder
	_ = float64Holder
	entity := &CommonProfileEntity{
		FirstName:   &stringHolder,
		LastName:    &stringHolder,
		PhoneNumber: &stringHolder,
		Email:       &stringHolder,
		Company:     &stringHolder,
		Street:      &stringHolder,
		HouseNumber: &stringHolder,
		ZipCode:     &stringHolder,
		City:        &stringHolder,
		Gender:      &stringHolder,
	}
	return entity
}
func CommonProfileActionSeederMultiple(query fireback.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	batchSize := 100
	bar := progressbar.Default(int64(count))
	// Collect entities in batches
	var entitiesBatch []*CommonProfileEntity
	for i := 1; i <= count; i++ {
		entity := CommonProfileMockEntity()
		entitiesBatch = append(entitiesBatch, entity)
		// When batch size is reached, perform the batch insert
		if len(entitiesBatch) == batchSize || i == count {
			// Insert batch
			_, err := CommonProfileMultiInsert(entitiesBatch, query)
			if err == nil {
				successInsert += len(entitiesBatch)
			} else {
				fmt.Println(err)
				failureInsert += len(entitiesBatch)
			}
			// Clear the batch after insert
			entitiesBatch = nil
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func CommonProfileActionSeeder(query fireback.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	bar := progressbar.Default(int64(count))
	for i := 1; i <= count; i++ {
		entity := CommonProfileMockEntity()
		_, err := CommonProfileActionCreate(entity, query)
		if err == nil {
			successInsert++
		} else {
			fmt.Println(err)
			failureInsert++
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func (x *CommonProfileEntity) Seeder() string {
	obj := CommonProfileActionSeederInit()
	v, _ := json.MarshalIndent(obj, "", "  ")
	return string(v)
}
func CommonProfileActionSeederInit() *CommonProfileEntity {
	tildaRef := "~"
	_ = tildaRef
	entity := &CommonProfileEntity{
		FirstName:   &tildaRef,
		LastName:    &tildaRef,
		PhoneNumber: &tildaRef,
		Email:       &tildaRef,
		Company:     &tildaRef,
		Street:      &tildaRef,
		HouseNumber: &tildaRef,
		ZipCode:     &tildaRef,
		City:        &tildaRef,
		Gender:      &tildaRef,
	}
	return entity
}
func CommonProfileAssociationCreate(dto *CommonProfileEntity, query fireback.QueryDSL) error {
	return nil
}

/**
* These kind of content are coming from another entity, which is indepndent module
* If we want to create them, we need to do it before. This is not association.
**/
func CommonProfileRelationContentCreate(dto *CommonProfileEntity, query fireback.QueryDSL) error {
	return nil
}
func CommonProfileRelationContentUpdate(dto *CommonProfileEntity, query fireback.QueryDSL) error {
	return nil
}
func CommonProfilePolyglotCreateHandler(dto *CommonProfileEntity, query fireback.QueryDSL) {
	if dto == nil {
		return
	}
}

/**
 * This will be validating your entity fully. Important note is that, you add validate:* tag
 * in your entity, it will automatically work here. For slices inside entity, make sure you add
 * extra line of AppendSliceErrors, otherwise they won't be detected
 */
func CommonProfileValidator(dto *CommonProfileEntity, isPatch bool) *fireback.IError {
	err := fireback.CommonStructValidatorPointer(dto, isPatch)
	return err
}

// Creates a set of natural language queries, which can be used with
// AI tools to create content or help with some tasks
var CommonProfileAskCmd cli.Command = cli.Command{
	Name:  "nlp",
	Usage: "Set of natural language queries which helps creating content or data",
	Subcommands: []cli.Command{
		{
			Name:  "sample",
			Usage: "Asks for generating sample by giving an example data",
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:  "format",
					Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
					Value: "yaml",
				},
				&cli.IntFlag{
					Name:  "count",
					Usage: "How many samples to ask",
					Value: 30,
				},
			},
			Action: func(c *cli.Context) error {
				v := &CommonProfileEntity{}
				format := c.String("format")
				request := "\033[1m" + `
I need you to create me an array of exact signature as the example given below,
with at least ` + fmt.Sprint(c.String("count")) + ` items, mock the content with few words, and guess the possible values
based on the common sense. I need the output to be a valid ` + format + ` file.
Make sure you wrap the entire array in 'items' field. Also before that, I provide some explanation of each field:
FirstName: (type: string) Description: 
LastName: (type: string) Description: 
PhoneNumber: (type: string) Description: 
Email: (type: string) Description: 
Company: (type: string) Description: 
Street: (type: string) Description: 
HouseNumber: (type: string) Description: 
ZipCode: (type: string) Description: 
City: (type: string) Description: 
Gender: (type: string) Description: 
And here is the actual object signature:
` + v.Seeder() + `
`
				fmt.Println(request)
				return nil
			},
		},
	},
}

func CommonProfileEntityPreSanitize(dto *CommonProfileEntity, query fireback.QueryDSL) {
}
func CommonProfileEntityBeforeCreateAppend(dto *CommonProfileEntity, query fireback.QueryDSL) {
	if dto.UniqueId == "" {
		dto.UniqueId = fireback.UUID()
	}
	dto.WorkspaceId = &query.WorkspaceId
	dto.UserId = &query.UserId
	CommonProfileRecursiveAddUniqueId(dto, query)
}
func CommonProfileRecursiveAddUniqueId(dto *CommonProfileEntity, query fireback.QueryDSL) {
}

/*
*

		Batch inserts, do not have all features that create
		operation does. Use it with unnormalized content,
		or read the source code carefully.
	  This is not marked as an action, because it should not be available publicly
	  at this moment.

*
*/
func CommonProfileMultiInsert(dtos []*CommonProfileEntity, query fireback.QueryDSL) ([]*CommonProfileEntity, *fireback.IError) {
	if len(dtos) > 0 {
		for index := range dtos {
			CommonProfileEntityPreSanitize(dtos[index], query)
			CommonProfileEntityBeforeCreateAppend(dtos[index], query)
		}
		var dbref *gorm.DB = nil
		if query.Tx == nil {
			dbref = fireback.GetDbRef()
		} else {
			dbref = query.Tx
		}
		query.Tx = dbref
		err := dbref.Create(&dtos).Error
		if err != nil {
			return nil, fireback.GormErrorToIError(err)
		}
	}
	return dtos, nil
}
func CommonProfileActionBatchCreateFn(dtos []*CommonProfileEntity, query fireback.QueryDSL) ([]*CommonProfileEntity, *fireback.IError) {
	if dtos != nil && len(dtos) > 0 {
		items := []*CommonProfileEntity{}
		for _, item := range dtos {
			s, err := CommonProfileActionCreateFn(item, query)
			if err != nil {
				return nil, err
			}
			items = append(items, s)
		}
		return items, nil
	}
	return dtos, nil
}
func CommonProfileDeleteEntireChildren(query fireback.QueryDSL, dto *CommonProfileEntity) *fireback.IError {
	// intentionally removed this. It's hard to implement it, and probably wrong without
	// proper on delete cascade
	return nil
}
func CommonProfileActionCreateFn(dto *CommonProfileEntity, query fireback.QueryDSL) (*CommonProfileEntity, *fireback.IError) {
	// 1. Validate always
	if iError := CommonProfileValidator(dto, false); iError != nil {
		return nil, iError
	}
	// 1.5 Sanitize the content coming of the front-end
	CommonProfileEntityPreSanitize(dto, query)
	// 2. Append the necessary information about user, workspace
	CommonProfileEntityBeforeCreateAppend(dto, query)
	// 3. Append the necessary translations, even if english
	CommonProfilePolyglotCreateHandler(dto, query)
	// 3.5. Create other entities if we want select from them
	CommonProfileRelationContentCreate(dto, query)
	// 4. Create the entity
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = fireback.GetDbRef()
	} else {
		dbref = query.Tx
	}
	query.Tx = dbref
	err := dbref.Create(&dto).Error
	if err != nil {
		err := fireback.GormErrorToIError(err)
		return dto, err
	}
	// 5. Create sub entities, objects or arrays, association to other entities
	CommonProfileAssociationCreate(dto, query)
	// 6. Fire the event into system
	event.MustFire(COMMON_PROFILE_EVENT_CREATED, event.M{
		"entity":    dto,
		"entityKey": fireback.GetTypeString(&CommonProfileEntity{}),
		"target":    "workspace",
		"unqiueId":  query.WorkspaceId,
	})
	return dto, nil
}
func CommonProfileActionGetOne(query fireback.QueryDSL) (*CommonProfileEntity, *fireback.IError) {
	refl := reflect.ValueOf(&CommonProfileEntity{})
	item, err := fireback.GetOneEntity[CommonProfileEntity](query, refl)
	entityCommonProfileFormatter(item, query)
	return item, err
}
func CommonProfileActionGetByWorkspace(query fireback.QueryDSL) (*CommonProfileEntity, *fireback.IError) {
	refl := reflect.ValueOf(&CommonProfileEntity{})
	item, err := fireback.GetOneByWorkspaceEntity[CommonProfileEntity](query, refl)
	entityCommonProfileFormatter(item, query)
	return item, err
}
func CommonProfileActionQuery(query fireback.QueryDSL) ([]*CommonProfileEntity, *fireback.QueryResultMeta, error) {
	refl := reflect.ValueOf(&CommonProfileEntity{})
	items, meta, err := fireback.QueryEntitiesPointer[CommonProfileEntity](query, refl)
	for _, item := range items {
		entityCommonProfileFormatter(item, query)
	}
	return items, meta, err
}

var commonProfileMemoryItems []*CommonProfileEntity = []*CommonProfileEntity{}

func CommonProfileEntityIntoMemory() {
	q := fireback.QueryDSL{
		ItemsPerPage: 500,
		StartIndex:   0,
	}
	_, qrm, _ := CommonProfileActionQuery(q)
	for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
		items, _, _ := CommonProfileActionQuery(q)
		commonProfileMemoryItems = append(commonProfileMemoryItems, items...)
		i += q.ItemsPerPage
		q.StartIndex = i
	}
}
func CommonProfileMemGet(id uint) *CommonProfileEntity {
	for _, item := range commonProfileMemoryItems {
		if item.ID == id {
			return item
		}
	}
	return nil
}
func CommonProfileMemJoin(items []uint) []*CommonProfileEntity {
	res := []*CommonProfileEntity{}
	for _, item := range items {
		v := CommonProfileMemGet(item)
		if v != nil {
			res = append(res, v)
		}
	}
	return res
}
func CommonProfileUpdateExec(dbref *gorm.DB, query fireback.QueryDSL, fields *CommonProfileEntity) (*CommonProfileEntity, *fireback.IError) {
	uniqueId := fields.UniqueId
	query.TriggerEventName = COMMON_PROFILE_EVENT_UPDATED
	CommonProfileEntityPreSanitize(fields, query)
	var item CommonProfileEntity
	// If the entity is distinct by workspace, then the Query.WorkspaceId
	// which is selected is being used as the condition for create or update
	// if not, the unique Id is being used
	cond2 := &CommonProfileEntity{UserId: &query.UserId}
	q := dbref.
		Where(cond2).
		FirstOrCreate(&item)
	err := q.UpdateColumns(fields).Error
	if err != nil {
		return nil, fireback.GormErrorToIError(err)
	}
	query.Tx = dbref
	CommonProfileRelationContentUpdate(fields, query)
	CommonProfilePolyglotCreateHandler(fields, query)
	if ero := CommonProfileDeleteEntireChildren(query, fields); ero != nil {
		return nil, ero
	}
	// @meta(update has many)
	err = dbref.
		Preload(clause.Associations).
		Where(&CommonProfileEntity{UniqueId: uniqueId}).
		First(&item).Error
	event.MustFire(query.TriggerEventName, event.M{
		"entity":   &item,
		"target":   "workspace",
		"unqiueId": query.WorkspaceId,
	})
	if err != nil {
		return &item, fireback.GormErrorToIError(err)
	}
	return &item, nil
}
func CommonProfileActionUpdateFn(query fireback.QueryDSL, fields *CommonProfileEntity) (*CommonProfileEntity, *fireback.IError) {
	if fields == nil {
		return nil, fireback.Create401Error(&fireback.WorkspacesMessages.BodyIsMissing, []string{})
	}
	// 1. Validate always
	if iError := CommonProfileValidator(fields, true); iError != nil {
		return nil, iError
	}
	// Let's not add this. I am not sure of the consequences
	// CommonProfileRecursiveAddUniqueId(fields, query)
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = fireback.GetDbRef()
		var item *CommonProfileEntity
		vf := dbref.Transaction(func(tx *gorm.DB) error {
			dbref = tx
			var err *fireback.IError
			item, err = CommonProfileUpdateExec(dbref, query, fields)
			if err == nil {
				return nil
			} else {
				return err
			}
		})
		return item, fireback.CastToIError(vf)
	} else {
		dbref = query.Tx
		return CommonProfileUpdateExec(dbref, query, fields)
	}
}

var CommonProfileWipeCmd cli.Command = cli.Command{
	Name:  "wipe",
	Usage: "Wipes entire commonprofiles ",
	Action: func(c *cli.Context) error {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_COMMON_PROFILE_DELETE},
		})
		count, _ := CommonProfileActionWipeClean(query)
		fmt.Println("Removed", count, "of entities")
		return nil
	},
}

func CommonProfileActionRemove(query fireback.QueryDSL) (int64, *fireback.IError) {
	refl := reflect.ValueOf(&CommonProfileEntity{})
	query.ActionRequires = []fireback.PermissionInfo{PERM_ROOT_COMMON_PROFILE_DELETE}
	return fireback.RemoveEntity[CommonProfileEntity](query, refl)
}
func CommonProfileActionWipeClean(query fireback.QueryDSL) (int64, error) {
	var err error
	var count int64 = 0
	{
		subCount, subErr := fireback.WipeCleanEntity[CommonProfileEntity]()
		if subErr != nil {
			fmt.Println("Error while wiping 'CommonProfileEntity'", subErr)
			return count, subErr
		} else {
			count += subCount
		}
	}
	return count, err
}
func CommonProfileActionBulkUpdate(
	query fireback.QueryDSL, dto *fireback.BulkRecordRequest[CommonProfileEntity]) (
	*fireback.BulkRecordRequest[CommonProfileEntity], *fireback.IError,
) {
	result := []*CommonProfileEntity{}
	err := fireback.GetDbRef().Transaction(func(tx *gorm.DB) error {
		query.Tx = tx
		for _, record := range dto.Records {
			item, err := CommonProfileActionUpdate(query, record)
			if err != nil {
				return err
			} else {
				result = append(result, item)
			}
		}
		return nil
	})
	if err == nil {
		return dto, nil
	}
	return nil, err.(*fireback.IError)
}
func (x *CommonProfileEntity) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}

var CommonProfileEntityMeta = fireback.TableMetaData{
	EntityName:    "CommonProfile",
	ExportKey:     "common-profiles",
	TableNameInDb: "fb_common-profile_entities",
	EntityObject:  &CommonProfileEntity{},
	ExportStream:  CommonProfileActionExportT,
	ImportQuery:   CommonProfileActionImport,
}

func CommonProfileActionExport(
	query fireback.QueryDSL,
) (chan []byte, *fireback.IError) {
	return fireback.YamlExporterChannel[CommonProfileEntity](query, CommonProfileActionQuery, CommonProfilePreloadRelations)
}
func CommonProfileActionExportT(
	query fireback.QueryDSL,
) (chan []interface{}, *fireback.IError) {
	return fireback.YamlExporterChannelT[CommonProfileEntity](query, CommonProfileActionQuery, CommonProfilePreloadRelations)
}
func CommonProfileActionImport(
	dto interface{}, query fireback.QueryDSL,
) *fireback.IError {
	var json = jsoniter.ConfigCompatibleWithStandardLibrary
	var content CommonProfileEntity
	cx, err2 := json.Marshal(dto)
	if err2 != nil {
		return fireback.Create401Error(&fireback.WorkspacesMessages.InvalidContent, []string{})
	}
	json.Unmarshal(cx, &content)
	_, err := CommonProfileActionCreate(&content, query)
	return err
}

var CommonProfileCommonCliFlags = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "first-name",
		Required: false,
		Usage:    `firstName`,
	},
	&cli.StringFlag{
		Name:     "last-name",
		Required: false,
		Usage:    `lastName`,
	},
	&cli.StringFlag{
		Name:     "phone-number",
		Required: false,
		Usage:    `phoneNumber`,
	},
	&cli.StringFlag{
		Name:     "email",
		Required: false,
		Usage:    `email`,
	},
	&cli.StringFlag{
		Name:     "company",
		Required: false,
		Usage:    `company`,
	},
	&cli.StringFlag{
		Name:     "street",
		Required: false,
		Usage:    `street`,
	},
	&cli.StringFlag{
		Name:     "house-number",
		Required: false,
		Usage:    `houseNumber`,
	},
	&cli.StringFlag{
		Name:     "zip-code",
		Required: false,
		Usage:    `zipCode`,
	},
	&cli.StringFlag{
		Name:     "city",
		Required: false,
		Usage:    `city`,
	},
	&cli.StringFlag{
		Name:     "gender",
		Required: false,
		Usage:    `gender`,
	},
}
var CommonProfileCommonInteractiveCliFlags = []fireback.CliInteractiveFlag{
	{
		Name:        "firstName",
		StructField: "FirstName",
		Required:    false,
		Recommended: false,
		Usage:       `firstName`,
		Type:        "string",
	},
	{
		Name:        "lastName",
		StructField: "LastName",
		Required:    false,
		Recommended: false,
		Usage:       `lastName`,
		Type:        "string",
	},
	{
		Name:        "phoneNumber",
		StructField: "PhoneNumber",
		Required:    false,
		Recommended: false,
		Usage:       `phoneNumber`,
		Type:        "string",
	},
	{
		Name:        "email",
		StructField: "Email",
		Required:    false,
		Recommended: false,
		Usage:       `email`,
		Type:        "string",
	},
	{
		Name:        "company",
		StructField: "Company",
		Required:    false,
		Recommended: false,
		Usage:       `company`,
		Type:        "string",
	},
	{
		Name:        "street",
		StructField: "Street",
		Required:    false,
		Recommended: false,
		Usage:       `street`,
		Type:        "string",
	},
	{
		Name:        "houseNumber",
		StructField: "HouseNumber",
		Required:    false,
		Recommended: false,
		Usage:       `houseNumber`,
		Type:        "string",
	},
	{
		Name:        "zipCode",
		StructField: "ZipCode",
		Required:    false,
		Recommended: false,
		Usage:       `zipCode`,
		Type:        "string",
	},
	{
		Name:        "city",
		StructField: "City",
		Required:    false,
		Recommended: false,
		Usage:       `city`,
		Type:        "string",
	},
	{
		Name:        "gender",
		StructField: "Gender",
		Required:    false,
		Recommended: false,
		Usage:       `gender`,
		Type:        "string",
	},
}
var CommonProfileCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "first-name",
		Required: false,
		Usage:    `firstName`,
	},
	&cli.StringFlag{
		Name:     "last-name",
		Required: false,
		Usage:    `lastName`,
	},
	&cli.StringFlag{
		Name:     "phone-number",
		Required: false,
		Usage:    `phoneNumber`,
	},
	&cli.StringFlag{
		Name:     "email",
		Required: false,
		Usage:    `email`,
	},
	&cli.StringFlag{
		Name:     "company",
		Required: false,
		Usage:    `company`,
	},
	&cli.StringFlag{
		Name:     "street",
		Required: false,
		Usage:    `street`,
	},
	&cli.StringFlag{
		Name:     "house-number",
		Required: false,
		Usage:    `houseNumber`,
	},
	&cli.StringFlag{
		Name:     "zip-code",
		Required: false,
		Usage:    `zipCode`,
	},
	&cli.StringFlag{
		Name:     "city",
		Required: false,
		Usage:    `city`,
	},
	&cli.StringFlag{
		Name:     "gender",
		Required: false,
		Usage:    `gender`,
	},
}
var CommonProfileCreateCmd cli.Command = COMMON_PROFILE_ACTION_POST_ONE.ToCli()
var CommonProfileCreateInteractiveCmd cli.Command = cli.Command{
	Name:  "ic",
	Usage: "Creates a new entity, using requied fields in an interactive name",
	Flags: []cli.Flag{
		&cli.BoolFlag{
			Name:  "all",
			Usage: "Interactively asks for all inputs, not only required ones",
		},
	},
	Action: func(c *cli.Context) {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_COMMON_PROFILE_CREATE},
		})
		entity := &CommonProfileEntity{}
		fireback.PopulateInteractively(entity, c, CommonProfileCommonInteractiveCliFlags)
		if entity, err := CommonProfileActionCreate(entity, query); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := yaml.Marshal(entity)
			fmt.Println(fireback.FormatYamlKeys(string(f)))
		}
	},
}
var CommonProfileUpdateCmd cli.Command = cli.Command{
	Name:    "update",
	Aliases: []string{"u"},
	Flags:   CommonProfileCommonCliFlagsOptional,
	Usage:   "Updates entity by passing the parameters",
	Action: func(c *cli.Context) error {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_COMMON_PROFILE_UPDATE},
		})
		entity := CastCommonProfileFromCli(c)
		if entity, err := CommonProfileActionUpdate(query, entity); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := json.MarshalIndent(entity, "", "  ")
			fmt.Println(string(f))
		}
		return nil
	},
}

func (x *CommonProfileEntity) FromCli(c *cli.Context) *CommonProfileEntity {
	return CastCommonProfileFromCli(c)
}
func CastCommonProfileFromCli(c *cli.Context) *CommonProfileEntity {
	template := &CommonProfileEntity{}
	if c.IsSet("uid") {
		template.UniqueId = c.String("uid")
	}
	if c.IsSet("pid") {
		x := c.String("pid")
		template.ParentId = &x
	}
	if c.IsSet("first-name") {
		value := c.String("first-name")
		template.FirstName = &value
	}
	if c.IsSet("last-name") {
		value := c.String("last-name")
		template.LastName = &value
	}
	if c.IsSet("phone-number") {
		value := c.String("phone-number")
		template.PhoneNumber = &value
	}
	if c.IsSet("email") {
		value := c.String("email")
		template.Email = &value
	}
	if c.IsSet("company") {
		value := c.String("company")
		template.Company = &value
	}
	if c.IsSet("street") {
		value := c.String("street")
		template.Street = &value
	}
	if c.IsSet("house-number") {
		value := c.String("house-number")
		template.HouseNumber = &value
	}
	if c.IsSet("zip-code") {
		value := c.String("zip-code")
		template.ZipCode = &value
	}
	if c.IsSet("city") {
		value := c.String("city")
		template.City = &value
	}
	if c.IsSet("gender") {
		value := c.String("gender")
		template.Gender = &value
	}
	return template
}
func CommonProfileSyncSeederFromFs(fsRef *embed.FS, fileNames []string) {
	fireback.SeederFromFSImport(
		fireback.QueryDSL{},
		CommonProfileActionCreate,
		reflect.ValueOf(&CommonProfileEntity{}).Elem(),
		fsRef,
		fileNames,
		true,
	)
}
func CommonProfileSyncSeeders() {
	fireback.SeederFromFSImport(
		fireback.QueryDSL{WorkspaceId: fireback.USER_SYSTEM},
		CommonProfileActionCreate,
		reflect.ValueOf(&CommonProfileEntity{}).Elem(),
		commonProfileSeedersFs,
		[]string{},
		true,
	)
}
func CommonProfileImportMocks() {
	fireback.SeederFromFSImport(
		fireback.QueryDSL{},
		CommonProfileActionCreate,
		reflect.ValueOf(&CommonProfileEntity{}).Elem(),
		&mocks.ViewsFs,
		[]string{},
		false,
	)
}
func CommonProfileWriteQueryMock(ctx fireback.MockQueryContext) {
	for _, lang := range ctx.Languages {
		itemsPerPage := 9999
		if ctx.ItemsPerPage > 0 {
			itemsPerPage = ctx.ItemsPerPage
		}
		f := fireback.QueryDSL{ItemsPerPage: itemsPerPage, Language: lang, WithPreloads: ctx.WithPreloads, Deep: true}
		items, count, _ := CommonProfileActionQuery(f)
		result := fireback.QueryEntitySuccessResult(f, items, count)
		fireback.WriteMockDataToFile(lang, "", "CommonProfile", result)
	}
}
func CommonProfilesActionQueryString(keyword string, page int) ([]string, *fireback.QueryResultMeta, error) {
	searchFields := []string{
		`unique_id %"{keyword}"%`,
		`name %"{keyword}"%`,
	}
	m := func(item *CommonProfileEntity) string {
		label := item.UniqueId
		// if item.Name != nil {
		// 	label += " >>> " + *item.Name
		// }
		return label
	}
	query := fireback.QueryStringCastCli(searchFields, keyword, page)
	items, meta, err := CommonProfileActionQuery(query)
	stringItems := []string{}
	for _, item := range items {
		label := m(item)
		stringItems = append(stringItems, label)
	}
	return stringItems, meta, err
}

var CommonProfileImportExportCommands = []cli.Command{
	{
		Name:  "mock",
		Usage: "Generates mock records based on the entity definition",
		Flags: []cli.Flag{
			&cli.IntFlag{
				Name:  "count",
				Usage: "how many activation key do you need to be generated and stored in database",
				Value: 10,
			},
			&cli.BoolFlag{
				Name:  "batch",
				Usage: "Multiple insert into database mode. Might miss children and relations at the moment",
			},
		},
		Action: func(c *cli.Context) error {
			query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
				ActionRequires: []fireback.PermissionInfo{PERM_ROOT_COMMON_PROFILE_CREATE},
			})
			if c.Bool("batch") {
				CommonProfileActionSeederMultiple(query, c.Int("count"))
			} else {
				CommonProfileActionSeeder(query, c.Int("count"))
			}
			return nil
		},
	},
	{
		Name:    "init",
		Aliases: []string{"i"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Creates a basic seeder file for you, based on the definition module we have. You can populate this file as an example",
		Action: func(c *cli.Context) error {
			seed := CommonProfileActionSeederInit()
			fireback.CommonInitSeeder(strings.TrimSpace(c.String("format")), seed)
			return nil
		},
	},
	{
		Name:    "validate",
		Aliases: []string{"v"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "file",
				Usage: "Validates an import file, such as yaml, json, csv, and gives some insights how the after import it would look like",
				Value: "common-profile-seeder-common-profile.yml",
				// Uncomment before publish, they need to specify
				// Required: true,
			},
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Reads a yaml file containing an array of common-profiles, you can run this to validate if your import file is correct, and how it would look like after import",
		Action: func(c *cli.Context) error {
			data := &[]CommonProfileEntity{}
			fireback.ReadYamlFile(c.String("file"), data)
			fmt.Println(data)
			return nil
		},
	},
	cli.Command{
		Name:  "slist",
		Usage: "Prints the list of files attached to this module for syncing or bootstrapping project",
		Action: func(c *cli.Context) error {
			if entity, err := fireback.GetSeederFilenames(commonProfileSeedersFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "ssync",
		Usage: "Tries to sync the embedded content into the database, the list could be seen by 'slist' command",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportEmbedCmd(c,
				CommonProfileActionCreate,
				reflect.ValueOf(&CommonProfileEntity{}).Elem(),
				commonProfileSeedersFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:  "mlist",
		Usage: "Prints the list of embedded mocks into the app",
		Action: func(c *cli.Context) error {
			if entity, err := fireback.GetSeederFilenames(&mocks.ViewsFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "msync",
		Usage: "Tries to sync mocks into the system",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportEmbedCmd(c,
				CommonProfileActionCreate,
				reflect.ValueOf(&CommonProfileEntity{}).Elem(),
				&mocks.ViewsFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:    "export",
		Aliases: []string{"e"},
		Flags: append(fireback.CommonQueryFlags,
			&cli.StringFlag{
				Name:     "file",
				Usage:    "The address of file you want the csv/yaml/json be exported to",
				Required: true,
			}),
		Usage: "Exports a query results into the csv/yaml/json format",
		Action: func(c *cli.Context) error {
			if strings.Contains(c.String("file"), ".csv") {
				fireback.CommonCliExportCmd2(c,
					CommonProfileEntityStream,
					reflect.ValueOf(&CommonProfileEntity{}).Elem(),
					c.String("file"),
					&metas.MetaFs,
					"CommonProfileFieldMap.yml",
					CommonProfilePreloadRelations,
				)
			} else {
				fireback.CommonCliExportCmd(c,
					CommonProfileActionQuery,
					reflect.ValueOf(&CommonProfileEntity{}).Elem(),
					c.String("file"),
					&metas.MetaFs,
					"CommonProfileFieldMap.yml",
					CommonProfilePreloadRelations,
				)
			}
			return nil
		},
	},
	cli.Command{
		Name: "import",
		Flags: append(
			append(
				fireback.CommonQueryFlags,
				&cli.StringFlag{
					Name:     "file",
					Usage:    "The address of file you want the csv be imported from",
					Required: true,
				}),
			CommonProfileCommonCliFlagsOptional...,
		),
		Usage: "imports csv/yaml/json file and place it and its children into database",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportCmdAuthorized(c,
				CommonProfileActionCreate,
				reflect.ValueOf(&CommonProfileEntity{}).Elem(),
				c.String("file"),
				&fireback.SecurityModel{
					ActionRequires: []fireback.PermissionInfo{PERM_ROOT_COMMON_PROFILE_CREATE},
				},
				func() CommonProfileEntity {
					v := CastCommonProfileFromCli(c)
					return *v
				},
			)
			return nil
		},
	},
}
var CommonProfileCliCommands []cli.Command = []cli.Command{
	COMMON_PROFILE_ACTION_QUERY.ToCli(),
	COMMON_PROFILE_ACTION_TABLE.ToCli(),
	CommonProfileCreateCmd,
	CommonProfileUpdateCmd,
	CommonProfileAskCmd,
	CommonProfileCreateInteractiveCmd,
	CommonProfileWipeCmd,
	fireback.GetCommonRemoveQuery(reflect.ValueOf(&CommonProfileEntity{}).Elem(), CommonProfileActionRemove),
}

func CommonProfileCliFn() cli.Command {
	commands := append(CommonProfileImportExportCommands, CommonProfileCliCommands...)
	return cli.Command{
		Name:        "commonprofile",
		Description: "CommonProfiles module actions",
		Usage:       `A common profile issues for every user (Set the living address, etc)`,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "language",
				Value: "en",
			},
		},
		Subcommands: commands,
	}
}

var COMMON_PROFILE_ACTION_TABLE = fireback.Module3Action{
	Name:          "table",
	ActionAliases: []string{"t"},
	Flags:         fireback.CommonQueryFlags,
	Description:   "Table formatted queries all of the entities in database based on the standard query format",
	Action:        CommonProfileActionQuery,
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		fireback.CommonCliTableCmd2(c,
			CommonProfileActionQuery,
			security,
			reflect.ValueOf(&CommonProfileEntity{}).Elem(),
		)
		return nil
	},
}
var COMMON_PROFILE_ACTION_QUERY = fireback.Module3Action{
	Method: "GET",
	Url:    "/common-profiles",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_COMMON_PROFILE_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpQueryEntity(c, CommonProfileActionQuery)
		},
	},
	Format:         "QUERY",
	Action:         CommonProfileActionQuery,
	ResponseEntity: &[]CommonProfileEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "CommonProfileEntity",
	},
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		fireback.CommonCliQueryCmd2(
			c,
			CommonProfileActionQuery,
			security,
		)
		return nil
	},
	CliName:       "query",
	Name:          "query",
	ActionAliases: []string{"q"},
	Flags:         fireback.CommonQueryFlags,
	Description:   "Queries all of the entities in database based on the standard query format (s+)",
}
var COMMON_PROFILE_ACTION_EXPORT = fireback.Module3Action{
	Method: "GET",
	Url:    "/common-profiles/export",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_COMMON_PROFILE_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpStreamFileChannel(c, CommonProfileActionExport)
		},
	},
	Format:         "QUERY",
	Action:         CommonProfileActionExport,
	ResponseEntity: &[]CommonProfileEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "CommonProfileEntity",
	},
}
var COMMON_PROFILE_ACTION_GET_ONE = fireback.Module3Action{
	Method: "GET",
	Url:    "/common-profile/:uniqueId",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_COMMON_PROFILE_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpGetEntity(c, CommonProfileActionGetOne)
		},
	},
	Format:         "GET_ONE",
	Action:         CommonProfileActionGetOne,
	ResponseEntity: &CommonProfileEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "CommonProfileEntity",
	},
}
var COMMON_PROFILE_ACTION_POST_ONE = fireback.Module3Action{
	Name:          "create",
	ActionAliases: []string{"c"},
	Description:   "Create new commonProfile",
	Flags:         CommonProfileCommonCliFlags,
	Method:        "POST",
	Url:           "/common-profile",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_COMMON_PROFILE_CREATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpPostEntity(c, CommonProfileActionCreate)
		},
	},
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		result, err := fireback.CliPostEntity(c, CommonProfileActionCreate, security)
		fireback.HandleActionInCli(c, result, err, map[string]map[string]string{})
		return err
	},
	Action:         CommonProfileActionCreate,
	Format:         "POST_ONE",
	RequestEntity:  &CommonProfileEntity{},
	ResponseEntity: &CommonProfileEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "CommonProfileEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "CommonProfileEntity",
	},
}
var COMMON_PROFILE_ACTION_PATCH = fireback.Module3Action{
	Name:          "update",
	ActionAliases: []string{"u"},
	Flags:         CommonProfileCommonCliFlagsOptional,
	Method:        "PATCH",
	Url:           "/common-profile",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_COMMON_PROFILE_UPDATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntity(c, CommonProfileActionUpdate)
		},
	},
	Action:         CommonProfileActionUpdate,
	RequestEntity:  &CommonProfileEntity{},
	ResponseEntity: &CommonProfileEntity{},
	Format:         "PATCH_ONE",
	Out: &fireback.Module3ActionBody{
		Entity: "CommonProfileEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "CommonProfileEntity",
	},
}
var COMMON_PROFILE_ACTION_PATCH_BULK = fireback.Module3Action{
	Method: "PATCH",
	Url:    "/common-profiles",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_COMMON_PROFILE_UPDATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntities(c, CommonProfileActionBulkUpdate)
		},
	},
	Action:         CommonProfileActionBulkUpdate,
	Format:         "PATCH_BULK",
	RequestEntity:  &fireback.BulkRecordRequest[CommonProfileEntity]{},
	ResponseEntity: &fireback.BulkRecordRequest[CommonProfileEntity]{},
	Out: &fireback.Module3ActionBody{
		Entity: "CommonProfileEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "CommonProfileEntity",
	},
}
var COMMON_PROFILE_ACTION_DELETE = fireback.Module3Action{
	Method: "DELETE",
	Url:    "/common-profile",
	Format: "DELETE_DSL",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_COMMON_PROFILE_DELETE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpRemoveEntity(c, CommonProfileActionRemove)
		},
	},
	Action:         CommonProfileActionRemove,
	RequestEntity:  &fireback.DeleteRequest{},
	ResponseEntity: &fireback.DeleteResponse{},
	TargetEntity:   &CommonProfileEntity{},
}
var COMMON_PROFILE_ACTION_DISTINCT_PATCH_ONE = fireback.Module3Action{
	Method: "PATCH",
	Url:    "/common-profile/distinct",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_COMMON_PROFILE_UPDATE_DISTINCT_USER},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntity(c, CommonProfileDistinctActionUpdate)
		},
	},
	Action:         CommonProfileDistinctActionUpdate,
	Format:         "PATCH_ONE",
	RequestEntity:  &CommonProfileEntity{},
	ResponseEntity: &CommonProfileEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "CommonProfileEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "CommonProfileEntity",
	},
}
var COMMON_PROFILE_ACTION_DISTINCT_GET_ONE = fireback.Module3Action{
	Method: "GET",
	Url:    "/common-profile/distinct",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_COMMON_PROFILE_GET_DISTINCT_USER},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpGetEntity(c, CommonProfileDistinctActionGetOne)
		},
	},
	Action:         CommonProfileDistinctActionGetOne,
	Format:         "GET_ONE",
	ResponseEntity: &CommonProfileEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "CommonProfileEntity",
	},
}

/**
 *	Override this function on CommonProfileEntityHttp.go,
 *	In order to add your own http
 **/
var AppendCommonProfileRouter = func(r *[]fireback.Module3Action) {}

func GetCommonProfileModule3Actions() []fireback.Module3Action {
	routes := []fireback.Module3Action{
		COMMON_PROFILE_ACTION_QUERY,
		COMMON_PROFILE_ACTION_EXPORT,
		COMMON_PROFILE_ACTION_GET_ONE,
		COMMON_PROFILE_ACTION_POST_ONE,
		COMMON_PROFILE_ACTION_PATCH,
		COMMON_PROFILE_ACTION_PATCH_BULK,
		COMMON_PROFILE_ACTION_DELETE,
		COMMON_PROFILE_ACTION_DISTINCT_PATCH_ONE,
		COMMON_PROFILE_ACTION_DISTINCT_GET_ONE,
	}
	// Append user defined functions
	AppendCommonProfileRouter(&routes)
	return routes
}

var PERM_ROOT_COMMON_PROFILE_DELETE = fireback.PermissionInfo{
	CompleteKey: "root/modules/commonprofile/common-profile/delete",
	Name:        "Delete common profile",
}
var PERM_ROOT_COMMON_PROFILE_CREATE = fireback.PermissionInfo{
	CompleteKey: "root/modules/commonprofile/common-profile/create",
	Name:        "Create common profile",
}
var PERM_ROOT_COMMON_PROFILE_UPDATE = fireback.PermissionInfo{
	CompleteKey: "root/modules/commonprofile/common-profile/update",
	Name:        "Update common profile",
}
var PERM_ROOT_COMMON_PROFILE_QUERY = fireback.PermissionInfo{
	CompleteKey: "root/modules/commonprofile/common-profile/query",
	Name:        "Query common profile",
}
var PERM_ROOT_COMMON_PROFILE_GET_DISTINCT_USER = fireback.PermissionInfo{
	CompleteKey: "root/modules/commonprofile/common-profile/get-distinct-user",
	Name:        "Get common profile Distinct",
}
var PERM_ROOT_COMMON_PROFILE_UPDATE_DISTINCT_USER = fireback.PermissionInfo{
	CompleteKey: "root/modules/commonprofile/common-profile/update-distinct-user",
	Name:        "Update common profile Distinct",
}
var PERM_ROOT_COMMON_PROFILE = fireback.PermissionInfo{
	CompleteKey: "root/modules/commonprofile/common-profile/*",
	Name:        "Entire common profile actions (*)",
}
var ALL_COMMON_PROFILE_PERMISSIONS = []fireback.PermissionInfo{
	PERM_ROOT_COMMON_PROFILE_DELETE,
	PERM_ROOT_COMMON_PROFILE_CREATE,
	PERM_ROOT_COMMON_PROFILE_UPDATE,
	PERM_ROOT_COMMON_PROFILE_GET_DISTINCT_USER,
	PERM_ROOT_COMMON_PROFILE_UPDATE_DISTINCT_USER,
	PERM_ROOT_COMMON_PROFILE_QUERY,
	PERM_ROOT_COMMON_PROFILE,
}

func CommonProfileDistinctActionUpdate(
	query fireback.QueryDSL,
	fields *CommonProfileEntity,
) (*CommonProfileEntity, *fireback.IError) {
	query.UniqueId = query.UserId
	entity, err := CommonProfileActionGetOne(query)
	// It's distinct by user, then unique id and user needs to be equal
	fields.UniqueId = query.UserId
	fields.UserId = &query.UserId
	if err != nil || entity.UniqueId == "" {
		return CommonProfileActionCreateFn(fields, query)
	} else {
		return CommonProfileActionUpdateFn(query, fields)
	}
}
func CommonProfileDistinctActionGetOne(
	query fireback.QueryDSL,
) (*CommonProfileEntity, *fireback.IError) {
	// This needs to be fixed for distinct by user or workspace/user
	query.UniqueId = query.UserId
	entity, err := CommonProfileActionGetOne(query)
	if err != nil && err.HttpCode == 404 {
		return &CommonProfileEntity{}, nil
	}
	return entity, err
}

var CommonProfileEntityBundle = fireback.EntityBundle{
	Permissions: ALL_COMMON_PROFILE_PERMISSIONS,
	// Cli command has been exluded, since we use module to wrap all the entities
	// to be more easier to wrap up.
	// Create your own bundle if you need with Cli
	//CliCommands: []cli.Command{
	//	CommonProfileCliFn(),
	//},
	Actions:      GetCommonProfileModule3Actions(),
	MockProvider: CommonProfileImportMocks,
	AutoMigrationEntities: []interface{}{
		&CommonProfileEntity{},
	},
}
