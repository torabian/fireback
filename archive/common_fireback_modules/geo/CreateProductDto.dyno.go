package geo

/*
*	Generated by fireback 1.1.18
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/urfave/cli"
)

type CreateProductProducts struct {
	Title *string `json:"title" yaml:"title"        `
	// Datenano also has a text representation
}

func (x *CreateProductProducts) RootObjectName() string {
	return "CreateProductDto"
}
func CastCreateProductFromCli(c *cli.Context) *CreateProductDto {
	template := &CreateProductDto{}
	return template
}

var CreateProductDtoCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringSliceFlag{
		Name:     "products",
		Required: false,
		Usage:    "products",
	},
}

type CreateProductDto struct {
	Products []*CreateProductProducts `json:"products" yaml:"products"    gorm:"foreignKey:LinkerId;references:UniqueId;constraint:OnDelete:CASCADE"      `
	// Datenano also has a text representation
}
type CreateProductDtoList struct {
	Items []*CreateProductDto
}

func NewCreateProductDtoList(items []*CreateProductDto) *CreateProductDtoList {
	return &CreateProductDtoList{
		Items: items,
	}
}
func (x *CreateProductDto) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	// Intentional trim (so strings lib is always imported)
	return strings.TrimSpace("")
}
func (x *CreateProductDto) JsonPrint() {
	fmt.Println(x.Json())
}

// This is an experimental way to create new dtos, with exluding the pointers as helper.
func NewCreateProductDto() CreateProductDto {
	return CreateProductDto{}
}
