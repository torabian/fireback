"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3832],{2019:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"http-server","title":"Http Server running and configuration","description":"Fireback itself, or any projects, microservices built using fireback can serve on http,","source":"@site/docs/http-server.mdx","sourceDirName":".","slug":"/http-server","permalink":"/fireback/docs/http-server","draft":false,"unlisted":false,"editUrl":"https://github.com/torabian/fireback/tree/main/docs/docs/http-server.mdx","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"title":"Http Server running and configuration","sidebar_position":11,"slug":"http-server"},"sidebar":"tutorialSidebar","previous":{"title":"Building your project and deploying to a VPS","permalink":"/fireback/docs/building-your-project-and-deploying-to-vps"},"next":{"title":"Capabilities (Permissions)","permalink":"/fireback/docs/capabilities"}}');var r=t(4848),o=t(8453);const s={title:"Http Server running and configuration",sidebar_position:11,slug:"http-server"},a=void 0,c={},d=[];function l(e){const n={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Fireback itself, or any projects, microservices built using fireback can serve on http,\nusing ",(0,r.jsx)(n.code,{children:"fireback start"})," command. It would lift normal gin http server will all routes."]}),"\n",(0,r.jsxs)(n.p,{children:["You can set ",(0,r.jsx)(n.code,{children:"PORT"})," env variable, or set the port in configuration file as well. environment variable\nwill override the configuration, which overrides 4500 default port."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'ali@alis-MacBook-Pro ~ % fireback start\n\n[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.\n\n[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.\n - using env:\texport GIN_MODE=release\n - using code:\tgin.SetMode(gin.ReleaseMode)\n\n[GIN-debug] GET    /socket.io/*any           --\x3e github.com/gin-gonic/gin.WrapH.func1 (4 handlers)\n[GIN-debug] POST   /socket.io/*any           --\x3e github.com/gin-gonic/gin.WrapH.func1 (4 handlers)\n[GIN-debug] GET    /books                    --\x3e pixelplux.com/fireback/modules/books.HttpQueryBooks (4 handlers)\n...\n'})}),"\n",(0,r.jsxs)(n.p,{children:["If you are running fireback itself, you can see an open api document on ",(0,r.jsx)(n.code,{children:"http://localhost:4500/docs"}),"\nand also fireback administration ui on ",(0,r.jsx)(n.code,{children:"http://localhost:4500"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"For projects built manually you might need to create your own UI and place it into your binary,\nif thats how you would like to distribute UI."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(6540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);