"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2890],{8686:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>l,frontMatter:()=>c,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"reactive-actions","title":"Reactive actions in Fireback","description":"On of the areas that Fireback shines is Reactive actions. It might be useful","source":"@site/docs/reactive-actions.mdx","sourceDirName":".","slug":"/reactive-actions","permalink":"/fireback/docs/reactive-actions","draft":false,"unlisted":false,"editUrl":"https://github.com/torabian/fireback/tree/main/docs/docs/reactive-actions.mdx","tags":[],"version":"current","sidebarPosition":20,"frontMatter":{"title":"Reactive actions in Fireback","sidebar_position":20},"sidebar":"tutorialSidebar","previous":{"title":"Http Server running and configuration","permalink":"/fireback/docs/http-server"},"next":{"title":"Contributing to Fireback","permalink":"/fireback/docs/contribution"}}');var o=n(4848),a=n(8453);const c={title:"Reactive actions in Fireback",sidebar_position:20},r=void 0,s={},d=[{value:"Meaning of &#39;reactive&#39; method",id:"meaning-of-reactive-method",level:2},{value:"Difference in reactive method",id:"difference-in-reactive-method",level:2}];function h(e){const t={code:"code",h2:"h2",p:"p",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"On of the areas that Fireback shines is Reactive actions. It might be useful\nto read Fireback Actions first, if you are not familar with them."}),"\n",(0,o.jsx)(t.h2,{id:"meaning-of-reactive-method",children:"Meaning of 'reactive' method"}),"\n",(0,o.jsx)(t.p,{children:"Most of the APIs in a backend system are often common http requests, such as post, get,\ndelete and so on. A lot of time there is not a good definition of socket connection for endpoint,\nor goes through weird architectures such as socket.io framework."}),"\n",(0,o.jsxs)(t.p,{children:["Fireback, introduces a new http method in Module3 yaml definition, which is 'reactive'. When a action\nis defined as reactive, front-end can call that endpoint as a socket connection, and read/write operation\ncan be done automatically. You can connect from JavaScript side to reactive endpoint using ",(0,o.jsx)(t.code,{children:"new WebSocket"}),"\nclass, also fireback react sdk generates some hooks to interact with them."]}),"\n",(0,o.jsx)(t.h2,{id:"difference-in-reactive-method",children:"Difference in reactive method"}),"\n",(0,o.jsxs)(t.p,{children:["Reactive actions are very similar to http actions, just the function generated for them is using ",(0,o.jsx)(t.code,{children:"chan"})," or goroutines\nin golang. There will be 2 channels created, one for getting"]})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>r});var i=n(6540);const o={},a=i.createContext(o);function c(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);