"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7301],{947:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"deeper/xhtml","title":"XHtml","description":"XHtml is a output type in Fireback actions, which returns an html template.","source":"@site/docs/deeper/xhtml.mdx","sourceDirName":"deeper","slug":"/deeper/xhtml","permalink":"/fireback/docs/deeper/xhtml","draft":false,"unlisted":false,"editUrl":"https://github.com/torabian/fireback/tree/main/docs/docs/deeper/xhtml.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"XHtml","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"CSS and styling tools","permalink":"/fireback/docs/deeper/css-and-styling"},"next":{"title":"Seeders and mocks","permalink":"/fireback/docs/deeper/seeders-and-mocks"}}');var s=n(4848),r=n(8453);const i={title:"XHtml",sidebar_position:2},a=void 0,l={},c=[{value:"Conventions",id:"conventions",level:2},{value:"Notes regarding XHtml",id:"notes-regarding-xhtml",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"XHtml is a output type in Fireback actions, which returns an html template.\nYou an create html files in a folder, embed them, and then XHtml would render them.\nUpon development, they are being read from disk, and on production they are read from embed file system."}),"\n",(0,s.jsx)("iframe",{width:"100%",height:"400",src:"https://www.youtube.com/embed/jEgbZGyhMNw?si=cLadVcAhNo7jtRQ9",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",referrerpolicy:"strict-origin-when-cross-origin",allowfullscreen:!0}),"\n",(0,s.jsx)(t.p,{children:"XHtml is the simplest form of building websites, without additional framework, using pure css, almost pure html,\nand of course pure javascript. XHtml is perfect answer for the classic get/postback forms, you can make an endpoint to show your page,\nor accept a post back content and do some action on top of it."}),"\n",(0,s.jsxs)(t.p,{children:["All you need to do on an action is, to set the ",(0,s.jsx)(t.code,{children:"out.xhtml"})," to true:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"...\nactions:\n   - name: getHome\n     url: /\n     method: get\n     out:\n       xhtml: true\n   - name: postHome\n     url: /\n     method: post\n     out:\n       xhtml: true\n     in:\n       fields:\n       - name: firstName\n         type: string\n\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Following code would create a GetHomeAction.go and PostHomeAction.go files.\nAfter here, you need to create ",(0,s.jsx)(t.code,{children:"screens"})," folder, and create your html and static assets there."]}),"\n",(0,s.jsx)(t.p,{children:"I would invite you to watch the video instead."}),"\n",(0,s.jsx)(t.h2,{id:"conventions",children:"Conventions"}),"\n",(0,s.jsx)(t.p,{children:"All files can go to the screens folder, regardless of their type. Go codes treated as normal fireback modules,\nand you will pass the data to them directly."}),"\n",(0,s.jsxs)(t.p,{children:["Shared templates need to live in the ",(0,s.jsx)(t.code,{children:"screens/shared"})," as go template."]}),"\n",(0,s.jsx)(t.h2,{id:"notes-regarding-xhtml",children:"Notes regarding XHtml"}),"\n",(0,s.jsx)(t.p,{children:"Xhtml renders static assets, such as link, img, script tags relative to the markup template, and on the fly,\nchanges the import paths. This causes all intelisense on simple html to work, as well as javascript intelises.\nFireback combines css, and minifies them, but js won't be bundled, instead would be using import/export native feature\nof the browser to import other files."})]})}function m(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var o=n(6540);const s={},r=o.createContext(s);function i(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);