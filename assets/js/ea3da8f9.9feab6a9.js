"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4136],{8471:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>c,default:()=>m,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"deeper/css-and-styling","title":"CSS and styling tools","description":"There are many libraries for styling front-end (html) projects introduced. I remember once less/mess was popular,","source":"@site/docs/deeper/css-and-styling.mdx","sourceDirName":"deeper","slug":"/deeper/css-and-styling","permalink":"/fireback/docs/deeper/css-and-styling","draft":false,"unlisted":false,"editUrl":"https://github.com/torabian/fireback/tree/main/docs/docs/deeper/css-and-styling.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"CSS and styling tools","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Golang Generator (gof)","permalink":"/fireback/docs/codegen/gof/"},"next":{"title":"XHtml","permalink":"/fireback/docs/deeper/xhtml"}}');var i=n(4848),o=n(8453);const r={title:"CSS and styling tools",sidebar_position:2},c=void 0,a={},d=[{value:"Fireback cssx misc command",id:"fireback-cssx-misc-command",level:2}];function l(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.p,{children:"There are many libraries for styling front-end (html) projects introduced. I remember once less/mess was popular,\nand of course scss, sass, css-in-js, style component, and some other ideas come and go time to time.\nIn this situation, sticking to pure css, with a bit tool which can bundle, minify, and resolve the import paths\ncan both help the modularity, and the fact that the same files, without discussions, can be used for decades."}),"\n",(0,i.jsx)(s.h2,{id:"fireback-cssx-misc-command",children:"Fireback cssx misc command"}),"\n",(0,i.jsxs)(s.p,{children:["Fireback comes with a handy misc command, which can combine and minify the css files into a single output.\nThat's useful, when you want to use an entry point, such as styles.css, and then include couple of more files,\nusing ",(0,i.jsx)(s.code,{children:"@import url"})," syntax, and finally have a ",(0,i.jsx)(s.code,{children:"styles.min.css"}),"."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"ali@alis-MacBook-Pro fireback % ./app misc cssx --help\nNAME:\n   Fireback core microservice - v1.2.3 misc cssx - Minifies css file, and resolves the @import dependencies recursively\n\nUSAGE:\n   Fireback core microservice - v1.2.3 misc cssx [command options] [arguments...]\n\nDESCRIPTION:\n   Minifies css file, and resolves the @import dependencies recursively\n\nOPTIONS:\n   --entry-point value  Absolute or relative path of the css entry point file on the disk\n   --out value          output file address. If left empty, it will write result to stdout\n   --skip-minify        If true, would skip minifying the css result file\n   \n"})}),"\n",(0,i.jsxs)(s.p,{children:["The command supports ",(0,i.jsx)(s.code,{children:"@import url()"})," and ",(0,i.jsx)(s.code,{children:'@import ""'})," formats, with ",(0,i.jsx)(s.code,{children:".css"})," extensions. To avoid printing to file,\nskip providing ",(0,i.jsx)(s.code,{children:"--out"})," argument."]})]})}function m(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>c});var t=n(6540);const i={},o=t.createContext(i);function r(e){const s=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:s},e.children)}}}]);