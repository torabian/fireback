"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3832],{2019:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"http-server","title":"Http Server running and configuration","description":"Fireback itself, or any projects, microservices built using fireback can serve on http,","source":"@site/docs/http-server.mdx","sourceDirName":".","slug":"/http-server","permalink":"/fireback/docs/http-server","draft":false,"unlisted":false,"editUrl":"https://github.com/torabian/fireback/tree/main/docs/docs/http-server.mdx","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"title":"Http Server running and configuration","sidebar_position":11,"slug":"http-server"},"sidebar":"tutorialSidebar","previous":{"title":"Tasks","permalink":"/fireback/docs/tasks-in-fireback"},"next":{"title":"Reactive actions in Fireback","permalink":"/fireback/docs/reactive-actions"}}');var i=r(4848),o=r(8453);const s={title:"Http Server running and configuration",sidebar_position:11,slug:"http-server"},a=void 0,c={},d=[{value:"Load as system service",id:"load-as-system-service",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Fireback itself, or any projects, microservices built using fireback can serve on http,\nusing ",(0,i.jsx)(n.code,{children:"fireback start"})," command. It would lift normal gin http server will all routes."]}),"\n",(0,i.jsxs)(n.p,{children:["You can set ",(0,i.jsx)(n.code,{children:"PORT"})," env variable, or set the port in configuration file as well. environment variable\nwill override the configuration, which overrides 4500 default port."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'ali@alis-MacBook-Pro ~ % fireback start\n\n[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.\n\n[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.\n - using env:\texport GIN_MODE=release\n - using code:\tgin.SetMode(gin.ReleaseMode)\n\n[GIN-debug] GET    /socket.io/*any           --\x3e github.com/gin-gonic/gin.WrapH.func1 (4 handlers)\n[GIN-debug] POST   /socket.io/*any           --\x3e github.com/gin-gonic/gin.WrapH.func1 (4 handlers)\n[GIN-debug] GET    /books                    --\x3e pixelplux.com/fireback/modules/books.HttpQueryBooks (4 handlers)\n...\n'})}),"\n",(0,i.jsxs)(n.p,{children:["If you are running fireback itself, you can see an open api document on ",(0,i.jsx)(n.code,{children:"http://localhost:4500/docs"}),"\nand also fireback administration ui on ",(0,i.jsx)(n.code,{children:"http://localhost:4500"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"For projects built manually you might need to create your own UI and place it into your binary,\nif thats how you would like to distribute UI."}),"\n",(0,i.jsx)(n.h2,{id:"load-as-system-service",children:"Load as system service"}),"\n",(0,i.jsxs)(n.p,{children:["In the end, if you want to run a http server, you need to find a way to register it\nas a system service to run on background. Fireback already comes with this functionality\nusing ",(0,i.jsx)(n.code,{children:"fireback service"}),". You can use load, reload, unload commands."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"fireback service load\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Similarly, to stop or reload, for example when ",(0,i.jsx)(n.code,{children:".env"})," configuration has been changed."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"fireback service stop\nfireback service reload\n"})}),"\n",(0,i.jsx)(n.p,{children:"Your Fireback project also has the service ready:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"./app service load\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var t=r(6540);const i={},o=t.createContext(i);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);