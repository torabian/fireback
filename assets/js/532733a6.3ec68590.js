"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6461],{5138:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"deeper/getting-users-and-auth-flow","title":"Getting users and auth flow","description":"In many designs or early products, often we see there are a signup and signin using email","source":"@site/docs/deeper/getting-users-and-auth-flow.mdx","sourceDirName":"deeper","slug":"/deeper/getting-users-and-auth-flow","permalink":"/fireback/docs/deeper/getting-users-and-auth-flow","draft":false,"unlisted":false,"editUrl":"https://github.com/torabian/fireback/tree/main/docs/docs/deeper/getting-users-and-auth-flow.mdx","tags":[],"version":"current","sidebarPosition":43,"frontMatter":{"title":"Getting users and auth flow","sidebar_position":43},"sidebar":"tutorialSidebar","previous":{"title":"Fireback structure and sub projects","permalink":"/fireback/docs/deeper/fireback-structure-and-sub-projects"},"next":{"title":"Translations in Fireback","permalink":"/fireback/docs/deeper/translations"}}');var o=n(4848),a=n(8453);const i={title:"Getting users and auth flow",sidebar_position:43},r=void 0,c={},l=[{value:"Root workspace",id:"root-workspace",level:2},{value:"Creating account publicly",id:"creating-account-publicly",level:2},{value:"Inviting people into a workspace",id:"inviting-people-into-a-workspace",level:2},{value:"General flow of the user.",id:"general-flow-of-the-user",level:2}];function h(e){const t={h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"In many designs or early products, often we see there are a signup and signin using email\nforms which allow users to join a product. Over time, every product which is serving customers\nrealises how complicated and detailed these flows can be in the end."}),"\n",(0,o.jsx)(t.p,{children:"In this document we are gonna go and discuss that architecture, which can serve milions of users,\nand allow them to maintain their own accounts with least support possible."}),"\n",(0,o.jsx)(t.p,{children:"Fireback allows users join to a system via few entities:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Workspaces table in database, generally being linked to every feature of the app,\neven if the product is meant to work for a single user. In most software, at some point\nthere will be a need to invite someone or share data, and doing this from begining will\navoid that huge database and backend refactor in the future."}),"\n",(0,o.jsx)(t.li,{children:"Roles table, which tells what roles users can have within a workspace"}),"\n",(0,o.jsx)(t.li,{children:"User table, which holds information about a user in the system."}),"\n",(0,o.jsx)(t.li,{children:"Person table, which is holding the human or actual person info. From a logical perspective,\na person information can be in a product, but they are not necessary a user of the software."}),"\n",(0,o.jsx)(t.li,{children:"Invites, a mechanism to add people into fireback."}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"root-workspace",children:"Root workspace"}),"\n",(0,o.jsx)(t.p,{children:"By default, Fireback generates in every project a root workspace, but not a root user."}),"\n",(0,o.jsx)(t.p,{children:"Root workspace is having all features of the app, and it's not necessarily only to manage other\nfireback. They can see the content of the other workspaces, with some extra priviliges."}),"\n",(0,o.jsx)(t.p,{children:"Logging into the root workspace uses the same api as any other types or users.\nThe difference is users cannot join to the root workspace publicly, and it makes sense regardless."}),"\n",(0,o.jsx)(t.h2,{id:"creating-account-publicly",children:"Creating account publicly"}),"\n",(0,o.jsxs)(t.p,{children:["For any user to join publicly, you need to define a ",(0,o.jsx)(t.strong,{children:"Workspace type"})," first, and public visitors\ncan create account based on that. Workspace type could be exact as root, but the content\nonly visible to that specific workspace. On the other hand, you can define multiple types,\nsuch as student, teacher, and set speific features available for each of them."]}),"\n",(0,o.jsx)(t.h2,{id:"inviting-people-into-a-workspace",children:"Inviting people into a workspace"}),"\n",(0,o.jsxs)(t.p,{children:["Your apps can allow people to add other people into their team via 'invitation' concept.\nRoot workspace, can add users, assign them email address, set password and more. ",(0,o.jsx)(t.strong,{children:"This is not available for non-root workspaces"}),",\nand they need to invite other people into their workspace."]}),"\n",(0,o.jsx)(t.p,{children:"In general invitation happens in the following scenarios:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"A member wants to add another user into their workspace. That user passport (email/phone) does\nnot exist on the software. They will receive an email or sms, to join to that specific workspace,\non a predefined role. In this case, either the workspace forces them to use that specific email/phone,\nin cases that it's a company email, or allows them to join with any credentials that they choose."}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"A member wants to add another user into their workspace, but already that user is registered\ninto the product using that credentials. In such case, they will recieve a notification, email,\nor text message that someone wants to invite them, and if they want to accept that invitation."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"Workspace admins cannot delete the user data from a system, they can only remove them from their\nworkspaces, but deleting a user account and their workspaces could be allowed in the root-workspace."}),"\n",(0,o.jsx)(t.h2,{id:"general-flow-of-the-user",children:"General flow of the user."}),"\n",(0,o.jsx)(t.p,{children:"Fireback provides different set of endpoints to create different signup/signin flows. By default,\nthe plan is to show any user, (root or none) a signin screen, that they can provide their\ncredentials. This credential can be email, phone number, or thirdpary signin such as google\nsignin."}),"\n",(0,o.jsx)(t.p,{children:"On the next step, we check this credential to see if they have an account or not."})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var s=n(6540);const o={},a=s.createContext(o);function i(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);