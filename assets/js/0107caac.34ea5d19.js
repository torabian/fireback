"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4773],{7792:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"clients/fireback-react/react-form-select-and-sdk","title":"React FormSelect component and SDK","description":"I think all developers know about the necessity of selecting entities. It can be as simple","source":"@site/docs/clients/fireback-react/react-form-select-and-sdk.mdx","sourceDirName":"clients/fireback-react","slug":"/clients/fireback-react/react-form-select-and-sdk","permalink":"/fireback/docs/clients/fireback-react/react-form-select-and-sdk","draft":false,"unlisted":false,"editUrl":"https://github.com/torabian/fireback/tree/main/docs/docs/clients/fireback-react/react-form-select-and-sdk.mdx","tags":[],"version":"current","sidebarPosition":43,"frontMatter":{"title":"React FormSelect component and SDK","sidebar_position":43},"sidebar":"tutorialSidebar","previous":{"title":"Fireback and ios platform","permalink":"/fireback/docs/clients/fireback-for-ios/fireback-and-ios"},"next":{"title":"Introduction to Fireback React Native","permalink":"/fireback/docs/clients/fireback-react-native/introduction-to-fireback-react-native"}}');var r=n(4848),a=n(8453);const i={title:"React FormSelect component and SDK",sidebar_position:43},o=void 0,c={},l=[{value:"Information we get from backend.",id:"information-we-get-from-backend",level:2},{value:"FormSelect component and FormMultipleSelect",id:"formselect-component-and-formmultipleselect",level:2},{value:"Demo and examples",id:"demo-and-examples",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"I think all developers know about the necessity of selecting entities. It can be as simple\nas choosing a gender, or going to search a large table in database to select few items\nfrom there with the reference."}),"\n",(0,r.jsxs)(t.p,{children:["On Fireback React Client, I've implemented ",(0,r.jsx)(t.code,{children:"FormEntitySelect3"})," and ",(0,r.jsx)(t.code,{children:"FormEntitySelect"})," components,\nand they can be so easity integrated with Fireback sdk generation."]}),"\n",(0,r.jsx)(t.p,{children:"The goal is to have a component, which allows users to search (auto complete), select single\nor multiple elements, and without any extra action, those entities to be saved on the database,\nand upon refreshing the screen, selected items appear again."}),"\n",(0,r.jsx)(t.p,{children:"Often these actions are very hard on a projects, a lot of code added for each part of the front-end,\nbackend doesn't support auto suggestion, and other things developer know already."}),"\n",(0,r.jsx)(t.h2,{id:"information-we-get-from-backend",children:"Information we get from backend."}),"\n",(0,r.jsx)(t.p,{children:"Every query in Fireback Go, should return few fields such as the following format. This format\nis the standard and same across all entities generated. For custom queries also make sure\nyou'll create such result to be compatible."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'{\n    "data": {\n        "items": [],\n        "itemsPerPage": 20,\n        "startIndex": 0,\n        "totalAvailableItems": 0,\n        "totalItems": 0\n    },\n    "jsonQuery": ""\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"items"})," is an array. It contains a list of the items. Even if queries in recursive format,\nwould come back as an array the root elements. ",(0,r.jsx)(t.code,{children:"itemsPerPage"})," is basically the page size,\nsimilar to SQL ",(0,r.jsx)(t.strong,{children:"limit"})," statement."]}),"\n",(0,r.jsxs)(t.p,{children:["There is a large difference between ",(0,r.jsx)(t.code,{children:"totalAvailableItems"})," and ",(0,r.jsx)(t.code,{children:"totalItems"}),".\n",(0,r.jsx)(t.code,{children:"totalAvailableItems"})," will count the amount of items which are visible to the user without considering\nthe filters applied to. ",(0,r.jsx)(t.code,{children:"totalItems"})," will count the items based on the filters and conditions\ncurrently are applied. The difference will be very useful in designing the autocompletion."]}),"\n",(0,r.jsx)(t.h2,{id:"formselect-component-and-formmultipleselect",children:"FormSelect component and FormMultipleSelect"}),"\n",(0,r.jsx)(t.p,{children:"This component is a direct replacement for the traditional select tag, and in theory it's an answer\nto all selections across the project. This would mean it can become option radio list, autocompletion,\nand anything that might be needed in between."}),"\n",(0,r.jsx)(t.h2,{id:"demo-and-examples",children:"Demo and examples"}),"\n",(0,r.jsx)("a",{href:"https://torabian.github.io/fireback/demo/#/en/demo/form-select",target:"_blank",children:"Check out live examples"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:'\nfunction SelectingPrimitivesOnFormEffect() {\n  class FormDataSample {\n    user: {\n      sisters?: number;\n    };\n\n    static Fields = {\n      user$: "user",\n      user: {\n        sisters: "user.sisters",\n      },\n    };\n  }\n\n  const querySource = createQuerySource([\n    { sisters: 1 },\n    { sisters: 2 },\n    { sisters: 3 },\n  ]);\n\n  return (\n    <div>\n      <h2>Selecting primitives with form effect</h2>\n      <p>If you want to change primites directly into a form.</p>\n      <Formik\n        initialValues={{ user: { sisters: 2 } } as FormDataSample}\n        onSubmit={(data) => {\n          alert(JSON.stringify(data, null, 2));\n        }}\n      >\n        {(form: FormikProps<Partial<FormDataSample>>) => (\n          <div>\n            <pre>Form: {JSON.stringify(form.values, null, 2)}</pre>\n            <FormSelect\n              value={form.values.user.sisters}\n              label="Select how many sisters user has"\n              keyExtractor={(value) => value.sisters}\n              fnLabelFormat={(value) => value.sisters + " sisters!"}\n              querySource={querySource}\n              formEffect={{\n                field: FormDataSample.Fields.user.sisters,\n                form,\n                beforeSet(item) {\n                  return item.sisters;\n                },\n              }}\n            />\n          </div>\n        )}\n      </Formik>\n    </div>\n  );\n}\n'})})]})}function m(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var s=n(6540);const r={},a=s.createContext(r);function i(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);