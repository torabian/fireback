"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1032],{8109:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"env-configuration","title":".env File and configuration","description":"Fireback is reading .env file to understand which database connection can it use,","source":"@site/docs/env-configuration.mdx","sourceDirName":".","slug":"/env-configuration","permalink":"/fireback/docs/env-configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/torabian/fireback/tree/main/docs/docs/env-configuration.mdx","tags":[],"version":"current","sidebarPosition":3.5,"frontMatter":{"title":".env File and configuration","sidebar_position":3.5},"sidebar":"tutorialSidebar","previous":{"title":"First fireback project","permalink":"/fireback/docs/first-fireback-project"},"next":{"title":"Authentication and Root User","permalink":"/fireback/docs/authentication-and-root-user"}}');var i=t(4848),o=t(8453);const s={title:".env File and configuration",sidebar_position:3.5},r=void 0,c={},d=[];function l(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Fireback is reading ",(0,i.jsx)(n.code,{children:".env"})," file to understand which database connection can it use,\namong other configuration such as the http port. In this document we will be discussing\nhow to config Fireback in different scenarios."]}),"\n",(0,i.jsxs)(n.p,{children:["Probably said earlier, ",(0,i.jsx)(n.code,{children:"fireback init"})," command would generate ",(0,i.jsx)(n.code,{children:".env"})," file, and run some commands\nfor migration all in one command."]}),"\n",(0,i.jsxs)(n.p,{children:["Nevertheless, you can manually create this file. The configuration for this, would become from\n",(0,i.jsx)(n.a,{href:"https://github.com/torabian/fireback/blob/main/modules/workspaces/WorkspaceModule3.yml",children:"https://github.com/torabian/fireback/blob/main/modules/workspaces/WorkspaceModule3.yml"}),"\nfile in the ",(0,i.jsx)(n.code,{children:"config"})," section."]}),"\n",(0,i.jsx)(n.p,{children:"Here we are going to discuss them a bit more in details but check for new configs in that file as well."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\n# Database name. For Sqlite, it has to be the .db file name. In MySQL or others, use database name\nDB_NAME=/Users/ali/work/fireback/asd22-database.db\n\n# github.com/hibiken/asynq Worker url for tasks and queues\nWORKER_ADDRESS=127.0.0.1:6379\n\n# github.com/hibiken/asynq library workers concurrency amount\nWORKER_CONCURRENCY=10\n\n# Fireback can run a separate http server for uploading files only along side the normal http server for\n# APIS. You can define that port on tusPort\nTUS_PORT=4506\n\n# Makes the TUS Server enabled separately to upload files.\nDRIVE_ENABLED=true\n\n# The default port which the http server (API and other static files)\nPORT=4500\n\n# The host that http server will come up on. Used for gin http server config, usually localhost or 127.0.0.1\nHOST=localhost\n\n# DSN is a string which can contain username, password, port to database. This is prefered over the manual configuration\n# of name, password. Means if provided it will be used only.\nDB_DSN=\n\n# Gin framework running mode. Can be `release`, `test`, `debug`, `gin`. The `gin` stands for Gin Mode\nGIN_MODE=\n\n# Important to mention the database type. Values can be `sqlite`, `mysql`, `mariadb`, `sqlite (:memory:)` and `postgres`\n# We only test on MySQL and SQLite\nDB_VENDOR=sqlite\n\n# This is equal to the headers `workspace-id` on http request. It would select a workspace during cli actions\nCLI_WORKSPACE=root\n\n# This is equal to `accept-language` header. \nCLI_LANGUAGE=en\n\n# This is the environment name, which is useful to indicate the name of environment.\nNAME=asd\n\n# The address of SSL certificate key file on the disk, in case you are using SSL\nKEY_FILE=\n\n# Region of the user, defaults to en\nCLI_REGION=us\n\n# Mac, Windows, and Debian identifiers are the process name (background service) name in case you want to run\n# http server.\nMAC_IDENTIFIER=asd\nWINDOWS_IDENTIFIER=asd\nDEBIAN_IDENTIFIER=asd\n\n# The address of SSL certificate file on the disk, in case you are using SSL\nCERT_FILE=\n\n# Forces app to use the SSL, and needs the certificates. Can be handly for projects\n# which are not interested in having nginx.\nUSE_SSL=false\n\n# Database port number, for anything except SQLite\nDB_PORT=0\n\n# Host of the database. Not applicable to SQLite\nDB_HOST=\n\n# For Debian system services, indicates the file which the standard output will be written to.\nSTD_OUT=\nSTD_ERR=\n\n# Database log level, which will be used by gorm to log the database interactions on the terminal.\nDB_LOG_LEVEL=error\n\n# Database username and password, Not applicable to SQLite\nDB_USERNAME=\nDB_PASSWORD=\n\n# The folder which will be used for uploading user contents on the disk.\nSTORAGE=/Users/ali/work/fireback/storage\n\n# The authenticated token, equal to `authorization` header in http request for CLI operations.\nCLI_TOKEN=23124b3c5af4a24f6f4c5cf452fc6d58059545ce90e7120efa48d3855dc75123\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var a=t(6540);const i={},o=a.createContext(i);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);