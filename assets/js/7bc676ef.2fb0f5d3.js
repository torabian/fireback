"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7445],{7727:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"deeper/seeders-and-mocks","title":"Seeders and mocks","description":"In many projects there are requirement to fullfil database with some static content, as if they are a part of program.","source":"@site/docs/deeper/seeders-and-mocks.mdx","sourceDirName":"deeper","slug":"/deeper/seeders-and-mocks","permalink":"/fireback/docs/deeper/seeders-and-mocks","draft":false,"unlisted":false,"editUrl":"https://github.com/torabian/fireback/tree/main/docs/docs/deeper/seeders-and-mocks.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Seeders and mocks","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"XHtml","permalink":"/fireback/docs/deeper/xhtml"},"next":{"title":"XFile, Upload and download in fireback","permalink":"/fireback/docs/deeper/xfile"}}');var a=n(4848),o=n(8453);const r={title:"Seeders and mocks",sidebar_position:4},i=void 0,c={},d=[];function l(e){const t={code:"code",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"In many projects there are requirement to fullfil database with some static content, as if they are a part of program.\nFireback emphasizes a lot on moving data into database. Even for male/female selection, it would be benefitial to move them\ninto a table in database and not add them in to the codebase or hardcode on front-end."}),"\n",(0,a.jsx)(t.p,{children:"This makes fireback databases extreamly robust, and allows to rewrite application in upcoming decades if a new or better programming\nlanguage appears. Also helps translations, localisation, whitelabling easier, and you can imagine the rest."}),"\n",(0,a.jsxs)(t.p,{children:["To make this easier, we provide 2 concepts of ",(0,a.jsx)(t.code,{children:"seeders"})," and ",(0,a.jsx)(t.code,{children:"mocks"}),". Seeders, are the content, usually have a specific uniqueid,\nand you can sync them into the database. Such as timezones, they are useful in most projects. Mocks on the other hands,\nare a way of creating test data. Imagine you want to simulate list of products, but specific ones, you'll add them\nas mocks part of each entity."]}),"\n",(0,a.jsx)(t.p,{children:"From technical point of view, both of them are yaml files (might be json as well, but coverage is not tested.). They need to follow\nsuch signature:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"resources:\n- key: anyThingAsKey\n  path: ./file1.png // This is relative to the yml file, which will be placed in embed in go\n  blob: true/false // If true, it would be stored as blob. Useful with xfile? datatype.\n\ncontent:\n- anyKey: ($ref:anyThingAsKey) or ($refblob:anyThingAsKey)\n... add as many as items you want.\n"})}),"\n",(0,a.jsxs)(t.p,{children:["When you create entities, there will be mocks and seeders folders for that entity as well created on the module,\nand if you place files there the ",(0,a.jsx)(t.code,{children:"mlist"}),", ",(0,a.jsx)(t.code,{children:"slist"}),", ",(0,a.jsx)(t.code,{children:"msync"})," and ",(0,a.jsx)(t.code,{children:"ssync"})," commands will appear."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"These commands are not available on http"})," for security purposes at the moment, and it's quite impractical to have them.\nThis could be argued though, lets say the admin can check the seeders or mocks via ui."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var s=n(6540);const a={},o=s.createContext(a);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);