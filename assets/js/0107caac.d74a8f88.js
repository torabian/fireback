"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4773],{7792:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"clients/fireback-react/react-form-select-and-sdk","title":"React FormSelect component and SDK","description":"Here\u2019s the corrected version of your text with improved grammar and clarity:","source":"@site/docs/clients/fireback-react/react-form-select-and-sdk.mdx","sourceDirName":"clients/fireback-react","slug":"/clients/fireback-react/react-form-select-and-sdk","permalink":"/fireback/docs/clients/fireback-react/react-form-select-and-sdk","draft":false,"unlisted":false,"editUrl":"https://github.com/torabian/fireback/tree/main/docs/docs/clients/fireback-react/react-form-select-and-sdk.mdx","tags":[],"version":"current","sidebarPosition":43,"frontMatter":{"title":"React FormSelect component and SDK","sidebar_position":43},"sidebar":"tutorialSidebar","previous":{"title":"Fireback and ios platform","permalink":"/fireback/docs/clients/fireback-for-ios/fireback-and-ios"},"next":{"title":"Introduction to Fireback React Native","permalink":"/fireback/docs/clients/fireback-react-native/introduction-to-fireback-react-native"}}');var i=n(4848),s=n(8453);const a={title:"React FormSelect component and SDK",sidebar_position:43},o=void 0,c={},l=[{value:"Information Retrieved from the Backend",id:"information-retrieved-from-the-backend",level:2},{value:"FormSelect component and FormMultipleSelect",id:"formselect-component-and-formmultipleselect",level:2},{value:"Demo and examples",id:"demo-and-examples",level:2}];function d(e){const t={code:"code",h2:"h2",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Here\u2019s the corrected version of your text with improved grammar and clarity:"}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.p,{children:"I think all developers understand the necessity of selecting entities. It can be as simple as choosing a gender or searching a large database table to select a few items by reference."}),"\n",(0,i.jsxs)(t.p,{children:["In the Fireback React Client, I've implemented the ",(0,i.jsx)(t.code,{children:"FormSelect"})," and ",(0,i.jsx)(t.code,{children:"FormMultipleSelect"})," components, which can be easily integrated with Fireback's SDK generation."]}),"\n",(0,i.jsx)(t.p,{children:"The goal is to provide a component that allows users to search (autocomplete), select single or multiple elements, and automatically save those entities to the database without any extra action. Upon refreshing the screen, the selected items should appear again."}),"\n",(0,i.jsx)(t.p,{children:"These actions are often complex in projects, requiring a lot of extra code for each part of the front end. Additionally, backends often lack built-in support for auto-suggestions and other essential features that developers typically need."}),"\n",(0,i.jsx)(t.h2,{id:"information-retrieved-from-the-backend",children:"Information Retrieved from the Backend"}),"\n",(0,i.jsx)(t.p,{children:"Every query in Fireback Go should return a few standard fields in the following format. This format remains consistent across all generated entities. For custom queries, ensure that you structure the result similarly for compatibility."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'{\n    "data": {\n        "items": [],\n        "itemsPerPage": 20,\n        "startIndex": 0,\n        "totalAvailableItems": 0,\n        "totalItems": 0\n    },\n    "jsonQuery": ""\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"items"})," is an array. It contains a list of the items. Even if queries in recursive format,\nwould come back as an array the root elements. ",(0,i.jsx)(t.code,{children:"itemsPerPage"})," is basically the page size,\nsimilar to SQL ",(0,i.jsx)(t.strong,{children:"limit"})," statement."]}),"\n",(0,i.jsxs)(t.p,{children:["There is a large difference between ",(0,i.jsx)(t.code,{children:"totalAvailableItems"})," and ",(0,i.jsx)(t.code,{children:"totalItems"}),".\n",(0,i.jsx)(t.code,{children:"totalAvailableItems"})," will count the amount of items which are visible to the user without considering\nthe filters applied to. ",(0,i.jsx)(t.code,{children:"totalItems"})," will count the items based on the filters and conditions\ncurrently are applied. The difference will be very useful in designing the autocompletion."]}),"\n",(0,i.jsx)(t.h2,{id:"formselect-component-and-formmultipleselect",children:"FormSelect component and FormMultipleSelect"}),"\n",(0,i.jsx)(t.p,{children:"This component is a direct replacement for the traditional select tag, and in theory it's an answer\nto all selections across the project. This would mean it can become option radio list, autocompletion,\nand anything that might be needed in between."}),"\n",(0,i.jsx)(t.h2,{id:"demo-and-examples",children:"Demo and examples"}),"\n",(0,i.jsx)("a",{href:"https://torabian.github.io/fireback/demo/#/en/demo/form-select",target:"_blank",children:"Check out live examples"}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:'\nfunction SelectingPrimitivesOnFormEffect() {\n  class FormDataSample {\n    user: {\n      sisters?: number;\n    };\n\n    static Fields = {\n      user$: "user",\n      user: {\n        sisters: "user.sisters",\n      },\n    };\n  }\n\n  const querySource = createQuerySource([\n    { sisters: 1 },\n    { sisters: 2 },\n    { sisters: 3 },\n  ]);\n\n  return (\n    <div>\n      <h2>Selecting primitives with form effect</h2>\n      <p>If you want to change primites directly into a form.</p>\n      <Formik\n        initialValues={{ user: { sisters: 2 } } as FormDataSample}\n        onSubmit={(data) => {\n          alert(JSON.stringify(data, null, 2));\n        }}\n      >\n        {(form: FormikProps<Partial<FormDataSample>>) => (\n          <div>\n            <pre>Form: {JSON.stringify(form.values, null, 2)}</pre>\n            <FormSelect\n              value={form.values.user.sisters}\n              label="Select how many sisters user has"\n              keyExtractor={(value) => value.sisters}\n              fnLabelFormat={(value) => value.sisters + " sisters!"}\n              querySource={querySource}\n              formEffect={{\n                field: FormDataSample.Fields.user.sisters,\n                form,\n                beforeSet(item) {\n                  return item.sisters;\n                },\n              }}\n            />\n          </div>\n        )}\n      </Formik>\n    </div>\n  );\n}\n'})})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(6540);const i={},s=r.createContext(i);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);