/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example
import okhttp3.*

class App {
    val greeting: String
        get() {
            return "Hello baby2!"
        }
}



fun main() {

    val url = "http://localhost:4500/ws"
    // Build the OkHttpClient
    val client = OkHttpClient()

     // Create a WebSocket request
    val request = Request.Builder()
         .url(url)
         .header("authorization", "639f023e528357bebc2db5284d767fdae71e3865af1edecf81d4f812ee5c6b89")
         .header("workspace-id", "root")
         .build()

    val listener = object : WebSocketListener(){
        override fun onOpen(webSocket: WebSocket, response: Response) {
            println("WebSocket Opened: $response")
            webSocket.send("Hello")
        }

        override fun onMessage(webSocket: WebSocket, text: String) {
            println("Received message: $text")
        }

        override fun onClosed(webSocket: WebSocket, code: Int, reason: String) {
            println("WebSocket Closed. Code: $code, Reason: $reason")
        }

        override fun onFailure(webSocket: WebSocket, t: Throwable, response: Response?) {
            println("Error: ${t.message}")
        }
    }

    // Start the WebSocket connection
    client.newWebSocket(request, listener)

    // Wait for the connection to close (optional in a real application)
    Thread.sleep(1000)
    println(client)
    println(App().greeting)
}
