package product

/*
*	Generated by fireback 1.2.3
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"embed"
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	jsoniter "github.com/json-iterator/go"
	"github.com/schollz/progressbar/v3"
	metas "github.com/torabian/fireback/fireback-data-types/modules/product/metas"
	mocks "github.com/torabian/fireback/fireback-data-types/modules/product/mocks/Product"
	seeders "github.com/torabian/fireback/fireback-data-types/modules/product/seeders/Product"
	"github.com/torabian/fireback/modules/fireback"
	"github.com/urfave/cli"
	"gopkg.in/yaml.v2"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"log"
	reflect "reflect"
	"strings"
	"time"
)

var productSeedersFs = &seeders.ViewsFs

func ResetProductSeeders(fs *embed.FS) {
	productSeedersFs = fs
}

type ProductEntityQs struct {
	Name                  fireback.QueriableField `cli:"name" table:"product" typeof:"string" column:"name" qs:"name"`
	Sku                   fireback.QueriableField `cli:"sku" table:"product" typeof:"string?" column:"sku" qs:"sku"`
	Rating                fireback.QueriableField `cli:"rating" table:"product" typeof:"float64?" column:"rating" qs:"rating"`
	Price                 fireback.QueriableField `cli:"price" table:"product" typeof:"float64" column:"price" qs:"price"`
	Weight                fireback.QueriableField `cli:"weight" table:"product" typeof:"float32?" column:"weight" qs:"weight"`
	ProductMarketDuration fireback.QueriableField `cli:"product-market-duration" table:"product" typeof:"duration?" column:"product_market_duration" qs:"productMarketDuration"`
	IsFeatured            fireback.QueriableField `cli:"is-featured" table:"product" typeof:"bool?" column:"is_featured" qs:"isFeatured"`
	Available             fireback.QueriableField `cli:"available" table:"product" typeof:"bool" column:"available" qs:"available"`
}

func (x *ProductEntityQs) GetQuery() string {
	return fireback.GenerateQueryStringStyle(reflect.ValueOf(x), "")
}

var ProductQsFlags = []cli.Flag{
	&cli.StringFlag{
		Name:  "name",
		Usage: "Name of the product",
	},
	&cli.StringFlag{
		Name:  "sku",
		Usage: "Stock keeping unit (optional)",
	},
	&cli.StringFlag{
		Name:  "rating",
		Usage: "Average rating of the product (optional)",
	},
	&cli.StringFlag{
		Name:  "price",
		Usage: "Price of the product",
	},
	&cli.StringFlag{
		Name:  "weight",
		Usage: "Weight of the product in kilograms (optional)",
	},
	&cli.StringFlag{
		Name:  "product-market-duration",
		Usage: "",
	},
	&cli.StringFlag{
		Name:  "is-featured",
		Usage: "Whether the product is featured (optional)",
	},
	&cli.StringFlag{
		Name:  "available",
		Usage: "Is the product available?",
	},
}

type ProductEntity struct {
	// Defines the visibility of the record in the table.
	// Visibility is a detailed topic, you can check all of the visibility values in fireback/visibility.go
	// by default, visibility of record are 0, means they are protected by the workspace
	// which are being created, and visible to every member of the workspace
	Visibility fireback.String `json:"visibility,omitempty" yaml:"visibility,omitempty" xml:"visibility,omitempty"`
	// The unique-id of the workspace which content belongs to. Upon creation this will be designated
	// to the selected workspace by user, if they have write access. You can change this value
	// or prevent changes to it manually (on root features for example modifying other workspace)
	WorkspaceId fireback.String `json:"workspaceId,omitempty" xml:"workspaceId,omitempty" yaml:"workspaceId,omitempty"`
	// The unique-id of the parent table, which this record is being linked to.
	// used internally for making relations in fireback, generally does not need manual changes
	// or modification by the developer or user. For example, if you have a object inside an object
	// the unique-id of the parent will be written in the child.
	LinkerId fireback.String `json:"linkerId,omitempty" xml:"linkerId,omitempty" yaml:"linkerId,omitempty"`
	// Used for recursive or parent-child operations. Some tables, are having nested relations,
	// and this field makes the table self refrenceing. ParentId needs to exist in the table before
	// creating of modifying a record.
	ParentId fireback.String `json:"parentId,omitempty" xml:"parentId,omitempty" yaml:"parentId,omitempty"`
	// Makes a field deletable. Some records should not be deletable at all.
	// default it's true.
	IsDeletable *bool `json:"isDeletable,omitempty" xml:"isDeletable,omitempty" yaml:"isDeletable,omitempty" gorm:"default:true"`
	// Makes a field updatable. Some records should not be updatable at all.
	// default it's true.
	IsUpdatable *bool `json:"isUpdatable,omitempty" xml:"isUpdatable,omitempty" yaml:"isUpdatable,omitempty" gorm:"default:true"`
	// The unique-id of the user which is creating the record, or the record belongs to.
	// Administration might want to change this to any user, by default Fireback fills
	// it to the current authenticated user.
	UserId fireback.String `json:"userId,omitempty" xml:"userId,omitempty" yaml:"userId,omitempty"`
	// General mechanism to rank the elements. From code perspective, it's just a number,
	// but you can sort it based on any logic for records to make a ranking, sorting.
	// they should not be unique across a table.
	Rank fireback.Int64 `json:"rank,omitempty" yaml:"rank,omitempty" xml:"rank,omitempty" gorm:"type:int;name:rank"`
	// Primary numeric key in the database. This value is not meant to be exported to public
	// or be used to access data at all. Rather a mechanism of indexing columns internally
	// or cursor pagination in future releases of fireback, or better search performance.
	ID uint `gorm:"primaryKey;autoIncrement" json:"-" yaml:"-" xml:"-"`
	// Unique id of the record across the table. This value will be accessed from public APIs,
	// and many other places intead of numeric ID property.
	// Upon generation, a UUID automatically is being assigned, and if user has specified the
	// Unique id in the post body, it will be used. This mechanism allows to manage unsaved
	// content on front-end much easier than requiring parent to exists first.
	UniqueId string `json:"uniqueId,omitempty" xml:"uniqueId,omitempty" gorm:"unique;not null;size:100;" yaml:"uniqueId,omitempty"`
	// The time that the record has been updated in datetime.
	// the field will be automatically populated by gorm orm.
	UpdatedAt *time.Time `json:"updatedAt,omitempty" xml:"updatedAt,omitempty" yaml:"updatedAt,omitempty"`
	// The time that the record has been created in datetime.
	// the field will be automatically populated by gorm orm.
	CreatedAt *time.Time `json:"createdAt,omitempty" xml:"createdAt,omitempty" yaml:"createdAt,omitempty"`
	// The time that the record has been deleted softly (means the data still exists in database, but no longer visible to any feature) in nano datatime
	// you need to make sure check this field if writing custom sql queries.
	// the field will be automatically populated by gorm orm.
	DeletedAt *time.Time `json:"deletedAt,omitempty" xml:"deletedAt,omitempty" yaml:"deletedAt,omitempty"`
	// Record creation date time formatting based on locale of the headers, or other
	// possible factors.
	CreatedFormatted string `json:"createdFormatted,omitempty" xml:"createdFormatted,omitempty" yaml:"createdFormatted,omitempty" sql:"-" gorm:"-"`
	// Record update date time formatting based on locale of the headers, or other
	// possible factors.
	UpdatedFormatted string `json:"updatedFormatted,omitempty" xml:"updatedFormatted,omitempty" yaml:"updatedFormatted,omitempty" sql:"-" gorm:"-"`
	// Name of the product
	Name string `json:"name" xml:"name" yaml:"name"        `
	// Stock keeping unit (optional)
	Sku fireback.String `json:"sku" xml:"sku" yaml:"sku"        `
	// Average rating of the product (optional)
	Rating fireback.Float64 `json:"rating" xml:"rating" yaml:"rating"        `
	// Price of the product
	Price float64 `json:"price" xml:"price" yaml:"price"        `
	// Weight of the product in kilograms (optional)
	Weight                fireback.Float32  `json:"weight" xml:"weight" yaml:"weight"        `
	ProductMarketDuration fireback.Duration `json:"productMarketDuration" xml:"productMarketDuration" yaml:"productMarketDuration"        `
	// Whether the product is featured (optional)
	IsFeatured fireback.Bool `json:"isFeatured" xml:"isFeatured" yaml:"isFeatured"        `
	// Is the product available?
	Available bool             `json:"available" xml:"available" yaml:"available"        `
	Children  []*ProductEntity `csv:"-" gorm:"-" sql:"-" json:"children,omitempty" xml:"children,omitempty"  yaml:"children,omitempty"`
	LinkedTo  *ProductEntity   `csv:"-" yaml:"-" gorm:"-" json:"-" sql:"-" xml:"-"`
}

func ProductEntityStream(q fireback.QueryDSL) (chan []*ProductEntity, *fireback.QueryResultMeta, *fireback.IError) {
	cn := make(chan []*ProductEntity)
	q.ItemsPerPage = 50
	q.StartIndex = 0
	_, qrm, err := ProductActions.Query(q)
	if err != nil {
		return nil, nil, err
	}
	go func() {
		defer close(cn)
		for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
			items, _, _ := ProductActions.Query(q)
			i += q.ItemsPerPage
			q.StartIndex = i
			cn <- items
		}
	}()
	return cn, qrm, nil
}

type ProductEntityList struct {
	Items []*ProductEntity
}

func NewProductEntityList(items []*ProductEntity) *ProductEntityList {
	return &ProductEntityList{
		Items: items,
	}
}
func (x *ProductEntityList) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}
func (x *ProductEntityList) ToTree() *fireback.TreeOperation[ProductEntity] {
	return fireback.NewTreeOperation(
		x.Items,
		func(t *ProductEntity) string {
			if !t.ParentId.Valid {
				return ""
			}
			return t.ParentId.String
		},
		func(t *ProductEntity) string {
			return t.UniqueId
		},
	)
}

var ProductPreloadRelations []string = []string{}

type productActionsSig struct {
	Update         func(query fireback.QueryDSL, dto *ProductEntity) (*ProductEntity, *fireback.IError)
	Create         func(dto *ProductEntity, query fireback.QueryDSL) (*ProductEntity, *fireback.IError)
	Upsert         func(dto *ProductEntity, query fireback.QueryDSL) (*ProductEntity, *fireback.IError)
	SeederInit     func() *ProductEntity
	Remove         func(query fireback.QueryDSL) (int64, *fireback.IError)
	MultiInsert    func(dtos []*ProductEntity, query fireback.QueryDSL) ([]*ProductEntity, *fireback.IError)
	GetOne         func(query fireback.QueryDSL) (*ProductEntity, *fireback.IError)
	GetByWorkspace func(query fireback.QueryDSL) (*ProductEntity, *fireback.IError)
	Query          func(query fireback.QueryDSL) ([]*ProductEntity, *fireback.QueryResultMeta, *fireback.IError)
}

var ProductActions productActionsSig = productActionsSig{
	Update:         ProductActionUpdateFn,
	Create:         ProductActionCreateFn,
	Upsert:         ProductActionUpsertFn,
	Remove:         ProductActionRemoveFn,
	SeederInit:     ProductActionSeederInitFn,
	MultiInsert:    ProductMultiInsertFn,
	GetOne:         ProductActionGetOneFn,
	GetByWorkspace: ProductActionGetByWorkspaceFn,
	Query:          ProductActionQueryFn,
}

func ProductActionUpsertFn(dto *ProductEntity, query fireback.QueryDSL) (*ProductEntity, *fireback.IError) {
	return nil, nil
}

var PRODUCT_EVENT_CREATED = "product.created"
var PRODUCT_EVENT_UPDATED = "product.updated"
var PRODUCT_EVENT_DELETED = "product.deleted"
var PRODUCT_EVENTS = []string{
	PRODUCT_EVENT_CREATED,
	PRODUCT_EVENT_UPDATED,
	PRODUCT_EVENT_DELETED,
}

type ProductFieldMap struct {
	Name                  fireback.TranslatedString `yaml:"name"`
	Sku                   fireback.TranslatedString `yaml:"sku"`
	Rating                fireback.TranslatedString `yaml:"rating"`
	Price                 fireback.TranslatedString `yaml:"price"`
	Weight                fireback.TranslatedString `yaml:"weight"`
	ProductMarketDuration fireback.TranslatedString `yaml:"productMarketDuration"`
	IsFeatured            fireback.TranslatedString `yaml:"isFeatured"`
	Available             fireback.TranslatedString `yaml:"available"`
}

var ProductEntityMetaConfig map[string]int64 = map[string]int64{}
var ProductEntityJsonSchema = fireback.ExtractEntityFields(reflect.ValueOf(&ProductEntity{}))

func entityProductFormatter(dto *ProductEntity, query fireback.QueryDSL) {
	if dto == nil {
		return
	}
}
func ProductActionSeederMultiple(query fireback.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	batchSize := 100
	bar := progressbar.Default(int64(count))
	// Collect entities in batches
	var entitiesBatch []*ProductEntity
	for i := 1; i <= count; i++ {
		entity := ProductActions.SeederInit()
		entitiesBatch = append(entitiesBatch, entity)
		// When batch size is reached, perform the batch insert
		if len(entitiesBatch) == batchSize || i == count {
			// Insert batch
			_, err := ProductActions.MultiInsert(entitiesBatch, query)
			if err == nil {
				successInsert += len(entitiesBatch)
			} else {
				fmt.Println(err)
				failureInsert += len(entitiesBatch)
			}
			// Clear the batch after insert
			entitiesBatch = nil
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func ProductActionSeeder(query fireback.QueryDSL, count int) {
	successInsert := 0
	failureInsert := 0
	bar := progressbar.Default(int64(count))
	for i := 1; i <= count; i++ {
		entity := ProductActions.SeederInit()
		_, err := ProductActions.Create(entity, query)
		if err == nil {
			successInsert++
		} else {
			fmt.Println(err)
			failureInsert++
		}
		bar.Add(1)
	}
	fmt.Println("Success", successInsert, "Failure", failureInsert)
}
func (x *ProductEntity) Seeder() string {
	obj := ProductActions.SeederInit()
	v, _ := json.MarshalIndent(obj, "", "  ")
	return string(v)
}
func ProductActionSeederInitFn() *ProductEntity {
	entity := &ProductEntity{}
	return entity
}
func ProductAssociationCreate(dto *ProductEntity, query fireback.QueryDSL) error {
	return nil
}

/**
* These kind of content are coming from another entity, which is indepndent module
* If we want to create them, we need to do it before. This is not association.
**/
func ProductRelationContentCreate(dto *ProductEntity, query fireback.QueryDSL) error {
	return nil
}
func ProductRelationContentUpdate(dto *ProductEntity, query fireback.QueryDSL) error {
	return nil
}
func ProductPolyglotUpdateHandler(dto *ProductEntity, query fireback.QueryDSL) {
	if dto == nil {
		return
	}
}

/**
 * This will be validating your entity fully. Important note is that, you add validate:* tag
 * in your entity, it will automatically work here. For slices inside entity, make sure you add
 * extra line of AppendSliceErrors, otherwise they won't be detected
 */
func ProductValidator(dto *ProductEntity, isPatch bool) *fireback.IError {
	err := fireback.CommonStructValidatorPointer(dto, isPatch)
	return err
}

// Creates a set of natural language queries, which can be used with
// AI tools to create content or help with some tasks
var ProductAskCmd cli.Command = cli.Command{
	Name:  "nlp",
	Usage: "Set of natural language queries which helps creating content or data",
	Subcommands: []cli.Command{
		{
			Name:  "sample",
			Usage: "Asks for generating sample by giving an example data",
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:  "format",
					Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
					Value: "yaml",
				},
				&cli.IntFlag{
					Name:  "count",
					Usage: "How many samples to ask",
					Value: 30,
				},
			},
			Action: func(c *cli.Context) error {
				v := &ProductEntity{}
				format := c.String("format")
				request := "\033[1m" + `
I need you to create me an array of exact signature as the example given below,
with at least ` + fmt.Sprint(c.String("count")) + ` items, mock the content with few words, and guess the possible values
based on the common sense. I need the output to be a valid ` + format + ` file.
Make sure you wrap the entire array in 'items' field. Also before that, I provide some explanation of each field:
Name: (type: string) Description: Name of the product
Sku: (type: string?) Description: Stock keeping unit (optional)
Rating: (type: float64?) Description: Average rating of the product (optional)
Price: (type: float64) Description: Price of the product
Weight: (type: float32?) Description: Weight of the product in kilograms (optional)
ProductMarketDuration: (type: duration?) Description: 
IsFeatured: (type: bool?) Description: Whether the product is featured (optional)
Available: (type: bool) Description: Is the product available?
And here is the actual object signature:
` + v.Seeder() + `
`
				fmt.Println(request)
				return nil
			},
		},
	},
}

func ProductEntityPreSanitize(dto *ProductEntity, query fireback.QueryDSL) {
}
func ProductEntityBeforeCreateAppend(dto *ProductEntity, query fireback.QueryDSL) {
	if dto.UniqueId == "" {
		dto.UniqueId = fireback.UUID()
	}
	dto.WorkspaceId = fireback.NewString(query.WorkspaceId)
	dto.UserId = fireback.NewString(query.UserId)
	ProductRecursiveAddUniqueId(dto, query)
}
func ProductRecursiveAddUniqueId(dto *ProductEntity, query fireback.QueryDSL) {
}

/*
*
	Batch inserts, do not have all features that create
	operation does. Use it with unnormalized content,
	or read the source code carefully.
  This is not marked as an action, because it should not be available publicly
  at this moment.
*
*/
func ProductMultiInsertFn(dtos []*ProductEntity, query fireback.QueryDSL) ([]*ProductEntity, *fireback.IError) {
	if len(dtos) > 0 {
		for index := range dtos {
			ProductEntityPreSanitize(dtos[index], query)
			ProductEntityBeforeCreateAppend(dtos[index], query)
		}
		var dbref *gorm.DB = nil
		if query.Tx == nil {
			dbref = fireback.GetDbRef()
		} else {
			dbref = query.Tx
		}
		query.Tx = dbref
		err := dbref.Create(&dtos).Error
		if err != nil {
			return nil, fireback.GormErrorToIError(err)
		}
	}
	return dtos, nil
}
func ProductActionBatchCreateFn(dtos []*ProductEntity, query fireback.QueryDSL) ([]*ProductEntity, *fireback.IError) {
	if dtos != nil && len(dtos) > 0 {
		items := []*ProductEntity{}
		for _, item := range dtos {
			s, err := ProductActions.Create(item, query)
			if err != nil {
				return nil, err
			}
			items = append(items, s)
		}
		return items, nil
	}
	return dtos, nil
}
func ProductDeleteEntireChildren(query fireback.QueryDSL, dto *ProductEntity) *fireback.IError {
	// intentionally removed this. It's hard to implement it, and probably wrong without
	// proper on delete cascade
	return nil
}
func ProductActionCreateFn(dto *ProductEntity, query fireback.QueryDSL) (*ProductEntity, *fireback.IError) {
	// 1. Validate always
	if iError := ProductValidator(dto, false); iError != nil {
		return nil, iError
	}
	// 1.5 Sanitize the content coming of the front-end
	ProductEntityPreSanitize(dto, query)
	// 2. Append the necessary information about user, workspace
	ProductEntityBeforeCreateAppend(dto, query)
	// 3. Create other entities if we want select from them
	ProductRelationContentCreate(dto, query)
	// 4. Create the entity
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = fireback.GetDbRef()
	} else {
		dbref = query.Tx
	}
	query.Tx = dbref
	err := dbref.Create(&dto).Error
	if err != nil {
		err := fireback.GormErrorToIError(err)
		return nil, err
	}
	// 5. Create sub entities, objects or arrays, association to other entities
	ProductAssociationCreate(dto, query)
	// 6. Fire the event into system
	actionEvent, eventErr := NewProductCreatedEvent(dto, &query)
	if actionEvent != nil && eventErr == nil {
		fireback.GetEventBusInstance().FireEvent(query, *actionEvent)
	} else {
		log.Default().Panicln("Creating event has failed for %v", dto)
	}
	/*
		event.MustFire(PRODUCT_EVENT_CREATED, event.M{
			"entity":   dto,
			"entityKey": fireback.GetTypeString(&ProductEntity{}),
			"target":   "workspace",
			"unqiueId": query.WorkspaceId,
		})
	*/
	return dto, nil
}
func ProductActionGetOneFn(query fireback.QueryDSL) (*ProductEntity, *fireback.IError) {
	refl := reflect.ValueOf(&ProductEntity{})
	item, err := fireback.GetOneEntity[ProductEntity](query, refl)
	entityProductFormatter(item, query)
	return item, err
}
func ProductActionGetByWorkspaceFn(query fireback.QueryDSL) (*ProductEntity, *fireback.IError) {
	refl := reflect.ValueOf(&ProductEntity{})
	item, err := fireback.GetOneByWorkspaceEntity[ProductEntity](query, refl)
	entityProductFormatter(item, query)
	return item, err
}
func ProductActionQueryFn(query fireback.QueryDSL) ([]*ProductEntity, *fireback.QueryResultMeta, *fireback.IError) {
	refl := reflect.ValueOf(&ProductEntity{})
	items, meta, err := fireback.QueryEntitiesPointer[ProductEntity](query, refl)
	for _, item := range items {
		entityProductFormatter(item, query)
	}
	return items, meta, err
}

var productMemoryItems []*ProductEntity = []*ProductEntity{}

func ProductEntityIntoMemory() {
	q := fireback.QueryDSL{
		ItemsPerPage: 500,
		StartIndex:   0,
	}
	_, qrm, _ := ProductActions.Query(q)
	for i := 0; i <= int(qrm.TotalAvailableItems)-1; i++ {
		items, _, _ := ProductActions.Query(q)
		productMemoryItems = append(productMemoryItems, items...)
		i += q.ItemsPerPage
		q.StartIndex = i
	}
}
func ProductMemGet(id uint) *ProductEntity {
	for _, item := range productMemoryItems {
		if item.ID == id {
			return item
		}
	}
	return nil
}
func ProductMemJoin(items []uint) []*ProductEntity {
	res := []*ProductEntity{}
	for _, item := range items {
		v := ProductMemGet(item)
		if v != nil {
			res = append(res, v)
		}
	}
	return res
}
func ProductUpdateExec(dbref *gorm.DB, query fireback.QueryDSL, fields *ProductEntity) (*ProductEntity, *fireback.IError) {
	uniqueId := fields.UniqueId
	query.TriggerEventName = PRODUCT_EVENT_UPDATED
	ProductEntityPreSanitize(fields, query)
	var item ProductEntity
	var itemRefetched ProductEntity
	// If the entity is distinct by workspace, then the Query.WorkspaceId
	// which is selected is being used as the condition for create or update
	// if not, the unique Id is being used
	cond2 := &ProductEntity{UniqueId: uniqueId}
	q := dbref.
		Where(cond2).
		FirstOrCreate(&item)
	err := q.UpdateColumns(fields).Error
	if err != nil {
		return nil, fireback.GormErrorToIError(err)
	}
	query.Tx = dbref
	ProductRelationContentUpdate(fields, query)
	ProductPolyglotUpdateHandler(fields, query)
	if ero := ProductDeleteEntireChildren(query, fields); ero != nil {
		return nil, ero
	}
	// @meta(update has many)
	err = dbref.
		Preload(clause.Associations).
		Where(&ProductEntity{UniqueId: uniqueId}).
		First(&itemRefetched).Error
	if err != nil {
		return nil, fireback.GormErrorToIError(err)
	}
	actionEvent, eventErr := NewProductUpdatedEvent(fields, &query)
	if actionEvent != nil && eventErr == nil {
		fireback.GetEventBusInstance().FireEvent(query, *actionEvent)
	} else {
		log.Default().Panicln("Updating event has failed for %v", fields)
	}
	/*
	   event.MustFire(query.TriggerEventName, event.M{
	     "entity":   &item,
	     "target":   "workspace",
	     "unqiueId": query.WorkspaceId,
	   })*/
	return &itemRefetched, nil
}
func ProductActionUpdateFn(query fireback.QueryDSL, fields *ProductEntity) (*ProductEntity, *fireback.IError) {
	if fields == nil {
		return nil, fireback.Create401Error(&fireback.FirebackMessages.BodyIsMissing, []string{})
	}
	// 1. Validate always
	if iError := ProductValidator(fields, true); iError != nil {
		return nil, iError
	}
	// Let's not add this. I am not sure of the consequences
	// ProductRecursiveAddUniqueId(fields, query)
	var dbref *gorm.DB = nil
	if query.Tx == nil {
		dbref = fireback.GetDbRef()
		var item *ProductEntity
		vf := dbref.Transaction(func(tx *gorm.DB) error {
			dbref = tx
			var err *fireback.IError
			item, err = ProductUpdateExec(dbref, query, fields)
			if err == nil {
				return nil
			} else {
				return err
			}
		})
		return item, fireback.CastToIError(vf)
	} else {
		dbref = query.Tx
		return ProductUpdateExec(dbref, query, fields)
	}
}

var ProductWipeCmd cli.Command = cli.Command{
	Name:  "wipe",
	Usage: "Wipes entire products ",
	Action: func(c *cli.Context) error {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PRODUCT_DELETE},
		})
		count, _ := ProductActionWipeClean(query)
		fmt.Println("Removed", count, "of entities")
		return nil
	},
}

func ProductActionRemoveFn(query fireback.QueryDSL) (int64, *fireback.IError) {
	refl := reflect.ValueOf(&ProductEntity{})
	query.ActionRequires = []fireback.PermissionInfo{PERM_ROOT_PRODUCT_DELETE}
	return fireback.RemoveEntity[ProductEntity](query, refl)
}
func ProductActionWipeClean(query fireback.QueryDSL) (int64, error) {
	var err error
	var count int64 = 0
	{
		subCount, subErr := fireback.WipeCleanEntity[ProductEntity]()
		if subErr != nil {
			fmt.Println("Error while wiping 'ProductEntity'", subErr)
			return count, subErr
		} else {
			count += subCount
		}
	}
	return count, err
}
func ProductActionBulkUpdate(
	query fireback.QueryDSL, dto *fireback.BulkRecordRequest[ProductEntity]) (
	*fireback.BulkRecordRequest[ProductEntity], *fireback.IError,
) {
	result := []*ProductEntity{}
	err := fireback.GetDbRef().Transaction(func(tx *gorm.DB) error {
		query.Tx = tx
		for _, record := range dto.Records {
			item, err := ProductActions.Update(query, record)
			if err != nil {
				return err
			} else {
				result = append(result, item)
			}
		}
		return nil
	})
	if err == nil {
		return dto, nil
	}
	return nil, err.(*fireback.IError)
}
func (x *ProductEntity) Json() string {
	if x != nil {
		str, _ := json.MarshalIndent(x, "", "  ")
		return (string(str))
	}
	return ""
}

var ProductEntityMeta = fireback.TableMetaData{
	EntityName:    "Product",
	ExportKey:     "products",
	TableNameInDb: "product_entities",
	EntityObject:  &ProductEntity{},
	ExportStream:  ProductActionExportT,
	ImportQuery:   ProductActionImport,
}

func ProductActionExport(
	query fireback.QueryDSL,
) (chan []byte, *fireback.IError) {
	return fireback.YamlExporterChannel[ProductEntity](query, ProductActions.Query, ProductPreloadRelations)
}
func ProductActionExportT(
	query fireback.QueryDSL,
) (chan []interface{}, *fireback.IError) {
	return fireback.YamlExporterChannelT[ProductEntity](query, ProductActions.Query, ProductPreloadRelations)
}
func ProductActionImport(
	dto interface{}, query fireback.QueryDSL,
) *fireback.IError {
	var json = jsoniter.ConfigCompatibleWithStandardLibrary
	var content ProductEntity
	cx, err2 := json.Marshal(dto)
	if err2 != nil {
		return fireback.Create401Error(&fireback.FirebackMessages.InvalidContent, []string{})
	}
	json.Unmarshal(cx, &content)
	_, err := ProductActions.Create(&content, query)
	return err
}

var ProductCommonCliFlags = []cli.Flag{
	&cli.StringFlag{
		Name:  "x-accept",
		Usage: "Return type of the the content, such as json or yaml",
	},
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "name",
		Required: false,
		Usage:    `Name of the product (string)`,
	},
	&cli.StringFlag{
		Name:     "sku",
		Required: false,
		Usage:    `Stock keeping unit (optional) (string?)`,
	},
	&cli.StringFlag{
		Name:     "rating",
		Required: false,
		Usage:    `Average rating of the product (optional) (float64?)`,
	},
	&cli.Float64Flag{
		Name:     "price",
		Required: false,
		Usage:    `Price of the product (float64)`,
	},
	&cli.StringFlag{
		Name:     "weight",
		Required: false,
		Usage:    `Weight of the product in kilograms (optional) (float32?)`,
	},
	&cli.StringFlag{
		Name:     "product-market-duration",
		Required: false,
		Usage:    `productMarketDuration (duration?)`,
	},
	&cli.StringFlag{
		Name:     "is-featured",
		Required: false,
		Usage:    `Whether the product is featured (optional) (bool?)`,
	},
	&cli.BoolFlag{
		Name:     "available",
		Required: false,
		Usage:    `Is the product available? (bool)`,
	},
}
var ProductCommonInteractiveCliFlags = []fireback.CliInteractiveFlag{
	{
		Name:        "name",
		StructField: "Name",
		Required:    false,
		Recommended: false,
		Usage:       `Name of the product`,
		Type:        "string",
	},
	{
		Name:        "sku",
		StructField: "Sku",
		Required:    false,
		Recommended: false,
		Usage:       `Stock keeping unit (optional)`,
		Type:        "string",
	},
	{
		Name:        "price",
		StructField: "Price",
		Required:    false,
		Recommended: false,
		Usage:       `Price of the product`,
		Type:        "float64",
	},
	{
		Name:        "available",
		StructField: "Available",
		Required:    false,
		Recommended: false,
		Usage:       `Is the product available?`,
		Type:        "bool",
	},
}
var ProductCommonCliFlagsOptional = []cli.Flag{
	&cli.StringFlag{
		Name:     "x-src",
		Required: false,
		Usage:    `Import the body of the request from a file (e.g. json/yaml) on the disk`,
	},
	&cli.StringFlag{
		Name:  "x-accept",
		Usage: "Return type of the the content, such as json or yaml",
	},
	&cli.StringFlag{
		Name:     "wid",
		Required: false,
		Usage:    "Provide workspace id, if you want to change the data workspace",
	},
	&cli.StringFlag{
		Name:     "uid",
		Required: false,
		Usage:    "Unique Id - external unique hash to query entity",
	},
	&cli.StringFlag{
		Name:     "pid",
		Required: false,
		Usage:    " Parent record id of the same type",
	},
	&cli.StringFlag{
		Name:     "name",
		Required: false,
		Usage:    `Name of the product (string)`,
	},
	&cli.StringFlag{
		Name:     "sku",
		Required: false,
		Usage:    `Stock keeping unit (optional) (string?)`,
	},
	&cli.StringFlag{
		Name:     "rating",
		Required: false,
		Usage:    `Average rating of the product (optional) (float64?)`,
	},
	&cli.Float64Flag{
		Name:     "price",
		Required: false,
		Usage:    `Price of the product (float64)`,
	},
	&cli.StringFlag{
		Name:     "weight",
		Required: false,
		Usage:    `Weight of the product in kilograms (optional) (float32?)`,
	},
	&cli.StringFlag{
		Name:     "product-market-duration",
		Required: false,
		Usage:    `productMarketDuration (duration?)`,
	},
	&cli.StringFlag{
		Name:     "is-featured",
		Required: false,
		Usage:    `Whether the product is featured (optional) (bool?)`,
	},
	&cli.BoolFlag{
		Name:     "available",
		Required: false,
		Usage:    `Is the product available? (bool)`,
	},
}
var ProductCreateCmd cli.Command = PRODUCT_ACTION_POST_ONE.ToCli()
var ProductCreateInteractiveCmd cli.Command = cli.Command{
	Name:  "ic",
	Usage: "Creates a new entity, using requied fields in an interactive name",
	Flags: []cli.Flag{
		&cli.BoolFlag{
			Name:  "all",
			Usage: "Interactively asks for all inputs, not only required ones",
		},
	},
	Action: func(c *cli.Context) {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PRODUCT_CREATE},
		})
		entity := &ProductEntity{}
		fireback.PopulateInteractively(entity, c, ProductCommonInteractiveCliFlags)
		if entity, err := ProductActions.Create(entity, query); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := yaml.Marshal(entity)
			fmt.Println(fireback.FormatYamlKeys(string(f)))
		}
	},
}
var ProductUpdateCmd cli.Command = cli.Command{
	Name:    "update",
	Aliases: []string{"u"},
	Flags:   ProductCommonCliFlagsOptional,
	Usage:   "Updates entity by passing the parameters",
	Action: func(c *cli.Context) error {
		query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PRODUCT_UPDATE},
		})
		entity := CastProductFromCli(c)
		if entity, err := ProductActions.Update(query, entity); err != nil {
			fmt.Println(err.Error())
		} else {
			f, _ := json.MarshalIndent(entity, "", "  ")
			fmt.Println(string(f))
		}
		return nil
	},
}

func (x *ProductEntity) FromCli(c *cli.Context) *ProductEntity {
	return CastProductFromCli(c)
}
func CastProductFromCli(c *cli.Context) *ProductEntity {
	template := &ProductEntity{}
	fireback.HandleXsrc(c, template)
	if c.IsSet("uid") {
		template.UniqueId = c.String("uid")
	}
	if c.IsSet("pid") {
		template.ParentId = fireback.NewStringAutoNull(c.String("pid"))
	}
	if c.IsSet("name") {
		template.Name = c.String("name")
	}
	if c.IsSet("sku") {
		template.Sku = fireback.NewStringAutoNull(c.String("sku"))
	}
	if c.IsSet("price") {
		value := c.Float64("price")
		template.Price = value
	}
	if c.IsSet("product-market-duration") {
		template.ProductMarketDuration = fireback.NewDurationAutoNull(c.String("product-market-duration"))
	}
	if c.IsSet("available") {
		value := c.Bool("available")
		template.Available = value
	}
	return template
}
func ProductSyncSeederFromFs(fsRef *embed.FS, fileNames []string, q fireback.QueryDSL) {
	fireback.SeederFromFSImport(
		q,
		ProductActions.Create,
		reflect.ValueOf(&ProductEntity{}).Elem(),
		fsRef,
		fileNames,
		true,
	)
}
func ProductSyncSeeders() {
	fireback.SeederFromFSImport(
		fireback.QueryDSL{WorkspaceId: fireback.USER_SYSTEM},
		ProductActions.Create,
		reflect.ValueOf(&ProductEntity{}).Elem(),
		productSeedersFs,
		[]string{},
		true,
	)
}
func ProductImportMocks() {
	fireback.SeederFromFSImport(
		fireback.QueryDSL{},
		ProductActions.Create,
		reflect.ValueOf(&ProductEntity{}).Elem(),
		&mocks.ViewsFs,
		[]string{},
		false,
	)
}
func ProductWriteQueryMock(ctx fireback.MockQueryContext) {
	for _, lang := range ctx.Languages {
		itemsPerPage := 9999
		if ctx.ItemsPerPage > 0 {
			itemsPerPage = ctx.ItemsPerPage
		}
		f := fireback.QueryDSL{ItemsPerPage: itemsPerPage, Language: lang, WithPreloads: ctx.WithPreloads, Deep: true}
		items, count, _ := ProductActions.Query(f)
		result := fireback.QueryEntitySuccessResult(f, items, count)
		fireback.WriteMockDataToFile(lang, "", "Product", result)
	}
}
func ProductsActionQueryString(keyword string, page int) ([]string, *fireback.QueryResultMeta, *fireback.IError) {
	searchFields := []string{
		`unique_id %"{keyword}"%`,
		`name %"{keyword}"%`,
	}
	m := func(item *ProductEntity) string {
		label := item.UniqueId
		// if item.Name != nil {
		// 	label += " >>> " + *item.Name
		// }
		return label
	}
	query := fireback.QueryStringCastCli(searchFields, keyword, page)
	items, meta, err := ProductActions.Query(query)
	stringItems := []string{}
	for _, item := range items {
		label := m(item)
		stringItems = append(stringItems, label)
	}
	return stringItems, meta, err
}

var ProductDevCommands = []cli.Command{
	ProductWipeCmd,
	{
		Name:  "mock",
		Usage: "Generates mock records based on the entity definition",
		Flags: []cli.Flag{
			&cli.IntFlag{
				Name:  "count",
				Usage: "how many activation key do you need to be generated and stored in database",
				Value: 10,
			},
			&cli.BoolFlag{
				Name:  "batch",
				Usage: "Multiple insert into database mode. Might miss children and relations at the moment",
			},
		},
		Action: func(c *cli.Context) error {
			query := fireback.CommonCliQueryDSLBuilderAuthorize(c, &fireback.SecurityModel{
				ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PRODUCT_CREATE},
			})
			if c.Bool("batch") {
				ProductActionSeederMultiple(query, c.Int("count"))
			} else {
				ProductActionSeeder(query, c.Int("count"))
			}
			return nil
		},
	},
	{
		Name:    "init",
		Aliases: []string{"i"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Creates a basic seeder file for you, based on the definition module we have. You can populate this file as an example",
		Action: func(c *cli.Context) error {
			seed := ProductActions.SeederInit()
			fireback.CommonInitSeeder(strings.TrimSpace(c.String("format")), seed)
			return nil
		},
	},
	cli.Command{
		Name:  "mlist",
		Usage: "Prints the list of embedded mocks into the app",
		Action: func(c *cli.Context) error {
			if entity, err := fireback.GetSeederFilenames(&mocks.ViewsFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "msync",
		Usage: "Tries to sync mocks into the system",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportEmbedCmd(c,
				ProductActions.Create,
				reflect.ValueOf(&ProductEntity{}).Elem(),
				&mocks.ViewsFs,
			)
			return nil
		},
	},
}
var ProductImportExportCommands = []cli.Command{
	{
		Name:    "validate",
		Aliases: []string{"v"},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "file",
				Usage: "Validates an import file, such as yaml, json, csv, and gives some insights how the after import it would look like",
				Value: "product-seeder-product.yml",
				// Uncomment before publish, they need to specify
				// Required: true,
			},
			&cli.StringFlag{
				Name:  "format",
				Usage: "Format of the export or import file. Can be 'yaml', 'yml', 'json'",
				Value: "yaml",
			},
		},
		Usage: "Reads a yaml file containing an array of products, you can run this to validate if your import file is correct, and how it would look like after import",
		Action: func(c *cli.Context) error {
			data := &[]ProductEntity{}
			fireback.ReadYamlFile(c.String("file"), data)
			fmt.Println(data)
			return nil
		},
	},
	cli.Command{
		Name:  "slist",
		Usage: "Prints the list of files attached to this module for syncing or bootstrapping project",
		Action: func(c *cli.Context) error {
			if entity, err := fireback.GetSeederFilenames(productSeedersFs, ""); err != nil {
				fmt.Println(err.Error())
			} else {
				f, _ := json.MarshalIndent(entity, "", "  ")
				fmt.Println(string(f))
			}
			return nil
		},
	},
	cli.Command{
		Name:  "ssync",
		Usage: "Tries to sync the embedded content into the database, the list could be seen by 'slist' command",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportEmbedCmd(c,
				ProductActions.Create,
				reflect.ValueOf(&ProductEntity{}).Elem(),
				productSeedersFs,
			)
			return nil
		},
	},
	cli.Command{
		Name:    "export",
		Aliases: []string{"e"},
		Flags: append(fireback.CommonQueryFlags,
			&cli.StringFlag{
				Name:     "file",
				Usage:    "The address of file you want the csv/yaml/json be exported to",
				Required: true,
			}),
		Usage: "Exports a query results into the csv/yaml/json format",
		Action: func(c *cli.Context) error {
			return fireback.CommonCliExportCmd2(c,
				ProductEntityStream,
				reflect.ValueOf(&ProductEntity{}).Elem(),
				c.String("file"),
				&metas.MetaFs,
				"ProductFieldMap.yml",
				ProductPreloadRelations,
			)
		},
	},
	cli.Command{
		Name: "import",
		Flags: append(
			append(
				fireback.CommonQueryFlags,
				&cli.StringFlag{
					Name:     "file",
					Usage:    "The address of file you want the csv be imported from",
					Required: true,
				}),
			ProductCommonCliFlagsOptional...,
		),
		Usage: "imports csv/yaml/json file and place it and its children into database",
		Action: func(c *cli.Context) error {
			fireback.CommonCliImportCmdAuthorized(c,
				ProductActions.Create,
				reflect.ValueOf(&ProductEntity{}).Elem(),
				c.String("file"),
				&fireback.SecurityModel{
					ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PRODUCT_CREATE},
				},
				func() ProductEntity {
					v := CastProductFromCli(c)
					return *v
				},
			)
			return nil
		},
	},
}
var ProductCliCommands []cli.Command = []cli.Command{
	PRODUCT_ACTION_QUERY.ToCli(),
	PRODUCT_ACTION_TABLE.ToCli(),
	PRODUCT_ACTION_PATCH.ToCli(),
	ProductCreateCmd,
	ProductAskCmd,
	ProductCreateInteractiveCmd,
	fireback.GetCommonRemoveQuery(
		reflect.ValueOf(&ProductEntity{}).Elem(),
		ProductActions.Remove,
	),
}

func ProductCliFn() cli.Command {
	commands := append(ProductImportExportCommands, ProductCliCommands...)
	if !fireback.GetConfig().Production {
		commands = append(commands, ProductDevCommands...)
	}
	return cli.Command{
		Name:        "product",
		Description: "Products module actions",
		Usage:       `Sample Product Table with Various Field Types`,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "language",
				Value: "en",
			},
		},
		Subcommands: commands,
	}
}

var PRODUCT_ACTION_TABLE = fireback.Module3Action{
	Name:          "table",
	ActionAliases: []string{"t"},
	Flags:         fireback.CommonQueryFlags,
	Description:   "Table formatted queries all of the entities in database based on the standard query format",
	Action:        ProductActions.Query,
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		fireback.CommonCliTableCmd2(c,
			ProductActions.Query,
			security,
			reflect.ValueOf(&ProductEntity{}).Elem(),
		)
		return nil
	},
}
var PRODUCT_ACTION_QUERY = fireback.Module3Action{
	Method: "GET",
	Url:    "/products",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PRODUCT_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			qs := &ProductEntityQs{}
			fireback.HttpQueryEntity(c, ProductActions.Query, qs)
		},
	},
	Format:         "QUERY",
	Action:         ProductActions.Query,
	ResponseEntity: &[]ProductEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "ProductEntity",
	},
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		qs := &ProductEntityQs{}
		fireback.CommonCliQueryCmd3(
			c,
			ProductActions.Query,
			security,
			qs,
		)
		return nil
	},
	CliName:       "query",
	Name:          "query",
	ActionAliases: []string{"q"},
	Flags:         append(fireback.CommonQueryFlags, ProductQsFlags...),
	Description:   "Queries all of the entities in database based on the standard query format (s+)",
}
var PRODUCT_ACTION_EXPORT = fireback.Module3Action{
	Method: "GET",
	Url:    "/products/export",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PRODUCT_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpStreamFileChannel(c, ProductActionExport)
		},
	},
	Format:         "QUERY",
	Action:         ProductActionExport,
	ResponseEntity: &[]ProductEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "ProductEntity",
	},
}
var PRODUCT_ACTION_GET_ONE = fireback.Module3Action{
	Method: "GET",
	Url:    "/product/:uniqueId",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PRODUCT_QUERY},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpGetEntity(c, ProductActions.GetOne)
		},
	},
	Format:         "GET_ONE",
	Action:         ProductActions.GetOne,
	ResponseEntity: &ProductEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "ProductEntity",
	},
}
var PRODUCT_ACTION_POST_ONE = fireback.Module3Action{
	Name:          "create",
	ActionAliases: []string{"c"},
	Description:   "Create new product",
	Flags:         ProductCommonCliFlags,
	Method:        "POST",
	Url:           "/product",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PRODUCT_CREATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpPostEntity(c, ProductActions.Create)
		},
	},
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		result, err := fireback.CliPostEntity(c, ProductActions.Create, security)
		fireback.HandleActionInCli(c, result, err, map[string]map[string]string{})
		if err != nil {
			return err
		}
		return nil
	},
	Action:         ProductActions.Create,
	Format:         "POST_ONE",
	RequestEntity:  &ProductEntity{},
	ResponseEntity: &ProductEntity{},
	Out: &fireback.Module3ActionBody{
		Entity: "ProductEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "ProductEntity",
	},
}
var PRODUCT_ACTION_PATCH = fireback.Module3Action{
	Name:          "update",
	ActionAliases: []string{"u"},
	Flags:         ProductCommonCliFlagsOptional,
	Method:        "PATCH",
	Url:           "/product",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PRODUCT_UPDATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntity(c, ProductActions.Update)
		},
	},
	Action:         ProductActions.Update,
	RequestEntity:  &ProductEntity{},
	ResponseEntity: &ProductEntity{},
	Format:         "PATCH_ONE",
	Out: &fireback.Module3ActionBody{
		Entity: "ProductEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "ProductEntity",
	},
	Description: "Update the Product entity by unique id",
	CliName:     "update",
	CliAction: func(c *cli.Context, security *fireback.SecurityModel) error {
		result, err := fireback.CliPatchEntity(c, ProductActions.Update, security)
		fireback.HandleActionInCli(c, result, err, map[string]map[string]string{})
		if err != nil {
			return err
		}
		return err
	},
}
var PRODUCT_ACTION_PATCH_BULK = fireback.Module3Action{
	Method: "PATCH",
	Url:    "/products",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PRODUCT_UPDATE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpUpdateEntities(c, ProductActionBulkUpdate)
		},
	},
	Action:         ProductActionBulkUpdate,
	Format:         "PATCH_BULK",
	RequestEntity:  &fireback.BulkRecordRequest[ProductEntity]{},
	ResponseEntity: &fireback.BulkRecordRequest[ProductEntity]{},
	Out: &fireback.Module3ActionBody{
		Entity: "ProductEntity",
	},
	In: &fireback.Module3ActionBody{
		Entity: "ProductEntity",
	},
}
var PRODUCT_ACTION_DELETE = fireback.Module3Action{
	Method: "DELETE",
	Url:    "/product",
	Format: "DELETE_DSL",
	SecurityModel: &fireback.SecurityModel{
		ActionRequires: []fireback.PermissionInfo{PERM_ROOT_PRODUCT_DELETE},
	},
	Handlers: []gin.HandlerFunc{
		func(c *gin.Context) {
			fireback.HttpRemoveEntity(c, ProductActions.Remove)
		},
	},
	Action:         ProductActions.Remove,
	RequestEntity:  &fireback.DeleteRequest{},
	ResponseEntity: &fireback.DeleteResponse{},
	TargetEntity:   &ProductEntity{},
}

/**
 *	Override this function on ProductEntityHttp.go,
 *	In order to add your own http
 **/
var AppendProductRouter = func(r *[]fireback.Module3Action) {}

func GetProductModule3Actions() []fireback.Module3Action {
	routes := []fireback.Module3Action{
		PRODUCT_ACTION_QUERY,
		PRODUCT_ACTION_EXPORT,
		PRODUCT_ACTION_GET_ONE,
		PRODUCT_ACTION_POST_ONE,
		PRODUCT_ACTION_PATCH,
		PRODUCT_ACTION_PATCH_BULK,
		PRODUCT_ACTION_DELETE,
	}
	// Append user defined functions
	AppendProductRouter(&routes)
	return routes
}

var PERM_ROOT_PRODUCT = fireback.PermissionInfo{
	CompleteKey: "root.modules.product.product.*",
	Name:        "Entire product actions (*)",
	Description: "",
}
var PERM_ROOT_PRODUCT_DELETE = fireback.PermissionInfo{
	CompleteKey: "root.modules.product.product.delete",
	Name:        "Delete product",
	Description: "",
}
var PERM_ROOT_PRODUCT_CREATE = fireback.PermissionInfo{
	CompleteKey: "root.modules.product.product.create",
	Name:        "Create product",
	Description: "",
}
var PERM_ROOT_PRODUCT_UPDATE = fireback.PermissionInfo{
	CompleteKey: "root.modules.product.product.update",
	Name:        "Update product",
	Description: "",
}
var PERM_ROOT_PRODUCT_QUERY = fireback.PermissionInfo{
	CompleteKey: "root.modules.product.product.query",
	Name:        "Query product",
	Description: "",
}
var ALL_PRODUCT_PERMISSIONS = []fireback.PermissionInfo{
	PERM_ROOT_PRODUCT_DELETE,
	PERM_ROOT_PRODUCT_CREATE,
	PERM_ROOT_PRODUCT_UPDATE,
	PERM_ROOT_PRODUCT_QUERY,
	PERM_ROOT_PRODUCT,
}

func NewProductCreatedEvent(
	payload *ProductEntity,
	query *fireback.QueryDSL,
) (*fireback.Event, error) {
	event := &fireback.Event{
		Name:    "ProductCreated",
		Payload: payload,
		Security: &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{
				PERM_ROOT_PRODUCT_QUERY,
			},
		},
		CacheKey: "*product.ProductEntity",
	}
	// Apply the source of the event based on querydsl
	fireback.ApplyQueryDslContextToEvent(event, *query)
	return event, nil
}
func NewProductUpdatedEvent(
	payload *ProductEntity,
	query *fireback.QueryDSL,
) (*fireback.Event, error) {
	event := &fireback.Event{
		Name:    "ProductUpdated",
		Payload: payload,
		Security: &fireback.SecurityModel{
			ActionRequires: []fireback.PermissionInfo{
				PERM_ROOT_PRODUCT_QUERY,
			},
		},
		CacheKey: "*product.ProductEntity",
	}
	// Apply the source of the event based on querydsl
	fireback.ApplyQueryDslContextToEvent(event, *query)
	return event, nil
}

var ProductEntityBundle = fireback.EntityBundle{
	Permissions: ALL_PRODUCT_PERMISSIONS,
	// Cli command has been exluded, since we use module to wrap all the entities
	// to be more easier to wrap up.
	// Create your own bundle if you need with Cli
	//CliCommands: []cli.Command{
	//	ProductCliFn(),
	//},
	Actions:      GetProductModule3Actions(),
	MockProvider: ProductImportMocks,
	AutoMigrationEntities: []interface{}{
		&ProductEntity{},
	},
	MigrationScripts: []fireback.MigrationScript{},
}
