package product

/*
*	Generated by fireback 1.2.2
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
 */
import (
	"github.com/gin-gonic/gin"
	"github.com/torabian/fireback/modules/workspaces"
	"github.com/urfave/cli"
)

// using shared actions here
var GetProductsCountSecurityModel *workspaces.SecurityModel = nil

type GetProductsCountActionResDto struct {
	TotalProduct int `json:"totalProduct" xml:"totalProduct" yaml:"totalProduct"        `
}

func (x *GetProductsCountActionResDto) RootObjectName() string {
	return "Product"
}

type getProductsCountActionImpSig func(
	q workspaces.QueryDSL) (*GetProductsCountActionResDto,
	*workspaces.IError,
)

var GetProductsCountActionImp getProductsCountActionImpSig

func GetProductsCountActionFn(
	q workspaces.QueryDSL,
) (
	*GetProductsCountActionResDto,
	*workspaces.IError,
) {
	if GetProductsCountActionImp == nil {
		return nil, nil
	}
	return GetProductsCountActionImp(q)
}

var GetProductsCountActionCmd cli.Command = cli.Command{
	Name:  "get-products-count",
	Usage: ``,
	Action: func(c *cli.Context) {
		query := workspaces.CommonCliQueryDSLBuilderAuthorize(c, GetProductsCountSecurityModel)
		result, err := GetProductsCountActionFn(query)
		workspaces.HandleActionInCli(c, result, err, map[string]map[string]string{})
	},
}

func ProductCustomActions() []workspaces.Module3Action {
	routes := []workspaces.Module3Action{
		{
			Method:        "GET",
			Url:           "/products/count",
			SecurityModel: GetProductsCountSecurityModel,
			Name:          "getProductsCount",
			Description:   "",
			Handlers: []gin.HandlerFunc{
				func(c *gin.Context) {
					// GET_ONE - get
					workspaces.HttpGetEntity(c, GetProductsCountActionFn)
				},
			},
			Format:         "GET_ONE",
			Action:         GetProductsCountActionFn,
			ResponseEntity: &GetProductsCountActionResDto{},
			Out: &workspaces.Module3ActionBody{
				Entity: "GetProductsCountActionResDto",
			},
		},
	}
	return routes
}

var ProductCustomActionsCli = []cli.Command{
	GetProductsCountActionCmd,
}

// Use the actions bundle for ease and provide it to the ModuleProvider
// and it would gather all actions in the module level
var ProductCliActionsBundle = &workspaces.CliActionsBundle{
	Name:  "product",
	Usage: ``,
	// Here we will include entities actions, as well as module level actions
	Subcommands: cli.Commands{
		GetProductsCountActionCmd,
		ProductCliFn(),
	},
}

func GetProductActionsBundle() *workspaces.ModuleActionsBundle {
	return &workspaces.ModuleActionsBundle{
		Actions:   ProductCustomActions(),
		CliAction: ProductCliActionsBundle,
	}
}
func GetProductActionsCli() []cli.Command {
	return ProductCustomActionsCli
}
