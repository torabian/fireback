/*
*	Generated by fireback 1.2.3
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
*/
    import {
        BaseDto,
        BaseEntity,
    } from "../../core/definitions"
// In this section we have sub entities related to this object
// Class body
export type PaymentConfigEntityKeys =
  keyof typeof PaymentConfigEntity.Fields;
export class PaymentConfigEntity extends BaseEntity {
  public children?: PaymentConfigEntity[] | null;
  /**
  Enables the stripe payment integration in the project
  */
  public enableStripe?: boolean | null;
  /**
  Stripe secret key to initiate a payment intent
  */
  public stripeSecretKey?: string | null;
  /**
  The endpoint which the payment module will handle response coming back from stripe.
  */
  public stripeCallbackUrl?: string | null;
  public static Navigation = {
      edit(uniqueId: string, locale?: string) {
          return `${locale ? '/' + locale : '..'}/payment-config/edit/${uniqueId}`;
      },
      create(locale?: string) {
          return `${locale ? '/' + locale : '..'}/payment-config/new`;
      },
      single(uniqueId: string, locale?: string) {
          return `${locale ? '/' + locale : '..'}/payment-config/${uniqueId}`;
      },
      query(params: any = {}, locale?: string) {
          return `${locale ? '/' + locale : '..'}/payment-configs`;
      },
      /**
      * Use R series while building router in CRA or nextjs, or react navigation for react Native
      * Might be useful in Angular as well.
      **/
      Redit: "payment-config/edit/:uniqueId",
      Rcreate: "payment-config/new",
      Rsingle: "payment-config/:uniqueId",
      Rquery: "payment-configs",
  };
  public static definition = {
  "rpc": {
    "query": {}
  },
  "permRewrite": {
    "replace": "root.modules",
    "with": "root.manage"
  },
  "name": "paymentConfig",
  "distinctBy": "workspace",
  "features": {},
  "security": {
    "writeOnRoot": true,
    "readOnRoot": true,
    "resolveStrategy": "workspace"
  },
  "gormMap": {},
  "fields": [
    {
      "name": "enableStripe",
      "description": "Enables the stripe payment integration in the project",
      "type": "bool?",
      "computedType": "boolean",
      "gormMap": {}
    },
    {
      "name": "stripeSecretKey",
      "description": "Stripe secret key to initiate a payment intent",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "stripeCallbackUrl",
      "description": "The endpoint which the payment module will handle response coming back from stripe.",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    }
  ],
  "description": "Contains the api keys, configuration, urls, callbacks for different payment gateways."
}
public static Fields = {
  ...BaseEntity.Fields,
      enableStripe: `enableStripe`,
      stripeSecretKey: `stripeSecretKey`,
      stripeCallbackUrl: `stripeCallbackUrl`,
}
}
