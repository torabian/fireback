/*
*	Generated by fireback 1.2.4
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
*/
    import {
        BaseDto,
        BaseEntity,
    } from "../../core/definitions"
// In this section we have sub entities related to this object
export class UserPrimaryAddress extends BaseEntity {
  /**
  Street address, building number
  */
  public addressLine1?: string | null;
  /**
  Apartment, suite, floor (optional)
  */
  public addressLine2?: string | null;
  /**
  City or locality
  */
  public city?: string | null;
  /**
  State, region, or province
  */
  public stateOrProvince?: string | null;
  /**
  ZIP or postal code
  */
  public postalCode?: string | null;
  /**
  ISO 3166-1 alpha-2 (e.g., \"US\", \"DE\")
  */
  public countryCode?: string | null;
}
// Class body
export type UserEntityKeys =
  keyof typeof UserEntity.Fields;
export class UserEntity extends BaseEntity {
  public children?: UserEntity[] | null;
  public firstName?: string | null;
  public lastName?: string | null;
  public photo?: string | null;
  public gender?: number | null;
  public title?: string | null;
  public birthDate?: Date | null;
  public avatar?: string | null;
  /**
  User last connecting ip address
  */
  public lastIpAddress?: string | null;
  /**
  User primary address location. Can be useful for simple projects that a user is associated with a single address.
  */
  public primaryAddress?: UserPrimaryAddress | null;
  public static Navigation = {
      edit(uniqueId: string, locale?: string) {
          return `${locale ? '/' + locale : '..'}/user/edit/${uniqueId}`;
      },
      create(locale?: string) {
          return `${locale ? '/' + locale : '..'}/user/new`;
      },
      single(uniqueId: string, locale?: string) {
          return `${locale ? '/' + locale : '..'}/user/${uniqueId}`;
      },
      query(params: any = {}, locale?: string) {
          return `${locale ? '/' + locale : '..'}/users`;
      },
      /**
      * Use R series while building router in CRA or nextjs, or react navigation for react Native
      * Might be useful in Angular as well.
      **/
      Redit: "user/edit/:uniqueId",
      Rcreate: "user/new",
      Rsingle: "user/:uniqueId",
      Rquery: "users",
      rPrimaryAddressCreate: "user/:linkerId/primary_address/new",
      rPrimaryAddressEdit: "user/:linkerId/primary_address/edit/:uniqueId",
      editPrimaryAddress(linkerId: string, uniqueId: string, locale?: string) {
          return `${locale ? '/' + locale : ''}/user/${linkerId}/primary_address/edit/${uniqueId}`;
      },
      createPrimaryAddress(linkerId: string, locale?: string) {
          return `${locale ? '/' + locale : ''}/user/${linkerId}/primary_address/new`;
      },
  };
  public static definition = {
  "events": [
    {
      "name": "Googoli2",
      "description": "Googlievent",
      "payload": {
        "fields": [
          {
            "name": "entity",
            "type": "string",
            "computedType": "string",
            "gormMap": {}
          }
        ]
      }
    }
  ],
  "rpc": {
    "query": {
      "qs": [
        {
          "name": "withImages",
          "type": "bool?",
          "gormMap": {}
        }
      ]
    }
  },
  "permRewrite": {
    "replace": "root.modules",
    "with": "root.manage"
  },
  "name": "user",
  "features": {},
  "security": {
    "writeOnRoot": true
  },
  "gormMap": {},
  "fields": [
    {
      "name": "firstName",
      "type": "string",
      "validate": "required",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "lastName",
      "type": "string",
      "validate": "required",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "photo",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "gender",
      "type": "int?",
      "computedType": "number",
      "gormMap": {}
    },
    {
      "name": "title",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "birthDate",
      "type": "date",
      "computedType": "Date",
      "gormMap": {}
    },
    {
      "name": "avatar",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "lastIpAddress",
      "description": "User last connecting ip address",
      "type": "string",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "primaryAddress",
      "description": "User primary address location. Can be useful for simple projects that a user is associated with a single address.",
      "type": "embed",
      "computedType": "UserPrimaryAddress",
      "gormMap": {},
      "-": "UserPrimaryAddress",
      "fields": [
        {
          "name": "addressLine1",
          "description": "Street address, building number",
          "type": "string",
          "computedType": "string",
          "gormMap": {}
        },
        {
          "name": "addressLine2",
          "description": "Apartment, suite, floor (optional)",
          "type": "string?",
          "computedType": "string",
          "gormMap": {}
        },
        {
          "name": "city",
          "description": "City or locality",
          "type": "string?",
          "computedType": "string",
          "gormMap": {}
        },
        {
          "name": "stateOrProvince",
          "description": "State, region, or province",
          "type": "string?",
          "computedType": "string",
          "gormMap": {}
        },
        {
          "name": "postalCode",
          "description": "ZIP or postal code",
          "type": "string?",
          "computedType": "string",
          "gormMap": {}
        },
        {
          "name": "countryCode",
          "description": "ISO 3166-1 alpha-2 (e.g., \\\"US\\\", \\\"DE\\\")",
          "type": "string?",
          "computedType": "string",
          "gormMap": {}
        }
      ],
      "linkedTo": "UserEntity"
    }
  ],
  "description": "Manage the users who are in the current app (root only)"
}
public static Fields = {
  ...BaseEntity.Fields,
      firstName: `firstName`,
      lastName: `lastName`,
      photo: `photo`,
      gender: `gender`,
      title: `title`,
      birthDate: `birthDate`,
      avatar: `avatar`,
      lastIpAddress: `lastIpAddress`,
      primaryAddress$: 'primaryAddress',
      primaryAddress: {
  ...BaseEntity.Fields,
      addressLine1: `primaryAddress.addressLine1`,
      addressLine2: `primaryAddress.addressLine2`,
      city: `primaryAddress.city`,
      stateOrProvince: `primaryAddress.stateOrProvince`,
      postalCode: `primaryAddress.postalCode`,
      countryCode: `primaryAddress.countryCode`,
      },
}
}
