/*
*	Generated by fireback 1.1.28
*	Written by Ali Torabi.
*	Checkout the repository for licenses and contribution: https://github.com/torabian/fireback
*/
    import {
        BaseDto,
        BaseEntity,
    } from "../../core/definitions"
    import {
        RoleEntity,
    } from "./RoleEntity"
// In this section we have sub entities related to this object
// Class body
export type WorkspaceTypeEntityKeys =
  keyof typeof WorkspaceTypeEntity.Fields;
export class WorkspaceTypeEntity extends BaseEntity {
  public children?: WorkspaceTypeEntity[] | null;
  public title?: string | null;
  public description?: string | null;
  public slug?: string | null;
  /**
  The role which will be used to define the functionality of this workspace, Role needs to be created before hand, and only roles which belong to root workspace are possible to be selected
  */
  public role?: RoleEntity | null;
      roleId?: string | null;
  public static Navigation = {
      edit(uniqueId: string, locale?: string) {
          return `${locale ? '/' + locale : ''}/workspace-type/edit/${uniqueId}`;
      },
      create(locale?: string) {
          return `${locale ? '/' + locale : ''}/workspace-type/new`;
      },
      single(uniqueId: string, locale?: string) {
          return `${locale ? '/' + locale : ''}/workspace-type/${uniqueId}`;
      },
      query(params: any = {}, locale?: string) {
          return `${locale ? '/' + locale : ''}/workspace-types`;
      },
      /**
      * Use R series while building router in CRA or nextjs, or react navigation for react Native
      * Might be useful in Angular as well.
      **/
      Redit: "workspace-type/edit/:uniqueId",
      Rcreate: "workspace-type/new",
      Rsingle: "workspace-type/:uniqueId",
      Rquery: "workspace-types",
  };
  public static definition = {
  "name": "workspaceType",
  "features": {
    "mock": false,
    "msync": false
  },
  "security": {
    "writeOnRoot": true
  },
  "messages": {
    "cannotCreateWorkspaceType": {
      "en": "You cannot create workspace type due to some validation errors."
    },
    "cannotModifyWorkspaceType": {
      "en": "You cannot modify workspace type due to some validation errors."
    },
    "onlyRootRoleIsAccepted": {
      "en": "You can only select a role which is created or belong to 'root' workspace."
    },
    "roleIsNecessary": {
      "en": "Role needs to be defined and exist."
    },
    "roleIsNotAccessible": {
      "en": "Role is not accessible unfortunately. Make sure you the role chose exists."
    },
    "roleNeedsToHaveCapabilities": {
      "en": "Role needs to have at least one capability before could be assigned."
    }
  },
  "gormMap": {},
  "fields": [
    {
      "name": "title",
      "type": "string",
      "validate": "required,omitempty,min=1,max=250",
      "translate": true,
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "description",
      "type": "string",
      "translate": true,
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "slug",
      "type": "string",
      "validate": "required,omitempty,min=2,max=50",
      "computedType": "string",
      "gormMap": {}
    },
    {
      "name": "role",
      "description": "The role which will be used to define the functionality of this workspace, Role needs to be created before hand, and only roles which belong to root workspace are possible to be selected",
      "type": "one",
      "target": "RoleEntity",
      "validate": "required",
      "computedType": "RoleEntity",
      "gormMap": {}
    }
  ],
  "cliName": "type",
  "description": "Defines a type for workspace, and the role which it can have as a whole. In systems with multiple types of services, e.g. student, teachers, schools this is useful to set those default types and limit the access of the users."
}
public static Fields = {
  ...BaseEntity.Fields,
      title: `title`,
      description: `description`,
      slug: `slug`,
          roleId: `roleId`,
      role$: `role`,
        role: RoleEntity.Fields,
}
}
