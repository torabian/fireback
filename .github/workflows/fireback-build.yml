name: Fireback product(s) test, build and deploy
env:
  CI: false
  TERM: dumb

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

on:
  push:
    branches: 
      - "v**"
      - "main"
  workflow_dispatch:
    inputs:
      # target:
      #   type: choice
      #   options:
      #     - ubuntu-x64
      #     - windows-x64
      #     - macosx
      release_artifacts:
        description: "Create a draft release with all artifacts"
        required: false
        default: false
        type: boolean
      github_pages:
        description: "Deploy documents and fireback react to github pages"
        required: false
        default: false
        type: boolean
      deploy_npm:
        description: "Publish fireback ui libraries to npm"
        required: false
        default: false
        type: boolean
      
      fireback_windows:
        description: "Build for windows"
        required: false
        default: true
        type: boolean
      fireback_macos:
        description: "Build for macos"
        required: false
        default: true
        type: boolean
      fireback_react:
        description: "Build Fireback React"
        required: false
        default: true
        type: boolean
      fireback_capacitor:
        description: "Build Capacitor"
        required: false
        default: true
        type: boolean
jobs:

  deploy_github_release:
    needs:
      - build-windows
      - build-ubuntu
      - build-macos
      - fireback-react
      - test-react-code-gen
    name: deploy_github_release
    if: ${{ inputs.release_artifacts == true }}
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get the version tag
        id: get_version_tag
        run: echo "tag_name=$(basename ${GITHUB_REF})" >> $GITHUB_ENV

      - name: release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: true
          prerelease: true
          release_name: ${{ steps.version.outputs.version }}
          tag_name: ${{ env.tag_name }}
          body_path: docs/FIREBACK.md
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - uses: actions/download-artifact@master
        with:
          name: artifacts-ubuntu
          path: artifacts-ubuntu
      - uses: actions/download-artifact@master
        with:
          name: artifacts-boilerplate
          path: artifacts-boilerplate
      - uses: actions/download-artifact@master
        with:
          name: artifacts-windows
          path: artifacts-windows
      - uses: actions/download-artifact@master
        with:
          name: artifacts-darwin
          path: artifacts-darwin
      - uses: actions/download-artifact@master
        with:
          name: artifacts-capacitor
          path: artifacts-capacitor


      - name: Upload Capacitor application
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts-capacitor/app-release.apk
          asset_name: fireback-capcitor.apk
          asset_content_type: application/apk

      - name: upload mac amd64 zip artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts-darwin/fireback-server-all/fireback_amd64_darwin.zip
          asset_name: fireback_amd64_darwin.zip
          asset_content_type: application/zip

      - name: upload mac arm64 zip artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts-darwin/fireback-server-all/fireback_arm64_darwin.zip
          asset_name: fireback_arm64_darwin.zip
          asset_content_type: application/zip

      - name: upload mac arm64 pkg artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts-darwin/fireback-server-all/fireback_silicon_arm64.pkg
          asset_name: fireback_silicon_arm64.pkg
          asset_content_type: application/x-newton-compatible-pkg
      - name: upload mac amd64 pkg artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts-darwin/fireback-server-all/fireback_intel_amd64.pkg
          asset_name: fireback_intel_amd64.pkg
          asset_content_type: application/x-newton-compatible-pkg


      - name: upload windows amd64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts-windows/fireback-server-all/fireback_win_amd64_installer.msi
          asset_name: fireback_win_amd64_installer.msi
          asset_content_type: application/x-ms-installer
      - name: upload windows arm64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts-windows/fireback-server-all/fireback_win_arm64_installer.msi
          asset_name: fireback_win_arm64_installer.msi
          asset_content_type: application/x-ms-installer
      - name: upload linux installer arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts-ubuntu/fireback-server-all/fireback-arm64.deb
          asset_name: fireback-arm64.deb
          asset_content_type: application/vnd.debian.binary-package
      - name: Upload the boilerplate project
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts-boilerplate/fireback-boilerplate.zip
          asset_name: fireback-boilerplate.zip
          asset_content_type: application/zip
      - name: Upload the boilerplate project
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts-boilerplate/fireback-microservice-boilerplate.zip
          asset_name: fireback-microservice-boilerplate.zip
          asset_content_type: application/zip
      - name: upload linux installer amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts-ubuntu/fireback-server-all/fireback-amd64.deb
          asset_name: fireback-amd64.deb
          asset_content_type: application/vnd.debian.binary-package
      - name: upload linux zip amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts-ubuntu/fireback-server-all/fireback_amd64_linux.zip
          asset_name: fireback_amd64_linux.zip
          asset_content_type: application/zip
      - name: upload linux zip arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts-ubuntu/fireback-server-all/fireback_arm64_linux.zip
          asset_name: fireback_arm64_linux.zip
          asset_content_type: application/zip
      - name: upload windows zip arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts-ubuntu/fireback-server-all/fireback_arm64_windows.zip
          asset_name: fireback_arm64_windows.zip
          asset_content_type: application/zip

      - name: upload windows zip amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts-ubuntu/fireback-server-all/fireback_amd64_windows.zip
          asset_name: fireback_amd64_windows.zip
          asset_content_type: application/zip



  build-windows:
    if: ${{ inputs.fireback_windows == true }}
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download PSCP.exe
        run: Invoke-WebRequest https://the.earth.li/~sgtatham/putty/latest/w64/pscp.exe -OutFile pscp.exe
      - name: Download wix installer tools
        run: Invoke-WebRequest https://github.com/wixtoolset/wix3/releases/download/wix3141rtm/wix314-binaries.zip -OutFile wix314-binaries.zip
      
      - name: Create thirdparty directory
        run: New-Item -ItemType Directory -Force -Path thirdparty/wix314-binaries

      - name: Unzip file
        run: Expand-Archive -Path wix314-binaries.zip -DestinationPath thirdparty/wix314-binaries
      
      - name: List contents of thirdparty
        run: Get-ChildItem -Path thirdparty
  
  

      # - name: Download Winrar
      #   run: Invoke-WebRequest https://www.win-rar.com/fileadmin/winrar-versions/winrar/winrar-x32-621.exe -OutFile winrar-installer.exe
      # - name: Install winrar
      #   run: .\winrar-installer.exe /S

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21.1

      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install the dependencies
        run: cd modules/fireback/codegen/react-new && npm i --force

      - name: Package windows
        run: cd cmd/fireback && make wininstaller

      - uses: actions/upload-artifact@master
        with:
          name: artifacts-windows
          path: artifacts

      ## Test the module builder ./artifacts/fireback/f gen gof --def modules/fireback/WorkspaceModule3.yml --relative-to /Users/ali/work/fireback --gof-module github.com/torabian/fireback
      ## Changes might break them

      # - name: Build System Service
      #   run: cd backend && npm run fb:build:win

      # - name: Package the windows
      #   run: .\cmd\fireback\msi\package-windows.bat
      # - name: Package the software
      #   run: .\backend\cmd\fireback\windows-package.bat

      # - name: Upload artifact
      #   if: ${{ inputs.autodeploy == true }}
      #   if: ${{ inputs.release_artifacts == true }}
      #   run: echo y | .\pscp.exe -pw "${{ secrets.DIGITAL_OCEAN_KEY }}" .\fireback_latest_windows.exe root@pixelplux.com:/var/www/html/fireback-artifacts

  child-project-test:
    # if: ${{ inputs.target == 'ubuntu-x64' }}
    needs: 
      - build-ubuntu
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22
      - uses: actions/download-artifact@master
        with:
          name: artifacts-boilerplate
          path: artifacts-boilerplate
      - name: Unzip the project
        run: cd artifacts-boilerplate && unzip fireback-boilerplate.zip -d ..
  
  build-ubuntu:
    # if: ${{ inputs.target == 'ubuntu-x64' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22

      # - name: Install deps
      #   run: sudo apt-get update -y && sudo apt install -y sshpass
      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install the dependencies
        run: cd modules/fireback/codegen/react-new && npm i --force
      - name: Build and package deb files
        run: cd cmd/fireback && make deb && make linux-zip
      - name: Windows zip
        run: cd cmd/fireback && make windows-zip
      - name: Install debian file for x64
        run: sudo dpkg -i artifacts/fireback-server-all/fireback-amd64.deb
      - name: Make once more time
        run: make
      - name: Test if the regenerating fireback definitions is gonna work
        run: make test_rebuild
      - name: Refresh the fireback dependencies
        run: make refresh
      - name: Clean ui installation logs
        run: git checkout e2e/react-bed/yarn.lock && git checkout modules/fireback/codegen/react-new/yarn.lock

      - name: 
          Refreshing golang modules should not make a commit.
        run: |
          git diff --exit-code
          if [[ $(git diff --name-only) ]]; then
            echo "Changes detected in the following files:"
            git diff --name-only
            exit 1
          fi
      - uses: actions/upload-artifact@master
        with:
          name: artifacts-ubuntu
          path: artifacts
      - name: Create a boilerplate for developers who don't want to install fireback on their machine, adds only go and react.js without dependencies.
        run: mkdir boiler-artifacts && cd boiler-artifacts && fireback new --manage --ui --name fireback-boilerplate --description "Boilerplate for new go project using fireback" --path fireback-boilerplate --module github.com/myorg/mynewbackend && zip -r fireback-boilerplate.zip fireback-boilerplate && rm -rf fireback-boilerplate
        
      - name: Create a boilerplate microservice
        run:  cd boiler-artifacts && fireback new --micro --name fireback-microservice-boilerplate --description "Fireback microservice boilerplate" --path fireback-microservice-boilerplate --module github.com/myorg/mynewmicroservice && zip -r fireback-microservice-boilerplate.zip fireback-microservice-boilerplate && rm -rf fireback-microservice-boilerplate

      - uses: actions/upload-artifact@master
        with:
          name: artifacts-boilerplate
          path: boiler-artifacts
    

  test-react-code-gen:
    needs: 
      - build-ubuntu
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - uses: actions/download-artifact@master
        with:
          name: artifacts-ubuntu
          path: artifacts-ubuntu
      - name: check artifacts
        run: cd artifacts-ubuntu/fireback-server-all && ls -la
      - name: install fireback globally
        run: sudo dpkg -i artifacts-ubuntu/fireback-server-all/fireback-amd64.deb
      - name: generate-sdk
        run: fireback gen react --path e2e/react-bed/src/sdk
      - name: Test the react bed
        run: cd e2e/react-bed && npm i --force && npm run build
      - name: install dependencies for react-new
        run: cd modules/fireback/codegen/react-new  && yarn
      - name: regenerate SDKs
        run: make rebuild-sdks-ci
      - name: checkout yarn lock because it's unrelated
        run: git checkout e2e/react-bed/yarn.lock && git checkout modules/fireback/codegen/react-new/yarn.lock
      - name: 
          Check if the sdk generated is already committed to the codebase.
          Fireback changes should not be out of sync with react.js
          SDK
        run: |
          git diff --exit-code
          if [[ $(git diff --name-only) ]]; then
            echo "Changes detected in the following files:"
            git diff --name-only
            exit 1
          fi

  fireback-npm:
    if: ${{ inputs.deploy_npm == true }}
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          registry-url: "https://registry.npmjs.org"
 
      - run: |
          cd modules/fireback/codegen/react-new/src/modules/fireback && npm version --no-git-tag-version 1.2.4-${{ github.sha }} && npm publish --tag=latest --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH }}
          NPM_TOKEN: ${{ secrets.NPM_PUBLISH }}
   
    
  fireback-capacitor:
    if: ${{ inputs.fireback_capacitor == true }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: adopt
          cache: gradle

      - name: Validate Gradle wrapper
        uses: gradle/actions/wrapper-validation@v4

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Remove the android platform, and recreate it. :(
        run: rm -rf e2e/samples/fireback-capacitor/android
      - name: Re-add cap
        run: cd e2e/samples/fireback-capacitor && npm install --save-dev @capacitor/cli && npx cap add android

      - name: npx
        run: npx

      - name: Build front-end
        run: cd modules/fireback/codegen/react-new && npm i --force && ./node_modules/.bin/env-cmd -f ./src/apps/projectname/.env.bundle.demo ./node_modules/.bin/craco build
      
      - name: Build Cordova Android App
        run: cd e2e/samples/fireback-capacitor && npm i --force && make rebuild

      - name: Upload APK
        uses: actions/upload-artifact@master
        with:
          name: artifacts-capacitor
          path: e2e/samples/fireback-capacitor/android/app/build/outputs/apk/release

      
      
 
  fireback-react:
    if: ${{ inputs.fireback_react == true }}
    runs-on: ubuntu-latest
    needs:
      - run-cypress-sqlite
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - run: cd docs && npm i --force && npm run build
        name: Build the docs

      - name: Build the front-end
        run: cd modules/fireback/codegen/react-new && npm i --force && ./node_modules/.bin/env-cmd -f ./src/apps/projectname/.env.fbgithubpages ./node_modules/.bin/craco build

      - name: Copy docs to front-end build
        run: cp -R modules/fireback/codegen/react-new/build docs/build/demo

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs/build
  
      - name: Deploy 🚀
        if: ${{ inputs.github_pages == true }}
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: ./docs/build # The folder the action should deploy.

  build-macos:
    if: ${{ inputs.fireback_macos == true }}
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22

      - name: Install sshpass
        run: brew install hudochenkov/sshpass/sshpass

      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Install the dependencies
        run: cd modules/fireback/codegen/react-new && npm i --force
      - name: Download Packages installer build tool
        run: wget http://s.sudre.free.fr/Software/files/Packages.dmg

      - name: Mount Packages image
        run: hdiutil attach Packages.dmg

      - name: Install Packages
        run: sudo installer -pkg /Volumes/Packages\ 1.2.10/Install\ Packages.pkg -target /

      - name: Build Backend
        run: cd cmd/fireback && make mac-pkg

      - uses: actions/upload-artifact@master
        with:
          name: artifacts-darwin
          path: artifacts
      
  # cypress-run:
  #   runs-on: ubuntu-latest  
  #   needs: 
  #     - build-ubuntu
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4  

  #     - name: Install Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 18  

  #     - name: GET PWD
  #       run: pwd
  #     - name: Install dependencies
  #       run: cd e2e && npm install  

  #     - uses: actions/download-artifact@master
  #       with:
  #         name: artifacts-ubuntu
  #         path: artifacts-ubuntu
  #     - name: check artifacts
  #       run: cd artifacts-ubuntu/fireback-server-all && ls -la
  #     - name: install fireback globally
  #       run: sudo dpkg -i artifacts-ubuntu/fireback-server-all/fireback-amd64.deb
  #     - name: Init and run the fireback
  #       run: fireback init --name test --port 3000 --db-name sample.db && fireback migration apply
  #     - name: Add the admin account
  #       run: fireback passport new --in-root=true --value admin --workspace-type-id root --type email --password admin --first-name Ali --last-name Torabi
  #     - name: Query the passports
  #       run: fireback passport q
  #     - name: Login on cli
  #       run: fireback passport in --value admin --password admin
  #     - name: Query the users
  #       run: fireback user q
  #     - name: Where is fireback?
  #       run: whereis fireback
  #     - name: Run Cypress tests
  #       run: export FB_CWD=$(PWD) && export FB_APP=$(whereis fireback) && cd e2e && npm test  

  #     - name: Upload Cypress screenshots on failure
  #       if: failure()  
  #       uses: actions/upload-artifact@master
  #       with:
  #         name: cypress-screenshots
  #         path: e2e/cypress/screenshots

  #     - name: Upload Cypress videos on failure
  #       if: failure()  
  #       uses: actions/upload-artifact@master
  #       with:
  #         name: cypress-videos
  #         path: e2e/cypress/videos

  #     - name: Cat the fireback.log in case of failure
  #       if: failure()
  #       run: cat fireback.log

  run-cypress-mysql:
    needs:
      - build-ubuntu
    uses: ./.github/workflows/cypress-test.yml
    with:
      DB_TYPE: mysql

  run-cypress-sqlite:
    needs:
      - build-ubuntu
    uses: ./.github/workflows/cypress-test.yml
    with:
      DB_TYPE: sqlite